{"version":3,"sources":["components/Layout/Layout.module.css","components/Window/Window.module.css","components/StackingContext/StackingContext.module.css","components/Full/Full.module.css","components/Cover/Cover.module.css","components/Layout/RowColumn/RowColumn.module.css","components/NoWrap/NoWrap.module.css","components/LED/LED.module.css","components/AutoScaler/AutoScaler.module.css","components/Animation/Animation.module.css","components/ButtonTransparent/ButtonTransparent.module.css","components/Notification/Notification.module.css","components/Notification/NotificationsStack/NotificationsStack.module.css","components/Padding/Padding.module.css","components/VirtualLink/VirtualLink.module.css","components/Center/Center.module.css","components/labeled/LabeledLED/LabeledLED.module.css","hooks/useDesktopContext.js","hooks/useAppRuntimesContext.js","components/WindowManager/WindowManager.RouteProvider.jsx","components/StackingContext/index.jsx","components/StackingContext/StackingContext.jsx","components/Full/index.jsx","components/Full/Full.jsx","components/Cover/index.jsx","components/Cover/Cover.jsx","components/Window/classes/WindowController.js","components/Layout/Header.jsx","components/Layout/Content.jsx","components/Layout/Footer.jsx","components/Layout/RowColumn/RowColumn.jsx","components/Layout/index.jsx","components/Layout/Layout.jsx","components/Window/Window.Border.jsx","components/NoWrap/index.jsx","components/NoWrap/NoWrap.jsx","components/Window/Window.Titlebar/Window.Titlebar.Button/Window.Titlebar.Button.jsx","components/Window/Window.Titlebar/index.jsx","components/Window/Window.Titlebar/Window.Titlebar.jsx","utils/getElCenterPoint.js","utils/getElSize.js","hooks/useAnimation.js","components/Window/Window.View.jsx","components/Window/hooks/useWindowOpenAnimation.js","components/Window/hooks/useWindowAutoPositioner.js","components/Window/hooks/useWindowControls.js","components/Window/hooks/useWindowDragger.js","components/Window/hooks/useWindowDragResizer.js","components/Window/hooks/useWindowStyles.js","components/Window/index.jsx","components/Window/Window.jsx","components/Window/Window.Provider.jsx","hooks/useObjectState.js","hooks/useServicesContext.js","hooks/useAppRegistrationsContext.js","components/WindowManager/WindowManager.jsx","components/Window/hooks/useWindowContext.js","components/WindowManager/hooks/useRegistrationViewOnResized.js","components/WindowManager/index.jsx","components/LED/index.jsx","components/LED/LED.jsx","components/Dock/index.jsx","components/Dock/Dock.jsx","components/AutoScaler/AutoScaler.jsx","components/AutoScaler/index.jsx","components/_Menu.LibWrapper/index.jsx","components/Animation/index.jsx","components/Animation/Animation.jsx","hooks/usePreload.js","components/ButtonTransparent/ButtonTransparent.jsx","components/ButtonTransparent/index.jsx","components/Notification/Notification.jsx","components/Notification/NotificationsStack/index.jsx","components/Notification/NotificationsStack/NotificationsStack.jsx","components/Desktop/providers/NotificationsProvider.jsx","components/Desktop/index.jsx","components/Desktop/Desktop.jsx","components/Padding/index.jsx","components/Padding/Padding.jsx","components/VirtualLink/index.jsx","components/VirtualLink/VirtualLink.jsx","hooks/useOverflowDetection.js","components/Center/index.jsx","components/Center/Center.jsx","utils/consume.js","portals/ExamplePortal/apps/Applications/views/ApplicationSelector.jsx","portals/ExamplePortal/apps/Applications/views/PortalSelector.jsx","portals/ExamplePortal/apps/Applications/Applications.jsx","portals/ExamplePortal/apps/Applications/index.jsx","portals/ReShell.org/apps/Applications.jsx","components/Timer/index.jsx","components/Timer/Timer.jsx","portals/ExamplePortal/apps/ApplicationMonitor/AppRuntime.Table.Row.jsx","portals/ExamplePortal/apps/ApplicationMonitor/AppRuntime.Table.jsx","portals/ExamplePortal/apps/ApplicationMonitor/ApplicationMonitor.jsx","portals/ExamplePortal/apps/ApplicationMonitor/index.jsx","components/ButtonPanel/index.jsx","components/ButtonPanel/ButtonPanel.jsx","components/ExternalLink/index.jsx","components/ExternalLink/ExternalLink.jsx","components/VirtualLinkButton/index.jsx","components/VirtualLinkButton/VirtualLinkButton.jsx","components/ExternalLinkButton/index.jsx","components/ExternalLinkButton/ExternalLinkButton.jsx","portals/ExamplePortal/apps/AboutReShell/views/Details/Details.jsx","portals/ExamplePortal/apps/AboutReShell/views/Details/index.jsx","portals/ExamplePortal/apps/AboutReShell/views/Resources/Resources.jsx","portals/ExamplePortal/apps/AboutReShell/views/Resources/index.jsx","utils/getCopyright.js","portals/ExamplePortal/apps/AboutReShell/AboutReShell.jsx","portals/ExamplePortal/apps/AboutReShell/index.jsx","portals/ReShell.org/apps/AboutReShell.jsx","components/labeled/LabeledLED/index.jsx","components/labeled/LabeledLED/LabeledLED.jsx","portals/ExamplePortal/apps/CheckForUpdates/index.jsx","portals/ExamplePortal/apps/CheckForUpdates/CheckForUpdates.jsx","portals/ExamplePortal/apps/ServiceMonitor.jsx","portals/ReShell.org/index.jsx","portals/ReShell.org/ReShell.org.jsx"],"names":["module","exports","useDesktopContext","useContext","DesktopContext","useAppRuntimesContext","AppRuntimesContext","WindowManagerRouteContext","React","createContext","WindowManagerRouteProvider","children","location","useLocation","getAppRuntimesWithRegistrationID","useState","locationAppRuntimes","setLocationAppRuntimes","useEffect","locationRegistrationID","pathname","substring","desktopContextActiveWindowController","activeWindowController","activeRegistrationID","getAppRuntime","getRegistrationID","history","useHistory","push","Provider","value","StackingContext","className","isAccelerated","onMount","onDOMMatrix","rest","refOnMount","useRef","refOnDOMMatrix","refIsAccelerated","refEl","el","current","setTimeout","computedStyle","window","getComputedStyle","matrix","DOMMatrix","transform","is2D","console","warn","ref","classNames","styles","Full","render","this","props","Component","Cover","forwardRef","forwardedRef","isVisible","EVT_RENDER_PROFILED","EVT_RESIZED","WindowController","initialState","onBringToTop","DEFAULT_STATE","isMaximized","isMinimized","title","getTitle","_state","Object","seal","mergeOptions","_appRuntime","_windowEl","_windowManagerEl","_handleBringToTop","_emitDebouncedResized","debounce","bind","_emitDebouncedMoved","_centerHandler","_scatterHandler","a","clear","destroy","__INTERNAL__setCenterHandler","centerHandler","center","__INTERNAL__setScatterHandler","scatterHandler","scatter","bringToTop","captureRenderProfile","arrRenderProfile","emit","attachWindowElement","attachWindowManagerElement","setAppRuntime","appRuntime","setTitle","getAppRegistration","runtime","getRegistration","setSize","width","height","windowEl","requestAnimationFrame","undefined","style","getSize","offsetWidth","offsetHeight","getWindowManagerSize","windowManagerEl","parseInt","setPosition","x","y","left","right","top","bottom","getPosition","offsetLeft","offsetTop","getIsBorderDisabled","getIsMaximized","getIsMinimized","setState","partialNextState","TypeError","PhantomCore","EVT_UPDATED","getState","setIsMaximized","maximize","setIsMinimized","minimize","restore","Header","Content","Footer","Row","Column","Layout","DIR_BORDER_SE","DIR_BORDER_SW","NoWrap","WindowTitlebarMaximizeButton","WindowTitlebarButton","WindowTitlebarMinimizeButton","WindowTitlebarCloseButton","WindowTitlebar","onElTitlebar","onRestoreOrMaximize","onMinimize","onClose","TitleBarView","titleBarView","onDoubleClick","onClick","getElCenterPoint","getElSize","useAnimation","domElement","animationName","animationDuration","animationDelay","onAnimationEnd","animationEngine","isDisabled","shouldRun","refOnAnimationEnd","classes","classList","visibility","BASE","contains","add","Error","addEventListener","unmount","removeEventListener","WindowView","elWindowManager","windowController","isActive","isProfiling","_setEl","isOpenAnimationEnded","useWindowOpenAnimation","_setIsOpenAnimationEnded","Boolean","useWindowAutoPositioner","elWindow","onInitialAutoPosition","refOnInitialAutoPosition","handleCenter","useCallback","winManCenter","winSize","handleScatter","winManSize","Math","floor","random","appRuntimes","refInitialAppRuntimes","length","elTitlebar","_setElTitlebar","zIndex","_setZIndex","_setTitle","isWindowBorderDisabled","_setIsWindowBorderDisabled","refIsWindowBorderDisabled","_setIsMaximized","_setIsMinimized","_handleWindowControllerUpdate","updatedState","stackingIndex","shouldWindowBorderBeDisabled","on","off","useWindowControls","useWindowDragger","refInitialDragPosition","refInitialWindowManagerSize","isUserDragging","setIsUserDragging","useDrag","isDragging","down","movement","mx","my","xy","event","target","tagName","toUpperCase","initialWindowManagerWidth","initialWindowManagerHeight","dragBind","useWindowDragResizer","refInitialDragSizePosition","isUserResizing","setIsUserResizing","direction","windowManagerWidth","windowManagerHeight","ReferenceError","diffX","diffY","handleBorderDrag","DynamicProfilingWrapper","useMemo","args","Profiler","id","getUUID","onRender","renderProfile","Fragment","useWindowStyles","outerBorderStyle","windowStyle","backgroundColor","bodyStyle","padding","Border","onBorderDrag","WindowBorder","borderWidth","bindNW","bindN","bindNE","bindE","bindSE","bindS","bindSW","bindW","maxHeight","maxWidth","cursor","Window","attachWindowController","useImperativeHandle","WindowContext","WindowProvider","initialSharedState","useObjectState","defaultState","state","_setMergedState","refState","JSON","parse","err","error","prevState","sharedState","setSharedState","useServicesContext","UIServicesContext","useAppRegistrationsContext","AppRegistrationsContext","WindowManagerView","appDescriptors","addOrUpdateAppRegistration","elBase","setElBase","forEach","descriptor","setDesktopContextActiveWindowController","setActiveWindowController","windowControllerMaps","setWindowControllerMaps","getWindowControllerMapWithKey","key","refDesktopContextActiveWindowController","handleSetActiveWindow","is","handleGetIsActiveWindow","startService","refHandleSetActiveWindow","_handleElBaseTouch","evt","passive","windows","map","getAppDescriptor","ViewComponent","view","serviceClasses","windowProps","isPinned","isPinnedToDock","isAutoStart","dataMap","appServices","serviceClass","service","onMouseDown","onTouchStart","setWindowController","prev","next","once","EVT_DESTROYED","filter","position","WrappedTitleBarView","WrappedView","forceUpdate","useForceUpdate","useWindowContext","_handleServiceUpdate","values","setResizeHandler","useRegistrationViewOnResized","refSetResizeHandler","handleResized","_handleExecResizedCallback","onResized","WindowManager","LED","color","Dock","runningRegistrations","bringToFrontOrStartAppRuntime","appRegistrations","dockRegistrations","Set","registration","getIsPinnedToDock","activeRegistration","textAlign","isolation","display","whiteSpace","overflowX","ResizeObserver","install","AutoScaler","elOuterWrap","setElOuterWrap","elInnerWrap","setElInnerWrap","outerWrapSize","innerWrapSize","ro","entries","entry","size","maxScaleX","maxScaleY","scale","min","observe","unobserve","COMMON_PROPS","overflow","Menu","applyHOC","portal","LibMenu","SubMenu","applyStatics","LibSubMenu","Animation","preloadResources","tag","inline","disabled","_setDomElement","isPreloaded","usePreload","resources","_setIsPreloaded","progress","_setProgress","refResources","preload","Preload","onprogress","oncomplete","fetch","View","ButtonTransparent","Notification","body","image","uuid","autoCloseTime","isClosing","setIsClosing","refOnClose","handleClose","stopPropagation","setEl","autoCloseTimeout","startTimeout","stopTimeout","clearInterval","Image","alt","src","MessageButton","onTouchEnd","onMouseUp","NotificationsStack","notifications","onNotificationClose","NotificationsContext","NotificationsProvider","activeNotificationsStack","setActiveNotificationsStack","showNotification","uuidv4","handleNotificationClose","prevUUID","isKept","Desktop","backgroundView","services","menuButton","label","sort","b","aTitle","bTitle","app","getIsPinned","getWindowController","confirm","ReShellCore","reload","fontWeight","fontStyle","alert","fontSize","getPortalName","process","Padding","hasSiblings","setHasSiblings","parentNode","VirtualLink","Center","canOverflow","innerEl","setInnerEl","isOverflown","useOverflowDetection","element","isDetecting","refPrevIsOverflown","getIsOverflown","innerOffsetHeight","innerOffsetWidth","outerHeight","clientHeight","outerWidth","clientWidth","setIsOverflown","_isUnmounting","checkIsOverflown","prevIsOverflown","nextIsOverflown","consume","obj","ApplicationSelector","searchQuery","onResetSearchQuery","startAppRuntime","appRuntimeRegistrations","filteredRegistrations","includes","totalInstances","predicate","borderColor","Array","nonUsed","idx","margin","PortalSwitcher","getPortals","portalName","switchToPortal","LEN_PORTALS","keys","Applications","handleSetSearchQuery","handleDoubleClick","placeholder","onChange","isDisplayingPortals","setIsDisplayingPortals","handleResetSearchQuery","ApplicationsOverride","Timer","secs","onTick","seconds","_setSeconds","getSeconds","handleUpdate","updateInterval","setInterval","Date","toISOString","substr","AppRuntimeTableRow","isTopMostWindowController","elProfilerPhase","setElProfilerPhase","elProfilerActualDuration","setElProfilerActualDuration","elProfilerBaseDuration","setElProfilerBaseDuration","elProfilerStartTime","setElProfilerStartTime","elProfilerCommitTime","setElProfilerCommitTime","elProfilerInteractions","setElProfilerInteractions","handleRenderProfile","phase","actualDuration","baseDuration","startTime","commitTime","interactions","innerHTML","parseFloat","toFixed","getInstanceUptime","colSpan","log","environment","getEnvironment","AppRuntimeTable","rowSpan","ApplicationMonitor","overflowY","getUptime","ButtonPanel","buttons","selectedIdx","button","isSelected","setSelectedIdx","refRenderIdx","content","ExternalLink","VirtualLinkButton","ExternalLinkButton","href","open","LINKS","LINK_BUTTON_STYLE","minHeight","Details","rel","gridTemplateColumns","urlOrAction","zenOSmosis","GitHub","Resources","name","url","FULL_YEAR","getFullYear","AboutReShell","screen","opacity","AboutReShellOverride","LabeledLED","CheckForUpdates","isLatest","setIsLatest","isChecking","setIsChecking","isError","setIsError","refIsChecking","handleCheckForUpdates","fetchIsLatestVersion","ServiceMonitor","ReShellOrg","ReShellOrgPortal"],"mappings":"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","file":"static/js/3.a0c0533e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"Layout_layout__3PvPc\",\"header\":\"Layout_header__3EItT\",\"content\":\"Layout_content__1t8Hf\",\"footer\":\"Layout_footer__3EMQb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"window-outer-border\":\"Window_window-outer-border__3TebC\",\"hidden\":\"Window_hidden__3nppO\",\"maximized\":\"Window_maximized__1kLcW\",\"minimized\":\"Window_minimized__10t2-\",\"dragging\":\"Window_dragging__2Ctk1\",\"window\":\"Window_window__uDx5P\",\"active\":\"Window_active__eAyll\",\"titlebar\":\"Window_titlebar__yB8Zx\",\"title\":\"Window_title__3FnAS\",\"window-controls\":\"Window_window-controls__1ACD5\",\"maximize\":\"Window_maximize__2aW7z\",\"minimize\":\"Window_minimize__hemKn\",\"close\":\"Window_close__38hm-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stacking-context\":\"StackingContext_stacking-context__3KDjJ\",\"accelerated\":\"StackingContext_accelerated__E4pfU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"full\":\"Full_full__3xUwm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cover\":\"Cover_cover__3qNO7\",\"no-display\":\"Cover_no-display__vixgE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"RowColumn_row__2MIpa\",\"column\":\"RowColumn_column__3aAA3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"no-wrap\":\"NoWrap_no-wrap__2b0bc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"led\":\"LED_led__1cyGI\",\"gray\":\"LED_gray__3hMZV\",\"grey\":\"LED_grey__1_Ool\",\"red\":\"LED_red__2O1gd\",\"orange\":\"LED_orange__1Asac\",\"yellow\":\"LED_yellow__H5_0O\",\"green\":\"LED_green__5BS9Y\",\"blue\":\"LED_blue__fOsqG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"auto-scaler\":\"AutoScaler_auto-scaler__zdzsp\",\"content-wrap\":\"AutoScaler_content-wrap__2tFDr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"animation\":\"Animation_animation__1HH_d\",\"inline\":\"Animation_inline__3Lb1U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button-transparent\":\"ButtonTransparent_button-transparent__nu1PF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__1C7Ma\",\"main-image-wrap\":\"Notification_main-image-wrap__30_l1\",\"main-image\":\"Notification_main-image__fpW0x\",\"main-button\":\"Notification_main-button__3XiPY\",\"body-outer-wrap\":\"Notification_body-outer-wrap__2RNF3\",\"body-inner-wrap\":\"Notification_body-inner-wrap__2Kjzr\",\"body\":\"Notification_body__1iO2i\",\"title\":\"Notification_title__3IJtT\",\"close-button\":\"Notification_close-button__3j56e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notifications-stack\":\"NotificationsStack_notifications-stack__1ecNs\",\"inner-wrap\":\"NotificationsStack_inner-wrap__2pUR5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"padding\":\"Padding_padding__3cEtV\",\"no-siblings\":\"Padding_no-siblings__1nLrM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"virtual-link\":\"VirtualLink_virtual-link__76t27\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"center\":\"Center_center__PZFg8\",\"inner-wrap\":\"Center_inner-wrap__2OIMV\",\"overflown\":\"Center_overflown__LMy0-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"labeled-led\":\"LabeledLED_labeled-led__wOicI\",\"led-wrap\":\"LabeledLED_led-wrap__1c0-2\",\"label-wrap\":\"LabeledLED_label-wrap__1FyWJ\"};","import { useContext } from \"react\";\nimport { DesktopContext } from \"../core/BaseView/providers/DesktopProvider\";\n\nexport default function useDesktopContext() {\n  return useContext(DesktopContext);\n}\n","import { useContext } from \"react\";\nimport { AppRuntimesContext } from \"@core/BaseView/providers/AppRuntimesProvider\";\n\n// TODO: Move to @core/hooks\n\nexport default function useAppRuntimesContext() {\n  return useContext(AppRuntimesContext);\n}\n","import React, { useEffect, useState } from \"react\";\nimport useDesktopContext from \"@hooks/useDesktopContext\";\n\nimport useAppRuntimesContext from \"@hooks/useAppRuntimesContext\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nexport const WindowManagerRouteContext = React.createContext({});\n\nexport default function WindowManagerRouteProvider({ children }) {\n  const location = useLocation();\n  const { getAppRuntimesWithRegistrationID } = useAppRuntimesContext();\n\n  const [locationAppRuntimes, setLocationAppRuntimes] = useState([]);\n\n  useEffect(() => {\n    // Remove leading forward slash (/) from location\n    const locationRegistrationID = location.pathname?.substring(1);\n\n    const locationAppRuntimes = getAppRuntimesWithRegistrationID(\n      locationRegistrationID\n    );\n\n    setLocationAppRuntimes(locationAppRuntimes);\n  }, [location, getAppRuntimesWithRegistrationID]);\n\n  const {\n    activeWindowController: desktopContextActiveWindowController,\n    // setActiveWindowController: setDesktopContextActiveWindowController,\n  } = useDesktopContext();\n\n  const activeRegistrationID = desktopContextActiveWindowController\n    ?.getAppRuntime()\n    ?.getRegistrationID();\n\n  const history = useHistory();\n\n  // Update URL when active registration changes\n  useEffect(() => {\n    history.push(activeRegistrationID ? `/${activeRegistrationID}` : \"/\");\n  }, [activeRegistrationID, history]);\n\n  return (\n    <WindowManagerRouteContext.Provider value={{ locationAppRuntimes }}>\n      {children}\n    </WindowManagerRouteContext.Provider>\n  );\n}\n","import StackingContext from \"./StackingContext\";\n\nexport default StackingContext;\n","import React, { useEffect, useRef } from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./StackingContext.module.css\";\n\n// TODO: Document\n// Also see: https://tiffanybbrown.com/2015/09/css-stacking-contexts-wtf/index.html\nconst StackingContext = ({\n  className,\n  children,\n  isAccelerated = false,\n  onMount = () => null,\n  onDOMMatrix = () => null,\n  ...rest\n}) => {\n  const refOnMount = useRef(onMount);\n  const refOnDOMMatrix = useRef(onDOMMatrix);\n  const refIsAccelerated = useRef(isAccelerated);\n\n  const refEl = useRef(null);\n\n  // Handle onMount and onDOMMatrix callbacks\n  useEffect(() => {\n    const el = refEl.current;\n\n    if (el) {\n      const onMount = refOnMount.current;\n      const onDOMMatrix = refOnDOMMatrix.current;\n      const isAccelerated = refIsAccelerated.current;\n\n      if (isAccelerated) {\n        // Handle 3D space detection and onDOMMatrix callback\n        //\n        // IMPORTANT: Use of setTimeout is to ensure we run this detection on\n        // the next event loop cycle.  Usage of requestAnimationFrame does not\n        // accurately detect 3D matrix.\n        setTimeout(() => {\n          const computedStyle = window.getComputedStyle(el);\n\n          /** @see https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix */\n          const matrix = new DOMMatrix(computedStyle.transform);\n\n          /**\n           * NOTE: Each matrix value will be a string, not a number\n           *\n           * @see https://zellwk.com/blog/css-translate-values-in-javascript/\n           **/\n          /*\n            const matrixValues = computedStyle.transform\n              .match(/matrix.*\\((.+)\\)/)[1]\n              .split(\", \");*/\n\n          // NOTE: (jh) It seems that the matrix can be 3D and still not be\n          // accelerated, so some further considerations may need to be made\n\n          if (matrix.is2D /* || matrixValues[14] === undefined*/) {\n            console.warn(\n              \"Unable to apply, or detect, added 3D space to accelerated element\",\n              el\n            );\n          }\n\n          onDOMMatrix(matrix);\n        });\n      }\n\n      onMount(el);\n    }\n  }, []);\n\n  return (\n    <div\n      ref={refEl}\n      {...rest}\n      className={classNames(\n        styles[\"stacking-context\"],\n        isAccelerated && styles[\"accelerated\"],\n        className\n      )}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default StackingContext;\n","import Full from './Full';\n\nexport default Full;","import React, { Component } from \"react\";\nimport StackingContext from \"../StackingContext\";\nimport classNames from \"classnames\";\nimport styles from \"./Full.module.css\";\n\nclass Full extends Component {\n  render() {\n    const { children, className, ...rest } = this.props;\n\n    return (\n      <StackingContext\n        {...rest}\n        className={classNames(styles[\"full\"], className)}\n      >\n        {children}\n      </StackingContext>\n    );\n  }\n}\n\nexport default Full;\n","import Cover from './Cover';\n\nexport default Cover;","import React from \"react\";\nimport Full from \"../Full\";\nimport classNames from \"classnames\";\nimport styles from \"./Cover.module.css\";\n\nexport default React.forwardRef(function Cover(\n  { isVisible = true, children, className, ...rest },\n  forwardedRef\n) {\n  return (\n    <Full\n      ref={forwardedRef}\n      {...rest}\n      className={classNames(\n        styles[\"cover\"],\n        !isVisible ? styles[\"no-display\"] : \"\"\n      )}\n    >\n      {children}\n    </Full>\n  );\n});\n","import PhantomCore, { EVT_UPDATED, EVT_DESTROYED } from \"phantom-core\";\nimport { debounce } from \"debounce\";\n\nexport { EVT_UPDATED, EVT_DESTROYED };\n\n// @see https://reactjs.org/docs/profiler.html\nexport const EVT_RENDER_PROFILED = \"render-profile\";\n\nexport const EVT_RESIZED = \"resized\";\nexport const EVT_MOVED = \"moved\";\n\n// TODO: Implement ability to take snapshot (i.e. save to png, etc) for window previewing\n\n// TODO: Move into core directory?\n// TODO: Document\nexport default class WindowController extends PhantomCore {\n  // TODO: Document\n  constructor(initialState = {}, { onBringToTop }) {\n    super();\n\n    const DEFAULT_STATE = {\n      isMaximized: false,\n      isMinimized: false,\n      title: this.getTitle(),\n      // isActive: false,\n    };\n\n    this._state = Object.seal(\n      WindowController.mergeOptions(DEFAULT_STATE, initialState)\n    );\n\n    this._appRuntime = null;\n\n    this._windowEl = null;\n    this._windowManagerEl = null;\n\n    this._handleBringToTop = onBringToTop;\n\n    this._emitDebouncedResized = debounce(\n      this._emitDebouncedResized.bind(this),\n      500\n    );\n\n    this._emitDebouncedMoved = debounce(\n      this._emitDebouncedMoved.bind(this),\n      500\n    );\n\n    // TODO: Retain last size / moved and enable reverting back to previous settings\n    // TODO: Enable percentage calculation and adjust when resizing viewport (this should prevent windows from being able to leave the viewport)\n\n    // TODO: Ensure these are unbound when controller is destructed (related issue: https://github.com/zenOSmosis/phantom-core/issues/68)\n    // (For manually triggering Chrome's built-in Garbage Collector, see: https://github.com/facebook/react/issues/22471)\n    this._centerHandler = null;\n    this._scatterHandler = null;\n  }\n\n  /**\n   * @return {Promise<void>}\n   */\n  async destroy() {\n    // Clear any currently scheduled resize executions\n    this._emitDebouncedResized.clear();\n\n    // TODO: Determine if in dirty state, prior to closing\n    // if (\n    // window.confirm(`Are you sure you wish to close \"${this.getTitle()}\"?`)\n    // ) {\n\n    if (this._appRuntime) {\n      await this._appRuntime.destroy();\n    }\n\n    this._state = {};\n    this._appRuntime = null;\n    this._windowEl = null;\n    this._windowManagerEl = null;\n\n    return super.destroy();\n    //}\n  }\n\n  // TODO: Document\n  __INTERNAL__setCenterHandler(centerHandler) {\n    this._centerHandler = centerHandler;\n  }\n\n  // TODO: Document\n  center() {\n    return this._centerHandler();\n  }\n\n  // TODO: Document\n  __INTERNAL__setScatterHandler(scatterHandler) {\n    this._scatterHandler = scatterHandler;\n  }\n\n  // TODO: Document\n  scatter() {\n    return this._scatterHandler();\n  }\n\n  // TODO: Document\n  bringToTop() {\n    this._handleBringToTop(this);\n  }\n\n  // TODO: Document\n  /*\n  __INTERNAL__setIsActive(isActive) {\n    if (isActive !== this.getIsActive()) {\n      this.setState({ isActive });\n    }\n  }\n  */\n\n  // TODO: Document\n  /*\n  getIsActive() {\n    return this.getState().isActive;\n  }\n  */\n\n  // TODO: Document\n  // @see https://reactjs.org/docs/profiler.html\n  captureRenderProfile(arrRenderProfile) {\n    this.emit(EVT_RENDER_PROFILED, arrRenderProfile);\n  }\n\n  // TODO: Document\n  attachWindowElement(el) {\n    this._windowEl = el;\n  }\n\n  // TODO: Document\n  attachWindowManagerElement(el) {\n    this._windowManagerEl = el;\n  }\n\n  /**\n   * Associates an AppRuntime instance with this window controller.\n   *\n   * @param {AppRuntime} appRuntime\n   * @return {void}\n   */\n  setAppRuntime(appRuntime) {\n    // TODO: Ensure appRuntime is an AppRuntime instance\n\n    this._appRuntime = appRuntime;\n\n    // TODO: Refactor title to app runtime passing (ensure it can work both ways)\n    this._appRuntime.setTitle(this.getTitle());\n  }\n\n  /**\n   * Retrieves the associated AppRuntime for this window controller.\n   *\n   * @return {AppRuntime | void}\n   */\n  getAppRuntime() {\n    return this._appRuntime;\n  }\n\n  // TODO: Document\n  getAppRegistration() {\n    const runtime = this.getAppRuntime();\n\n    if (runtime) {\n      return runtime.getRegistration();\n    }\n  }\n\n  // TODO: Document\n  setSize({ width, height }) {\n    // IMPORTANT!: Do not update state on each iteration (if at all) because that would cause excessive re-rendering\n    const windowEl = this._windowEl;\n    if (windowEl) {\n      // FIXME: (jh) Can these be applied as a single reflow?\n      // @see https://www.sitepoint.com/10-ways-minimize-reflows-improve-performance/\n\n      window.requestAnimationFrame(() => {\n        if (width !== undefined) {\n          windowEl.style.width = `${width}px`;\n        }\n        if (height !== undefined) {\n          windowEl.style.height = `${height}px`;\n        }\n\n        // Emit debounced EVT_RESIZED event\n        this._emitDebouncedResized();\n      });\n    }\n  }\n\n  // TODO: Document\n  _emitDebouncedResized() {\n    this.emit(EVT_RESIZED);\n  }\n\n  // TODO: Document\n  getSize() {\n    const windowEl = this._windowEl;\n    if (windowEl) {\n      return {\n        width: windowEl.offsetWidth,\n        height: windowEl.offsetHeight,\n      };\n    } else {\n      console.warn(\"Unable to acquire windowEl\");\n    }\n  }\n\n  // TODO: Document\n  getWindowManagerSize() {\n    const windowManagerEl = this._windowManagerEl;\n    if (windowManagerEl) {\n      return {\n        width: parseInt(windowManagerEl.offsetWidth, 10),\n        height: parseInt(windowManagerEl.offsetHeight, 10),\n      };\n    } else {\n      console.warn(\"Unable to acquire windowManagerEl\");\n    }\n  }\n\n  // TODO: Document\n  setPosition({ x, y }) {\n    const windowEl = this._windowEl;\n    if (windowEl) {\n      /**\n       * FIXME: (jh) While using translate would be better here, it is buggier\n       * to use with some of the window animations (open / minimize / restore)\n       *\n       * However, if able to tie directly into matrix operations provided by\n       * accelerated StackingContext, it might improve acceleration even\n       * further\n       *\n       * Additional reading:\n       *    - [will-change] https://developer.mozilla.org/en-US/docs/Web/CSS/will-change\n       *    - [animating the box model]: https://whistlr.info/2021/box-model-animation\n       */\n\n      window.requestAnimationFrame(() => {\n        if (x !== undefined) {\n          windowEl.style.left = `${x}px`;\n\n          // Delete opposing right style\n          delete windowEl.style.right;\n        }\n        if (y !== undefined) {\n          windowEl.style.top = `${y}px`;\n\n          // Delete opposing bottom style\n          delete windowEl.style.bottom;\n        }\n\n        // IMPORTANT!: Do not update state on each iteration (if at all)\n        // because that would cause excessive re-rendering\n        this._emitDebouncedMoved();\n      });\n    }\n  }\n\n  // TODO: Document\n  _emitDebouncedMoved() {\n    this.emit(EVT_MOVED);\n  }\n\n  // TODO: Document\n  getPosition() {\n    const windowEl = this._windowEl;\n\n    if (windowEl) {\n      return {\n        x: parseInt(windowEl.offsetLeft, 10),\n        y: parseInt(windowEl.offsetTop, 10),\n      };\n    }\n  }\n\n  // TODO: Document\n  getIsBorderDisabled() {\n    return this.getIsMaximized() || this.getIsMinimized();\n  }\n\n  /**\n   * Sets a partial next state for this window controller.\n   *\n   * TODO: States are currently deep-merged but may become shallow merged\n   * instead.\n   *\n   * @param {Object} partialNextState\n   * @emits EVT_UPDATED\n   * @return {void}\n   */\n  setState(partialNextState) {\n    if (typeof partialNextState !== \"object\") {\n      throw new TypeError(\"partialNextState is not an object\");\n    }\n\n    // TODO: Refactor title to app runtime passing (ensure it can work both ways)\n    if (partialNextState.title !== undefined && this._appRuntime) {\n      this._appRuntime.setTitle(partialNextState.title);\n    }\n\n    // Potentially reset polar-opposite states\n    if (partialNextState.isMaximized) {\n      partialNextState.isMinimized = false;\n    } else if (partialNextState.isMinimized) {\n      partialNextState.isMaximized = false;\n    }\n\n    // TODO: This is buggy with certain types of state objects; should we just do a shallow-merge instead?\n    this._state = PhantomCore.mergeOptions(this._state, partialNextState);\n\n    this.emit(EVT_UPDATED, partialNextState);\n  }\n\n  /**\n   * @param {string} title\n   * @return {void}\n   */\n  setTitle(title) {\n    // Fixes issue where title does not render in window\n    this.setState({ title });\n\n    super.setTitle(title);\n  }\n\n  /**\n   * @return {Object}\n   */\n  getState() {\n    return this._state;\n  }\n\n  /**\n   * @param {boolean} isMaximized\n   * @return {void}\n   */\n  setIsMaximized(isMaximized) {\n    return this.setState({ isMaximized });\n  }\n\n  // TODO: Document\n  maximize() {\n    return this.setIsMaximized(true);\n  }\n\n  /**\n   * Retrieves whether or not the window is maximized.\n   *\n   * @returns {boolean}\n   */\n  getIsMaximized() {\n    return this._state.isMaximized;\n  }\n\n  /**\n   * Sets whether or not the window is minimized.\n   *\n   * @param {boolean} isMinimized\n   * @return {void}\n   */\n  setIsMinimized(isMinimized) {\n    return this.setState({ isMinimized });\n  }\n\n  // TODO: Document\n  minimize() {\n    return this.setIsMinimized(true);\n  }\n\n  /**\n   * Retrieves whether or not the window is minimized.\n   *\n   * @return {boolean}\n   */\n  getIsMinimized() {\n    return this._state.isMinimized;\n  }\n\n  // TODO: Document\n  restore() {\n    // IMPORTANT: The maximized / minimized states need to be set at the same\n    // time here; don't call the individual methods directly\n    this.setState({\n      isMaximized: false,\n      isMinimized: false,\n    });\n  }\n}\n","import Full from \"../Full\";\nimport classNames from \"classnames\";\nimport styles from \"./Layout.module.css\";\n\nexport default function Header({ className, children, ...rest }) {\n  return (\n    <div {...rest} className={classNames(styles[\"header\"], className)}>\n      <Full>{children}</Full>\n    </div>\n  );\n}\n","import Full from \"../Full\";\nimport classNames from \"classnames\";\nimport styles from \"./Layout.module.css\";\n\nexport default function Content({ className, children, ...rest }) {\n  return (\n    <div {...rest} className={classNames(styles[\"content\"], className)}>\n      <Full>{children}</Full>\n    </div>\n  );\n}\n","import Full from \"../Full\";\nimport classNames from \"classnames\";\nimport styles from \"./Layout.module.css\";\n\nexport default function Footer({ className, children, ...rest }) {\n  return (\n    <div {...rest} className={classNames(styles[\"footer\"], className)}>\n      <Full>{children}</Full>\n    </div>\n  );\n}\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./RowColumn.module.css\";\n// import PropTypes from \"prop-types\";\n\n// @see https://dev.to/drews256/ridiculously-easy-row-and-column-layouts-with-flexbox-1k01\n\n// TODO: Implement prop-types\nfunction Row({ children, className, ...rest }) {\n  // TODO: Enforce that only Column components are direct children of this\n\n  return (\n    <div {...rest} className={classNames(styles[\"row\"], className)}>\n      {children}\n    </div>\n  );\n}\n\n// TODO: Implement prop-types\n/**\n * Evenly-sized column.\n */\nfunction Column({ children, className, ...rest }) {\n  // TODO: Enforce that only Row component is direct parent of this\n\n  return (\n    <div {...rest} className={classNames(styles[\"column\"], className)}>\n      {children}\n    </div>\n  );\n}\n\nexport { Row, Column };\n","import Layout, { Header, Content, Footer, Row, Column } from \"./Layout\";\n\nexport default Layout;\nexport { Header, Content, Footer, Row, Column };\n","import React from \"react\";\nimport Full from \"../Full\";\nimport Header from \"./Header\";\nimport Content from \"./Content\";\nimport Footer from \"./Footer\";\nimport { Row, Column } from \"./RowColumn\";\nimport styles from \"./Layout.module.css\";\nimport classNames from \"classnames\";\n\n// TODO: Add prop-types\n// TODO: Consider renaming; there are unrelated components that deal with Layout as well\nexport default function Layout({ className, children, ...rest }) {\n  return (\n    <Full {...rest} className={classNames(styles[\"layout\"], className)}>\n      {children}\n    </Full>\n  );\n}\n\nexport { Header, Content, Footer, Row, Column };\n","import Layout, { Header, Content, Footer, Row, Column } from \"../Layout\";\nimport { useDrag } from \"react-use-gesture\";\n\n// TODO: Height and width are synonymous\n\n// TODO: Resizable element for touch displays: https://csslayout.io/patterns/resizable-element\n\nexport const DIR_BORDER_NW = \"NW\";\nexport const DIR_BORDER_N = \"N\";\nexport const DIR_BORDER_NE = \"NE\";\nexport const DIR_BORDER_E = \"E\";\nexport const DIR_BORDER_SE = \"SE\";\nexport const DIR_BORDER_S = \"S\";\nexport const DIR_BORDER_SW = \"SW\";\nexport const DIR_BORDER_W = \"W\";\n\n// TODO: Use prop-types\n// TODO: Document\nexport default function WindowBorder({\n  children,\n  onBorderDrag,\n  borderWidth = 3,\n  isDisabled = false,\n  ...rest\n}) {\n  // @see https://use-gesture.netlify.app/docs/#simple-example\n  const bindNW = useDrag(({ down: isDragging, movement: [mx, my] }) => {\n    onBorderDrag(DIR_BORDER_NW, { mx, my, isDragging });\n  });\n\n  const bindN = useDrag(({ down: isDragging, movement: [mx, my] }) => {\n    onBorderDrag(DIR_BORDER_N, { mx, my, isDragging });\n  });\n\n  const bindNE = useDrag(({ down: isDragging, movement: [mx, my] }) => {\n    onBorderDrag(DIR_BORDER_NE, { mx, my, isDragging });\n  });\n\n  const bindE = useDrag(({ down: isDragging, movement: [mx, my] }) => {\n    onBorderDrag(DIR_BORDER_E, { mx, my, isDragging });\n  });\n\n  const bindSE = useDrag(({ down: isDragging, movement: [mx, my] }) => {\n    onBorderDrag(DIR_BORDER_SE, { mx, my, isDragging });\n  });\n\n  const bindS = useDrag(({ down: isDragging, movement: [mx, my] }) => {\n    onBorderDrag(DIR_BORDER_S, { mx, my, isDragging });\n  });\n\n  const bindSW = useDrag(({ down: isDragging, movement: [mx, my] }) => {\n    onBorderDrag(DIR_BORDER_SW, { mx, my, isDragging });\n  });\n\n  const bindW = useDrag(({ down: isDragging, movement: [mx, my] }) => {\n    onBorderDrag(DIR_BORDER_W, { mx, my, isDragging });\n  });\n\n  return (\n    // TODO: Enable merge-able styles / classNames\n    // TODO: Extract classes to module.css\n    <Layout {...rest}>\n      <Header>\n        {!isDisabled && (\n          <Row style={{ maxHeight: borderWidth, height: borderWidth }}>\n            <Column\n              {...bindNW()}\n              style={{ maxWidth: borderWidth, cursor: \"nwse-resize\" }}\n            ></Column>\n            <Column {...bindN()} style={{ cursor: \"ns-resize\" }}></Column>\n            <Column\n              {...bindNE()}\n              style={{ maxWidth: borderWidth, cursor: \"nesw-resize\" }}\n            ></Column>\n          </Row>\n        )}\n      </Header>\n      <Content>\n        <Row>\n          {!isDisabled && (\n            <Column\n              {...bindW()}\n              style={{ maxWidth: borderWidth, cursor: \"ew-resize\" }}\n            ></Column>\n          )}\n\n          <Column>\n            {\n              // TODO: Use layout to wrap the child in a frame, w/ diagonal positions included\n            }\n            {children}\n          </Column>\n          {!isDisabled && (\n            <Column\n              {...bindE()}\n              style={{ maxWidth: borderWidth, cursor: \"ew-resize\" }}\n            ></Column>\n          )}\n        </Row>\n      </Content>\n      <Footer>\n        {!isDisabled && (\n          <Row style={{ maxHeight: borderWidth, height: borderWidth }}>\n            <Column\n              {...bindSW()}\n              style={{ maxWidth: borderWidth, cursor: \"nesw-resize\" }}\n            ></Column>\n            <Column {...bindS()} style={{ cursor: \"ns-resize\" }}></Column>\n            <Column\n              {...bindSE()}\n              style={{ maxWidth: borderWidth, cursor: \"nwse-resize\" }}\n            ></Column>\n          </Row>\n        )}\n      </Footer>\n    </Layout>\n  );\n}\n","import NoWrap from \"./NoWrap\";\n\nexport default NoWrap;\n","import classNames from \"classnames\";\nimport styles from \"./NoWrap.module.css\";\n\nexport default function NoWrap({ children, className, ...rest }) {\n  return (\n    <span {...rest} className={classNames(styles[\"no-wrap\"], className)}>\n      {children}\n    </span>\n  );\n}\n","import styles from \"../../Window.module.css\";\n\nexport function WindowTitlebarMaximizeButton({ ...rest }) {\n  return <WindowTitlebarButton {...rest} className={styles[\"maximize\"]} />;\n}\n\nexport function WindowTitlebarMinimizeButton({ ...rest }) {\n  return <WindowTitlebarButton {...rest} className={styles[\"minimize\"]} />;\n}\n\nexport function WindowTitlebarCloseButton({ ...rest }) {\n  return <WindowTitlebarButton {...rest} className={styles[\"close\"]} />;\n}\n\nfunction WindowTitlebarButton({ ...rest }) {\n  // TODO: Compose with specific buttons for \"green\", \"yellow\", and \"red\".\n\n  return <button {...rest}></button>;\n}\n","import WindowTitlebar from \"./Window.Titlebar\";\n\nexport default WindowTitlebar;\n","import NoWrap from \"@components/NoWrap\";\nimport Full from \"@components/Full\";\n\nimport styles from \"../Window.module.css\";\n\nimport {\n  WindowTitlebarMaximizeButton,\n  WindowTitlebarMinimizeButton,\n  WindowTitlebarCloseButton,\n} from \"./Window.Titlebar.Button\";\n\nexport default function WindowTitlebar({\n  onElTitlebar,\n  title,\n  onRestoreOrMaximize,\n  onMinimize,\n  onClose,\n  titleBarView: TitleBarView,\n}) {\n  // onDoubleClick={handleToggleRestoreOrMaximize})\n\n  return (\n    <div\n      ref={onElTitlebar}\n      className={styles[\"titlebar\"]}\n      onDoubleClick={onRestoreOrMaximize}\n    >\n      {TitleBarView ? (\n        <Full>{TitleBarView}</Full>\n      ) : (\n        <>\n          <NoWrap\n            style={{\n              // Offset width of window-controls in order to make the title centered\n              width: 80,\n            }}\n          />\n          <NoWrap className={styles[\"title\"]}>{title}</NoWrap>\n        </>\n      )}\n\n      <NoWrap className={styles[\"window-controls\"]}>\n        <WindowTitlebarMaximizeButton onClick={onRestoreOrMaximize} />\n        <WindowTitlebarMinimizeButton onClick={onMinimize} />\n        <WindowTitlebarCloseButton onClick={onClose} />\n      </NoWrap>\n    </div>\n  );\n}\n","/**\n * TODO: Document\n *\n * @see https://stackoverflow.com/a/46921780\n *\n * @param {DOMElement} el\n * @return {Object} // TODO: Document more thoroughly\n */\nexport default function getElCenterPoint(el) {\n  const x = el.offsetLeft + el.offsetWidth / 2;\n  const y = el.offsetTop + el.offsetHeight / 2;\n\n  return {\n    x,\n    y,\n  };\n}\n","/**\n * TODO: Document\n *\n * @param {DOMElement} el\n * @return {Object} // TODO: Document more thoroughly\n */\nexport default function getElSize(el) {\n  const width = el.offsetWidth;\n  const height = el.offsetHeight;\n\n  return {\n    width,\n    height,\n  };\n}\n","import { useEffect, useRef } from \"react\";\nimport \"animate.css\";\n\n// TODO: Document\nexport default function useAnimation({\n  domElement,\n  animationName,\n  // FIXME: Duration and delay are currently passed as strings because that's\n  // what the underlying CSS requires, but they should probably also accept\n  // integers representing milliseconds.\n  animationDuration = \"1s\",\n  animationDelay = \"0s\",\n  // TODO: Ensure onAnimationEnd is triggered on Windows if animations are turned off\n  onAnimationEnd,\n  animationEngine = \"animate.css\",\n  isDisabled = false,\n  shouldRun = true,\n}) {\n  if (typeof animationDuration !== \"string\") {\n    console.warn('animationDuration should be a string (i.e. \"1s\")');\n  }\n\n  if (typeof animationDelay !== \"string\") {\n    console.warn('animationDelay should be a string (i.e. \"0s\")');\n  }\n\n  const refOnAnimationEnd = useRef(onAnimationEnd);\n\n  useEffect(() => {\n    if (shouldRun && domElement) {\n      if (isDisabled) {\n        // TODO: Can this be used as an exported property instead of directly\n        // manipulating here?\n        domElement.style.visibility = \"visible\";\n      } else {\n        const classes = domElement.classList;\n\n        // Unhide the element\n        //\n        // IMPORTANT: This fixes an issue where text might appear to pop before\n        // transition is applied. It should be used in conjunction with opacity\n        // being set to 0, initially, as the Animation component does.\n        //\n        // TODO: Can this be used as an exported property instead of directly\n        // manipulating here?\n        domElement.style.visibility = \"visible\";\n\n        domElement.style.animationDuration = animationDuration;\n        domElement.style.animationDelay = animationDelay;\n\n        switch (animationEngine) {\n          /**\n           * @see https://animate.style animate.css\n           */\n          case \"animate.css\":\n            (() => {\n              // TODO: Implement optional animation engine\n              // animate.css\n              const BASE = \"animate__animated\";\n\n              if (!classes.contains(BASE)) {\n                domElement.classList.add(BASE);\n              }\n\n              if (!classes.contains(\"animate__\" + animationName)) {\n                domElement.classList.add(\"animate__\" + animationName);\n              }\n            })();\n            break;\n\n          default:\n            throw new Error(`Unsupported animation engine: ${animationEngine}`);\n        }\n\n        const onAnimationEnd = refOnAnimationEnd.current;\n\n        // TODO: Also handle removing of effect from class list, so we can re-use it, if necessary\n        domElement.addEventListener(\"animationend\", onAnimationEnd);\n\n        return function unmount() {\n          domElement.removeEventListener(\"animationend\", onAnimationEnd);\n        };\n      }\n    }\n  }, [\n    animationEngine,\n    animationName,\n    animationDuration,\n    animationDelay,\n    domElement,\n    isDisabled,\n    shouldRun,\n  ]);\n}\n","import { EVT_UPDATED } from \"./classes/WindowController\";\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport StackingContext from \"../StackingContext\";\nimport Full from \"../Full\";\nimport Layout, { Header, Content } from \"../Layout\";\n\nimport WindowBorder from \"./Window.Border\";\nimport WindowTitlebar from \"./Window.Titlebar\";\n\nimport styles from \"./Window.module.css\";\nimport classNames from \"classnames\";\n\nimport useWindowStyles from \"./hooks/useWindowStyles\";\nimport useWindowAutoPositioner from \"./hooks/useWindowAutoPositioner\";\nimport useWindowDragger from \"./hooks/useWindowDragger\";\nimport useWindowDragResizer from \"./hooks/useWindowDragResizer\";\nimport useWindowOpenAnimation from \"./hooks/useWindowOpenAnimation\";\nimport useWindowControls from \"./hooks/useWindowControls\";\n\n// TODO: Apply considerations from Apple's Human Interface Guidelines:\n// https://developer.apple.com/design/human-interface-guidelines/macos/windows-and-views/window-anatomy/\n\n// TODO: Consider adjusting tabindex for non-active windows dynamically so that\n// tabbing will stay within constraints of the active window\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\n\n// TODO: Add prop-types\n// TODO: Document\n// TODO: Include option to be able to drag the window from within the window body (i.e. like a widget)\nconst WindowView = ({\n  children,\n  elWindowManager,\n\n  windowController,\n\n  // TODO: Obtain via windowController instead?\n  isActive,\n\n  // TODO: Obtain via windowController\n  isProfiling = true,\n\n  titleBarView = null,\n\n  style = {},\n  ...rest\n}) => {\n  /** @type {DOMElement} */\n  const [el, _setEl] = useState(null);\n\n  // TODO: Document\n  const { isOpenAnimationEnded } = useWindowOpenAnimation(el);\n\n  // TODO: Document\n  useWindowAutoPositioner(elWindowManager, el, windowController);\n\n  const [elTitlebar, _setElTitlebar] = useState(null);\n\n  const [zIndex, _setZIndex] = useState(0);\n  const [title, _setTitle] = useState(null);\n\n  // Associate window element with window controller\n  // TODO: Refactor into useWindowController hook\n  useEffect(() => {\n    if (windowController && el) {\n      windowController.attachWindowElement(el);\n    }\n  }, [windowController, el]);\n\n  /** @type {boolean} */\n  const [isWindowBorderDisabled, _setIsWindowBorderDisabled] = useState(false);\n  const refIsWindowBorderDisabled = useRef(null);\n  refIsWindowBorderDisabled.current = isWindowBorderDisabled;\n\n  const [isMaximized, _setIsMaximized] = useState(false);\n  const [isMinimized, _setIsMinimized] = useState(false);\n\n  // TODO: Document\n  // TODO: Refactor into useWindowController hook\n  useEffect(() => {\n    if (windowController) {\n      const _handleWindowControllerUpdate = updatedState => {\n        if (!updatedState) {\n          updatedState = windowController.getState() || {};\n        }\n\n        // Only apply view state change when necessary\n        if (\n          updatedState.title !== undefined &&\n          // TODO: Rather than checking dep value here, create conditionally-setting useState wrapper\n          updatedState.title !== title\n        ) {\n          _setTitle(updatedState.title);\n        }\n\n        // Only apply view state change when necessary\n        if (\n          updatedState.stackingIndex !== undefined &&\n          // TODO: Rather than checking dep value here, create conditionally-setting useState wrapper\n          updatedState.stackingIndex !== zIndex\n        ) {\n          _setZIndex(updatedState.stackingIndex);\n        }\n\n        if (updatedState.isMaximized !== undefined) {\n          _setIsMaximized(updatedState.isMaximized);\n        }\n\n        if (updatedState.isMinimized !== undefined) {\n          _setIsMinimized(updatedState.isMinimized);\n        }\n\n        const shouldWindowBorderBeDisabled =\n          windowController.getIsBorderDisabled();\n        if (\n          refIsWindowBorderDisabled.current !== shouldWindowBorderBeDisabled\n        ) {\n          _setIsWindowBorderDisabled(shouldWindowBorderBeDisabled);\n        }\n      };\n\n      // Perform initial update sync\n      _handleWindowControllerUpdate();\n\n      windowController.on(EVT_UPDATED, _handleWindowControllerUpdate);\n\n      return function unmount() {\n        windowController.off(EVT_UPDATED, _handleWindowControllerUpdate);\n      };\n    }\n  }, [windowController, title, zIndex]);\n\n  const { onRestoreOrMaximize, onMinimize, onClose } =\n    useWindowControls(windowController);\n\n  // Binds window dragging functionality\n  const [dragBind, isUserDragging] = useWindowDragger({\n    windowController,\n    elTitlebar,\n    isDisabled: isWindowBorderDisabled,\n  });\n\n  // Binds border resizing functionality\n  const [handleBorderDrag, isUserResizing] = useWindowDragResizer({\n    windowController,\n  });\n\n  // TODO: Document\n  const DynamicProfilingWrapper = useMemo(\n    () =>\n      ({ ...args }) =>\n        isProfiling ? (\n          // @see https://reactjs.org/docs/profiler.html\n          <React.Profiler\n            {...args}\n            id={windowController.getUUID()}\n            onRender={(...renderProfile) =>\n              windowController.captureRenderProfile(renderProfile)\n            }\n          />\n        ) : (\n          <React.Fragment {...args} />\n        ),\n    [isProfiling, windowController]\n  );\n\n  // Delegate style properties to their respective sub-components\n  const { outerBorderStyle, windowStyle, bodyStyle } = useWindowStyles({\n    style,\n    isMaximized,\n    isMinimized,\n  });\n\n  return (\n    <DynamicProfilingWrapper>\n      <StackingContext\n        onMount={_setEl}\n        {...rest}\n        style={{ ...outerBorderStyle, zIndex }}\n        className={classNames(\n          styles[\"window-outer-border\"],\n\n          // Prevents \"popping\" of window before open animation ends\n          !isOpenAnimationEnded && styles[\"hidden\"],\n\n          isActive && styles[\"active\"],\n          isMaximized && styles[\"maximized\"],\n          isMinimized && styles[\"minimized\"],\n          (isUserDragging || isUserResizing) && styles[\"dragging\"]\n        )}\n        // Enable hardware acceleration of window stacking context\n        isAccelerated={true}\n      >\n        <WindowView.Border\n          isDisabled={isWindowBorderDisabled}\n          onBorderDrag={handleBorderDrag}\n        >\n          <Full\n            {...dragBind()}\n            className={classNames(\n              styles[\"window\"],\n              isActive && styles[\"active\"],\n              // NOTE: This check intentionally is not taking resizing into\n              // consideration\n              isUserDragging && styles[\"dragging\"]\n            )}\n            style={windowStyle}\n          >\n            <Layout>\n              <Header>\n                <WindowTitlebar\n                  onElTitlebar={_setElTitlebar}\n                  title={title}\n                  onRestoreOrMaximize={onRestoreOrMaximize}\n                  onMinimize={onMinimize}\n                  onClose={onClose}\n                  titleBarView={titleBarView}\n                />\n              </Header>\n              <Content className={styles[\"body\"]} style={bodyStyle}>\n                {children}\n              </Content>\n            </Layout>\n          </Full>\n        </WindowView.Border>\n      </StackingContext>\n    </DynamicProfilingWrapper>\n  );\n};\n\nWindowView.Border = WindowBorder;\n\nexport default WindowView;\n","import { useState } from \"react\";\nimport useAnimation from \"@hooks/useAnimation\";\n\n// TODO: Apply animations to open, close, minimize, maximize, restore, etc.\n// @see https://animate.style/\n// @see https://github.com/miniMAC/magic (what is \"magic / puffin\"?) (TODO: Create test app to try these libs?)\n// # mac minimize genie effect warp\n\n// TODO: Document\nexport default function useWindowOpenAnimation(el) {\n  //const [phase, setPhase] = useState(\"transition-in\");\n\n  const [isOpenAnimationEnded, _setIsOpenAnimationEnded] = useState(false);\n\n  // Window opening transition\n  useAnimation({\n    domElement: el,\n    animationName: \"zoomInUp\",\n    animationDuration: \".5s\",\n    shouldRun: Boolean(el),\n    onAnimationEnd: () => _setIsOpenAnimationEnded(true),\n  });\n\n  return { isOpenAnimationEnded };\n}\n","import { useCallback, useEffect, useRef } from \"react\";\nimport getElCenterPoint from \"@utils/getElCenterPoint\";\nimport getElSize from \"@utils/getElSize\";\n\nimport useAppRuntimesContext from \"@hooks/useAppRuntimesContext\";\n\n// TODO: Document\nexport default function useWindowAutoPositioner(\n  elWindowManager,\n  elWindow,\n  windowController,\n  onInitialAutoPosition = () => null\n) {\n  const refOnInitialAutoPosition = useRef(null);\n  if (elWindow) {\n    refOnInitialAutoPosition.current = onInitialAutoPosition;\n  }\n\n  // TODO: Document\n  const handleCenter = useCallback(() => {\n    const winManCenter = getElCenterPoint(elWindowManager);\n    const winSize = getElSize(elWindow);\n\n    const x = winManCenter.x - winSize.width / 2;\n    const y = winManCenter.y - winSize.height / 2;\n\n    windowController.setPosition({\n      x,\n      y,\n    });\n  }, [elWindowManager, elWindow, windowController]);\n\n  // TODO: Document\n  const handleScatter = useCallback(() => {\n    if (windowController) {\n      const winManSize = getElSize(elWindowManager);\n      const winSize = getElSize(elWindow);\n\n      // Randomly position, but try to keep full window in viewport\n      const x = Math.floor(Math.random() * (winManSize.width - winSize.width));\n      const y = Math.floor(\n        Math.random() * (winManSize.height - winSize.height)\n      );\n\n      windowController.setPosition({ x, y });\n    }\n    // TODO:Implement\n  }, [elWindowManager, elWindow, windowController]);\n\n  // TODO: Refactor; Determine current app runtimes so we can determine if we're going to center or scatter new windows\n  const { appRuntimes } = useAppRuntimesContext();\n  const refInitialAppRuntimes = useRef(appRuntimes);\n\n  // Apply initial auto-position\n  useEffect(() => {\n    if (elWindowManager && elWindow && windowController) {\n      // Apply center handler to window controller so it can be called externally\n      windowController.__INTERNAL__setCenterHandler(handleCenter);\n      windowController.__INTERNAL__setScatterHandler(handleScatter);\n\n      // IMPORTANT: This must be called asynchronously or it will not set\n      requestAnimationFrame(() => {\n        // Determine initial window position\n        // TODO: Obtain previous value from local storage, or from window registration\n        if (refInitialAppRuntimes.current.length < 2) {\n          // If first window\n          handleCenter();\n        } else {\n          handleScatter();\n        }\n\n        // IMPORTANT: This must be called in a subsequent asynchronous call or\n        // it may execute before the previous\n        requestAnimationFrame(() => {\n          refOnInitialAutoPosition.current();\n        });\n      });\n    }\n  }, [\n    elWindowManager,\n    elWindow,\n    windowController,\n    handleCenter,\n    handleScatter,\n  ]);\n}\n","import { useCallback } from \"react\";\n\n// TODO: Document\nexport default function useWindowControls(windowController) {\n  // TODO: Document\n  // TODO: Implement\n  const handleRestoreOrMaximize = useCallback(() => {\n    if (windowController.getIsMaximized()) {\n      windowController.restore();\n    } else {\n      windowController.maximize();\n    }\n  }, [windowController]);\n\n  // TODO: Document\n  // TODO: Implement\n  const handleMinimize = useCallback(() => {\n    windowController.minimize();\n  }, [windowController]);\n\n  // TODO: Document\n  // TODO: Implement\n  const handleClose = useCallback(() => {\n    windowController.destroy();\n  }, [windowController]);\n\n  return {\n    onRestoreOrMaximize: handleRestoreOrMaximize,\n    onMinimize: handleMinimize,\n    onClose: handleClose,\n  };\n}\n","import { useRef, useState } from \"react\";\nimport { useDrag } from \"react-use-gesture\";\n\nexport const TOP_THRESHOLD = 0;\nexport const BOTTOM_THRESHOLD = 58;\nexport const LEFT_THRESHOLD = 0;\nexport const RIGHT_THRESHOLD = 0;\n\n// TODO: Document\nexport default function useWindowDragger({\n  windowController,\n  elTitlebar,\n  isDisabled,\n}) {\n  const refInitialDragPosition = useRef(null);\n  const refInitialWindowManagerSize = useRef(null);\n\n  const [isUserDragging, setIsUserDragging] = useState(false);\n\n  // @see https://use-gesture.netlify.app/docs/#simple-example\n  const bind = useDrag(\n    ({ down: isDragging, movement: [mx, my], xy, event }) => {\n      if (isDisabled || event.target.tagName.toUpperCase() === \"BUTTON\") {\n        return;\n      }\n\n      if (isDragging !== isUserDragging) {\n        setIsUserDragging(isDragging);\n      }\n\n      if (!elTitlebar.contains(event.target)) {\n        return;\n      }\n\n      if (isDragging) {\n        if (!refInitialDragPosition.current) {\n          refInitialDragPosition.current = windowController.getPosition();\n        }\n\n        if (!refInitialWindowManagerSize.current) {\n          refInitialWindowManagerSize.current =\n            windowController.getWindowManagerSize();\n        }\n\n        let x = refInitialDragPosition.current.x + mx;\n        let y = refInitialDragPosition.current.y + my;\n\n        const initialWindowManagerWidth =\n          refInitialWindowManagerSize.current.width;\n        const initialWindowManagerHeight =\n          refInitialWindowManagerSize.current.height;\n\n        // Prevent window from being dragged above top threshold\n        if (y < TOP_THRESHOLD) {\n          y = TOP_THRESHOLD;\n        }\n\n        // Prevent window from being dragged below bottom threshold\n        if (y > initialWindowManagerHeight - BOTTOM_THRESHOLD) {\n          y = initialWindowManagerHeight - BOTTOM_THRESHOLD;\n        }\n\n        // Prevent window from being dragged left of left threshold\n        if (xy[0] < LEFT_THRESHOLD) {\n          x = null;\n        }\n\n        // Prevent window from being dragged right of right threshold\n        if (xy[0] > initialWindowManagerWidth - RIGHT_THRESHOLD) {\n          x = null;\n        }\n\n        windowController.setPosition({\n          x,\n          y,\n        });\n      } else {\n        // Reset initial drag position\n        refInitialDragPosition.current = null;\n        refInitialWindowManagerSize.current = null;\n      }\n    }\n  );\n\n  return [bind, isUserDragging];\n}\n","import { useCallback, useRef, useState } from \"react\";\n\nimport {\n  DIR_BORDER_NW,\n  DIR_BORDER_N,\n  DIR_BORDER_NE,\n  DIR_BORDER_E,\n  DIR_BORDER_SE,\n  DIR_BORDER_S,\n  DIR_BORDER_SW,\n  DIR_BORDER_W,\n} from \"../Window.Border\";\n\nimport { BOTTOM_THRESHOLD } from \"./useWindowDragger\";\n\n// TODO: Document\n// TODO: Implement ability to turn off dragging\nexport default function useWindowDragResizer({ windowController }) {\n  const refInitialDragSizePosition = useRef(null);\n  const refInitialWindowManagerSize = useRef(null);\n\n  const [isUserResizing, setIsUserResizing] = useState(false);\n\n  const handleBorderDrag = useCallback(\n    (direction, { mx, my, isDragging }) => {\n      if (isDragging !== isUserResizing) {\n        setIsUserResizing(isDragging);\n      }\n\n      if (isDragging) {\n        if (!refInitialDragSizePosition.current) {\n          refInitialDragSizePosition.current = {\n            ...windowController.getSize(),\n            ...windowController.getPosition(),\n          };\n        }\n\n        if (!refInitialWindowManagerSize.current) {\n          refInitialWindowManagerSize.current =\n            windowController.getWindowManagerSize();\n        }\n\n        let width = refInitialDragSizePosition.current.width;\n        let height = refInitialDragSizePosition.current.height;\n        let x = refInitialDragSizePosition.current.x;\n        let y = refInitialDragSizePosition.current.y;\n\n        let windowManagerWidth = refInitialWindowManagerSize.current.width;\n        let windowManagerHeight = refInitialWindowManagerSize.current.height;\n\n        switch (direction) {\n          case DIR_BORDER_NW:\n            width = width - mx;\n            height = height - my;\n\n            x = x + mx;\n            y = y + my;\n\n            break;\n\n          case DIR_BORDER_N:\n            height = height - my;\n            y = y + my;\n            break;\n\n          case DIR_BORDER_NE:\n            height = height - my;\n            width = width + mx;\n\n            y = y + my;\n            break;\n\n          case DIR_BORDER_E:\n            width = width + mx;\n            break;\n\n          case DIR_BORDER_SE:\n            width = width + mx;\n            height = height + my;\n            break;\n\n          case DIR_BORDER_S:\n            height = height + my;\n            break;\n\n          case DIR_BORDER_SW:\n            width = width - mx;\n            height = height + my;\n\n            x = x + mx;\n            break;\n\n          case DIR_BORDER_W:\n            width = width - mx;\n\n            x = x + mx;\n            break;\n\n          default:\n            throw new ReferenceError(`Unknown direction: ${direction}`);\n        }\n\n        // TODO: Handle min width / height\n\n        // Prevent left resize from extending left of left threshold\n        if (x < 0) {\n          // This affects window height calculations when cursor is left of\n          // left threshold\n          const diffX = 0 - x;\n          x = 0;\n          width = width - diffX;\n        }\n\n        // Prevent top resize from extending above top threshold\n        if (y < 0) {\n          // IMPORTANT: Order of operations is important here; diffY comes\n          // before y\n          const diffY = 0 - y;\n          y = 0;\n          height = height - diffY;\n        }\n\n        // Prevent right resize from extending right of right threshold\n        if (width + x > windowManagerWidth) {\n          width = windowManagerWidth - x;\n          x = null;\n        }\n\n        // Prevent bottom resize from extending below bottom threshold\n        if (height + y > windowManagerHeight) {\n          if (\n            // Fix issue where resizing windows from the top, which extended\n            // below the bottom threshold, would move the bottom edge up\n            direction === DIR_BORDER_S ||\n            direction === DIR_BORDER_SE ||\n            direction === DIR_BORDER_SW\n          ) {\n            height = windowManagerHeight - y;\n            y = null;\n          }\n        }\n\n        // Prevent drags from the top to be able to drag below bottom threshold\n        if (windowManagerHeight - y < BOTTOM_THRESHOLD) {\n          return;\n        }\n\n        windowController.setSize({ width, height });\n        windowController.setPosition({ x, y });\n      } else {\n        refInitialDragSizePosition.current = null;\n        refInitialWindowManagerSize.current = null;\n      }\n    },\n    [windowController, isUserResizing]\n  );\n\n  return [handleBorderDrag, isUserResizing];\n}\n","import { useMemo } from \"react\";\n\n// TODO: Document\nexport default function useWindowStyles({ style, isMaximized, isMinimized }) {\n  // Conditionally overrides style property when window is maximized or\n  // minimized so that they do not conflict with the CSS classes\n  const outerBorderStyle = useMemo(() => {\n    if (isMaximized || isMinimized) {\n      return {};\n    } else {\n      return {\n        width: style.width,\n        height: style.height,\n      };\n    }\n  }, [style.width, style.height, isMaximized, isMinimized]);\n\n  const windowStyle = useMemo(() => {\n    return {\n      backgroundColor: style.backgroundColor,\n    };\n  }, [style.backgroundColor]);\n\n  const bodyStyle = useMemo(() => {\n    return {\n      padding: style.padding,\n    };\n  }, [style.padding]);\n\n  return {\n    outerBorderStyle,\n    windowStyle,\n    bodyStyle,\n  };\n}\n","import Window from \"./Window\";\n\nexport default Window;\n","import React, { useImperativeHandle, useState } from \"react\";\n\nimport WindowView from \"./Window.View\";\n\n// TODO: Implement CodeSandbox support for development / debugging:  https://codesandbox.io/docs/embedding#embed-options\n// TODO: See https://csslayout.io/patterns\n\n// TODO: Add prop-types\n// TODO: Document\n// TODO: Include option to be able to drag the window from within the window body (i.e. like a widget)\nconst Window = React.forwardRef(\n  (\n    {\n      children,\n      elWindowManager,\n\n      // TODO: Obtain via windowController instead?\n      isActive,\n\n      titleBarView,\n\n      style = {},\n      ...rest\n    },\n    ref\n  ) => {\n    const [windowController, attachWindowController] = useState(null);\n\n    // These are exposed to the WindowManager\n    useImperativeHandle(ref, () => ({\n      // windowSymbol: Symbol(\"window\"),\n      attachWindowController,\n    }));\n\n    // The windowController should already be supplied by WindowManager before\n    // rendering is even attempted\n    if (!windowController) {\n      return null;\n    }\n\n    // TODO: Implement error boundary here\n\n    return (\n      <WindowView\n        {...rest}\n        style={style}\n        elWindowManager={elWindowManager}\n        windowController={windowController}\n        isActive={isActive}\n        titleBarView={titleBarView}\n      >\n        {children}\n      </WindowView>\n    );\n  }\n);\n\nexport default Window;\n","import React from \"react\";\n\nimport useObjectState from \"@hooks/useObjectState\";\n\nexport const WindowContext = React.createContext({});\n\n// TODO: Document (per-window WindowProvider)\n// TODO: Use prop-types\nexport default function WindowProvider({ children, initialSharedState = {} }) {\n  const [sharedState, setSharedState] = useObjectState(initialSharedState);\n\n  return (\n    <WindowContext.Provider\n      value={{\n        setSharedState,\n        sharedState,\n      }}\n    >\n      {children}\n    </WindowContext.Provider>\n  );\n}\n","import { useCallback, useRef, useState } from \"react\";\n\n// TODO: Use PhantomCore.mergeOptions for deep-merge, instead?\n\n/**\n * Applies a shallow-merge strategy to object updates so that setState() calls\n * don't completely overwrite previous object state.\n *\n * Maintains backwards-compatibility for class-based components which have been\n * migrated to hook versions, without having to write a bunch of useState\n * references for every state property.\n *\n * @param {Object} defaultState\n * @return {[state: Object, setState: function, changeIdx: number]} Merged state\n */\nexport default function useObjectState(defaultState = {}) {\n  const [state, _setMergedState] = useState(defaultState);\n\n  const refState = useRef(state);\n  refState.current = state;\n\n  /**\n   * @param {Object | string} updatedState If passed as a string, it will try\n   * to JSON parse into an object.\n   */\n  const setState = useCallback(updatedState => {\n    // Check type validity / apply type coercion, etc.\n    switch (typeof updatedState) {\n      case \"string\":\n        try {\n          updatedState = JSON.parse(updatedState);\n        } catch (err) {\n          console.error(\n            \"Unable to parse string.  Did you forget to use an Object when setting object state?\",\n            {\n              err,\n            }\n          );\n        }\n\n        break;\n\n      case \"function\":\n        updatedState = updatedState(refState.current);\n        break;\n\n      case \"object\":\n        // Objects are okay the way they are\n        break;\n\n      default:\n        // TODO: Eventually throw this error once we know it doesn't raise a\n        // bunch of warnings in the app as it is (August 6, 2021)\n        console.warn(`Unhandled updatedState type: ${typeof updatedState}`);\n        break;\n    }\n\n    return _setMergedState(prevState => ({ ...prevState, ...updatedState }));\n  }, []);\n\n  return [state, setState];\n}\n","import { useContext } from \"react\";\nimport { UIServicesContext } from \"../core/BaseView/providers/UIServicesProvider\";\n\n// TODO: Move to @core/hooks\n\nexport default function useServicesContext() {\n  return useContext(UIServicesContext);\n}\n","import { useContext } from \"react\";\nimport { AppRegistrationsContext } from \"@core/BaseView/providers/AppRegistrationsProvider\";\n\n// TODO: Move to @core/hooks\n\nexport default function useAppRegistrationsContext() {\n  return useContext(AppRegistrationsContext);\n}\n","// TODO: Move into core, named WindowManagerProvider\n\nimport { EVT_UPDATED, EVT_DESTROYED } from \"phantom-core\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport WindowManagerRouteProvider from \"./WindowManager.RouteProvider\"; // WindowManagerRouteContext,\nimport Cover from \"../Cover\";\nimport Window from \"../Window\";\n\nimport WindowProvider from \"../Window/Window.Provider\";\nimport useWindowContext from \"../Window/hooks/useWindowContext\";\n\nimport useServicesContext from \"@hooks/useServicesContext\";\nimport useDesktopContext from \"@hooks/useDesktopContext\";\nimport useAppRegistrationsContext from \"@hooks/useAppRegistrationsContext\";\nimport useAppRuntimesContext from \"@hooks/useAppRuntimesContext\";\nimport useForceUpdate from \"@hooks/useForceUpdate\";\n\nimport useRegistrationViewOnResized from \"./hooks/useRegistrationViewOnResized\";\n\nimport WindowController from \"../Window/classes/WindowController\";\n\n// TODO: Incorporate react-router for window routes?\n\n// TODO: Add hotkey listener service and map to active window\n\n// TODO: Refactor (shared across all windows to determine relevant zIndexes)\nlet stackingIndex = 0;\n\n// TODO: Document\n// TODO: Use prop-types\nexport default function WindowManager({ appDescriptors = [], children }) {\n  return (\n    <WindowManagerRouteProvider>\n      <WindowManagerView appDescriptors={appDescriptors}>\n        {children}\n      </WindowManagerView>\n    </WindowManagerRouteProvider>\n  );\n}\n\nfunction WindowManagerView({ appDescriptors = [], children }) {\n  // const { locationAppRuntimes } = React.useContext(WindowManagerRouteContext);\n\n  const { addOrUpdateAppRegistration } = useAppRegistrationsContext();\n  const { appRuntimes } = useAppRuntimesContext();\n\n  const [elBase, setElBase] = useState(null);\n\n  // TODO: Refactor outside of window manager?\n  useEffect(() => {\n    appDescriptors.forEach(descriptor =>\n      addOrUpdateAppRegistration(descriptor)\n    );\n\n    // TODO: Add or update these descriptors in the appropriate provider\n  }, [appDescriptors, addOrUpdateAppRegistration]);\n\n  const {\n    activeWindowController: desktopContextActiveWindowController,\n    setActiveWindowController: setDesktopContextActiveWindowController,\n  } = useDesktopContext();\n\n  // TODO: Document\n  const [windowControllerMaps, setWindowControllerMaps] = useState({});\n\n  /**\n   * @param {number | string } key\n   * @return {Object | void} // TODO: Document structure\n   */\n  const getWindowControllerMapWithKey = useCallback(\n    key => {\n      const map = windowControllerMaps[key];\n\n      return map;\n    },\n    [windowControllerMaps]\n  );\n\n  // IMPORTANT: Prevents infinite loop of handleSetActiveWindow when used as dependency\n  const refDesktopContextActiveWindowController = useRef(null);\n  refDesktopContextActiveWindowController.current =\n    desktopContextActiveWindowController;\n\n  /**\n   * @param {WindowController | null} windowController?\n   * @return {void}\n   */\n  const handleSetActiveWindow = useCallback(\n    windowController => {\n      // Restore minimized windows\n      // IMPORTANT: This should come before the is-current-window determination\n      // so that the Dock (and other activators) can un-minimize, regardless of\n      // the active window\n      if (windowController?.getIsMinimized()) {\n        windowController.setIsMinimized(false);\n      }\n\n      if (\n        !Object.is(\n          windowController,\n          refDesktopContextActiveWindowController.current\n        )\n      ) {\n        setDesktopContextActiveWindowController(windowController);\n\n        if (windowController) {\n          // TODO: Don't bring to front if already in front (i.e. is already the active window)\n          windowController.setState({ stackingIndex: ++stackingIndex });\n        }\n      }\n    },\n    [setDesktopContextActiveWindowController]\n  );\n\n  // TODO: Document\n  const handleGetIsActiveWindow = useCallback(\n    windowController =>\n      Object.is(desktopContextActiveWindowController, windowController),\n    [desktopContextActiveWindowController]\n  );\n\n  // Handle setting of active window based on locationAppRuntimes\n  // TODO: Fix; currently buggy w/ Safari\n  // TODO: Implement deep linking\n  /*\n  useEffect(() => {\n    const to = setTimeout(() => {\n      const windowControllers = locationAppRuntimes.map((appRuntime) =>\n        appRuntime.getWindowController()\n      );\n\n      if (\n        !windowControllers.includes(\n          refDesktopContextActiveWindowController.current\n        )\n      ) {\n        for (const windowController of windowControllers) {\n          if (windowController) {\n            // Iterate through all locationAppRuntimes and set active window\n            handleSetActiveWindow(windowController);\n          }\n        }\n      }\n    });\n\n    return function unmount() {\n      clearTimeout(to);\n    };\n  }, [locationAppRuntimes, handleSetActiveWindow]);\n  */\n\n  const { startService } = useServicesContext();\n\n  // Handle when window manager is clicked on directly (no window interacted with directly)\n  const refHandleSetActiveWindow = useRef(handleSetActiveWindow);\n  refHandleSetActiveWindow.current = handleSetActiveWindow;\n  useEffect(() => {\n    if (elBase) {\n      const _handleElBaseTouch = evt => {\n        // Deselect active window if desktop base is touched\n        if (evt.target === elBase) {\n          refHandleSetActiveWindow.current(null);\n        }\n      };\n\n      elBase.addEventListener(\"mousedown\", _handleElBaseTouch);\n      elBase.addEventListener(\"touchstart\", _handleElBaseTouch, {\n        // @see https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n        passive: true,\n      });\n\n      return function unmount() {\n        elBase.removeEventListener(\"mousedown\", _handleElBaseTouch);\n        elBase.removeEventListener(\"touchstart\", _handleElBaseTouch, {\n          // FIXME: (jh) I'm not positive if this should be on the\n          // removeEventListener (I think not, but erroring on the side of\n          // caution)\n          // @see https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n          // @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener\n          passive: true,\n        });\n      };\n    }\n  }, [elBase]);\n\n  /**\n   * Determines which windows are rendered to the screen at any given time, as\n   * \\well as controls instantiation and association of window controllers with\n   * their respective views.\n   *\n   * @type {React.Component[]}\n   */\n  // TODO: Can this be memoized again even w/ hooks running in window\n  // descriptors?\n  // TODO: Fix issue where every window will re-render when another window\n  // actively goes on top (not sure if it's a huge deal, but is seemingly\n  // unnecessary)\n  //\n  // TODO: Somehow figure out support for reparenting if needing to change\n  // window manager layouts: https://github.com/facebook/react/issues/3965\n  // (maybe this? https://www.npmjs.com/package/react-reverse-portal)\n  const windows = appRuntimes\n    .map(appRuntime => {\n      // TODO: Ensure key is unique across the map\n      const key = appRuntime.getUUID();\n\n      // NOTE: The variables absorbed by this decompositor (except for\n      // windowProps) are NOT passed down to the underlying DOM element of the\n      // window\n      //\n      // FIXME: (jh) Perhaps this logic should be refactored and most props not\n      // utilized on every single render (maybe the complete wrapped window\n      // could be a separate component instead of re-calcuating all of this\n      // stuff on every render)\n      const {\n        view: ViewComponent,\n        titleBarView,\n        initialSharedState,\n\n        // This one is tricky, don't pass up registration ID as DOM element ID\n        id,\n\n        title,\n        serviceClasses = [],\n        isPinned,\n        isPinnedToDock,\n        isAutoStart,\n        ...windowProps\n      } = appRuntime.getAppDescriptor();\n\n      if (!ViewComponent) {\n        return null;\n      }\n\n      // TODO: Re-active previously focused element when bringing new window to\n      // top\n\n      // TODO: (mostly for development), determine changed descriptor window\n      // title and update the window controller w/ new values\n\n      // TODO: Document\n      const dataMap = getWindowControllerMapWithKey(key);\n\n      /** @type {WindowController | void} */\n      const windowController = dataMap && dataMap.windowController;\n\n      // TODO: Fix issues with rendering errors related to the usage of this\n      /*\n      if (windowController) {\n        windowController.__INTERNAL__setIsActive(\n          handleGetIsActiveWindow(windowController)\n        );\n      }\n      */\n\n      // If we previously had a window controller running with this id\n      //\n      // TODO: Implement ability to flush this and restart a window with the same id?\n      if (dataMap && !dataMap.windowController) {\n        return null;\n      }\n\n      // TODO: Memoize this handling\n      // TODO: Attach services to window controller so other UI utilities can\n      // reference what is specific to this window\n      // TODO: Rename to appServices?\n      const appServices = {};\n      for (const serviceClass of serviceClasses) {\n        const service = startService(serviceClass);\n\n        appServices[serviceClass] = service;\n      }\n\n      // TODO: Memoize this component, when refactoring outer map\n      return (\n        <WindowProvider key={key} initialSharedState={initialSharedState}>\n          <Window\n            {...windowProps}\n            elWindowManager={elBase}\n            // TODO: Remove isActive and pass in from WindowController to the window\n            isActive={handleGetIsActiveWindow(windowController)}\n            onMouseDown={() => handleSetActiveWindow(windowController)}\n            onTouchStart={() => handleSetActiveWindow(windowController)}\n            titleBarView={\n              titleBarView ? (\n                <WrappedTitleBarView\n                  titleBarView={titleBarView}\n                  appServices={appServices}\n                  windowController={windowController}\n                  appRuntime={appRuntime}\n                />\n              ) : null\n            }\n            ref={ref => {\n              if (ref && !windowController) {\n                // Begin process of attaching window controller to rendered view\n                // and setting up event bindings\n\n                const windowController = new WindowController(\n                  {},\n                  {\n                    onBringToTop: handleSetActiveWindow,\n                  }\n                );\n                windowController.setTitle(title);\n\n                windowController.attachWindowManagerElement(elBase);\n\n                // Link app runtime to window controller (so that when the window\n                // controller is destructed it will take down the app runtime)\n                windowController.setAppRuntime(appRuntime);\n                appRuntime.setWindowController(windowController);\n\n                // Attach the view controller to the window\n                ref.attachWindowController(windowController);\n\n                setWindowControllerMaps(prev => {\n                  const next = { ...prev };\n                  next[key] = {\n                    windowController,\n                    key,\n                    // windowSymbol: ref.windowSymbol,\n                  };\n\n                  return next;\n                });\n\n                windowController.once(EVT_DESTROYED, () => {\n                  setWindowControllerMaps(prev => {\n                    const next = { ...prev };\n\n                    next[key].windowController = null;\n\n                    return next;\n                  });\n                });\n\n                // Set this new window as the active window\n                handleSetActiveWindow(windowController);\n              }\n            }}\n          >\n            {\n              // Wrap the view so that it updates when a bound service updates\n              // NOTE: (jh) I originally tried wrapping the window itself, but\n              // it didn't work, and it's a better idea to only update what's\n              // necessary anyway\n            }\n            {windowController && (\n              <WrappedView\n                appServices={appServices}\n                windowController={windowController}\n                appRuntime={appRuntime}\n                view={ViewComponent}\n              />\n            )}\n          </Window>\n        </WindowProvider>\n      );\n    })\n    .filter(window => Boolean(window));\n\n  return (\n    <Cover>\n      {\n        // TODO: Bind touch event to this element, and if directly touching it,\n        // make currently active window not active (if cursor is in another\n        // window, ensure it is removed as well)\n        //\n        // setActiveWindowController(null)\n      }\n      <div\n        ref={setElBase}\n        style={{ width: \"100%\", height: \"100%\", position: \"relative\" }}\n      >\n        {children}\n\n        {windows}\n      </div>\n    </Cover>\n  );\n}\n\n// TODO: Document\nconst WrappedTitleBarView = function ({ titleBarView, ...rest }) {\n  return <WrappedView {...rest} view={titleBarView} />;\n};\n\n// TODO: Implement Svelte lifecycle methods, to avoid users having to deal with\n// hooks (keep hooks as more of a low-level thing instead, if possible)\n// - https://svelte.dev/tutorial/onmount\n// - https://svelte.dev/tutorial/ondestroy\n// - https://svelte.dev/tutorial/update\n// - https://svelte.dev/tutorial/tick\n// Maybe we can say, \"we built a rendering engine on top of React, so that\n// React components can be used, without the complexity of dealing with React\n// hook dependencies, in order to reduce excessive rendering, or stale states,\n// caused by improper user of hook dependencies\".... could also smooth the\n// transition over to Svelte or any other rendering engine for apps created on\n// top of one of them.\n//\n// TODO: Document; rename? (NOTE: this wrapped view was designed to make it\n// easier to make the wrapping view render out-of-sequence with the containing\n// view, such as when a service updates, etc.)\nconst WrappedView = function WrappedView({\n  appServices,\n  windowController,\n  appRuntime,\n  view: ViewComponent,\n}) {\n  const forceUpdate = useForceUpdate();\n\n  const { sharedState, setSharedState } = useWindowContext();\n\n  // Re-render window when a service updates\n  useEffect(() => {\n    const _handleServiceUpdate = () => {\n      forceUpdate();\n    };\n\n    for (const service of Object.values(appServices)) {\n      // TODO: Make this channel-specific (i.e. EVT_MAIN_STATE_UPDATED)?\n      service.on(EVT_UPDATED, _handleServiceUpdate);\n    }\n\n    return function unmount() {\n      for (const service of Object.values(appServices)) {\n        // TODO: Make this channel-specific (i.e. EVT_MAIN_STATE_UPDATED)?\n        service.off(EVT_UPDATED, _handleServiceUpdate);\n      }\n    };\n  }, [appServices, forceUpdate]);\n\n  // TODO: Document\n  const setResizeHandler = useRegistrationViewOnResized(windowController);\n\n  return (\n    <ViewComponent\n      windowController={windowController}\n      appServices={appServices}\n      appRuntime={appRuntime}\n      setResizeHandler={setResizeHandler}\n      sharedState={sharedState}\n      setSharedState={setSharedState}\n    />\n  );\n};\n","import { useContext } from \"react\";\nimport { WindowContext } from \"../Window.Provider\";\n\n// TODO: Document (per-window useWindowContext)\nexport default function useWindowContext() {\n  return useContext(WindowContext);\n}\n","import { useCallback, useEffect, useRef } from \"react\";\nimport WindowController, {\n  EVT_RESIZED,\n} from \"@components/Window/classes/WindowController\";\n\n/**\n * Handles automatic invocation of AppRegistration view's setResizeHandler when\n * the relevant window resizes.\n *\n * @param {WindowController} windowController\n * @return {function}\n */\nexport default function useRegistrationViewOnResized(windowController) {\n  const refSetResizeHandler = useRef(null);\n\n  /**\n   * @param {function | void} setResizeHandler Passed up from AppRegistration view\n   * properties.\n   */\n  const handleResized = useCallback((setResizeHandler) => {\n    /**\n     * onResized is passed from view, and is executed by the WindowManager when\n     * the WindowController emits EVT_RESIZED event.\n     */\n    refSetResizeHandler.current = setResizeHandler;\n  }, []);\n\n  useEffect(() => {\n    if (windowController) {\n      if (!(windowController instanceof WindowController)) {\n        throw new TypeError(\"windowController is not a WindowController\");\n      }\n\n      const _handleExecResizedCallback = () => {\n        const onResized = refSetResizeHandler.current;\n\n        // AppRegistration view might not set an onResized handler\n        if (typeof onResized === \"function\") {\n          onResized();\n        }\n      };\n\n      windowController.on(EVT_RESIZED, _handleExecResizedCallback);\n\n      return function unmount() {\n        windowController.off(EVT_RESIZED, _handleExecResizedCallback);\n      };\n    }\n  }, [windowController]);\n\n  return handleResized;\n}\n","import WindowManager from \"./WindowManager\";\n\nexport default WindowManager;\n","import LED from \"./LED\";\n\nexport default LED;\n","import React from \"react\";\nimport styles from \"./LED.module.css\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\n\nLED.propTypes = {\n  /** The color of the LED */\n  color: PropTypes.string,\n};\n\n/**\n * @see https://github.com/aus/led.css\n * @see http://jsfiddle.net/XrHcA/\n */\nexport default function LED({ color = null, ...rest }) {\n  return (\n    <div {...rest} className={classNames(styles[\"led\"], styles[color])}></div>\n  );\n}\n","import Dock from \"./Dock\";\n\nexport default Dock;\n","import { useMemo } from \"react\";\n// import LED from \"@components/LED\";\n\nimport useAppRegistrationsContext from \"@hooks/useAppRegistrationsContext\";\nimport useAppRuntimesContext from \"@hooks/useAppRuntimesContext\";\nimport useDesktopContext from \"@hooks/useDesktopContext\";\n\n// TODO: Incorporate this logic\n// \"The user can also click an app’s Dock icon to bring all of that app’s windows forward; the most recently accessed app window becomes the key window.\"\n// (Ref. \"Activating Windows\": https://developer.apple.com/design/human-interface-guidelines/macos/windows-and-views/window-anatomy/)\n\n// TODO: Document\nexport default function Dock() {\n  const { activeWindowController } = useDesktopContext();\n  const { runningRegistrations, bringToFrontOrStartAppRuntime } =\n    useAppRuntimesContext();\n  const { appRegistrations } = useAppRegistrationsContext();\n\n  // TODO: Import type definition\n  /** @type {AppRegistration[]} */\n  const dockRegistrations = useMemo(\n    () => [\n      ...new Set([\n        ...appRegistrations.filter(registration =>\n          registration.getIsPinnedToDock()\n        ),\n        ...runningRegistrations,\n      ]),\n    ],\n    [appRegistrations, runningRegistrations]\n  );\n\n  // TODO: Import type definition\n  /** @type {AppRegistration | void} */\n  const activeRegistration = useMemo(\n    () => activeWindowController?.getAppRegistration(),\n    [activeWindowController]\n  );\n\n  return (\n    <div\n      // TODO: Move to module.css\n      style={{\n        position: \"absolute\",\n        bottom: 0,\n        left: 0,\n        width: \"100%\",\n        textAlign: \"center\",\n        isolation: \"isolate\",\n        // TODO: Handle different?\n        zIndex: 99999999,\n      }}\n    >\n      {\n        // TODO: Add tooltip functionality\n        // - https://www.npmjs.com/package/rc-tooltip\n        // - https://www.npmjs.com/package/react-tooltip\n        // - Note: Original Shell's Antd theme used rc-tooltip as the base (https://github.com/zenOSmosis/js-shell/blob/master/frontend/src/components/Desktop/Dock/DockItem.jsx)\n        //\n        // TODO: Add button menu\n        // - See original Shell implementation: https://github.com/zenOSmosis/js-shell/blob/master/frontend/src/components/Desktop/Dock/DockItem.jsx\n      }\n      <div\n        style={{\n          display: \"inline-block\",\n          color: \"black\",\n          whiteSpace: \"nowrap\",\n          maxWidth: \"100%\",\n          overflowX: \"auto\",\n        }}\n        className=\"button-group\"\n      >\n        {dockRegistrations.map(registration => (\n          <button\n            style={\n              registration === activeRegistration\n                ? {\n                    backgroundColor: \"rgba(38, 157, 255, .8)\",\n                    color: \"#000\",\n                  }\n                : { backgroundColor: \"#000\" }\n            }\n            key={registration.getUUID()}\n            onClick={() => bringToFrontOrStartAppRuntime(registration)}\n          >\n            {registration.getTitle()} {/* <LED color=\"gray\" /> */}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./AutoScaler.module.css\";\n\n/**\n * Fix issue on iOS 13 where ResizeObserver isn't available.\n */\nimport { install } from \"resize-observer\";\nif (!window.ResizeObserver) {\n  install();\n}\n\n/**\n * Automatically applies CSS transform scaling to children to fill parent node,\n * while preserving aspect ratio.\n *\n * Useful for videos and canvases, where the resolution is a fixed size and\n * should not change.\n */\nexport default function AutoScaler({ children, className, ...rest }) {\n  const [elOuterWrap, setElOuterWrap] = useState(null);\n  const [elInnerWrap, setElInnerWrap] = useState(null);\n\n  // Handle scaling\n  useEffect(() => {\n    if (elOuterWrap && elInnerWrap) {\n      let outerWrapSize = {\n        width: 0,\n        height: 0,\n      };\n      let innerWrapSize = {\n        width: 0,\n        height: 0,\n      };\n\n      // This is uesd w/ visibility below to try to reduce position defects\n      // when first rendering\n      elInnerWrap.style.visibility = \"hidden\";\n\n      const ro = new ResizeObserver(entries => {\n        requestAnimationFrame(() => {\n          for (const entry of entries) {\n            const size = {\n              width: entry.target.offsetWidth,\n              height: entry.target.offsetHeight,\n            };\n\n            if (entry.target === elOuterWrap) {\n              outerWrapSize = size;\n            } else {\n              innerWrapSize = size;\n            }\n          }\n\n          // Determine against all available space\n          const maxScaleX = outerWrapSize.width / innerWrapSize.width;\n          const maxScaleY = outerWrapSize.height / innerWrapSize.height;\n\n          const scale = Math.min(maxScaleX, maxScaleY);\n\n          elInnerWrap.style.transform = `scale(${scale}, ${scale})`;\n\n          if (elInnerWrap.style.visibility === \"hidden\") {\n            setTimeout(() => {\n              elInnerWrap.style.visibility = \"visible\";\n            }, 4);\n          }\n        });\n      });\n\n      ro.observe(elOuterWrap);\n      ro.observe(elInnerWrap);\n\n      return function unmount() {\n        ro.unobserve(elOuterWrap);\n        ro.unobserve(elInnerWrap);\n      };\n    }\n  }, [elOuterWrap, elInnerWrap]);\n\n  return (\n    <div\n      {...rest}\n      ref={setElOuterWrap}\n      className={classNames(styles[\"auto-scaler\"], className)}\n    >\n      <div ref={setElInnerWrap} className={styles[\"content-wrap\"]}>\n        {children}\n      </div>\n    </div>\n  );\n}\n","import AutoScaler from \"./AutoScaler\";\n\nexport default AutoScaler;\n","// @see https://szhsin.github.io/react-menu/#basic-menu\nimport {\n  Menu as LibMenu,\n  MenuItem,\n  MenuButton,\n  MenuHeader,\n  MenuDivider,\n  SubMenu as LibSubMenu,\n  applyHOC,\n  applyStatics,\n} from \"@szhsin/react-menu\";\nimport \"@szhsin/react-menu/dist/index.css\";\nimport \"@szhsin/react-menu/dist/transitions/slide.css\";\nimport \"./Menu.css\";\n\n// TODO: Close menu when screen size changes (menu can go offscreen)\n\nconst COMMON_PROPS = {\n  // Enable menu items to overflow in case they overextend the viewport\n  overflow: \"auto\",\n};\n\nconst Menu = applyHOC(function Menu({ ...rest }) {\n  return <LibMenu {...rest} portal={true} {...COMMON_PROPS} />;\n}, LibMenu);\n\nconst SubMenu = applyStatics(LibSubMenu)(function SubMenu({ ...rest }) {\n  return <LibSubMenu {...rest} {...COMMON_PROPS} />;\n});\n\n// TODO: Apply HOC and adjust styling as necessary (overflow=\"auto\" prop works\n// on Menu & SubMenu outside of styling)\n// @see https://szhsin.github.io/react-menu/#styles-prop for managing menu\n// styles (maybe not necessary to override CSS manually)\n// @see [HOC example] https://codesandbox.io/s/0bipn\n\n// TODO: Implement keyboard accessibility across menu bar: https://szhsin.github.io/react-menu/docs#keyboard\n\n// Controlled menu: https://szhsin.github.io/react-menu/docs#controlled-menu\n// (look into unmountOnClose and using it for dynamic opening / closing of\n// menus when mouse scrolls over menu buttons in menu bar)\n\n// useMenuStateHook: https://szhsin.github.io/react-menu/docs#use-menu-state\n\nexport default Menu;\nexport { MenuItem, MenuButton, MenuHeader, MenuDivider, SubMenu };\n","import Animation from \"./Animation\";\n\nexport default Animation;\n","import React, { useMemo, useState } from \"react\";\nimport usePreload from \"@hooks/usePreload\";\nimport useAnimation from \"@hooks/useAnimation\";\nimport classNames from \"classnames\";\nimport styles from \"./Animation.module.css\";\n\nexport default function Animation({\n  className,\n  children,\n\n  // TODO: Rename to effect name\n  animationName,\n  animationDuration,\n  animationDelay,\n\n  animationEngine = \"animate.css\",\n  preloadResources = [],\n  onAnimationEnd = () => null,\n  tag = \"div\",\n  inline = false,\n\n  disabled = false,\n  ...rest\n}) {\n  const [domElement, _setDomElement] = useState(null);\n\n  const { isPreloaded } = usePreload(preloadResources);\n\n  useAnimation({\n    domElement,\n    animationName,\n    animationDuration,\n    animationDelay,\n    animationEngine,\n    onAnimationEnd,\n\n    // NOTE (jh): I don't really like this, but the alternative is putting\n    // isDisabled property on <Animation disabled /> and I don't like that\n    // either\n    isDisabled: disabled,\n  });\n\n  const View = useMemo(() => tag, [tag]);\n\n  if (!isPreloaded) {\n    return null;\n  }\n\n  return (\n    <View\n      {...rest}\n      ref={_setDomElement}\n      className={classNames(\n        styles[\"animation\"],\n        inline ? styles[\"inline\"] : null,\n        className\n      )}\n    >\n      {children}\n    </View>\n  );\n}\n","import { useEffect, useRef, useState } from \"react\";\nimport Preload from \"preload-it\";\n\n/**\n * Pre-loads resources, as a React hook.\n *\n * @param {string[]} resources An array of URLs to preload. Note that these are\n * cached and the list cannot be changed without re-instantiating the hook.\n * @return {Object}\n */\nexport default function usePreload(resources) {\n  const [isPreloaded, _setIsPreloaded] = useState(false);\n  const [progress, _setProgress] = useState(0);\n\n  // Cache the resources; This fixes an issue where passing in a non-memoized\n  // array could cause the following useEffect to trigger more than once.\n  //\n  // Issue was discovered when images would preload multiple times in Firefox.\n  const refResources = useRef(resources);\n\n  useEffect(() => {\n    const resources = refResources;\n\n    if (resources.length) {\n      const preload = new Preload();\n\n      preload.onprogress = evt => {\n        _setProgress(evt.progress);\n      };\n\n      preload.oncomplete = (/* items */) => {\n        _setIsPreloaded(true);\n      };\n\n      preload.fetch(resources);\n    } else {\n      _setIsPreloaded(true);\n      _setProgress(100);\n    }\n  }, []);\n\n  return {\n    isPreloaded,\n    progress,\n  };\n}\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./ButtonTransparent.module.css\";\n\n// TODO: Rename to ButtonUnstyled?\nfunction ButtonTransparent({ children, className, ...rest }) {\n  return (\n    <button\n      className={classNames(styles[\"button-transparent\"], className)}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport default ButtonTransparent;\n","import ButtonTransparent from './ButtonTransparent';\n\nexport default ButtonTransparent;","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport Animation from \"../Animation\";\nimport ButtonTransparent from \"../ButtonTransparent\";\n\nimport styles from \"./Notification.module.css\";\n\n// TODO: Add PropTypes\n// TODO: Document\nexport default function Notification({\n  body,\n  image,\n  title,\n  uuid,\n  onClose,\n  onClick,\n  // In milliseconds\n  autoCloseTime = 4000,\n  ...rest\n}) {\n  // TODO: Should this state be managed from the outside?\n  const [isClosing, setIsClosing] = useState(false);\n\n  // IMPORTANT: refOnClose is memoized to fix an issue where generating new\n  // notifications would restart the internal timer\n  const refOnClose = useRef(onClose);\n  const handleClose = useCallback(\n    (evt) => {\n      if (evt) {\n        evt.stopPropagation();\n      }\n\n      setIsClosing(true);\n\n      // NOTE (jh): We could also listen for Animation ended event, but decided\n      // to do the easy route at first.\n      setTimeout(\n        () => {\n          refOnClose.current(uuid);\n        },\n        // TODO: Make this value dynamic?\n        500\n      );\n    },\n    [uuid]\n  );\n\n  const [el, setEl] = useState(null);\n\n  // TODO: Document\n  useEffect(() => {\n    if (el) {\n      let autoCloseTimeout = null;\n\n      const startTimeout = () => {\n        autoCloseTimeout = setTimeout(handleClose, autoCloseTime);\n      };\n\n      startTimeout();\n\n      const stopTimeout = () => {\n        clearInterval(autoCloseTimeout);\n      };\n\n      el.addEventListener(\"mouseover\", stopTimeout, { passive: true });\n      el.addEventListener(\"mouseout\", startTimeout, { passive: true });\n      el.addEventListener(\"touchstart\", stopTimeout, { passive: true });\n\n      return function unmount() {\n        el.removeEventListener(\"mouseover\", stopTimeout, { passive: true });\n        el.removeEventListener(\"mouseout\", startTimeout, { passive: true });\n        el.removeEventListener(\"touchstart\", stopTimeout, { passive: true });\n\n        stopTimeout();\n      };\n    }\n  }, [el, autoCloseTime, handleClose]);\n\n  // TODO: Refactor into Image component?\n  const Image = useMemo(\n    () => () => {\n      switch (typeof image) {\n        case \"string\":\n          return (\n            <img alt={title} src={image} className={styles[\"main-image\"]} />\n          );\n\n        case \"function\":\n          return image();\n\n        default:\n          return image || null;\n      }\n    },\n    [image, title]\n  );\n\n  /**\n   * Note: Exports a button only if an onClick handler has been defined for\n   * the notification.\n   */\n  const MessageButton = useMemo(\n    () =>\n      ({ ...rest }) =>\n        typeof onClick === \"function\" ? (\n          <ButtonTransparent\n            {...rest}\n            onClick={onClick}\n            className={styles[\"main-button\"]}\n          />\n        ) : (\n          <React.Fragment {...rest} />\n        ),\n    [onClick]\n  );\n\n  return (\n    <div\n      ref={setEl}\n      onTouchEnd={handleClose}\n      onMouseUp={handleClose}\n      className={styles[\"notification\"]}\n      {...rest}\n    >\n      <Animation\n        animationName={!isClosing ? \"slideInRight\" : \"slideOutRight\"}\n        animationDuration=\".5s\"\n      >\n        <div className={styles[\"body-outer-wrap\"]}>\n          <MessageButton>\n            <div className={styles[\"body-inner-wrap\"]}>\n              <div className={styles[\"title\"]}>{title}</div>\n\n              <div className={styles[\"main-image-wrap\"]}>\n                <Image />\n              </div>\n\n              <div className={styles[\"body\"]}>{body}</div>\n            </div>\n          </MessageButton>\n          <ButtonTransparent\n            onClick={handleClose}\n            className={styles[\"close-button\"]}\n          >\n            X\n          </ButtonTransparent>\n        </div>\n      </Animation>\n    </div>\n  );\n}\n","import NotificationsStack from \"./NotificationsStack\";\n\nexport default NotificationsStack;\n","import React from \"react\";\n\nimport styles from \"./NotificationsStack.module.css\";\n\nimport Notification from \"../Notification\";\n\n// TODO: Document\n// Handles multiple-rendered notifications\nexport default function NotificationsStack({\n  notifications = [],\n  onNotificationClose,\n}) {\n  return (\n    <div className={styles[\"notifications-stack\"]}>\n      {\n        // NOTE: The inner-wrap enables too many UI notifications to be\n        // scrollable\n      }\n      <div className={styles[\"inner-wrap\"]}>\n        {\n          // IMPORTANT: onClose is not mapped from the data object because it is\n          // handled internally by the provider\n          notifications.map(({ body, image, onClick, title, uuid }) => {\n            return (\n              <div key={uuid}>\n                <Notification\n                  body={body}\n                  image={image}\n                  onClick={onClick}\n                  title={title}\n                  uuid={uuid}\n                  onClose={() => onNotificationClose(uuid)}\n                />\n              </div>\n            );\n          })\n        }\n      </div>\n    </div>\n  );\n}\n","import React, { useCallback, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport { NotificationsStack } from \"@components/Notification\";\n\nexport const NotificationsContext = React.createContext({});\n\n// TODO: Document\n// TODO: Borrow API logic from https://www.npmjs.com/package/react-notifications\nexport default function NotificationsProvider({ children }) {\n  const [activeNotificationsStack, setActiveNotificationsStack] = useState([]);\n\n  // TODO: Document\n  // TODO: Borrow API from Apple: // TODO: Borrow API from Apple: https://developer.apple.com/library/archive/documentation/LanguagesUtilities/Conceptual/MacAutomationScriptingGuide/DisplayNotifications.html#//apple_ref/doc/uid/TP40016239-CH61-SW1\n  const showNotification = useCallback(\n    ({ image, title, body, onClick, onClose = () => null }) => {\n      setActiveNotificationsStack(\n        // Add new notifications to end of stack\n        prev => [\n          ...prev,\n          { image, title, body, uuid: uuidv4(), onClick, onClose },\n        ]\n      );\n    },\n    []\n  );\n\n  // TODO: Document\n  const handleNotificationClose = useCallback(uuid => {\n    setActiveNotificationsStack(prev =>\n      prev.filter(({ uuid: prevUUID, onClose }) => {\n        const isKept = uuid !== prevUUID;\n\n        if (!isKept) {\n          // Call the onClose handler passed to showNotification\n          onClose();\n        }\n\n        return isKept;\n      })\n    );\n  }, []);\n\n  return (\n    <NotificationsContext.Provider\n      value={{\n        showNotification,\n      }}\n    >\n      {children}\n\n      <NotificationsStack\n        notifications={activeNotificationsStack}\n        onNotificationClose={handleNotificationClose}\n      />\n    </NotificationsContext.Provider>\n  );\n}\n","import Desktop from \"./Desktop\";\n\nexport default Desktop;\n","import WindowManager from \"../WindowManager\";\nimport Cover from \"../Cover\";\nimport Layout, { Header, Content, Row, Column } from \"../Layout\";\nimport LED from \"../LED\";\nimport Dock from \"../Dock\";\nimport AutoScaler from \"../AutoScaler\";\n\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport ReShellCore from \"@core\";\n\n// TODO: Change this to use data-driven Menubar\nimport Menu, {\n  MenuButton,\n  MenuItem,\n  MenuHeader,\n  MenuDivider,\n  SubMenu,\n} from \"../_Menu.LibWrapper\";\n\nimport useDesktopContext from \"@hooks/useDesktopContext\";\nimport useServicesContext from \"@hooks/useServicesContext\";\nimport useAppRegistrationsContext from \"@hooks/useAppRegistrationsContext\";\nimport useAppRuntimesContext from \"@hooks/useAppRuntimesContext\";\nimport NotificationsProvider from \"./providers/NotificationsProvider\";\n\n// import { useEffect } from \"react\";\n\n// TODO: Implement top menu-bar\n// @see https://headlessui.dev/react/menu\n// or (better?) https://szhsin.github.io/react-menu\n\n// TODO: Implement context menu\n// @see https://szhsin.github.io/react-menu/#context-menu\n\n// TODO: Backgrounds?\n// @see https://coolbackgrounds.io (particles: https://github.com/marcbruederlin/particles.js)\n// @see [Unsplash 3D renders] https://unsplash.com/blog/unsplash-library-now-accepts-3d-renders/?utm_source=vero&utm_medium=email&utm_content=control&utm_campaign=Unsplash%20Awards%20Announcement&utm_term=Newsletter&vero_id=6421463&vero_conv=PmNPLiUVlfrNjJJhv6nsCKDC_PNDDxf0FWY02n1x7jyPWwq0KgHl-nQmk0Pq6aTzRvvwjcixMGRPZlAmMwIqQz72F0DGURijjA%3D%3D\n\n// TODO: Use prop-types\nexport default function Desktop({\n  backgroundView = <div style={{ backgroundColor: \"#ccc\" }} />,\n  appDescriptors,\n}) {\n  const { services } = useServicesContext();\n  const { activeWindowController /* addBackgroundAsset */ } =\n    useDesktopContext();\n  const { appRegistrations } = useAppRegistrationsContext();\n  const { bringToFrontOrStartAppRuntime, appRuntimes } =\n    useAppRuntimesContext();\n\n  // TODO: Implement after PhantomWrapper (or equiv.; assets need to be wrapped in\n  // PhantomCore instances in order to be added to background collection)\n  /*\n  useEffect(() => {\n    if (backgroundView) {\n      addBackgroundAsset(backgroundView);\n    }\n  }, [backgroundView, addBackgroundAsset]);\n  */\n\n  return (\n    // NOTE: Typically this would take up the entire viewport\n    <Router>\n      {\n        // IMPORTANT: Using NotificationsProvider directly on the BaseView does\n        // not apply CSS module styling\n      }\n      <NotificationsProvider>\n        <Cover>\n          {\n            // TODO: Refactor\n          }\n          {backgroundView}\n        </Cover>\n        <Cover>\n          <Layout>\n            <Header\n              style={{\n                // borderBottom: \"1px #ccc solid\",\n                whiteSpace: \"nowrap\",\n                backgroundColor: \"rgba(0,0,0,.5)\",\n              }}\n            >\n              <Row>\n                <Column style={{ width: \"100%\" }}>\n                  {\n                    // TODO: Replace menu with data-driven Menubar component\n                  }\n                  <div>\n                    <Menu\n                      menuButton={\n                        <MenuButton>\n                          {\n                            // TODO: Make this string configurable\n                          }\n                          Desktop\n                        </MenuButton>\n                      }\n                    >\n                      {\n                        // TODO: Show divider\n                      }\n                      <SubMenu label=\"Applications\">\n                        {appRegistrations\n                          .sort((a, b) => {\n                            const aTitle = a.getTitle();\n                            const bTitle = b.getTitle();\n\n                            if (aTitle < bTitle) {\n                              return -1;\n                            } else if (bTitle > aTitle) {\n                              return 1;\n                            } else {\n                              return 0;\n                            }\n                          })\n                          .map(app => (\n                            <MenuItem\n                              key={app.getUUID()}\n                              onClick={() => bringToFrontOrStartAppRuntime(app)}\n                            >\n                              {app.getTitle()}\n                            </MenuItem>\n                          ))}\n                      </SubMenu>\n                      {\n                        // TODO: Include LED to show state of application (i.e. \"green\" for \"open\" / \"gray\" for \"close\")\n                      }\n                      {appRegistrations\n                        .filter(app => app.getIsPinned())\n                        .map(app => (\n                          <MenuItem\n                            key={app.getUUID()}\n                            onClick={() => bringToFrontOrStartAppRuntime(app)}\n                          >\n                            {app.getTitle()}\n                          </MenuItem>\n                        ))}\n                      <MenuDivider />\n                      <MenuHeader>Global Window Management</MenuHeader>\n                      <MenuItem\n                        // TODO: Refactor\n                        onClick={() =>\n                          appRuntimes.forEach(runtime => {\n                            const windowController =\n                              runtime.getWindowController();\n\n                            if (windowController) {\n                              windowController.scatter();\n                            }\n                          })\n                        }\n                      >\n                        Scatter Windows\n                      </MenuItem>\n                      <MenuItem\n                        // TODO: Refactor\n                        onClick={() =>\n                          appRuntimes.forEach(runtime => {\n                            const windowController =\n                              runtime.getWindowController();\n\n                            if (windowController) {\n                              windowController.center();\n                            }\n                          })\n                        }\n                      >\n                        Center Windows\n                      </MenuItem>\n                      <MenuDivider />\n                      <MenuHeader>Desktop Operations</MenuHeader>\n                      <MenuItem\n                        onClick={() =>\n                          window.confirm(\n                            \"Are you sure you wish to close the desktop?\"\n                          ) && ReShellCore.destroy()\n                        }\n                      >\n                        Close\n                      </MenuItem>\n                      <MenuItem\n                        onClick={() =>\n                          window.confirm(\"Are you sure you wish to reload?\") &&\n                          ReShellCore.reload()\n                        }\n                      >\n                        Reload\n                      </MenuItem>\n                    </Menu>\n                    {activeWindowController && (\n                      <>\n                        {\n                          // TODO: Implement quadrant snapping here\n                        }\n                        <Menu\n                          portal={true}\n                          menuButton={\n                            <MenuButton>\n                              <span style={{ fontWeight: \"bold\" }}>\n                                {activeWindowController.getTitle()}\n                              </span>\n                            </MenuButton>\n                          }\n                        >\n                          <MenuItem\n                            onClick={() => activeWindowController.destroy()}\n                          >\n                            Close\n                          </MenuItem>\n                        </Menu>\n                        <Menu\n                          portal={true}\n                          menuButton={<MenuButton>Window</MenuButton>}\n                        >\n                          {\n                            // TODO: Refresh items when activeWindowController updates\n                          }\n                          <MenuItem\n                            onClick={() =>\n                              activeWindowController.setIsMinimized(true)\n                            }\n                            // disabled={activeWindowController?.getIsMinimized()}\n                          >\n                            Minimize\n                          </MenuItem>\n                          <MenuItem\n                            onClick={() =>\n                              activeWindowController.setIsMaximized(true)\n                            }\n                            // disabled={activeWindowController?.getIsMaximized()}\n                          >\n                            Maximize\n                          </MenuItem>\n                          <MenuItem\n                            onClick={() => activeWindowController.restore()}\n                            // disabled={}\n                          >\n                            Restore\n                          </MenuItem>\n                          <MenuDivider />\n                          <MenuItem\n                            onClick={() => activeWindowController.center()}\n                          >\n                            Center\n                          </MenuItem>\n                          <MenuItem\n                            onClick={() => activeWindowController.scatter()}\n                          >\n                            Scatter\n                          </MenuItem>\n                        </Menu>\n                      </>\n                    )}\n                  </div>\n                </Column>\n                <Column\n                  style={{\n                    // TODO: Rework so column width expands according to content\n                    maxWidth: 110,\n                  }}\n                >\n                  <div style={{ textAlign: \"right\" }}>\n                    <Menu\n                      portal={true}\n                      menuButton={\n                        <MenuButton>\n                          Service Core{\" \"}\n                          <LED color={services.length > 0 ? \"green\" : \"gray\"} />\n                        </MenuButton>\n                      }\n                    >\n                      {services.length === 0 ? (\n                        <MenuItem>\n                          <span style={{ fontStyle: \"italic\" }}>\n                            No running services\n                          </span>\n                        </MenuItem>\n                      ) : (\n                        services.map(service => (\n                          <MenuItem\n                            key={service.getUUID()}\n                            onClick={() => alert(\"TODO: Implement\")}\n                          >\n                            {service.getTitle()}\n                          </MenuItem>\n                        ))\n                      )}\n                    </Menu>\n                  </div>\n                </Column>\n              </Row>\n            </Header>\n            <Content>\n              {\n                // TODO: Allow videos to play on background\n              }\n\n              {\n                // TODO: Refactor into a version component\n              }\n              <div\n                style={{\n                  maxWidth: \"50%\",\n                  position: \"absolute\",\n                  bottom: 28,\n                  right: 10,\n                  color: \"rgba(255,255,255,.2)\",\n                  fontSize: \"2rem\",\n                }}\n              >\n                {\n                  // TODO: Read from package.json\n                  // @see https://stackoverflow.com/questions/48609931/how-can-i-reference-package-version-in-npm-script/48619640\n                  // (i.e. REACT_APP_VERSION=$npm_package_version)\n                  //\n                  // TODO: If wanting to overlay completely on top of all other windows, and ignore mouse, etc:\n                  // use CSS [pointer-events: none]\n                }\n                <AutoScaler style={{ whiteSpace: \"nowrap\" }}>\n                  <div style={{ textAlign: \"left\", fontSize: \".7em\" }}>\n                    <div>ReShell 0.0.1-alpha</div>\n                    <div>Portal: {ReShellCore.getPortalName()}</div>\n                    <div>Env: {process.env.NODE_ENV}</div>\n                  </div>\n                </AutoScaler>\n              </div>\n              <WindowManager appDescriptors={appDescriptors}>\n                <Dock />\n              </WindowManager>\n            </Content>\n          </Layout>\n        </Cover>\n      </NotificationsProvider>\n    </Router>\n  );\n}\n","import Padding from \"./Padding\";\n\nexport default Padding;\n","import { useEffect, useState } from \"react\";\n\nimport styles from \"./Padding.module.css\";\nimport classNames from \"classnames\";\n\nexport default function Padding({ children, className, ...rest }) {\n  const [el, setEl] = useState(null);\n  const [hasSiblings, setHasSiblings] = useState(false);\n\n  // Auto-determine if the element has siblings\n  useEffect(() => {\n    if (el) {\n      const hasSiblings = Boolean([...el.parentNode.children].length > 1);\n\n      setHasSiblings(hasSiblings);\n    }\n  }, [el]);\n\n  return (\n    <div\n      {...rest}\n      ref={setEl}\n      className={classNames(\n        styles[\"padding\"],\n        !hasSiblings && styles[\"no-siblings\"],\n        className\n      )}\n    >\n      {children}\n    </div>\n  );\n}\n","import VirtualLink from \"./VirtualLink\";\n\nexport default VirtualLink;\n","import ButtonTransparent from \"../ButtonTransparent\";\n\nimport styles from \"./VirtualLink.module.css\";\nimport classNames from \"classnames\";\n\n/**\n * NOTE: Fake links need to be a button, so this button is designed to look\n * like a real link, for the most part.\n */\nexport default function VirtualLink({ children, className, onClick, ...rest }) {\n  return (\n    <ButtonTransparent\n      {...rest}\n      // IMPORTANT: The seemingly double link styles are placed on purpose (one\n      // is the normal CSS, and the other is the module.css override)\n      className={classNames(\"link\", styles[\"virtual-link\"], className)}\n      onClick={onClick}\n    >\n      {children}\n    </ButtonTransparent>\n  );\n}\n","import { useCallback, useEffect, useRef, useState } from \"react\";\n\n/**\n * Fix issue on iOS 13 where ResizeObserver isn't available.\n */\nimport { install } from \"resize-observer\";\nif (!window.ResizeObserver) {\n  install();\n}\n\n/**\n * Determines if the given element is overflowing its container.\n *\n * Note: Some ideas were taken from these links, however the final solution\n * was not found within.\n * @see https://stackoverflow.com/questions/9333379/check-if-an-elements-content-is-overflowing\n * @see https://github.com/wojtekmaj/detect-element-overflow/blob/main/src/index.js\n *\n * @param {HTMLElement} element\n * @param {Object} isDetecting? [optional; default = true] Whether or not the\n * hook should detect overflow.\n * @return {boolean}\n */\nexport default function useOverflowDetection(element, isDetecting = true) {\n  const refPrevIsOverflown = useRef(null);\n\n  /**\n   * @return {boolean} Whether or not the element is overflowing its parent.\n   */\n  const getIsOverflown = useCallback(() => {\n    if (element) {\n      // Height / width of the inner element, including padding and borders\n      // @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight\n      const innerOffsetHeight = element.offsetHeight;\n      const innerOffsetWidth = element.offsetWidth;\n\n      const parentNode = element.parentNode;\n\n      // Height / width of the outer element, including padding but excluding\n      // borders, margins, and scrollbars\n      // @see https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight\n      const outerHeight = parentNode?.clientHeight;\n      const outerWidth = parentNode?.clientWidth;\n\n      if (outerHeight < innerOffsetHeight || outerWidth < innerOffsetWidth) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }, [element]);\n\n  const [isOverflown, setIsOverflown] = useState(() => getIsOverflown());\n\n  refPrevIsOverflown.current = isOverflown;\n\n  useEffect(() => {\n    if (isDetecting && element) {\n      let _isUnmounting = false;\n\n      /**\n       * Handles checking of overflown, comparing it with previous state, and\n       * determining if the hook state should be updated.\n       *\n       * Sets hook state once detection has been performed.\n       *\n       * @return {void}\n       */\n      const checkIsOverflown = () => {\n        if (_isUnmounting) {\n          return;\n        }\n\n        const prevIsOverflown = refPrevIsOverflown.current;\n\n        const nextIsOverflown = getIsOverflown();\n\n        if (prevIsOverflown !== nextIsOverflown) {\n          setIsOverflown(nextIsOverflown);\n        }\n      };\n\n      const ro = new ResizeObserver((/* entries */) => {\n        /**\n         * IMPORTANT: requestAnimationFrame is used here to prevent possible\n         * \"resize-observer loop limit exceeded error.\"\n         *\n         * \"This error means that ResizeObserver was not able to deliver all\n         * observations within a single animation frame. It is benign (your site\n         * will not break).\"\n         *\n         * @see https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded\n         */\n        window.requestAnimationFrame(checkIsOverflown);\n      });\n\n      ro.observe(element);\n      ro.observe(element.parentNode);\n\n      /*\n      const mo = new MutationObserver(() => {\n        window.requestAnimationFrame(checkIsOverflown);\n      });\n      */\n\n      // FIXME: (jh) Re-enable?\n      /*\n      mo.observe(element, {\n        childList: true,\n        subtree: true,\n      });\n      */\n\n      return function unmount() {\n        _isUnmounting = true;\n\n        ro.observe(element);\n        ro.unobserve(element.parentNode);\n        // mo.disconnect();\n      };\n    }\n  }, [isDetecting, element, getIsOverflown]);\n\n  return isOverflown;\n}\n","import Center from \"./Center\";\n\nexport default Center;\n","import React, { useState } from \"react\";\n\nimport classNames from \"classnames\";\nimport styles from \"./Center.module.css\";\n\nimport useOverflowDetection from \"@hooks/useOverflowDetection\";\n\nimport PropTypes from \"prop-types\";\n\nCenter.propTypes = {\n  /**\n   * Whether or not content can overflow when the Center content overflows it\n   * outer wrapper.\n   */\n  canOverflow: PropTypes.bool,\n};\n\nexport default function Center({\n  children,\n  className,\n  canOverflow = false,\n  ...rest\n}) {\n  const [innerEl, setInnerEl] = useState(null);\n\n  const isOverflown = useOverflowDetection(innerEl, canOverflow);\n\n  return (\n    <div\n      className={classNames(\n        styles[\"center\"],\n        canOverflow && isOverflown && styles[\"overflown\"],\n        className\n      )}\n    >\n      <div ref={setInnerEl} {...rest} className={styles[\"inner-wrap\"]}>\n        {children}\n      </div>\n    </div>\n  );\n}\n","/**\n * Consumes a variable without using it.\n *\n * @param {any} obj\n * @return {null}\n */\nexport default function consume(obj) {\n  return Boolean(obj) ? null : null;\n}\n","import { useMemo } from \"react\";\nimport Center from \"@components/Center\";\nimport LED from \"@components/LED\";\nimport Padding from \"@components/Padding\";\n\nimport useAppRegistrationsContext from \"@hooks/useAppRegistrationsContext\";\nimport useAppRuntimesContext from \"@hooks/useAppRuntimesContext\";\n\nimport consume from \"@utils/consume\";\n\nexport default function ApplicationSelector({\n  searchQuery = \"\",\n  onResetSearchQuery,\n}) {\n  const { appRegistrations } = useAppRegistrationsContext();\n  const { appRuntimes, startAppRuntime } = useAppRuntimesContext();\n\n  const appRuntimeRegistrations = useMemo(\n    () => appRuntimes.map(runtime => runtime.getRegistration()),\n    [appRuntimes]\n  );\n\n  // TODO: Move application search into a service and implement keyword-based\n  // searching, other criteria\n  const filteredRegistrations = useMemo(\n    () =>\n      appRegistrations.filter(registration =>\n        !Boolean(searchQuery)\n          ? true\n          : registration\n              .getTitle()\n              .toUpperCase()\n              .includes(searchQuery.toUpperCase())\n      ),\n    [appRegistrations, searchQuery]\n  );\n\n  if (searchQuery?.length && !filteredRegistrations.length) {\n    return (\n      <Center>\n        <Padding style={{ fontWeight: \"bold\" }}>\n          No applications found for search.\n        </Padding>\n        <Padding>\n          <button onClick={onResetSearchQuery}>Reset Search Query</button>\n        </Padding>\n      </Center>\n    );\n  }\n\n  return (\n    <Center canOverflow={true}>\n      <Padding>\n        {filteredRegistrations.map(registration => {\n          // const isRunning = appRuntimeRegistrations.includes(registration);\n          const totalInstances = appRuntimeRegistrations.filter(\n            predicate => predicate === registration\n          ).length;\n\n          return (\n            <button\n              key={registration.getUUID()}\n              // TODO: Extract to module.css\n              style={{\n                width: 100,\n                height: 100,\n                overflow: \"hidden\",\n                backgroundColor: \"transparent\",\n                borderColor: totalInstances > 0 ? \"green\" : \"\",\n              }}\n              onClick={() => startAppRuntime(registration)}\n            >\n              {registration.getTitle()}\n              <div style={{ position: \"absolute\", bottom: 0, right: 0 }}>\n                {[...new Array(totalInstances)].map((nonUsed, idx) => {\n                  consume(nonUsed);\n\n                  return (\n                    <LED\n                      key={idx}\n                      color={totalInstances > 0 ? \"green\" : \"gray\"}\n                      // TODO: Extract to module.css\n                      style={{ margin: \"0px 2px\" }}\n                    />\n                  );\n                })}\n              </div>\n            </button>\n          );\n        })}\n      </Padding>\n    </Center>\n  );\n}\n","import Center from \"@components/Center\";\n\nimport ReShellCore from \"@core\";\n\nexport default function PortalSwitcher() {\n  return (\n    <Center canOverflow={true}>\n      {Object.entries(ReShellCore.getPortals()).map(([portalName]) => (\n        <button\n          key={portalName}\n          onClick={() => ReShellCore.switchToPortal(portalName)}\n        >\n          {portalName}\n        </button>\n      ))}\n    </Center>\n  );\n}\n","import ReShellCore from \"@core\";\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport Layout, { Content, Footer } from \"@components/Layout\";\nimport Padding from \"@components/Padding\";\nimport VirtualLink from \"@components/VirtualLink\";\n\nimport ApplicationSelector from \"./views/ApplicationSelector\";\nimport PortalSwitcher from \"./views/PortalSelector\";\n\nconst LEN_PORTALS = Object.keys(ReShellCore.getPortals()).length;\n\nconst DEFAULT_SEARCH_QUERY = \"\";\n\nconst Applications = {\n  id: \"applications\",\n  title: \"Applications\",\n  style: {\n    width: 640,\n    height: 400,\n  },\n  isAutoStart: true,\n  isPinnedToDock: true,\n  initialSharedState: {\n    searchQuery: DEFAULT_SEARCH_QUERY,\n  },\n  // TODO: Implement the ability to set control handlers which can be driven by the menu\n  /*\n  controlMethods: {\n    // [ROLE_WINDOW_MENU_SUBITEM]\n    setIsDisplayingPortals: ({...samePropsAsView, etc.}) => {\n    }\n  },\n  */\n  // TODO: Implement custom menu functionality\n  /**\n  menu: {\n    window: [\n      {\n        role: 'view-switch'\n        getIsShown: ({sharedState}) => !sharedState.isShowingApplications\n        title: 'Show Applications',\n        onClick: ({controlMethods}) => ...\n      },\n      {\n        role: 'view-switch'\n        getIsShown: ({sharedState}) => sharedState.isShowingApplications\n        title: 'Show Portals',\n        onClick: ({controlMethods}) => ...\n      },\n  ]\n  }\n  */\n  titleBarView: function TitleBarView({ sharedState, setSharedState }) {\n    const handleSetSearchQuery = useCallback(\n      evt => setSharedState({ searchQuery: evt.target.value }),\n      [setSharedState]\n    );\n\n    const handleDoubleClick = useCallback(\n      evt => {\n        // Prevent double-clicks from resizing the window if there is text in\n        // the search bar\n        if (Boolean(sharedState.searchQuery)) {\n          evt.stopPropagation();\n        }\n      },\n      [sharedState]\n    );\n\n    return (\n      <Padding>\n        {\n          // TODO: Automatically focus when window is activated (unless on mobile)\n          // TODO: Switch to Applications view on change\n        }\n        <input\n          placeholder=\"Search Applications\"\n          onChange={handleSetSearchQuery}\n          value={sharedState.searchQuery}\n          style={{ width: \"100%\" }}\n          onDoubleClick={handleDoubleClick}\n        />\n      </Padding>\n    );\n  },\n  view: function View({ windowController, sharedState, setSharedState }) {\n    const [isDisplayingPortals, setIsDisplayingPortals] = useState(false);\n\n    // Auto-switch window title depending on \"Applications\" or \"Portals\" mode\n    useEffect(() => {\n      windowController.setTitle(\n        !isDisplayingPortals ? \"Applications\" : \"Portals\"\n      );\n    }, [windowController, isDisplayingPortals]);\n\n    const searchQuery = sharedState?.searchQuery;\n\n    const handleResetSearchQuery = useCallback(\n      () => setSharedState({ searchQuery: DEFAULT_SEARCH_QUERY }),\n      [setSharedState]\n    );\n\n    return (\n      <Layout>\n        <Content>\n          {!isDisplayingPortals ? (\n            <ApplicationSelector\n              searchQuery={searchQuery}\n              onResetSearchQuery={handleResetSearchQuery}\n            />\n          ) : (\n            <PortalSwitcher />\n          )}\n        </Content>\n        {Boolean(LEN_PORTALS > 1) && (\n          <Footer>\n            <Padding>\n              <button onClick={() => setIsDisplayingPortals(prev => !prev)}>\n                {!isDisplayingPortals ? \"Portals\" : \"Applications\"}\n              </button>{\" \"}\n              <span className=\"note\">\n                {!isDisplayingPortals ? (\n                  <>\n                    Other applications may be available in{\" \"}\n                    <VirtualLink onClick={() => setIsDisplayingPortals(true)}>\n                      another portal\n                    </VirtualLink>\n                    .\n                  </>\n                ) : (\n                  <>\n                    Return to{\" \"}\n                    <VirtualLink onClick={() => setIsDisplayingPortals(false)}>\n                      application list\n                    </VirtualLink>\n                    .\n                  </>\n                )}\n              </span>\n            </Padding>\n          </Footer>\n        )}\n      </Layout>\n    );\n  },\n};\n\nexport default Applications;\n","import Applications from \"./Applications\";\n\nexport default Applications;\n","import Applications from \"../../ExamplePortal/apps/Applications\";\n\nconst ApplicationsOverride = {\n  ...Applications,\n  isAutoStart: false,\n};\n\nexport default ApplicationsOverride;\n","import Timer from \"./Timer\";\n\nexport default Timer;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport NoWrap from \"../NoWrap\";\n\nimport PropTypes from \"prop-types\";\n\nTimer.propTypes = {\n  onTick: PropTypes.func.isRequired,\n};\n\n// TODO: Document\nexport default function Timer({ onTick, className, ...rest }) {\n  const [seconds, _setSeconds] = useState(onTick());\n\n  const getSeconds = useCallback(() => {\n    const seconds = onTick();\n\n    return seconds;\n  }, [onTick]);\n\n  useEffect(() => {\n    const handleUpdate = () => _setSeconds(getSeconds());\n\n    // Perform initial render\n    handleUpdate();\n\n    const updateInterval = setInterval(handleUpdate, 1000);\n\n    return function unmount() {\n      clearInterval(updateInterval);\n    };\n  }, [getSeconds]);\n\n  return <NoWrap {...rest}>{getSecondsToHHMMSS(seconds)}</NoWrap>;\n}\n\n// TODO: Refactor\n/**\n * @see https://stackoverflow.com/questions/1322732/convert-seconds-to-hh-mm-ss-with-javascript\n *\n * @param {number} seconds\n * @return {string} hh:mm:ss format\n */\nfunction getSecondsToHHMMSS(secs) {\n  // Note: This version should handle seconds if length is longer than one day\n  return new Date((secs % (60 * 60 * 24)) * 1000).toISOString().substr(11, 8);\n}\n","import consume from \"@utils/consume\";\nimport { useEffect, useState } from \"react\";\nimport Timer from \"@components/Timer\";\nimport { EVT_RENDER_PROFILED } from \"@components/Window/classes/WindowController\";\nimport LED from \"@components/LED\";\n\nimport useDesktopContext from \"@hooks/useDesktopContext\";\n\nexport default function AppRuntimeTableRow({ appRuntime }) {\n  const { activeWindowController } = useDesktopContext();\n\n  const windowController = appRuntime.getWindowController();\n\n  const isTopMostWindowController =\n    !windowController || windowController === activeWindowController;\n\n  const [elProfilerPhase, setElProfilerPhase] = useState(null);\n  const [elProfilerActualDuration, setElProfilerActualDuration] =\n    useState(null);\n  const [elProfilerBaseDuration, setElProfilerBaseDuration] = useState(null);\n  const [elProfilerStartTime, setElProfilerStartTime] = useState(null);\n  const [elProfilerCommitTime, setElProfilerCommitTime] = useState(null);\n  const [elProfilerInteractions, setElProfilerInteractions] = useState(null);\n\n  useEffect(() => {\n    if (windowController && elProfilerPhase) {\n      // @see https://reactjs.org/docs/profiler.html\n      const handleRenderProfile = arrRenderProfile => {\n        // IMPORTANT: (jh) This was not cast to an Object because I'm not\n        // positive if that would induce a lot of extra overhead over time;\n        // React defines this as an array, so maybe it's best just leaving it\n        // the way it is\n        const [\n          id, // the \"id\" prop of the Profiler tree that has just committed\n          phase, // either \"mount\" (if the tree just mounted) or \"update\" (if it re-rendered)\n          actualDuration, // time spent rendering the committed update\n          baseDuration, // estimated time to render the entire subtree without memoization\n          startTime, // when React began rendering this update\n          commitTime, // when React committed this update\n          interactions, // the Set of interactions belonging to this update\n        ] = arrRenderProfile;\n\n        // We're not doing anything w/ id, but if we remove it from the array,\n        // the other variable names are out of sync\n        consume(id);\n\n        // We have to skip setting these as state or we'll run into an infinite loop\n        elProfilerPhase.innerHTML = phase;\n        elProfilerActualDuration.innerHTML =\n          parseFloat(actualDuration).toFixed(2);\n        elProfilerBaseDuration.innerHTML = parseFloat(baseDuration).toFixed(2);\n        elProfilerStartTime.innerHTML = parseFloat(startTime / 1000).toFixed(2);\n        elProfilerCommitTime.innerHTML = parseFloat(commitTime / 1000).toFixed(\n          2\n        );\n        elProfilerInteractions.innerHTML = Object.values(interactions).length;\n      };\n\n      windowController.on(EVT_RENDER_PROFILED, handleRenderProfile);\n\n      return function unmount() {\n        windowController.off(EVT_RENDER_PROFILED, handleRenderProfile);\n      };\n    }\n  }, [\n    windowController,\n    elProfilerPhase,\n    elProfilerActualDuration,\n    elProfilerBaseDuration,\n    elProfilerStartTime,\n    elProfilerCommitTime,\n    elProfilerInteractions,\n  ]);\n\n  return (\n    <>\n      <tr key={appRuntime.getUUID()} style={{ textAlign: \"center\" }}>\n        <td>{appRuntime.getTitle() || \"[Untitled]\"}</td>\n        <td style={{ backgroundColor: \"purple\" }}>\n          <span ref={setElProfilerPhase}>N/A</span>\n        </td>\n        <td style={{ backgroundColor: \"purple\" }}>\n          <span ref={setElProfilerActualDuration}>N/A</span>\n        </td>\n        <td style={{ backgroundColor: \"purple\" }}>\n          <span ref={setElProfilerBaseDuration}>N/A</span>\n        </td>\n        <td style={{ backgroundColor: \"purple\" }}>\n          <span ref={setElProfilerStartTime}>N/A</span>\n        </td>\n        <td style={{ backgroundColor: \"purple\" }}>\n          <span ref={setElProfilerCommitTime}>N/A</span>\n        </td>\n        <td style={{ backgroundColor: \"purple\" }}>\n          <span ref={setElProfilerInteractions}>N/A</span>\n        </td>\n      </tr>\n      <tr style={{ textAlign: \"center\" }}>\n        <td style={{ fontStyle: \"italic\" }}>\n          Uptime: <Timer onTick={() => appRuntime.getInstanceUptime()} />\n        </td>\n        <td colSpan=\"3\">\n          <button\n            // TODO: Implement alternate handling\n            onClick={() => console.log({ appRuntime })}\n            disabled\n          >\n            Process\n          </button>\n          <span> | </span>\n          <button\n            // TODO: Implement alternate handling\n            onClick={() =>\n              console.log({ environment: appRuntime.getEnvironment() })\n            }\n            disabled\n          >\n            Environment\n          </button>\n        </td>\n        <td>\n          <LED color={isTopMostWindowController ? \"green\" : \"gray\"} />\n        </td>\n        <td colSpan=\"2\">\n          <button\n            onClick={() => windowController.bringToTop()}\n            style={{ backgroundColor: \"blue\" }}\n            disabled={isTopMostWindowController}\n          >\n            Bring to Top\n          </button>\n          <span> | </span>\n          <button\n            onClick={() => appRuntime.destroy()}\n            style={{ backgroundColor: \"red\" }}\n          >\n            Close\n          </button>\n        </td>\n      </tr>\n      <tr>\n        <td colSpan=\"7\" style={{ backgroundColor: \"gray\", height: 4 }}></td>\n      </tr>\n    </>\n  );\n}\n","import AppRuntimeTableRow from \"./AppRuntime.Table.Row\";\n\n// TODO: Document\nexport default function AppRuntimeTable({ appRuntimes }) {\n  return (\n    <table style={{ width: \"100%\" }}>\n      <thead>\n        <tr>\n          <td rowSpan=\"2\">Name</td>\n          <td colSpan=\"6\" style={{ backgroundColor: \"purple\" }}>\n            Profiler\n          </td>\n          <td colSpan=\"2\"></td>\n        </tr>\n        <tr>\n          <td style={{ backgroundColor: \"purple\" }}>Phase</td>\n          <td style={{ backgroundColor: \"purple\" }}>\n            Actual\n            <br />\n            Duration\n          </td>\n          <td style={{ backgroundColor: \"purple\" }}>\n            Base\n            <br />\n            Duration\n          </td>\n          <td style={{ backgroundColor: \"purple\" }}>\n            Start\n            <br />\n            Time\n          </td>\n          <td style={{ backgroundColor: \"purple\" }}>\n            Commit\n            <br />\n            Time\n          </td>\n          <td style={{ backgroundColor: \"purple\" }}>Interactions</td>\n        </tr>\n      </thead>\n      <tbody>\n        {appRuntimes.map((runtime) => (\n          <AppRuntimeTableRow key={runtime.getUUID()} appRuntime={runtime} />\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import PhantomCore from \"phantom-core\";\n\nimport Padding from \"@components/Padding\";\nimport Layout, { Content, Footer } from \"@components/Layout\";\nimport AppRuntimeTable from \"./AppRuntime.Table\";\nimport Timer from \"@components/Timer\";\n\nimport useAppRuntimesContext from \"@hooks/useAppRuntimesContext\";\n\nconst ApplicationMonitor = {\n  id: \"application-monitor\",\n  title: \"Application Monitor\",\n  style: {\n    width: 640,\n    height: 480,\n  },\n  isPinned: true,\n  view: function View() {\n    const { appRuntimes } = useAppRuntimesContext();\n\n    // TODO: Determine if profiler is available in the current environment\n\n    // TODO: Group by registration\n    // TODO: Show attached services, per application\n    // TODO: Show last render time / frequency / graph?\n    // TODO: Implement ability to record render profile intervals, with the ability to show them in a graph (per application; use legend)\n    // TODO: Implement ability to show how linked services affect render profiles; capture in recordings\n    // TODO: Implement ability to do call stack tracing (only when recording)\n\n    return (\n      <Layout>\n        <Content>\n          <Padding style={{ overflowY: \"auto\" }}>\n            <AppRuntimeTable appRuntimes={appRuntimes} />\n          </Padding>\n        </Content>\n        <Footer style={{ fontSize: \".8rem\" }}>\n          <Padding>\n            Phantom Core uptime:{\" \"}\n            <Timer onTick={() => PhantomCore.getUptime()} />\n          </Padding>\n        </Footer>\n      </Layout>\n    );\n  },\n};\n\nexport default ApplicationMonitor;\n","import ApplicationMonitor from \"./ApplicationMonitor\";\n\nexport default ApplicationMonitor;\n","import ButtonPanel from \"./ButtonPanel\";\n\nexport default ButtonPanel;\n","import React, { useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\nButtonPanel.propTypes = {\n  buttons: PropTypes.arrayOf(\n    PropTypes.shape({\n      // TODO: Require to be React component (or any?)\n      // TODO: Rename to view, or label\n      content: PropTypes.any.isRequired,\n\n      onClick: PropTypes.func.isRequired,\n\n      disabled: PropTypes.bool,\n\n      // Optional style override\n      style: PropTypes.string,\n\n      // Optional style override\n      className: PropTypes.string,\n\n      /** If set to true, this acts as the default button */\n      isSelected: PropTypes.bool,\n    })\n  ),\n};\n\nexport default function ButtonPanel({ buttons, className, ...rest }) {\n  const [selectedIdx, setSelectedIdx] = useState(() => {\n    let selectedIdx = 0;\n\n    buttons.forEach((button, idx) => {\n      if (button.isSelected) {\n        selectedIdx = idx;\n      }\n    });\n\n    return selectedIdx;\n  });\n\n  // TODO: Document\n  const refRenderIdx = useRef(-1);\n  ++refRenderIdx.current;\n\n  return (\n    <div className={classNames(\"button-group\", className)} {...rest}>\n      {buttons.map(\n        (\n          {\n            content: Content,\n            onClick,\n            disabled,\n            isSelected,\n            style,\n            className,\n            ...args\n          },\n          idx\n        ) => {\n          // If first render, and we're at the defaultSelectedIdx, call the onClick handler\n          // TODO: Detect if first render of React after page updates\n          if (refRenderIdx.current === 0 && selectedIdx === idx) {\n            // Fixes issue:  Cannot update a component (`X`) while rendering a\n            // different component (`Y`).\n            setTimeout(() => {\n              onClick();\n            });\n          }\n\n          return (\n            <button\n              {...args}\n              key={idx}\n              onClick={() => {\n                setSelectedIdx(idx);\n\n                onClick();\n              }}\n              disabled={disabled}\n              style={style}\n              className={classNames([\n                selectedIdx === idx && \"active\",\n                className,\n              ])}\n            >\n              {\n                // TODO: Refactor\n                typeof Content === \"string\" ? (\n                  Content\n                ) : typeof Content === \"function\" ? (\n                  <Content />\n                ) : (\n                  { Content }\n                )\n              }\n            </button>\n          );\n        }\n      )}\n    </div>\n  );\n}\n","import ExternalLink from \"./ExternalLink\";\n\nexport default ExternalLink;\n","export default function ExternalLink({ children, target = \"_blank\", ...rest }) {\n  return (\n    <a {...rest} target={target}>\n      {children}\n    </a>\n  );\n}\n","import VirtualLinkButton from \"./VirtualLinkButton\";\n\nexport default VirtualLinkButton;\n","/**\n * NOTE: Fake links need to be a button, so this button is designed to look\n * like a real link, for the most part.\n */\nexport default function VirtualLinkButton({\n  children,\n  className,\n  onClick,\n  ...rest\n}) {\n  return (\n    <button {...rest} onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n","import ExternalLinkButton from \"./ExternalLinkButton\";\n\nexport default ExternalLinkButton;\n","import VirtualLinkButton from \"../VirtualLinkButton\";\n\n// TODO: Document w/ prop-types\nexport default function ExternalLinkButton({\n  href,\n  target = \"_blank\",\n  ...rest\n}) {\n  return (\n    <VirtualLinkButton\n      {...rest}\n      // TODO: Refactor to useCallback\n      onClick={() => window.open(href, target)}\n    />\n  );\n}\n","import Full from \"@components/Full\";\nimport Padding from \"@components/Padding\";\nimport ExternalLink from \"@components/ExternalLink\";\nimport ExternalLinkButton from \"@components/ExternalLinkButton\";\nimport VirtualLinkButton from \"@components/VirtualLinkButton\";\n\nconst LINKS = {\n  \"Phantom Core\": \"https://github.com/zenOSmosis/phantom-core\",\n  \"Phantom Collection\":\n    \"https://github.com/zenOSmosis/phantom-core/tree/main/src/PhantomCollection\",\n\n  \"ReShell Core\": \"https://github.com/zenOSmosis/reshell.org-static\",\n\n  \"Sync Object\": \"https://github.com/zenOSmosis/sync-object\",\n  \"MediaStream Controller\":\n    \"https://github.com/zenOSmosis/media-stream-track-controller\",\n  \"webrtc-peer\": \"https://github.com/zenOSmosis/webrtc-peer\",\n};\n\n// TODO: Refactor\nconst LINK_BUTTON_STYLE = {\n  minHeight: \"4em\",\n  whiteSpace: \"wrap\",\n  width: \"100%\",\n  height: \"100%\",\n};\n\nexport default function Details() {\n  return (\n    <Full style={{ overflowY: \"auto\" }}>\n      <p>\n        ReShell is a browser-based layout framework and UI services engine\n        composed of various{\" \"}\n        <a\n          href=\"https://github.com/zenosmosis\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          open-source components\n        </a>\n        .\n      </p>\n      <p>\n        It is currently in an alpha phase, and other builds may have other\n        built-in applications.\n      </p>\n      <p>\n        Leveraged off of the core code for{\" \"}\n        <ExternalLink href=\"https://speaker.app\">Speaker.app</ExternalLink> and\n        other{\" \"}\n        <ExternalLink href=\"https://zenosmosis.com\">zenOSmosis</ExternalLink>{\" \"}\n        projects based on{\" \"}\n        <ExternalLink href=\"https://github.com/zenOSmosis/phantom-core\">\n          PhantomCore\n        </ExternalLink>\n        , a library for managing the JavaScript application lifecycle.\n      </p>\n\n      <p style={{ fontWeight: \"bold\" }}>Some included technologies:</p>\n\n      <div style={{ textAlign: \"center\" }}>\n        <div\n          style={{ display: \"inline-grid\", gridTemplateColumns: \"1fr 1fr 1fr\" }}\n        >\n          {Object.entries(LINKS).map(([title, urlOrAction], idx) => {\n            return (\n              <Padding key={idx}>\n                {typeof urlOrAction === \"string\" ? (\n                  <ExternalLinkButton\n                    href={urlOrAction}\n                    style={LINK_BUTTON_STYLE}\n                  >\n                    {title}\n                  </ExternalLinkButton>\n                ) : (\n                  <VirtualLinkButton\n                    onClick={urlOrAction}\n                    style={LINK_BUTTON_STYLE}\n                  >\n                    {title}\n                  </VirtualLinkButton>\n                )}\n              </Padding>\n            );\n          })}\n        </div>\n      </div>\n    </Full>\n  );\n}\n","import Details from \"./Details\";\n\nexport default Details;\n","import Center from \"@components/Center\";\nimport Padding from \"@components/Padding\";\nimport ExternalLink from \"@components/ExternalLink\";\n\nconst LINKS = {\n  zenOSmosis: \"https://zenOSmosis.com\",\n  GitHub: \"https://github.com/zenosmosis\",\n  \"Speaker.app\": \"https://speaker.app\",\n};\n\nexport default function Resources() {\n  return (\n    <Center canOverflow={true}>\n      <p style={{ fontWeight: \"bold\" }}>Additional resources:</p>\n      <div style={{ display: \"inline-block\", textAlign: \"left\" }}>\n        {Object.entries(LINKS).map(([name, url], idx) => (\n          <Padding key={idx}>\n            {name}:{\" \"}\n            {\n              // TODO: Use ExternalLink component for this\n            }\n            <ExternalLink href={url}>{url}</ExternalLink>\n          </Padding>\n        ))}\n      </div>\n\n      <hr />\n\n      <p>\n        To contact us directly, email:{\" \"}\n        <ExternalLink href=\"mailto:info@zenosmosis.com\">\n          info@zenosmosis.com\n        </ExternalLink>\n        .\n      </p>\n    </Center>\n  );\n}\n","import Resources from \"./Resources\";\n\nexport default Resources;\n","const FULL_YEAR = new Date().getFullYear();\n\n/**\n * @return {string}\n */\nexport default function getCopyright() {\n  return `Copyright © 2010 - ${FULL_YEAR} zenOSmosis. All rights reserved.`;\n}\n","import Padding from \"@components/Padding\";\nimport Layout, { Content, Footer } from \"@components/Layout\";\nimport Center from \"@components/Center\";\nimport AutoScaler from \"@components/AutoScaler\";\nimport ButtonPanel from \"@components/ButtonPanel\";\nimport VirtualLink from \"@components/VirtualLink\";\nimport NoWrap from \"@components/NoWrap\";\n\nimport Details from \"./views/Details\";\nimport Resources from \"./views/Resources\";\n\nimport getCopyright from \"@utils/getCopyright\";\n\n// TODO: Include ReShell documentation here, as well as architecture overview\n\n// TODO: Include property for \"about\" view (per app), where its rendered HTML can be utilized for SEO purposes\n\n// TODO: Include license link type: https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types\n\n// TODO: Include links to PhantomCore, MediaStreamController, Speaker.app, zenOSmosis, GitHub, etc.\n\n// TODO: Include \"declarative API\" (it is React, but the components themselves\n// do their base to abstract away logic w/ their opinionated internal handling,\n// while trying to stay very performant themselves)\n\nconst AboutReShell = {\n  id: \"about-reshell\",\n  title: \"About ReShell\",\n  style: {\n    width: 640,\n    height: 480,\n  },\n  initialSharedState: {\n    screen: \"overview\",\n  },\n  titleBarView: function TitleBarView({ sharedState, setSharedState }) {\n    /*\n    const handleSetSearchQuery = useCallback(\n      evt => setSharedState({ searchQuery: evt.target.value }),\n      [setSharedState]\n    );\n\n    const handleDoubleClick = useCallback(\n      evt => {\n        // Prevent double-clicks from resizing the window if there is text in\n        // the search bar\n        if (Boolean(sharedState.searchQuery)) {\n          evt.stopPropagation();\n        }\n      },\n      [sharedState]\n    );\n    */\n\n    return (\n      <Padding className=\"button-group\">\n        <ButtonPanel\n          // Force update if the screen changes\n          key={sharedState.screen}\n          buttons={[\n            {\n              content: \"Overview\",\n              onClick: () => setSharedState({ screen: \"overview\" }),\n              isSelected: sharedState.screen === \"overview\",\n            },\n            {\n              content: \"Details\",\n              onClick: () => setSharedState({ screen: \"details\" }),\n              isSelected: sharedState.screen === \"details\",\n            },\n            {\n              content: \"Resources\",\n              onClick: () => setSharedState({ screen: \"resources\" }),\n              isSelected: sharedState.screen === \"resources\",\n            },\n          ]}\n        />\n      </Padding>\n    );\n  },\n  view: function View({ sharedState, setSharedState }) {\n    return (\n      <Padding>\n        <Layout>\n          <Content>\n            {sharedState.screen === \"overview\" && (\n              <AutoScaler>\n                <Center>\n                  <div style={{ fontSize: \"8rem\", fontStyle: \"italic\" }}>\n                    ReShell\n                  </div>\n                  <NoWrap style={{ fontSize: \"1.5rem\" }}>\n                    App layout framework and UI services engine\n                  </NoWrap>\n                </Center>\n              </AutoScaler>\n            )}\n\n            {sharedState.screen === \"details\" && <Details />}\n\n            {sharedState.screen === \"resources\" && <Resources />}\n          </Content>\n          <Footer style={{ textAlign: \"center\" }}>\n            {sharedState.screen === \"overview\" && (\n              <p>\n                <VirtualLink\n                  onClick={() => setSharedState({ screen: \"details\" })}\n                >\n                  Details\n                </VirtualLink>{\" \"}\n                |{\" \"}\n                <VirtualLink\n                  onClick={() => setSharedState({ screen: \"resources\" })}\n                >\n                  Resources\n                </VirtualLink>\n              </p>\n            )}\n\n            <div style={{ opacity: 0.5 }}>{getCopyright()}</div>\n\n            {/*\n              <div style={{ padding: 4 }}>\n               Get\n              started with{\" \"}\n              {\n                // TODO: Make link\n              }\n              <span style={{ color: \"orange\", textDecoration: \"underline\" }}>\n                wrapping your app with ReShell\n              </span>\n              .\n            </div>\n              */}\n          </Footer>\n        </Layout>\n      </Padding>\n    );\n  },\n};\n\nexport default AboutReShell;\n","import AboutReShell from \"./AboutReShell\";\n\nexport default AboutReShell;\n","import AboutReShell from \"../../ExamplePortal/apps/AboutReShell\";\n\nconst AboutReShellOverride = {\n  ...AboutReShell,\n  isAutoStart: true,\n};\n\nexport default AboutReShellOverride;\n","import LabeledLED from \"./LabeledLED\";\n\nexport default LabeledLED;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport LED from \"@components/LED\";\nimport classNames from \"classnames\";\nimport styles from \"./LabeledLED.module.css\";\n\nLabeledLED.propTypes = {\n  label: PropTypes.string.isRequired,\n\n  /** The color of the LED */\n  color: PropTypes.string,\n};\n\nexport default function LabeledLED({\n  color,\n  className,\n  style,\n  label,\n  ...rest\n}) {\n  return (\n    <div className={classNames(styles[\"labeled-led\"], className)} style={style}>\n      <div className={styles[\"led-wrap\"]}>\n        <LED color={color} {...rest} />\n      </div>\n      <div className={styles[\"label-wrap\"]}>{label}</div>\n    </div>\n  );\n}\n","import CheckForUpdates from \"./CheckForUpdates\";\n\nexport default CheckForUpdates;\n","import ReShellCore from \"@core\";\n\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport Center from \"@components/Center\";\nimport Layout, { Content, Footer } from \"@components/Layout\";\nimport Padding from \"@components/Padding\";\nimport LabeledLED from \"@components/labeled/LabeledLED\";\n\nimport fetchIsLatestVersion from \"@utils/fetchIsLatestVersion\";\n\nconst CheckForUpdates = {\n  id: \"check-for-updates\",\n  title: \"Check for Updates\",\n  style: {\n    width: 320,\n    height: 240,\n  },\n  view: function View() {\n    const [isLatest, setIsLatest] = useState(true);\n    const [isChecking, setIsChecking] = useState(false);\n    const [isError, setIsError] = useState(false);\n\n    const refIsChecking = useRef(null);\n    refIsChecking.current = isChecking;\n\n    // TODO: Refactor into service\n    const handleCheckForUpdates = useCallback(async () => {\n      const isChecking = refIsChecking.current;\n\n      if (isChecking) {\n        return;\n      }\n\n      try {\n        setIsError(false);\n        setIsChecking(true);\n\n        const isLatest = await fetchIsLatestVersion();\n\n        setIsLatest(isLatest);\n      } catch (err) {\n        console.error(err);\n\n        setIsError(true);\n        setIsLatest(false);\n      } finally {\n        setIsChecking(false);\n      }\n    }, []);\n\n    // Automatically check for updates when app starts\n    useEffect(() => {\n      handleCheckForUpdates();\n    }, [handleCheckForUpdates]);\n\n    return (\n      <Layout>\n        <Content>\n          <Center>\n            <button onClick={handleCheckForUpdates} disabled={isChecking}>\n              Check for Updates\n            </button>\n            {isError ? (\n              <>\n                <p>\n                  There was an error checking for updates.{\" \"}\n                  <button onClick={handleCheckForUpdates}>Try again?</button>\n                </p>\n              </>\n            ) : isLatest ? (\n              <p>You appear to be running the latest version of ReShell.</p>\n            ) : (\n              <>\n                <p>\n                  Your version of ReShell appears out of date.{\" \"}\n                  <button onClick={() => ReShellCore.forceUpdate()}>\n                    Refresh?\n                  </button>\n                </p>\n              </>\n            )}\n          </Center>\n        </Content>\n        <Footer>\n          <Padding>\n            <LabeledLED label=\"Latest\" color={isLatest ? \"green\" : \"red\"} />\n          </Padding>\n        </Footer>\n      </Layout>\n    );\n  },\n};\n\nexport default CheckForUpdates;\n","// NOTE: No hook is wrapped directly around this because the goal is to not\n// make it easy to expose services to windows which don't directly use said\n// service\nimport { useContext } from \"react\";\nimport { UIServicesContext } from \"@core/BaseView/providers/UIServicesProvider\";\n\n// TODO: Include (either here, or elsewhere,) ability to monitor running\n// PhantomCore instances (use WeakRef here or there, as well)?\n\n// TODO: Include ability to render service reporters, once functionality is\n// integrated\n\n// TODO: Include ability to monitor React providers exposed by the service\n\nimport Padding from \"@components/Padding\";\nimport Timer from \"@components/Timer\";\nimport NoWrap from \"@components/NoWrap\";\n\nconst ServiceMonitor = {\n  id: \"service-monitor\",\n  title: \"Service Monitor\",\n  style: {\n    width: 640,\n    height: 480,\n  },\n  isPinned: true,\n  view: function View() {\n    const { services } = useContext(UIServicesContext);\n\n    // TODO: Group by runtime\n\n    return (\n      <Padding style={{ overflowY: \"auto\" }}>\n        <table style={{ width: \"100%\" }}>\n          <thead>\n            <tr>\n              <td>Service Name</td>\n              <td>Uptime</td>\n              <td>f(x)</td>\n              {/**\n              <td>\n                Active\n                <br />\n                App Runtimes\n              </td>\n              <td>\n                Dynamically\n                <br />\n                Linked Providers\n              </td>  \n               */}\n            </tr>\n          </thead>\n          <tbody>\n            {services.map(service => (\n              <tr key={service.getUUID()}>\n                <td>{service.getTitle() || \"[Untitled]\"}</td>\n                <td className=\"center\">\n                  <Timer onTick={() => service.getInstanceUptime()} />\n                </td>\n                {/*\n                  <td className=\"center\">N/A</td>\n                  <td className=\"center\">N/A</td>\n                  */}\n                {/*\n              <td>\n                <button\n                  onClick={() => service.destroy()}\n                  style={{ width: \"100%\" }}\n                >\n                  Close\n                </button>\n              </td>\n                */}\n                <td className=\"center\">\n                  {\n                    // TODO: Remove\n                  }\n                  <button onClick={() => service.log(service.getState())}>\n                    <NoWrap>log(state)</NoWrap>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </Padding>\n    );\n  },\n};\n\nexport default ServiceMonitor;\n","import ReShellOrg from \"./ReShell.org\";\n\nexport default ReShellOrg;\n","import Desktop from \"@components/Desktop\";\n\nimport Applications from \"./apps/Applications\";\nimport ApplicationMonitor from \"../ExamplePortal/apps/ApplicationMonitor\";\nimport AboutReShell from \"./apps/AboutReShell\";\nimport CheckForUpdates from \"../ExamplePortal/apps/CheckForUpdates\";\nimport ServiceMonitor from \"../ExamplePortal/apps/ServiceMonitor\";\n\n// import WindowAPIDiscovererWindow from \"./apps/WindowAPIDiscovererWindow\";\n\n// import InputMediaDeviceSelectorView from \"./views/InputMediaDeviceSelectorView\";\n\nexport default function ReShellOrgPortal() {\n  return (\n    <Desktop\n      appDescriptors={[\n        Applications,\n        ApplicationMonitor,\n        AboutReShell,\n        CheckForUpdates,\n        ServiceMonitor,\n      ]}\n    />\n  );\n}\n"],"sourceRoot":""}