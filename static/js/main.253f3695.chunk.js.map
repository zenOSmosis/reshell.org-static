{"version":3,"sources":["reportWebVitals.js","registerPortals.js","index.js","core/BaseView/providers/AppRegistrationsProvider/classes/AppRegistration.js","core/classes/UIServiceCore.js","hooks/useForceUpdate.js","components/FullViewport/FullViewport.jsx","components/FullViewport/index.jsx","core/BaseView/providers/ParadigmProvider.jsx","core/BaseView/index.jsx","core/BaseView/BaseView.jsx","core/classes/ReShellCore.js","core/classes/UIServiceManager.js","core/BaseView/providers/UIServicesProvider/UIServicesProvider.jsx","core/BaseView/providers/UIServicesProvider/index.jsx","core/BaseView/providers/AppRegistrationsProvider/classes/AppRegistrationCollection.js","core/BaseView/providers/AppRegistrationsProvider/AppRegistrationsProvider.jsx","core/BaseView/providers/AppRegistrationsProvider/index.jsx","services/KeyVaultService/engines/StorageEngine.js","services/KeyVaultService/engines/SessionStorageEngine.js","services/KeyVaultService/engines/LocalStorageEngine.js","services/KeyVaultService/KeyVaultService.js","services/KeyVaultService/index.js","core/globals/window.ReShell.js","core/index.js","utils/fetchIsLatestVersion.js","core/BaseView/providers/AppRuntimesProvider/classes/AppRuntime.js","core/BaseView/providers/AppRuntimesProvider/classes/AppRuntimeCollection.js","core/BaseView/providers/AppRuntimesProvider/services/AppRuntimeOrchestrationService.js","core/BaseView/providers/AppRuntimesProvider/AppRuntimesProvider.jsx","core/BaseView/providers/AppRuntimesProvider/index.jsx","core/BaseView/providers/AppRuntimesProvider/useAppRuntimesAutoStart.js","core/BaseView/providers/DesktopProvider/hooks/useActiveWindowController.js","core/BaseView/providers/DesktopProvider/classes/BackgroundAssetCollection.js","core/BaseView/providers/DesktopProvider/DesktopProvider.jsx","core/BaseView/providers/DesktopProvider/index.jsx","core/BaseView/providers/DesktopProvider/hooks/useBackgroundAssetCollection.js","core/startupHelpers.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","portals","default","React","lazy","ReShellCore","registerPortals","id","name","value","console","log","webVitalsReport","_registrations","AppRegistration","appDescriptor","_appDescriptor","getAppDescriptor","this","getID","getTitle","title","getMenu","menu","getIsPinned","Boolean","isPinned","getIsPinnedToDock","isPinnedToDock","getIsAutoStart","isAutoStart","a","updateAppDescriptor","emit","EVT_UPDATED","appDescriptorOrID","destroy","PhantomCore","PhantomServiceCore","UIServiceCore","EVT_DESTROYED","useForceUpdate","refIsUnmount","useRef","useEffect","current","unmount","useState","setAlt","useCallback","alt","EVT_RESIZE","EVT_TOUCH_MOVE","EVT_TOUCH_END","FullViewport","props","_handleTouchMove","evt","preventDefault","_handleTap","t2","timeStamp","dt","currentTarget","__lastTouch","fingers","touches","length","_handleViewportResize","_ref","isInPollingMode","document","activeElement","includes","tagName","body","scrollTop","width","window","innerWidth","height","innerHeight","_lastPollWidth","_lastPollHeight","style","onResize","_pollingInterval","_pollingTime","componentDidMount","addEventListener","passive","setInterval","documentElement","classList","add","componentWillUnmount","remove","removeEventListener","clearInterval","componentDidUpdate","render","children","className","propsRest","ref","c","classNames","Component","ParadigmContext","createContext","ParadigmProvider","Provider","BaseView","portal","areBaseStylesLoaded","setAreBaseStylesLoaded","catch","err","error","PortalView","UIServicesProvider","AppRegistrationsProvider","AppRuntimesProvider","DesktopProvider","KEY_SESSION_STORAGE_DEFAULT_PORTAL_NAME","_instance","portalName","ReferenceError","isAsync","_uiServiceManager","UIServiceManager","startServiceClass","KeyVaultService","_init","sessionStorageEngine","getServiceInstance","getSessionStorageEngine","fetchItem","setItem","fetchIsLatestVersion","isLatest","confirm","forceUpdate","_activePortalName","forEach","child","toUpperCase","parentNode","removeChild","getElementsByTagName","elStyle","_elBase","createElement","appendChild","ReactDOM","StrictMode","fallback","ret","urlQuery","queryString","stringify","location","href","getUIServiceManager","getPortalName","Date","getTime","reload","switchToPortal","EVT_CHILD_INSTANCE_ADDED","PhantomServiceManager","EVT_CHILD_INSTANCE_REMOVED","args","UIServicesContext","useMemo","serviceCollection","_handleServiceAddedOrRemoved","setTimeout","on","startService","ServiceClass","stopService","stopServiceClass","services","getChildren","AppRegistrationCollection","addChild","appRegistration","TypeError","addAppRegistration","removeAppRegistration","getAppRegistrations","sort","b","aTitle","bTitle","reverse","PhantomCollection","AppRegistrationsContext","appRegistrations","_setAppRegistrations","_appRegistrationCollection","_setAppRegistrationCollection","appCollection","_handleAppRegistrationsUpdated","addOrUpdateAppRegistration","getAppRegistrationTitle","appDescriptorID","find","predicate","warn","StorageEngine","key","SessionStorageEngine","setTitle","sessionStorage","removeItem","getItem","Object","keys","clear","LocalStorageEngine","localStorage","_storageEngineCollection","StorageEngineCollection","proxyOn","addStorageEngineClass","storageEngines","getStorageEngines","keyStorageEngineMaps","storageEngine","fetchKeys","push","fetchKeyStorageEngineMaps","map","StorageEngineClass","removeStorageEngineClass","getStorageEngineWithShortUUID","shortUUID","getShortUUID","getChildWithKey","Promise","all","ReShell","ours","_getStaticTags","axios","get","response","domParser","DOMParser","resultDOM","parseFromString","data","theirs","Error","src","dom","jsTags","staticJsTagSrcs","filter","tag","getAttribute","startsWith","AppRuntime","_appRegistration","_windowController","bringToTop","setWindowController","windowController","getWindowController","getRegistration","getRegistrationID","getEnvironment","process","AppRuntimeCollection","appRuntime","addAppRuntime","removeAppRuntime","getAppRuntimes","AppRuntimeOrchestrationService","bindCollectionClass","startAppRuntime","getCollectionInstance","AppRuntimesContext","useContext","appOrchestrationService","appRuntimes","runningRegistrations","runtime","off","bringToFrontOrStartAppRuntime","switchToAppRegistrationID","appRegistrationID","stopAppRuntime","getAppRuntimesWithRegistrationID","registrationID","useAppRuntimesAutoStart","refHasAutoStarted","openTimeout","registration","clearTimeout","DEFAULT_DOCUMENT_TITLE","BackgroundAssetCollection","addBackgroundAsset","backgroundAsset","removeBackgroundAsset","getBackgroundAssets","DesktopContext","useActiveWindowController","activeWindowController","setActiveWindowController","forceDesktopUpdate","_handleUpdate","updatedState","undefined","useBackgroundAssetCollection","assetCollection","setAssetCollection","backgroundAssets","setBackgroundAssets","once","dayjs","require","relativeTime","extend","localizedFormat"],"mappings":"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","file":"static/js/main.253f3695.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReShellCore from \"./core\";\n\n// The portals defined here are what are selectable inside of the application\nconst portals = {\n  default: React.lazy(() => import(\"@portals/ReShell.org\")),\n\n  /*\n  default: React.lazy(() => import(\"@portals/SpeakerAppPortal\")),\n\n  ReShellOrg: React.lazy(() => import(\"@portals/ReShell.org\")),\n\n  example: React.lazy(() => import(\"@portals/ExamplePortal\")),\n\n  test: React.lazy(() => import(\"@portals/TestPortal\")),\n  */\n};\n\nReShellCore.registerPortals(portals);\n\n// TODO: Include ability to parse out an HTML file and dynamically link it to\n// the public directory during runtime (and during build) for SEO\n\n// TODO: Enable any application to include about info, metadata, so that they\n// can be included in SEO\n\n// TODO: Don't automatically initialize ReShell when a search engine is\n// detected (i.e. look for various JS properties a search engine might not\n// exhibit and test if those capabilities exist in order to determine if a\n// search engine or not)\n\n// TODO: Try to not get too fancy with SEO pages, and keep them mostly HTML,\n// with JS assets sprinkled in to be able to open relevant parts of ReShell\n// when needed, if it is not automatically initialized\n","import reportWebVitals from \"./reportWebVitals\";\n\nimport \"./registerPortals\";\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//\n// Additional reading for \"name\" element:\n//  - [FCP] https://web.dev/fcp/\n//  - [TTFB] https://web.dev/time-to-first-byte/\n//  - [FID] https://web.dev/fid/\n//  - [CLS] https://web.dev/cls/\nreportWebVitals(({ id, name, value }) => {\n  // TODO: Remove\n  console.log({\n    webVitalsReport: {\n      id,\n      name,\n      value,\n    },\n  });\n});\n","import PhantomCore, { EVT_UPDATED, EVT_DESTROYED } from \"phantom-core\";\n\nexport { EVT_UPDATED, EVT_DESTROYED };\n\n// AppRegistration cache\n// TODO: Use Map instead?\nconst _registrations = {};\n\n// TODO: Include ability to register preload resources, to preload when runtime is initiated\n// TODO: Include ability to register splash screen, while preloading\n\n// TODO: Include ability to retain window sizes and positions after\n// modification (not sure if that should be here or in AppRuntime)\n\n// TODO: Include ability to test condition before applying registration(?)\n\n// TODO: Document\n// A reference node for the desktop to determine what should be listed in program menus\nexport default class AppRegistration extends PhantomCore {\n  // TODO: Validate appDescriptor\n\n  /**\n   * Registers, or updates, the given AppRegistration cache.\n   *\n   * This is used primarily for applications menu population.\n   *\n   * @param {AppRegistration}\n   * @return {void}\n   */\n  static addOrUpdateAppRegistration(appDescriptor) {\n    const { id } = appDescriptor;\n\n    // Registrations may be updated when in development mode, and updating the\n    // source code to a registered application. In most cases, the following\n    // code block will run before the respective application is updated /\n    // re-rendered.\n    //\n    // TODO: Implement some message-bus functionality to let other instances\n    // know of updated registrations (i.e. so this can be piped up to UI\n    // notification)\n    if (_registrations[id]) {\n      // Automatically update the registration\n      _registrations[id].updateAppDescriptor(appDescriptor);\n\n      return _registrations[id];\n    } else {\n      return new AppRegistration(appDescriptor);\n    }\n  }\n\n  /**\n   * Unregisters the given AppRegistration from the cache.\n   *\n   * This will remove the application from the applications menu.\n   *\n   * @param {AppRegistration | string}\n   * @return {void}\n   */\n  static async removeAppRegistration(appDescriptorOrID) {\n    let id = null;\n    if (typeof appDescriptor === \"object\") {\n      id = appDescriptorOrID.id;\n    } else {\n      id = appDescriptorOrID;\n    }\n\n    if (_registrations[id]) {\n      return _registrations[id].destroy();\n    }\n  }\n\n  // TODO: Document\n  constructor(appDescriptor) {\n    // TODO: Validate appDescriptor before trying to use\n\n    super();\n\n    // TODO: Document type\n    this._appDescriptor = appDescriptor;\n\n    _registrations[appDescriptor.id] = this;\n  }\n\n  /**\n   * @return {Object}\n   */\n  getAppDescriptor() {\n    return this._appDescriptor;\n  }\n\n  /**\n   * @return {string | number}\n   */\n  getID() {\n    return this._appDescriptor.id;\n  }\n\n  /**\n   * @return {string}\n   */\n  getTitle() {\n    return this._appDescriptor.title;\n  }\n\n  /**\n   * TODO: Document\n   *\n   * @return {Object | void}\n   */\n  getMenu() {\n    return this._appDescriptor.menu;\n  }\n\n  /**\n   * TODO: Rename (clarify pin type)\n   *\n   * Returns whether or not the application is pinned to the desktop menu.\n   *\n   * @return {boolean}\n   */\n  getIsPinned() {\n    return Boolean(this._appDescriptor.isPinned);\n  }\n\n  // TODO: Document\n  getIsPinnedToDock() {\n    return Boolean(this._appDescriptor.isPinnedToDock);\n  }\n\n  // TODO: Document\n  getIsAutoStart() {\n    return Boolean(this._appDescriptor.isAutoStart);\n  }\n\n  /**\n   * @return {Promise<void>}\n   */\n  async destroy() {\n    delete _registrations[this._appDescriptor.id];\n\n    return super.destroy();\n  }\n\n  // TODO: Document\n  updateAppDescriptor(appDescriptor) {\n    this._appDescriptor = appDescriptor;\n\n    // TODO: Only emit if something changed\n    this.emit(EVT_UPDATED);\n  }\n}\n","import { PhantomServiceCore } from \"phantom-core\";\nconst { EVT_UPDATED, EVT_DESTROYED } = PhantomServiceCore;\n\nexport { EVT_UPDATED, EVT_DESTROYED };\n\nexport default class UIServiceCore extends PhantomServiceCore {}\n","import { useCallback, useEffect, useRef, useState } from \"react\";\n\nexport default function useForceUpdate() {\n  // Prevent state from trying to be set after unmounted\n  const refIsUnmount = useRef(false);\n  useEffect(() => {\n    refIsUnmount.current = false;\n\n    return function unmount() {\n      refIsUnmount.current = true;\n    };\n  });\n\n  const [, setAlt] = useState(false);\n\n  const forceUpdate = useCallback(() => {\n    !refIsUnmount.current && setAlt((alt) => !alt);\n  }, []);\n\n  return forceUpdate;\n}\n","import classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\n\n// NOTE: This intentionally does not make use of *.module.css because it also\n// includes internal styling for the html and body tags\n//\n// TODO: Maybe this can work for adding module support w/ global styles?  https://stackoverflow.com/a/40065474\nimport \"./FullViewport.css\";\n\nconst EVT_RESIZE = \"resize\";\nconst EVT_TOUCH_MOVE = \"touchmove\";\nconst EVT_TOUCH_END = \"touchend\";\n\n/**\n * A React Component which utilizes the entire viewport (or what is available\n * beyond the window chrome) of the device.\n *\n * It helps solve layout issues related to mobile layouts (especially on iOS,\n * where the viewport size can change depending if URL bar is shown or hidden),\n * by explicitly setting widths and heights in pixels, so that child elements\n * can utilize size percentages (i.e. height=\"100%\") and fully consume\n * available container layout area.\n *\n * This component is intended to be a direct descendant (or at least near-\n * direct descendant) to the DOM's <body> tag, and works best if the\n * underlying CSS for html & body are not padded, nor have margins.\n *\n * The entire application should be rendered within this component for best\n * results.\n */\nexport default class FullViewport extends Component {\n  static propTypes = {\n    onResize: PropTypes.func,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this._ref = null;\n    this._pollingInterval = null;\n    this._pollingTime = 1000; // In milliseconds\n\n    this._lastPollWidth = 0;\n    this._lastPollHeight = 0;\n  }\n\n  componentDidMount() {\n    this._handleViewportResize();\n\n    /**\n     * IMPORTANT: passive: false is extremely important or else when moving\n     * finger on mobile Safari the page will bounce around\n     *\n     * @see https://stackoverflow.com/a/49853392\n     */\n    window.addEventListener(EVT_TOUCH_MOVE, this._handleTouchMove, {\n      passive: false,\n    });\n\n    window.addEventListener(EVT_RESIZE, this._handleViewportResize);\n    window.addEventListener(EVT_TOUCH_END, this._handleTap);\n\n    // TODO: Document why this is needed\n    this._pollingInterval = setInterval(\n      this._handleViewportResize,\n      this._pollingTime\n    );\n\n    // Dynamically add .full-viewport to html / body elements\n    document.documentElement.classList.add(\"full-viewport\");\n    document.body.classList.add(\"full-viewport\");\n  }\n\n  componentWillUnmount() {\n    // Dynamically remove .full-viewport from html / body elements\n    document.documentElement.classList.remove(\"full-viewport\");\n    document.body.classList.remove(\"full-viewport\");\n\n    window.removeEventListener(EVT_TOUCH_MOVE, this._handleTouchMove);\n    window.removeEventListener(EVT_RESIZE, this._handleViewportResize);\n    window.removeEventListener(EVT_TOUCH_END, this._handleTap);\n\n    clearInterval(this._pollingInterval);\n  }\n\n  componentDidUpdate() {\n    this._handleViewportResize();\n  }\n\n  _handleTouchMove = evt => {\n    evt.preventDefault();\n  };\n\n  /**\n   * Prevents double-tap zooming on iOS.\n   *\n   * Note: Source adapted from https://exceptionshub.com/disable-double-tap-zoom-option-in-browser-on-touch-devices.html\n   *\n   * @param {DocumentEvent} evt Event of touchend type\n   */\n  _handleTap = evt => {\n    const t2 = evt.timeStamp;\n    const t1 = evt.currentTarget.__lastTouch || t2;\n    const dt = t2 - t1;\n    const fingers = evt.touches.length;\n    evt.currentTarget.__lastTouch = t2;\n\n    if (!dt || dt > 500 || fingers > 1) {\n      // Not double-tap\n    } else {\n      // Prevent double-tap zoom\n      evt.preventDefault();\n    }\n  };\n\n  /**\n   * Note: Automatic viewport resizing is called as either a window resizing\n   * event callback, or at a set interval time.\n   *\n   * Depending on whether it is called with an event object, the method will\n   * adapt its handling accordingly.\n   *\n   * @param {DocumentEvent} evt? [default = null] If no evt is passed, it is in\n   * polling mode.\n   */\n  _handleViewportResize = (evt = null) => {\n    if (!this._ref) {\n      return;\n    }\n\n    // TODO: Document\n    const isInPollingMode = evt ? false : true;\n\n    // Fixes issue where text input fields can disappear behind mobile keyboard\n    // when in use\n    // FIXME: Don't run following code block unless on mobile, w/ software\n    // keyboard enabled\n    if (\n      isInPollingMode &&\n      document.activeElement &&\n      [\"INPUT\", \"TEXTAREA\"].includes(document.activeElement.tagName)\n    ) {\n      return;\n    }\n\n    // Fixes issue on iOS where the content may be behind the URL bar\n    document.body.scrollTop = 0;\n\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    // If the width or height hasn't changed since the last poll interval, do\n    // nothing\n    if (\n      isInPollingMode &&\n      width === this._lastPollWidth &&\n      height === this._lastPollHeight\n    ) {\n      return;\n    } else {\n      this._lastPollWidth = width;\n      this._lastPollHeight = height;\n    }\n\n    this._ref.style.width = `${width}px`;\n    this._ref.style.height = `${height}px`;\n\n    if (typeof this.props.onResize === \"function\") {\n      this.props.onResize({\n        width,\n        height,\n      });\n    }\n  };\n\n  render() {\n    let { children, className, onResize, ...propsRest } = this.props;\n\n    return (\n      <div\n        ref={c => (this._ref = c)}\n        {...propsRest}\n        className={classNames(\"full-viewport\", className)}\n      >\n        {children}\n      </div>\n    );\n  }\n}\n","import FullViewport from './FullViewport';\n\nexport default FullViewport;","import React from \"react\";\n\nexport const ParadigmContext = React.createContext({});\n\n// TODO: Add desktop paradigm\n// TODO: Add mobile paradigm (half-quadrant snapping; scroll dock / scroll side-by-side-apps / views able to be split vertically / horizontally, and windows able to be dragged into quadrants / scaling optional)\n\nexport default function ParadigmProvider({ children }) {\n  // TODO: Work out paradigm values; use PhantomCollection for paradigm management\n  return (\n    <ParadigmContext.Provider value={{}}>{children}</ParadigmContext.Provider>\n  );\n}\n","import BaseView from \"./BaseView\";\n\nexport default BaseView;\n","import { useEffect, useState } from \"react\";\nimport FullViewport from \"@components/FullViewport\";\n\nimport ParadigmProvider from \"./providers/ParadigmProvider\";\nimport UIServicesProvider from \"./providers/UIServicesProvider\";\nimport AppRegistrationsProvider from \"./providers/AppRegistrationsProvider\";\nimport AppRuntimesProvider from \"./providers/AppRuntimesProvider\";\nimport DesktopProvider from \"./providers/DesktopProvider\";\n\n// TODO: Document and add prop-types\nexport default function BaseView({ portal }) {\n  const [areBaseStylesLoaded, setAreBaseStylesLoaded] = useState(false);\n\n  useEffect(() => {\n    // Lazy-load BaseView style so it doesn't override before the app is mounted\n    //\n    // TODO: Use preload\n    import(\"./base-styles.css\")\n      .then(() => setAreBaseStylesLoaded(true))\n      .catch(err => console.error(err));\n  }, []);\n\n  if (!areBaseStylesLoaded) {\n    return null;\n  }\n\n  const PortalView = portal;\n  return (\n    <FullViewport>\n      <ParadigmProvider>\n        <UIServicesProvider>\n          <AppRegistrationsProvider>\n            <AppRuntimesProvider>\n              <DesktopProvider>\n                <PortalView />\n              </DesktopProvider>\n            </AppRuntimesProvider>\n          </AppRegistrationsProvider>\n        </UIServicesProvider>\n      </ParadigmProvider>\n    </FullViewport>\n  );\n}\n","import \"@core/startupHelpers\";\n\nimport PhantomCore from \"phantom-core\";\nimport React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport UIServiceManager from \"../classes/UIServiceManager\";\nimport KeyVaultService from \"@services/KeyVaultService\";\n\nimport BaseView from \"../BaseView\";\n\nimport queryString from \"query-string\";\n\nimport fetchIsLatestVersion from \"@utils/fetchIsLatestVersion\";\n\nconst KEY_SESSION_STORAGE_DEFAULT_PORTAL_NAME = \"reshell-default-portal\";\n\n// TODO: Refactor this handling into PhantomCore as optional single-instance (@see https://github.com/zenOSmosis/phantom-core/issues/72)\nlet _instance = null;\n\n/**\n * Handles bootstrapping the ReShell environment on the browser DOM and\n * establishes lifecycle control methods for the base ReShell environment.\n */\nexport default class ReShellCore extends PhantomCore {\n  // TODO: Document\n  static async forceUpdate() {\n    if (_instance) {\n      await _instance.destroy();\n    }\n\n    // TODO: Adjust as necessary\n    window.location.href = `${\n      process.env.PUBLIC_URL || \"\"\n    }?__forceReboot=${new Date().getTime()}`;\n  }\n\n  // TODO: Document\n  static #portals = {};\n\n  // TODO: Document\n  static registerPortals(portals) {\n    ReShellCore.#portals = portals;\n  }\n\n  // TODO: Document\n  static getPortals() {\n    return ReShellCore.#portals;\n  }\n\n  // TODO: Document\n  static async init(portalName = null) {\n    return new ReShellCore(portalName);\n  }\n\n  constructor(portalName = null) {\n    // TODO: Refactor this handling into PhantomCore as optional single-instance (@see https://github.com/zenOSmosis/phantom-core/issues/72)\n    if (_instance) {\n      throw new ReferenceError(\n        \"UIServiceManager cannot have multiple instances\"\n      );\n    }\n\n    super({\n      isAsync: true,\n    });\n\n    // TODO: Refactor this handling into PhantomCore as optional single-instance (@see https://github.com/zenOSmosis/phantom-core/issues/72)\n    _instance = this;\n\n    this._uiServiceManager = new UIServiceManager();\n    this._uiServiceManager.startServiceClass(KeyVaultService);\n\n    // TODO: Bind window \"beforeunload\" event to try to prevent accidental shut\n    // down before we have a chance to save states, etc. Ensure it gets unbound\n    // before the destructor finishes.\n    // @see https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload\n\n    this._init(portalName);\n  }\n\n  // TODO: Document\n  async _init(portalName) {\n    const sessionStorageEngine = this._uiServiceManager\n      .getServiceInstance(KeyVaultService)\n      .getSessionStorageEngine();\n\n    // If no portalName is passed and there is a session storage (not local) variable set for portal, use it\n    if (!portalName) {\n      portalName =\n        // Retrieve portal name from session storage\n        (await sessionStorageEngine.fetchItem(\n          KEY_SESSION_STORAGE_DEFAULT_PORTAL_NAME\n        )) || \"default\";\n    }\n\n    const portal = ReShellCore.#portals[portalName];\n\n    if (!portal) {\n      throw new ReferenceError(\n        `Unable to init portal with name: ${portalName}`\n      );\n    }\n\n    // Save portal name in session storage\n    await sessionStorageEngine.setItem(\n      KEY_SESSION_STORAGE_DEFAULT_PORTAL_NAME,\n      portalName\n    );\n\n    // IMPORANT: This should come after setting of portal name in session storage\n    fetchIsLatestVersion().then(isLatest => {\n      if (!isLatest) {\n        if (\n          // TODO: Update\n          window.confirm(\n            \"It appears you are not running the latest version.  Reload?\"\n          )\n        ) {\n          ReShellCore.forceUpdate();\n        }\n      }\n    });\n\n    this._activePortalName = portalName;\n\n    // Wipe existing content, except for script tags (these script tags are\n    // used by the fetchIsLatestVersion utility for comparsion purposes)\n    [...document.body.children].forEach(child => {\n      if (child.tagName.toUpperCase() !== \"SCRIPT\") {\n        child.parentNode.removeChild(child);\n      }\n    });\n\n    // Wipe existing styling\n    [...document.getElementsByTagName(\"style\")].forEach(elStyle =>\n      elStyle.parentNode.removeChild(elStyle)\n    );\n\n    this._elBase = document.createElement(\"div\");\n    document.body.appendChild(this._elBase);\n\n    ReactDOM.render(\n      <React.StrictMode>\n        <Suspense fallback={<div />}>\n          <BaseView portal={portal} />\n        </Suspense>\n      </React.StrictMode>,\n      this._elBase\n    );\n\n    // TODO: Use KeyVaultService sub-service to open any previously\n    // closed windows and retain their window positions for this portal\n    // @see https://developer.apple.com/design/human-interface-guidelines/macos/app-architecture/restoring-state/\n\n    super._init();\n  }\n\n  /**\n   * @return {Promise<void>}\n   */\n  async destroy() {\n    // TODO: Shut down running apps first, and provide a way to cancel out of\n    // shut-down in case we need to save any states\n\n    // Unrender DOM\n    // Stop the current UI\n    ReactDOM.render(<div>[Tear down]</div>, this._elBase);\n\n    await this._uiServiceManager.destroy();\n\n    const ret = await super.destroy();\n\n    // TODO: Refactor this handling into PhantomCore as optional single-instance (@see https://github.com/zenOSmosis/phantom-core/issues/72)\n    _instance = null;\n\n    return ret;\n  }\n\n  // TODO: Document\n  static async destroy() {\n    return _instance?.destroy();\n  }\n\n  // TODO: Document\n  static async reload() {\n    await _instance?.destroy();\n\n    window.location.reload();\n  }\n\n  // TODO: Document\n  async switchToPortal(portalName) {\n    const sessionStorageEngine = this._uiServiceManager\n      .getServiceInstance(KeyVaultService)\n      .getSessionStorageEngine();\n\n    // Cache portalName to the session storage\n    await sessionStorageEngine.setItem(\n      KEY_SESSION_STORAGE_DEFAULT_PORTAL_NAME,\n      portalName\n    );\n\n    await this.destroy();\n\n    const urlQuery = queryString.stringify({ portalName });\n\n    window.location.href = `${process.env.PUBLIC_URL || \"\"}?${urlQuery}`;\n  }\n\n  // TODO: Document\n  static async switchToPortal(portalName) {\n    await _instance?.switchToPortal(portalName);\n  }\n\n  // TODO: Document\n  getUIServiceManager() {\n    return this._uiServiceManager;\n  }\n\n  // TODO: Document\n  static getUIServiceManager() {\n    return _instance?.getUIServiceManager();\n  }\n\n  // TODO: Document\n  getPortalName() {\n    return this._activePortalName;\n  }\n\n  // TODO: Document\n  static getPortalName() {\n    return _instance?.getPortalName();\n  }\n}\n","import { PhantomServiceManager } from \"phantom-core\";\n\nconst {\n  EVT_CHILD_INSTANCE_ADDED,\n  EVT_CHILD_INSTANCE_REMOVED,\n  EVT_UPDATED,\n  EVT_DESTROYED,\n} = PhantomServiceManager;\n\nexport {\n  EVT_CHILD_INSTANCE_ADDED,\n  EVT_CHILD_INSTANCE_REMOVED,\n  EVT_UPDATED,\n  EVT_DESTROYED,\n};\n\n// TODO: Refactor this handling into PhantomCore as optional single-instance (@see https://github.com/zenOSmosis/phantom-core/issues/72)\nlet _instance = null;\n\n// IMPORTANT: This must be treated as a singleton for desktop usage\n// TODO: Document\nexport default class UIServiceManager extends PhantomServiceManager {\n  constructor(...args) {\n    // TODO: Refactor this handling into PhantomCore as optional single-instance (@see https://github.com/zenOSmosis/phantom-core/issues/72)\n    if (_instance) {\n      throw new ReferenceError(\n        \"UIServiceManager cannot have multiple instances\"\n      );\n    }\n\n    super(...args);\n\n    // TODO: Refactor this handling into PhantomCore as optional single-instance (@see https://github.com/zenOSmosis/phantom-core/issues/72)\n    _instance = this;\n  }\n}\n","import React, { useCallback, useMemo } from \"react\";\nimport ReShellCore from \"@core/classes/ReShellCore\";\nimport {\n  EVT_CHILD_INSTANCE_ADDED,\n  EVT_CHILD_INSTANCE_REMOVED,\n} from \"@core/classes/UIServiceManager\";\n\nimport useForceUpdate from \"@hooks/useForceUpdate\";\n\nexport const UIServicesContext = React.createContext({});\n\n// TODO: Document\nexport default function UIServicesProvider({ children }) {\n  const forceUpdate = useForceUpdate();\n\n  // const [_uiServiceManager, _setUIServiceManager] = useState(null);\n  // TODO: Refactor into useEffect; fix destruct error where React can't perform state update on unmounted component\n  const _uiServiceManager = useMemo(() => {\n    const serviceCollection = ReShellCore.getUIServiceManager();\n\n    // Force UI to update when a service has been added or removed\n    //\n    // IMPORTANT: Collection EVT_UPDATED is not mapped here, and is handled\n    // elsewhere, as we don't want the entire UI to update every time\n    const _handleServiceAddedOrRemoved = () => {\n      // IMPORTANT: This timeout is to prevent trying to re-render while a\n      // child component is being updated (i.e. WindowManager currently is\n      // instantiating services during the render cycle)\n      setTimeout(() => {\n        forceUpdate();\n      });\n    };\n\n    // TODO: Unbind on teardown\n    serviceCollection.on(\n      EVT_CHILD_INSTANCE_ADDED,\n      _handleServiceAddedOrRemoved\n    );\n\n    // TODO: Unbind on teardown\n    serviceCollection.on(\n      EVT_CHILD_INSTANCE_REMOVED,\n      _handleServiceAddedOrRemoved\n    );\n\n    return serviceCollection;\n  }, [forceUpdate]);\n\n  // TODO: Document\n  const startService = useCallback(\n    ServiceClass => _uiServiceManager.startServiceClass(ServiceClass),\n    [_uiServiceManager]\n  );\n\n  // TODO: Document\n  const stopService = useCallback(\n    ServiceClass => _uiServiceManager.stopServiceClass(ServiceClass),\n    [_uiServiceManager]\n  );\n\n  return (\n    <UIServicesContext.Provider\n      value={{\n        services: _uiServiceManager && _uiServiceManager.getChildren(),\n        startService,\n        stopService,\n      }}\n    >\n      {\n        // TODO: For services which contain internal providers, render those providers here, wrapping the children with them\n      }\n      {children}\n    </UIServicesContext.Provider>\n  );\n}\n","import UIServicesProvider, { UIServicesContext } from \"./UIServicesProvider\";\n\nexport default UIServicesProvider;\nexport { UIServicesContext };\n","import { PhantomCollection, EVT_UPDATED, EVT_DESTROYED } from \"phantom-core\";\n\nimport AppRegistration from \"./AppRegistration\";\n\nexport { EVT_UPDATED, EVT_DESTROYED };\n\n// TODO: Document\nexport default class AppRegistrationCollection extends PhantomCollection {\n  addChild(appRegistration) {\n    if (!(appRegistration instanceof AppRegistration)) {\n      throw new TypeError(\"appRegistration is not an AppRegistration\");\n    }\n\n    return super.addChild(appRegistration);\n  }\n\n  /**\n   * @param {AppRegistration} appRegistration\n   * @return {void}\n   */\n  addAppRegistration(appRegistration) {\n    return this.addChild(appRegistration);\n  }\n\n  /**\n   *\n   * @param {AppRegistration} appRegistration\n   * @return {void}\n   */\n  removeAppRegistration(appRegistration) {\n    return this.removeChild(appRegistration);\n  }\n\n  /**\n   * @return {AppRegistration[]}\n   */\n  getAppRegistrations() {\n    // FIXME: (jh) The only way I could get this to sort alphabetically on\n    // Firefox was to build a reverse-sorted list, then reverse it again;\n    // Chrome was not affected by this\n    return this.getChildren()\n      .sort((a, b) => {\n        const aTitle = a.getTitle();\n        const bTitle = b.getTitle();\n\n        if (aTitle < bTitle) {\n          return 1;\n        } else if (bTitle > aTitle) {\n          return -1;\n        } else {\n          return 0;\n        }\n      })\n      .reverse();\n  }\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport AppRegistration from \"./classes/AppRegistration\";\nimport AppRegistrationCollection, {\n  EVT_UPDATED,\n} from \"./classes/AppRegistrationCollection\";\n\nexport const AppRegistrationsContext = React.createContext({});\n\n// TODO: Refactor into a service\nexport default function AppRegistrationsProvider({ children }) {\n  const [appRegistrations, _setAppRegistrations] = useState([]);\n  const [_appRegistrationCollection, _setAppRegistrationCollection] =\n    useState(null);\n\n  // Sync app registrations state with that of internal collection\n  useEffect(() => {\n    const appCollection = new AppRegistrationCollection();\n    _setAppRegistrationCollection(appCollection);\n\n    const _handleAppRegistrationsUpdated = () => {\n      _setAppRegistrations(appCollection.getAppRegistrations());\n    };\n\n    appCollection.on(EVT_UPDATED, _handleAppRegistrationsUpdated);\n\n    return function unmount() {\n      appCollection.destroy();\n    };\n  }, []);\n\n  /**\n   * Registers, or updates, the given AppRegistration cache.\n   *\n   * This is used primarily for applications menu population.\n   *\n   * @param {AppRegistration}\n   * @return {void}\n   */\n  const addOrUpdateAppRegistration = useCallback(\n    appDescriptor => {\n      const appRegistration =\n        AppRegistration.addOrUpdateAppRegistration(appDescriptor);\n\n      _appRegistrationCollection.addAppRegistration(appRegistration);\n    },\n    [_appRegistrationCollection]\n  );\n\n  /**\n   * Unregisters the given AppRegistration from the cache.\n   *\n   * This will remove the application from the applications menu.\n   *\n   * @param {AppRegistration}\n   * @return {void}\n   */\n  const removeAppRegistration = useCallback(\n    appDescriptorOrID => {\n      // NOTE: This should also remove it from the collection\n      AppRegistration.removeAppRegistration(appDescriptorOrID);\n    },\n\n    []\n  );\n\n  // TODO: Document\n  const getAppRegistrationTitle = useCallback(\n    appDescriptorID => {\n      const appRegistration = appRegistrations.find(\n        predicate => predicate.getID() === appDescriptorID\n      );\n\n      if (!appRegistration) {\n        console.warn(\n          `Could not locate appRegistration with id: ${appDescriptorID}`\n        );\n      } else {\n        return appRegistration.getTitle();\n      }\n    },\n    [appRegistrations]\n  );\n\n  return (\n    <AppRegistrationsContext.Provider\n      value={{\n        addOrUpdateAppRegistration,\n        removeAppRegistration,\n        appRegistrations,\n        getAppRegistrationTitle,\n      }}\n    >\n      {children}\n    </AppRegistrationsContext.Provider>\n  );\n}\n","import AppRegistrationsProvider, {\n  AppRegistrationsContext,\n} from \"./AppRegistrationsProvider\";\n\nexport default AppRegistrationsProvider;\nexport { AppRegistrationsContext };\n","import PhantomCore from \"phantom-core\";\n\n// TODO: Look into https://www.npmjs.com/package/localforage for local IndexedDB handling\n// TODO: Implement encrypted storage (indexeddb usage as well?)\n\n/**\n * NOTE: All of these methods are async to handle potential network,\n * off-process, or async-based storage engines.\n *\n * To ensure maximum compatibility, extension classes should use the async API\n * as well.\n */\nexport default class StorageEngine extends PhantomCore {\n  // TODO: Document\n  async setItem(key, value) {\n    throw new ReferenceError(\"setItem must be overridden\");\n  }\n\n  // TODO: Document\n  async removeItem(key) {\n    throw new ReferenceError(\"removeItem must be overridden\");\n  }\n\n  // TODO: Document\n  async fetchItem(key) {\n    throw new ReferenceError(\"fetchItem must be overridden\");\n  }\n\n  // TODO: Document\n  async fetchKeys() {\n    throw new ReferenceError(\"fetchKeys must be overridden\");\n  }\n\n  // TODO: Document\n  async clear() {\n    throw new ReferenceError(\"clear must be overridden\");\n  }\n}\n","import StorageEngine from \"./StorageEngine\";\n\nexport default class SessionStorageEngine extends StorageEngine {\n  constructor(...args) {\n    super(...args);\n\n    this.setTitle(\"SessionStorageEngine\");\n  }\n\n  // TODO: Document\n  async setItem(key, value) {\n    return window.sessionStorage.setItem(key, value);\n  }\n\n  // TODO: Document\n  async removeItem(key) {\n    return window.sessionStorage.removeItem(key);\n  }\n\n  // TODO: Document\n  async fetchItem(key) {\n    return window.sessionStorage.getItem(key);\n  }\n\n  // TODO: Document\n  async fetchKeys() {\n    return Object.keys(window.sessionStorage);\n  }\n\n  // TODO: Document\n  async clear() {\n    window.sessionStorage.clear();\n  }\n}\n","import StorageEngine from \"./StorageEngine\";\n\nexport default class LocalStorageEngine extends StorageEngine {\n  constructor(...args) {\n    super(...args);\n\n    this.setTitle(\"LocalStorageEngine\");\n  }\n\n  // TODO: Document\n  async setItem(key, value) {\n    return window.localStorage.setItem(key, value);\n  }\n\n  // TODO: Document\n  async removeItem(key) {\n    return window.localStorage.removeItem(key);\n  }\n\n  // TODO: Document\n  async fetchItem(key) {\n    return window.localStorage.getItem(key);\n  }\n\n  // TODO: Document\n  async fetchKeys() {\n    return Object.keys(window.localStorage);\n  }\n\n  // TODO: Document\n  async clear() {\n    window.localStorage.clear();\n  }\n}\n","import { PhantomCollection, EVT_UPDATED } from \"phantom-core\";\nimport UIServiceCore from \"@core/classes/UIServiceCore\";\n\nimport StorageEngine from \"./engines/StorageEngine\";\nimport SessionStorageEngine from \"./engines/SessionStorageEngine\";\nimport LocalStorageEngine from \"./engines/LocalStorageEngine\";\n\n// TODO: [max size estimate; no Safari support!] https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/estimate\n\n// Additional reading: https://web.dev/storage-for-the-web/\n\n// Potential storage backends:\n// - https://github.com/willgm/web-crypto-storage\n// - https://www.npmjs.com/package/secure-ls\n\nexport default class KeyVaultService extends UIServiceCore {\n  constructor({ ...args }) {\n    super({ ...args });\n\n    this.setTitle(\"Key Vault Service\");\n\n    this._storageEngineCollection = new StorageEngineCollection();\n\n    // Proxy storage engine collection EVT_UPDATED events through this instance\n    this.proxyOn(this._storageEngineCollection, EVT_UPDATED, (...args) =>\n      this.emit(EVT_UPDATED, ...args)\n    );\n\n    this.addStorageEngineClass(SessionStorageEngine);\n    this.addStorageEngineClass(LocalStorageEngine);\n  }\n\n  /**\n   * @return {Promise<void>}\n   */\n  async destroy() {\n    await this._storageEngineCollection.destroy();\n\n    return super.destroy();\n  }\n\n  // TODO: Document\n  // TODO: TODO: Implement optional filtering\n  async fetchKeyStorageEngineMaps() {\n    const storageEngines = this._storageEngineCollection.getStorageEngines();\n\n    const keyStorageEngineMaps = [];\n\n    for (const storageEngine of storageEngines) {\n      const keys = await storageEngine.fetchKeys();\n\n      // TODO: Refactor as part of PhantomCore API (i.e. storageEngine.getClass())\n      // const StorageEngineClass = storageEngine.constructor;\n\n      for (const key of keys) {\n        keyStorageEngineMaps.push([key, storageEngine]);\n      }\n    }\n\n    return keyStorageEngineMaps;\n  }\n\n  // TODO: Implement optional filtering\n  /**\n   * Fetches all keys from all connected storage engines.\n   *\n   * @return {any[]}\n   */\n  async fetchKeys() {\n    return (await this.fetchKeyStorageEngineMaps()).map(\n      keyStorageEngineMaps => keyStorageEngineMaps[0]\n    );\n  }\n\n  // TODO: Document\n  addStorageEngineClass(StorageEngineClass) {\n    this._storageEngineCollection.addStorageEngineClass(StorageEngineClass);\n  }\n\n  // TODO: Document\n  removeStorageEngineClass(StorageEngineClass) {\n    this._storageEngineCollection.removeStorageEngineClass(StorageEngineClass);\n  }\n\n  // TODO: Document\n  getStorageEngines() {\n    return this._storageEngineCollection.getChildren();\n  }\n\n  // TODO: Document\n  getStorageEngineWithShortUUID(shortUUID) {\n    return this.getStorageEngines().find(\n      predicate => predicate.getShortUUID() === shortUUID\n    );\n  }\n\n  // TODO: Document\n  getSessionStorageEngine() {\n    return this._storageEngineCollection.getChildWithKey(SessionStorageEngine);\n  }\n\n  // TODO: Document\n  async clearAllStorageEngines() {\n    await Promise.all(\n      this.getStorageEngines().map(storageEngine => storageEngine.clear())\n    );\n  }\n}\n\nclass StorageEngineCollection extends PhantomCollection {\n  // TODO: Document\n  addChild(StorageEngineClass) {\n    if (this.getChildWithKey(StorageEngineClass)) {\n      throw new ReferenceError(\"StorageEngineClass is already registered\");\n    }\n\n    // TODO: Ensure title is set and unique across instances\n\n    const storageEngine = new StorageEngineClass();\n\n    // FIXME: (jh) Even better would be to check this before instantiation, but\n    // I'm not quite sure how to yet\n    if (!(storageEngine instanceof StorageEngine)) {\n      throw new TypeError(\"storageEngine is not of StorageEngine type\");\n    }\n\n    return super.addChild(storageEngine, StorageEngineClass);\n  }\n\n  // TODO: Document\n  removeChild(StorageEngineClass) {\n    const storageEngine = this.getChildWithKey(StorageEngineClass);\n\n    if (storageEngine) {\n      storageEngine.destroy();\n    }\n  }\n\n  // TODO: Document\n  addStorageEngineClass(StorageEngineClass) {\n    return this.addChild(StorageEngineClass);\n  }\n\n  // TODO: Document\n  removeStorageEngineClass(StorageEngineClass) {\n    return this.removeChild(StorageEngineClass);\n  }\n\n  // TODO: Document\n  getStorageEngines() {\n    return this.getChildren();\n  }\n}\n","import KeyVaultService from \"./KeyVaultService\";\n\nexport default KeyVaultService;\n","import ReShellCore from \"../classes/ReShellCore\";\n\n/**\n * @global\n */\nwindow.ReShell = ReShellCore;\n","import ReShellCore from \"./classes/ReShellCore\";\nimport \"./globals\";\n\nexport default ReShellCore;\n","import axios from \"axios\";\n\n/**\n * This attempts to determine if we're running the latest version, regardless\n * if we have the ability to control the server-side headers related to browser\n * caching.\n *\n * @return {Promise<boolean>}\n */\nexport default async function fetchIsLatestVersion() {\n  /**\n   * @type {string[]} Array of static tag sources from our own DOM.\n   */\n  const ours = _getStaticTags();\n\n  // Pull the remote index.html file with a cache-busting timestamp appended\n  const response = await axios.get(\n    `${process.env.PUBLIC_URL || \"\"}/?__t=${new Date().getTime()}`\n  );\n\n  // Parse the remote response with browser's included DOMParser\n  const domParser = new window.DOMParser();\n  const resultDOM = domParser.parseFromString(response.data, \"text/html\");\n\n  /**\n   * @type {string[]} Array of static tag sources from the remote DOM.\n   */\n  const theirs = _getStaticTags(resultDOM);\n\n  if (theirs.length === 0) {\n    throw new Error(\"Unable to acquire remote info\");\n  }\n\n  for (const src of theirs) {\n    if (!ours.includes(src)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @param {Object} dom? [default = window.document]\n * @return {string[]}\n */\nfunction _getStaticTags(dom = window.document) {\n  const jsTags = [...dom.getElementsByTagName(\"script\")];\n\n  // TODO: Also look at CSS tags\n\n  const staticJsTagSrcs = jsTags\n    .filter(tag => tag.getAttribute(\"src\")?.startsWith(\"/static\"))\n    .map(tag => tag.getAttribute(\"src\"));\n\n  return staticJsTagSrcs;\n}\n","import PhantomCore, { EVT_UPDATED, EVT_DESTROYED } from \"phantom-core\";\nimport AppRegistration from \"../../AppRegistrationsProvider/classes/AppRegistration\";\n\nexport { EVT_UPDATED, EVT_DESTROYED };\n\n// TODO: Include ability to load preload resources, with states representing before / after preloading\n// TODO: Include ability to register splash screen, while preloading\n\n// TODO: Document\nexport default class AppRuntime extends PhantomCore {\n  // TODO: Implement ability to set default environment here\n  // TODO: Document\n  constructor(appRegistration) {\n    if (!(appRegistration instanceof AppRegistration)) {\n      throw new TypeError(\"appRegistration is not an AppRegistration\");\n    }\n\n    super();\n\n    this._appRegistration = appRegistration;\n\n    // Emit EVT_UPDATED out runtime when the registration updates\n    this.proxyOn(this._appRegistration, EVT_UPDATED, () => {\n      this.emit(EVT_UPDATED);\n    });\n\n    // Destruct runtime when registration destructs\n    this.proxyOn(this._appRegistration, EVT_DESTROYED, () => {\n      this.destroy();\n    });\n\n    this._windowController = null;\n  }\n\n  // TODO: Document\n  bringToTop() {\n    if (this._windowController) {\n      return this._windowController.bringToTop();\n    }\n  }\n\n  // TODO: Document\n  setWindowController(windowController) {\n    // TODO: Verify windowController is a WindowController\n\n    this._windowController = windowController;\n  }\n\n  // TODO: Document\n  getWindowController() {\n    return this._windowController;\n  }\n\n  // TODO: Document\n  getRegistration() {\n    return this._appRegistration;\n  }\n\n  // TODO: Document\n  getRegistrationID() {\n    return this._appRegistration.getID();\n  }\n\n  // TODO: Document\n  getAppDescriptor() {\n    return this._appRegistration.getAppDescriptor();\n  }\n\n  // TODO: Implement setEnvironment\n\n  getEnvironment() {\n    // TODO: Mix with runtime environment\n    return process.env;\n  }\n}\n","import { PhantomCollection, EVT_UPDATED, EVT_DESTROYED } from \"phantom-core\";\n\nimport AppRuntime from \"./AppRuntime\";\n\nexport { EVT_UPDATED, EVT_DESTROYED };\n\n// TODO: Document\nexport default class AppRuntimeCollection extends PhantomCollection {\n  addChild(appRuntime) {\n    if (!(appRuntime instanceof AppRuntime)) {\n      throw new TypeError(\"appRuntime is not an AppRuntime\");\n    }\n\n    return super.addChild(appRuntime);\n  }\n\n  /**\n   * @param {AppRuntime} appRuntime\n   * @return {void}\n   */\n  addAppRuntime(appRuntime) {\n    return this.addChild(appRuntime);\n  }\n\n  /**\n   *\n   * @param {AppRuntime} appRuntime\n   * @return {void}\n   */\n  removeAppRuntime(appRuntime) {\n    return this.removeChild(appRuntime);\n  }\n\n  /**\n   * @return {AppRuntime[]}\n   */\n  getAppRuntimes() {\n    return this.getChildren();\n  }\n}\n","import UIServiceCore, {\n  EVT_UPDATED,\n  EVT_DESTROYED,\n} from \"@core/classes/UIServiceCore\";\n\nimport AppRuntime from \"../classes/AppRuntime\";\nimport AppRuntimeCollection from \"../classes/AppRuntimeCollection\";\n\nexport { EVT_UPDATED, EVT_DESTROYED };\n\n/**\n * Manages the starting, stopping, and collection of AppRuntimes.\n */\nexport default class AppRuntimeOrchestrationService extends UIServiceCore {\n  // TODO: Document\n  constructor({ ...args }) {\n    super({ ...args });\n\n    this.setTitle(\"AppRuntime Orchestration Service\");\n\n    this.bindCollectionClass(AppRuntimeCollection);\n  }\n\n  // TODO: Document\n  startAppRuntime(appDescriptor) {\n    const appRuntime = new AppRuntime(appDescriptor);\n\n    this.getCollectionInstance(AppRuntimeCollection).addAppRuntime(appRuntime);\n\n    return appRuntime;\n  }\n\n  // TODO: Document\n  // Helper method; does not have to be called directly on this service if\n  // destructing the instance directly\n  async closeAppRuntime(appRuntime) {\n    return appRuntime.destroy();\n  }\n\n  // TODO: Document\n  getAppRuntimes() {\n    return this.getCollectionInstance(AppRuntimeCollection).getAppRuntimes();\n  }\n}\n","import React, { useCallback, useContext, useEffect, useMemo } from \"react\";\nimport AppRuntimeOrchestrationService, {\n  EVT_UPDATED,\n} from \"./services/AppRuntimeOrchestrationService\";\n\nimport { AppRegistrationsContext } from \"../AppRegistrationsProvider\";\n\nimport { UIServicesContext } from \"../UIServicesProvider\";\n\nimport useForceUpdate from \"@hooks/useForceUpdate\";\nimport useAppRuntimesAutoStart from \"./useAppRuntimesAutoStart\";\n\nexport const AppRuntimesContext = React.createContext({});\n\n// TODO: Document\nexport default function AppRuntimesProvider({ children }) {\n  const { appRegistrations } = useContext(AppRegistrationsContext);\n\n  const { startService } = useContext(UIServicesContext);\n  const forceUpdate = useForceUpdate();\n\n  // TODO: Document\n  const appOrchestrationService = useMemo(\n    () => startService(AppRuntimeOrchestrationService),\n    [startService]\n  );\n\n  // TODO: Document\n  const appRuntimes = appOrchestrationService.getAppRuntimes();\n\n  // TODO: Import type definition\n  /** @type {AppRegistration[]} */\n  const runningRegistrations = useMemo(\n    () => appRuntimes.map(runtime => runtime.getRegistration()),\n    [appRuntimes]\n  );\n\n  // TODO: Document\n  useEffect(() => {\n    appOrchestrationService.on(EVT_UPDATED, forceUpdate);\n\n    return function unmount() {\n      appOrchestrationService.off(EVT_UPDATED, forceUpdate);\n    };\n  }, [appOrchestrationService, forceUpdate]);\n\n  // TODO: Document\n  const startAppRuntime = useCallback(\n    appRegistration => {\n      return appOrchestrationService.startAppRuntime(appRegistration);\n    },\n    [appOrchestrationService]\n  );\n\n  // TODO: Merge with startAppRuntime after descriptors can specify multiple\n  // window support\n  //\n  // TODO: Debounce this call (starts to bog down if repeatedly pressing app button)\n  const bringToFrontOrStartAppRuntime = useCallback(\n    appRegistration => {\n      if (!runningRegistrations.includes(appRegistration)) {\n        // TODO: Open app w/ registration\n        startAppRuntime(appRegistration);\n      } else {\n        // Move grouped windows to top\n        // TODO: Order by window manager stacking order (most recently used\n        // window in group should appear in top)\n        // TODO: Refactor into window manager?\n        appRuntimes\n          .filter(runtime => runtime.getRegistration() === appRegistration)\n          .forEach(runtime => runtime.bringToTop());\n      }\n    },\n    [runningRegistrations, appRuntimes, startAppRuntime]\n  );\n\n  // TODO: Document (for linking to other windows)\n  const switchToAppRegistrationID = useCallback(\n    appRegistrationID => {\n      const appRegistration = appRegistrations.find(\n        predicate => predicate.getID() === appRegistrationID\n      );\n\n      if (!appRegistration) {\n        console.warn(`Unknown appRegistration with id: ${appRegistrationID}`);\n      } else {\n        bringToFrontOrStartAppRuntime(appRegistration);\n      }\n    },\n    [appRegistrations, bringToFrontOrStartAppRuntime]\n  );\n\n  // TODO: Document\n  const stopAppRuntime = useCallback(\n    appRegistration => {\n      return appOrchestrationService.stopAppRuntime(appRegistration);\n    },\n    [appOrchestrationService]\n  );\n\n  // TODO: Document\n  const getAppRuntimesWithRegistrationID = useCallback(\n    registrationID =>\n      appRuntimes.filter(\n        appRuntime => appRuntime.getRegistrationID() === registrationID\n      ),\n    [appRuntimes]\n  );\n\n  // TODO: Document\n  useAppRuntimesAutoStart({\n    appRegistrations,\n    startAppRuntime,\n  });\n\n  return (\n    <AppRuntimesContext.Provider\n      value={{\n        startAppRuntime,\n        stopAppRuntime,\n        appRuntimes,\n        getAppRuntimesWithRegistrationID,\n        runningRegistrations,\n        bringToFrontOrStartAppRuntime,\n        switchToAppRegistrationID,\n      }}\n    >\n      {children}\n    </AppRuntimesContext.Provider>\n  );\n}\n","import AppRuntimesProvider, { AppRuntimesContext } from \"./AppRuntimesProvider\";\n\nexport default AppRuntimesProvider;\nexport { AppRuntimesContext };\n","import { useEffect, useRef } from \"react\";\n\n// TODO: Document\nexport default function useAppRuntimesAutoStart({\n  appRegistrations,\n  startAppRuntime,\n}) {\n  const refHasAutoStarted = useRef(false);\n\n  // Automatically start registrations with isAutoStart set to true\n  useEffect(() => {\n    // NOTE: This timeout fixes an issue where two or more registrations could\n    // not open at once\n    const openTimeout = setTimeout(() => {\n      if (appRegistrations.length && !refHasAutoStarted.current) {\n        // FIXME: (jh) The reversed registrations seems to open apps in forward\n        // order, based on how they are defined in the desktop array.  I\n        // haven't done a lot of testing against this, so this may need to be\n        // redefined as necessary\n        for (const registration of [...appRegistrations].reverse()) {\n          if (registration.getIsAutoStart()) {\n            startAppRuntime(registration);\n          }\n        }\n\n        refHasAutoStarted.current = true;\n      }\n    });\n\n    return function unmount() {\n      clearTimeout(openTimeout);\n    };\n  }, [appRegistrations, startAppRuntime]);\n}\n","import { EVT_UPDATED } from \"phantom-core\";\nimport { useEffect, useState } from \"react\";\n\nimport useForceUpdate from \"@hooks/useForceUpdate\";\n// import useServicesContext from \"@hooks/useServicesContext\";\n// import AppRuntimeOrchestrationService from \"../../AppRuntimesProvider/services/AppRuntimeOrchestrationService\";\n\n// TODO: Refactor [native] window title setting\nconst DEFAULT_DOCUMENT_TITLE = document.title;\n\n// TODO: [consider using active element to help determine active controller in certain situations]\n// https://github.com/facebook/react/blob/main/packages/react-dom/src/client/getActiveElement.js\n\n// TODO: Document\nexport default function useActiveWindowController() {\n  const [activeWindowController, setActiveWindowController] = useState(null);\n  // const [backgroundVideoMediaStreamTrack, setBackgroundVideoMediaStreamTrack] = useState(null);\n\n  /*\n  const appOrchestrationService = useServiceClass(\n    AppRuntimeOrchestrationService\n  );\n  */\n\n  // TODO: Remove\n  // TODO: Mirror active window controller w/ AppRuntimeOrchestrationService (maybe have useActiveWindowController reflect orchestration state)\n  // const { services } = useServicesContext();\n  // console.log({ services });\n\n  // IMPORTANT! This should not be called often as it will force the entire app\n  // to re-render\n  const forceDesktopUpdate = useForceUpdate();\n\n  // FIXME: (jh) The useEffect won't run if the active window title has\n  // changed; forceDesktopUpdate is currently required to make it work,\n  // however the goal is to not have DesktopProvider re-render often\n  useEffect(() => {\n    const _handleUpdate = updatedState => {\n      // TODO: Refactor [native] window title setting\n      if (!activeWindowController) {\n        document.title = DEFAULT_DOCUMENT_TITLE;\n      } else if (!updatedState || updatedState.title !== undefined) {\n        document.title = `${activeWindowController.getTitle()} | ${DEFAULT_DOCUMENT_TITLE}`;\n\n        // Force the entire app to re-render so that the active menu does\n        // FIXME: (jh) This shouldn't require a forced update\n        forceDesktopUpdate();\n      }\n    };\n\n    _handleUpdate();\n\n    if (activeWindowController) {\n      activeWindowController.on(EVT_UPDATED, _handleUpdate);\n\n      return function unmount() {\n        activeWindowController.off(EVT_UPDATED, _handleUpdate);\n      };\n    }\n  }, [activeWindowController, forceDesktopUpdate]);\n\n  return {\n    activeWindowController,\n    setActiveWindowController,\n  };\n}\n","import { PhantomCollection, EVT_UPDATED, EVT_DESTROYED } from \"phantom-core\";\n\nexport { EVT_UPDATED, EVT_DESTROYED };\n\nexport default class BackgroundAssetCollection extends PhantomCollection {\n  // TODO: Document\n  addBackgroundAsset(backgroundAsset) {\n    return this.addChild(backgroundAsset);\n  }\n\n  // TODO: Document\n  removeBackgroundAsset(backgroundAsset) {\n    return this.removeChild(backgroundAsset);\n  }\n\n  // TODO: Document\n  getBackgroundAssets() {\n    return this.getChildren();\n  }\n}\n","import React from \"react\";\n\nimport useActiveWindowController from \"./hooks/useActiveWindowController\";\nimport useBackgroundAssetCollection from \"./hooks/useBackgroundAssetCollection\";\n\nexport const DesktopContext = React.createContext({});\n\nexport default function DesktopProvider({ children }) {\n  const { activeWindowController, setActiveWindowController } =\n    useActiveWindowController();\n  const { backgroundAssets, addBackgroundAsset, removeBackgroundAsset } =\n    useBackgroundAssetCollection();\n\n  return (\n    <DesktopContext.Provider\n      value={{\n        activeWindowController,\n        setActiveWindowController,\n\n        backgroundAssets,\n        addBackgroundAsset,\n        removeBackgroundAsset,\n      }}\n    >\n      {children}\n    </DesktopContext.Provider>\n  );\n}\n","import DesktopProvider, { DesktopContext } from \"./DesktopProvider\";\n\nexport default DesktopProvider;\nexport { DesktopContext };\n","import { useCallback, useEffect, useState } from \"react\";\nimport BackgroundAssetCollection, {\n  EVT_UPDATED,\n  EVT_DESTROYED,\n} from \"../classes/BackgroundAssetCollection\";\n\nexport default function useBackgroundAssetCollection() {\n  const [assetCollection, setAssetCollection] = useState(null);\n  const [backgroundAssets, setBackgroundAssets] = useState([]);\n\n  useEffect(() => {\n    const assetCollection = new BackgroundAssetCollection();\n\n    setAssetCollection(assetCollection);\n\n    assetCollection.once(EVT_DESTROYED, () => {\n      setAssetCollection(null);\n    });\n\n    setBackgroundAssets(assetCollection.getBackgroundAssets());\n    assetCollection.on(EVT_UPDATED, () =>\n      setBackgroundAssets(assetCollection.getBackgroundAssets())\n    );\n\n    return function unmount() {\n      assetCollection.destroy();\n    };\n  }, []);\n\n  // TODO: Document\n  const addBackgroundAsset = useCallback(\n    backgroundAsset => assetCollection.addBackgroundAsset(backgroundAsset),\n    [assetCollection]\n  );\n\n  // TODO: Document\n  const removeBackgroundAsset = useCallback(\n    backgroundAsset => assetCollection.removeBackgroundAsset(backgroundAsset),\n    [assetCollection]\n  );\n\n  return {\n    backgroundAssets,\n    addBackgroundAsset,\n    removeBackgroundAsset,\n  };\n}\n","// IMPORTANT: This file is included within ReShell core, so it is good practice\n// to not include ReShell core as a dependency here\n\nconst dayjs = require(\"dayjs\");\n\n// Extend day.js w/ fromNow() method\nconst relativeTime = require(\"dayjs/plugin/relativeTime\");\ndayjs.extend(relativeTime);\n\n// Extend day.js w/ localization\nconst localizedFormat = require(\"dayjs/plugin/localizedFormat\");\ndayjs.extend(localizedFormat);\n"],"sourceRoot":""}