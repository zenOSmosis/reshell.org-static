{"version":3,"sources":["common.speech/Exports.ts","sdk/Contracts.ts","common/RiffPcmEncoder.ts","common.browser/PCMRecorder.ts","common.browser/MicAudioSource.ts","sdk/NoMatchReason.ts","common.browser/FileAudioSource.ts","sdk/Audio/PullAudioInputStreamCallback.ts","sdk/Audio/SpeakerAudioDestination.ts","sdk/Audio/PushAudioOutputStreamCallback.ts","sdk/Audio/AudioFileWriter.ts","sdk/Audio/AudioConfig.ts","sdk/KeywordRecognitionModel.ts","sdk/LanguageUnderstandingModel.ts","sdk/SpeechTranslationConfig.ts","sdk/Recognizer.ts","sdk/SpeechRecognizer.ts","sdk/IntentRecognizer.ts","sdk/ConnectionMessage.ts","sdk/ConnectionEventArgs.ts","sdk/ConnectionMessageEventArgs.ts","sdk/ServiceEventArgs.ts","sdk/Connection.ts","sdk/TranslationRecognizer.ts","sdk/NoMatchDetails.ts","sdk/CancellationDetailsBase.ts","sdk/CancellationDetails.ts","sdk/PhraseListGrammar.ts","sdk/BotFrameworkConfig.ts","sdk/CustomCommandsConfig.ts","common.speech/DialogConnectorFactory.ts","sdk/ServicePropertyChannel.ts","sdk/DialogServiceConnector.ts","sdk/SpeakerRecognitionResult.ts","sdk/Audio/BaseAudioPlayer.ts","sdk/VoiceProfile.ts","sdk/VoiceProfileEnrollmentResult.ts","sdk/VoiceProfileResult.ts","sdk/VoiceProfilePhraseResult.ts","sdk/VoiceProfileClient.ts","sdk/SpeakerIdentificationModel.ts","sdk/SpeakerVerificationModel.ts","sdk/SpeakerRecognizer.ts","sdk/AutoDetectSourceLanguageConfig.ts","sdk/AutoDetectSourceLanguageResult.ts","sdk/SourceLanguageConfig.ts","common.speech/Transcription/ConversationConnectionConfig.ts","common.speech/Transcription/ConversationTranslatorInterfaces.ts","sdk/Transcription/ParticipantChangedReason.ts","common.speech/Transcription/ConversationManager.ts","common.speech/Transcription/ConversationConnectionMessage.ts","common.speech/Transcription/ConversationWebsocketMessageFormatter.ts","common.speech/Transcription/ConversationConnectionFactory.ts","sdk/Transcription/ConversationTranslationCanceledEventArgs.ts","sdk/Transcription/ConversationExpirationEventArgs.ts","sdk/Transcription/ConversationTranslationResult.ts","common.speech/Transcription/ConversationRequestSession.ts","common.speech/Transcription/ConversationTranslatorEventArgs.ts","common.speech/Transcription/ServiceMessages/CommandResponsePayload.ts","common.speech/Transcription/ServiceMessages/ParticipantResponsePayload.ts","common.speech/Transcription/ServiceMessages/TranslationResponsePayload.ts","common.speech/Transcription/ConversationServiceAdapter.ts","common.speech/Transcription/ConversationTranslatorRecognizer.ts","sdk/Transcription/ConversationParticipantsChangedEventArgs.ts","sdk/Transcription/ConversationTranslationEventArgs.ts","sdk/Transcription/ConversationTranslator.ts","sdk/Transcription/IParticipant.ts","sdk/Transcription/Conversation.ts","sdk/Transcription/ConversationCommon.ts","sdk/VoiceInfo.ts","common.speech/Transcription/TranscriberRecognizer.ts","sdk/Transcription/ConversationTranscriber.ts","sdk/PronunciationAssessmentGradingSystem.ts","sdk/PronunciationAssessmentGranularity.ts","sdk/SynthesisVoicesResult.ts","sdk/SpeechSynthesizer.ts","sdk/PronunciationAssessmentConfig.ts","sdk/PronunciationAssessmentResult.ts","../node_modules/media-stream-track-controller/src/constants.js","../node_modules/@use-gesture/core/dist/actions-ef87abaa.esm.js","../node_modules/@szhsin/react-menu/dist/es/_virtual/_rollupPluginBabelHelpers.js","common.speech/HeaderNames.ts","../node_modules/@szhsin/react-menu/dist/es/utils/constants.js","../node_modules/@szhsin/react-menu/dist/es/utils/utils.js","sdk/Audio/AudioStreamFormat.ts","sdk/Audio/AudioOutputStream.ts","common.speech/ConnectionFactoryBase.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","common/Error.ts","../node_modules/media-stream-track-controller/src/_base/_MediaStreamTrackControllerBase.js","../node_modules/@szhsin/react-menu/dist/es/hooks/useBEM.js","../node_modules/media-stream-track-controller/src/utils/constraints/mergeConstraints.js","common/Guid.ts","common.speech/QueryParameterNames.ts","../node_modules/@use-gesture/core/dist/maths-b2a210f4.esm.js","../node_modules/@szhsin/react-menu/dist/es/hooks/useFlatStyles.js","../node_modules/@szhsin/react-menu/dist/es/utils/propTypes.js","../node_modules/media-stream-track-controller/src/index.js","../node_modules/media-stream-track-controller/src/MediaStreamTrackControllerFactory.js","sdk/Audio/AudioInputStream.ts","../node_modules/media-stream-track-controller/src/utils/audioContext/getSharedAudioContext.js","../node_modules/media-stream-track-controller/src/utils/audioContext/createNewAudioContext.js","../node_modules/media-stream-track-controller/src/utils/mediaDevice/mediaDeviceInfoFilters/filterInputMediaDevices.js","../node_modules/media-stream-track-controller/src/utils/mediaStream/stopMediaStream.js","common/PlatformEvent.ts","sdk/PropertyId.ts","common.speech/SpeechConnectionMessage.Internal.ts","sdk/Audio/AudioOutputFormat.ts","common.speech/RecognitionEvents.ts","common.speech/IAuthentication.ts","sdk/DialogServiceConfig.ts","../node_modules/@use-gesture/core/actions/dist/use-gesture-core-actions.esm.js","../node_modules/@szhsin/react-menu/dist/es/hooks/useCombinedRef.js","../node_modules/media-stream-track-controller/src/audio/AudioMediaStreamTrackController.js","../node_modules/media-stream-track-controller/src/utils/mediaStreamTrack/stopMediaStreamTrack.js","../node_modules/media-stream-track-controller/src/video/VideoMediaStreamTrackController.js","../node_modules/media-stream-track-controller/src/utils/constraints/makeAudioConstraints.js","../node_modules/media-stream-track-controller/src/utils/mediaDevice/mediaDeviceInfoFilters/filterOutputMediaDevices.js","common.speech/SynthesisAdapterBase.ts","sdk/SpeechSynthesisOutputFormat.ts","sdk/PropertyCollection.ts","sdk/SpeechRecognitionEventArgs.ts","sdk/CancellationEventArgsBase.ts","sdk/TranslationRecognitionResult.ts","sdk/SpeechConfig.ts","../node_modules/@use-gesture/react/dist/use-gesture-react.esm.js","../node_modules/@szhsin/react-menu/dist/es/utils/withHovering.js","../node_modules/@szhsin/react-menu/dist/es/hooks/useActiveState.js","../node_modules/media-stream-track-controller/src/utils/mediaDevice/getMatchedMediaDevice.js","../node_modules/media-stream-track-controller/src/utils/mediaDevice/getIsSameMediaDevice.js","../node_modules/media-stream-track-controller/src/utils/mediaDevice/mediaDeviceToPlainObject.js","../node_modules/media-stream-track-controller/src/MediaStreamTrackControllerCollection.js","../node_modules/media-stream-track-controller/src/utils/mediaStreamTrack/createTrackControllersFromMediaStream.js","../node_modules/media-stream-track-controller/src/utils/constraints/audioQualityPresets.js","../node_modules/media-stream-track-controller/src/utils/constraints/makeScreenCaptureConstraints.js","../node_modules/media-stream-track-controller/src/utils/constraints/makeVideoConstraints.js","../node_modules/media-stream-track-controller/src/utils/constraints/makeSpecificDeviceCaptureConstraints.js","../node_modules/media-stream-track-controller/src/utils/mediaDevice/cacheDiffMediaDevices.js","../node_modules/media-stream-track-controller/src/utils/mediaDevice/captureMediaDevice.js","../node_modules/media-stream-track-controller/src/utils/mediaDevice/fetchMediaDevices.js","../node_modules/media-stream-track-controller/src/utils/mediaDevice/getMediaDeviceTrackControllers.js","../node_modules/media-stream-track-controller/src/audio/AudioMediaStreamTrackLevelMonitor/index.js","../node_modules/react-json-view/dist/main.js","common/Promise.ts","common.speech/RecognizerConfig.ts","common.speech/SynthesisContext.ts","common.speech/AgentConfig.ts","sdk/CancellationReason.ts","sdk/CancellationErrorCodes.ts","sdk/SpeechSynthesisEventArgs.ts","sdk/SpeechSynthesisResult.ts","sdk/SynthesisResult.ts","sdk/ResultReason.ts","common.speech/ServiceMessages/SynthesisAudioMetadata.ts","sdk/SpeechSynthesisWordBoundaryEventArgs.ts","sdk/SpeechSynthesisBookmarkEventArgs.ts","sdk/SpeechSynthesisVisemeEventArgs.ts","sdk/SessionEventArgs.ts","sdk/RecognitionEventArgs.ts","sdk/OutputFormat.ts","sdk/IntentRecognitionEventArgs.ts","sdk/RecognitionResult.ts","sdk/SpeechRecognitionResult.ts","sdk/IntentRecognitionResult.ts","sdk/SpeechRecognitionCanceledEventArgs.ts","sdk/TranslationRecognitionEventArgs.ts","sdk/TranslationSynthesisEventArgs.ts","sdk/TranslationSynthesisResult.ts","sdk/ProfanityOption.ts","common.speech/ServiceRecognizerBase.ts","common.speech/DynamicGrammarBuilder.ts","common.speech/SpeechContext.ts","common.speech/ServiceMessages/SpeechDetected.ts","common.speech/CognitiveSubscriptionKeyAuthentication.ts","common.speech/CognitiveTokenAuthentication.ts","common.speech/SpeechConnectionFactory.ts","common.speech/WebsocketMessageFormatter.ts","common.speech/SpeechServiceRecognizer.ts","common.speech/ServiceMessages/SpeechHypothesis.ts","common.speech/ServiceMessages/SimpleSpeechPhrase.ts","common.speech/ServiceMessages/Enums.ts","common.speech/EnumTranslation.ts","common.speech/ServiceMessages/DetailedSpeechPhrase.ts","common.speech/IntentConnectionFactory.ts","common.speech/AddedLmIntent.ts","common.speech/IntentServiceRecognizer.ts","common.speech/ServiceMessages/IntentResponse.ts","sdk/IntentRecognitionCanceledEventArgs.ts","sdk/VoiceProfileType.ts","common.speech/TranslationConnectionFactory.ts","common.speech/TranslationServiceRecognizer.ts","common.speech/ServiceMessages/TranslationHypothesis.ts","common.speech/TranslationStatus.ts","common.speech/ServiceMessages/TranslationPhrase.ts","common.speech/ServiceMessages/TranslationSynthesisEnd.ts","sdk/TranslationRecognitionCanceledEventArgs.ts","sdk/Translations.ts","sdk/ActivityReceivedEventArgs.ts","common.speech/ServiceMessages/SpeechKeyword.ts","common.speech/SpeakerRecognitionConfig.ts","common.speech/SpeakerIdMessageAdapter.ts","common.speech/TranscriberConnectionFactory.ts","common.speech/TranscriptionServiceRecognizer.ts","sdk/ConversationTranscriptionCanceledEventArgs.ts","common.speech/SpeechSynthesisConnectionFactory.ts","common.speech/SynthesizerConfig.ts","common.speech/SynthesisRestAdapter.ts","../node_modules/@szhsin/react-menu/dist/es/utils/cloneChildren.js","../node_modules/@szhsin/react-menu/dist/es/positionUtils/placeLeftorRight.js","../node_modules/@szhsin/react-menu/dist/es/positionUtils/placeArrowVertical.js","../node_modules/@szhsin/react-menu/dist/es/positionUtils/placeToporBottom.js","../node_modules/@szhsin/react-menu/dist/es/positionUtils/placeArrowHorizontal.js","../node_modules/@szhsin/react-menu/dist/es/hooks/useIsomorphicLayoutEffect.js","../node_modules/@szhsin/react-menu/dist/es/components/MenuList.js","../node_modules/@szhsin/react-menu/dist/es/positionUtils/getPositionHelpers.js","../node_modules/@szhsin/react-menu/dist/es/positionUtils/positionContextMenu.js","../node_modules/@szhsin/react-menu/dist/es/positionUtils/positionMenu.js","common.speech/ServiceMessages/ActivityResponsePayload.ts","common/DialogEvents.ts","common.speech/DialogServiceTurnState.ts","common.speech/DialogServiceTurnStateManager.ts","common.speech/DialogServiceAdapter.ts","common.speech/ServiceMessages/TurnStatusPayload.ts","sdk/TurnStatusReceivedEventArgs.ts","common.speech/SynthesisEvents.ts","common.speech/SynthesisTurn.ts","common.speech/ServiceTelemetryListener.Internal.ts","common.speech/RequestSession.ts","../node_modules/@use-gesture/core/dist/use-gesture-core.esm.js","../node_modules/@szhsin/react-menu/dist/es/components/MenuHeader.js","../node_modules/@szhsin/react-menu/dist/es/components/MenuDivider.js","../node_modules/media-stream-track-controller/src/MediaStreamTrackControllerFactoryCollection.js","../node_modules/media-stream-track-controller/src/utils/index.js","../node_modules/media-stream-track-controller/src/utils/audioContext/untilAudioContextResumed.js","../node_modules/media-stream-track-controller/src/utils/mediaDevice/mediaDeviceInfoFilters/filterAudioInputDevices.js","../node_modules/media-stream-track-controller/src/utils/mediaDevice/mediaDeviceInfoFilters/filterAudioOutputDevices.js","../node_modules/media-stream-track-controller/src/utils/mediaDevice/mediaDeviceInfoFilters/filterVideoInputDevices.js","../node_modules/media-stream-track-controller/src/utils/mediaDevice/mediaDeviceInfoFilters/filterVideoOutputDevices.js","../node_modules/media-stream-track-controller/src/utils/mediaDevice/captureSpecificMediaDevice.js","../node_modules/media-stream-track-controller/src/utils/mediaDevice/fetchInputMediaDevices.js","../node_modules/media-stream-track-controller/src/utils/mediaDevice/getIsMediaDeviceBeingCaptured.js","../node_modules/media-stream-track-controller/src/utils/mediaDevice/getIsMediaDeviceCaptureSupported.js","../node_modules/media-stream-track-controller/src/utils/mediaDevice/uncaptureSpecificMediaDevice.js","../node_modules/media-stream-track-controller/src/utils/mediaStream/generators/createEmptyAudioMediaStream.js","../node_modules/media-stream-track-controller/src/utils/mediaStream/generators/createTestAudioMediaStream.js","../node_modules/media-stream-track-controller/src/utils/mediaStream/generators/createTestVideoMediaStream.js","../node_modules/media-stream-track-controller/src/utils/mediaStreamTrack/getTrackControllerInstances.js","../node_modules/media-stream-track-controller/src/utils/screen/captureScreen.js","../node_modules/media-stream-track-controller/src/utils/screen/getIsScreenCaptureSupported.js","../node_modules/media-stream-track-controller/src/audio/AudioMediaStreamTrackLevelMonitor/AudioMediaStreamTrackLevelMonitor.js","../node_modules/media-stream-track-controller/src/audio/AudioMediaStreamTrackLevelMonitor/NativeAudioMediaStreamTrackLevelMonitor.js","../node_modules/media-stream-track-controller/src/audio/MultiAudioMediaStreamTrackLevelMonitor/index.js","../node_modules/media-stream-track-controller/src/audio/MultiAudioMediaStreamTrackLevelMonitor/MultiAudioMediaStreamTrackLevelMonitor.js","common/EventSource.ts","common/ConnectionMessage.ts","common.browser/CertChecks.ts","../node_modules/url-parse/index.js","../node_modules/requires-port/index.js","../node_modules/querystringify/index.js","common/OCSPEvents.ts","common.browser/RestConfigBase.ts","../node_modules/bent/src/browser.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/isNativeFunction.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/construct.js","../node_modules/bent/src/core.js","../node_modules/deep-object-diff/mjs/utils.js","../node_modules/deep-object-diff/mjs/diff.js","../microsoft.cognitiveservices.speech.sdk.ts","common.browser/ConsoleLoggingListener.ts","common/Queue.ts","common/List.ts","../node_modules/@szhsin/react-menu/dist/es/components/MenuItem.js","../node_modules/@szhsin/react-menu/dist/es/hooks/useItemState.js","../node_modules/@szhsin/react-menu/dist/es/components/ControlledMenu.js","common/Events.ts","common/AudioSourceEvents.ts","common/ChunkedArrayBufferStream.ts","common/Stream.ts","common/ConnectionEvents.ts","common/IConnection.ts","common/BackgroundError.ts","common/Timeout.ts","common.browser/ReplayableAudioNode.ts","common/RawWebsocketMessage.ts","common.browser/ProxyInfo.ts","common.browser/RestMessageAdapter.ts","../node_modules/react-transition-state/dist/index.es.js","../node_modules/@szhsin/react-menu/dist/es/hooks/useMenuState.js","../node_modules/@szhsin/react-menu/dist/es/components/SubMenu.js","../node_modules/@szhsin/react-menu/dist/es/hooks/useMenuStateAndFocus.js","../node_modules/@szhsin/react-menu/dist/es/hooks/useMenuChange.js","common/ConnectionOpenResponse.ts","common.browser/WebsocketMessageAdapter.ts","common.browser/WebsocketConnection.ts"],"names":["OutputFormatPropertyName","CancellationErrorCodePropertyName","ServicePropertiesPropertyName","ForceDictationPropertyName","AutoDetectSourceLanguagesOpenRangeOptionName","Contracts","param","name","undefined","Error","throwIfNullOrUndefined","trim","length","isDisposed","array","item","throwIfNullOrWhitespace","actualSampleRate","desiredSampleRate","encode","actualAudioFrame","audioFrame","downSampleAudioFrame","privActualSampleRate","privDesiredSampleRate","audioLength","buffer","ArrayBuffer","view","DataView","floatTo16BitPCM","setString","offset","str","i","setUint8","charCodeAt","input","s","Math","max","min","setInt16","srcFrame","srcRate","dstRate","ratio","dstLength","round","dstFrame","Float32Array","srcOffset","dstOffset","nextSrcOffset","accum","count","this","stopInputOnRelease","record","context","mediaStream","outputStream","waveStreamEncoder","sampleRate","micInput","createMediaStreamSource","privSpeechProcessorScript","blob","Blob","type","URL","createObjectURL","attachScriptProcessor","scriptNode","bufferSize","createScriptProcessor","error","audioSampleRate","onaudioprocess","event","inputFrame","inputBuffer","getChannelData","isClosed","waveFrame","writeStreamChunk","isEnd","timeReceived","Date","now","connect","destination","privMediaResources","scriptProcessorNode","source","stream","audioWorklet","addModule","then","workletNode","AudioWorkletNode","port","onmessage","ev","data","catch","err","releaseMediaResources","disconnect","privStopInputOnRelease","getTracks","forEach","track","stop","setWorkletUrl","url","privRecorder","deviceId","audioSourceId","privStreams","turnOn","privInitializeDeferral","promise","createAudioContext","typedError","reject","message","nav","window","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","mediaDevices","constraints","successCallback","errorCallback","next","onEvent","privId","privMediaStream","active","resolve","audio","video","errorMsg","privContext","state","resume","reason","id","attach","audioNodeId","listen","detach","readEnded","turnOff","read","close","ChunkedArrayBufferStream","privOutputChunkSize","result","privEvents","Events","instance","AudioStreamFormat","getAudioContext","MicAudioSource","AUDIOFORMAT","samplesPerSec","avgBytesPerSec","EventSource","privIsClosing","Promise","streamId","destroyAudioContext","getMicrophoneLabel","label","bitspersample","bitsPerSample","channelcount","channels","connectivity","Unknown","manufacturer","model","samplerate","Microphones","setProperty","value","defaultMicrophoneName","privMicrophoneLabel","microphoneDeviceId","getSettings","deferred","enumerateDevices","devices","device","hasClose","suspend","getDefaultInputFormat","NoMatchReason","file","filename","privHeaderEnd","privFilename","lastIndexOf","upload","privSource","privAudioFormatPromise","readHeader","File","header","slice","headerResult","processHeader","getWord","index","String","fromCharCode","getUint8","formatSize","getInt32","channelCount","getUint16","getUint32","pos","maxHeaderSize","getWaveFormatPCM","reader","FileReader","onload","target","readAsArrayBuffer","h","byteOffset","byteLength","onerror","format","chunk","processFile","buff","toString","fileBuffer","c","AudioFormatToMimeType","PCM","MuLaw","MP3","OGG_OPUS","WEBM_OPUS","ALaw","FLAC","audioDestinationId","privPlaybackStarted","privAppendingToBuffer","privMediaSourceOpened","privBytesReceived","privIsPaused","privIsClosed","write","cb","privAudioBuffer","push","updateSourceBuffer","privAudioOutputStream","privSourceBuffer","handleSourceBufferUpdateEnd","privFormat","formatTag","hasHeader","receivedAudio","_","SynthesisAdapterBase","addHeader","audioBlob","privAudio","src","notifyPlayback","console","warn","onAudioEnd","set","AudioContext","webkitAudioContext","mimeType","MediaSource","isTypeSupported","Audio","privMediaSource","load","onsourceopen","duration","addSourceBuffer","onupdate","onupdateend","onupdatestart","volume","mute","muted","unmute","currentTime","pause","play","sourceBufferAvailable","binary","shift","appendBuffer","unshift","log","canEndStream","endOfStream","onAudioStart","onended","readyState","updating","privFd","throwIfNotUndefined","privAudioFormat","headerOffset","privWriteStream","fd","start","autoClose","Uint8Array","on","updateHeader","bytesWritten","Int8Array","end","pcmRecorder","audioStream","AudioInputStream","MediaStream","player","AudioConfig","fromDefaultSpeakerOutput","events","throwIfNull","getProperty","def","deviceInfo","privDestination","privDisposed","fileName","throwIfFileDoesNotExist","uri","hostname","langModelImp","firstDot","host","indexOf","region","substr","lastSegment","pathname","appId","subscriptionKey","searchParams","get","ret","properties","PropertyId","SpeechServiceConnection_Key","SpeechServiceConnection_Region","authorizationToken","SpeechServiceAuthorization_Token","hostName","speechImpl","SpeechServiceConnection_Host","protocol","endpoint","SpeechServiceConnection_Endpoint","href","SpeechConfig","privSpeechProperties","PropertyCollection","outputFormat","OutputFormat","Simple","SpeechServiceConnection_RecoLanguage","SpeechServiceConnection_EndpointId","addTargetLanguage","languages","targetLanguages","SpeechServiceConnection_TranslationToLanguages","join","split","SpeechServiceConnection_TranslationVoice","setProxy","proxyHostName","proxyPort","proxyUserName","proxyPassword","SpeechServiceConnection_ProxyHostName","SpeechServiceConnection_ProxyPort","SpeechServiceConnection_ProxyUserName","SpeechServiceConnection_ProxyPassword","setServiceProperty","channel","currentProperties","JSON","parse","stringify","setProfanity","profanity","SpeechServiceResponse_ProfanityOption","ProfanityOption","enableAudioLogging","SpeechServiceConnection_EnableAudioLogging","requestWordLevelTimestamps","SpeechServiceResponse_RequestWordLevelTimestamps","enableDictation","SpeechServiceConnection_SynthLanguage","language","SpeechServiceConnection_SynthVoice","voice","SpeechSynthesisOutputFormat","SpeechServiceConnection_SynthOutputFormat","audioConfig","connectionFactory","fromDefaultMicrophoneInput","privProperties","clone","privConnectionFactory","implCommonRecognizerSetup","errorCb","throwIfDisposed","dispose","privReco","disposing","audioSource","osPlatform","osName","osVersion","platform","userAgent","appVersion","recognizerConfig","createRecognizerConfig","createServiceRecognizer","Recognizer","getAuthFromProperties","recognizeOnceAsyncImpl","recognitionMode","implRecognizerStop","recognize","startContinuousRecognitionAsyncImpl","stopContinuousRecognitionAsyncImpl","stopRecognizing","ServiceRecognizerBase","telemetryDataEnabled","enabled","CognitiveSubscriptionKeyAuthentication","CognitiveTokenAuthentication","authFetchEventId","speechConfig","speechConfigImpl","SpeechConnectionFactory","privDisposedRecognizer","token","Detailed","recognizeOnceAsync","Interactive","startContinuousRecognitionAsync","Conversation","stopContinuousRecognitionAsync","startKeywordRecognitionAsync","stopKeywordRecognitionAsync","RecognizerConfig","authentication","configImpl","SpeechServiceRecognizer","autoDetectSourceLanguageConfig","mergeTo","SpeechRecognizer","IntentConnectionFactory","privAddedIntents","privAddedLmIntents","privDisposedIntentRecognizer","Object","keys","privUmbrellaIntent","buildSpeechContext","speechContext","setSection","Intent","dynamicGrammar","addReferenceGrammar","ReferenceGrammars","setIntents","addIntent","simplePhrase","intentId","addIntentWithLanguageModel","intentName","modelImpl","AddedLmIntent","addAllIntents","audioImpl","IntentServiceRecognizer","refGrammers","addedLmIntent","grammer","key","provider","privConnectionMessage","headers","HeaderNames","ConnectionId","Speech_SessionId","find","toLowerCase","messageType","Text","Binary","textBody","binaryBody","SessionEventArgs","json","sessionId","privJsonResult","privEventName","openConnection","privInternalData","closeConnection","setMessageProperty","path","propertyName","propertyValue","synthesisContext","sendMessageAsync","payload","success","sendNetworkMessage","setupEvents","privEventListener","connectionEvents","connectionEvent","connected","connectionId","disconnected","messageSent","messageReceived","privServiceEventListener","serviceEvents","e","receivedServiceMessage","jsonString","recognizer","recoBase","internalData","Connection","synthesizer","synthBase","TranslationConnectionFactory","privDisposedTranslationRecognizer","removeTargetLanguage","lang","splice","updateLanguages","includes","onConnection","onDisconnection","TranslationServiceRecognizer","conn","fromRecognizer","to","privReason","simpleSpeech","SimpleSpeechPhrase","fromJSON","NotRecognized","RecognitionStatus","BabbleTimeout","InitialBabbleTimeout","InitialSilenceTimeout","NoMatchDetails","errorDetails","errorCode","privErrorDetails","privErrorCode","CancellationReason","NoError","RecognitionResult","EnumTranslation","implTranslateCancelResult","CancellationDetails","implTranslateErrorDetails","recogBase","privGrammerBuilder","addPhrase","phrase","addPhrases","phrases","clear","clearPhrases","PhraseListGrammar","subscription","botId","botFrameworkConfig","DialogServiceConfig","Conversation_DialogType","DialogTypes","BotFramework","Conversation_ApplicationId","resolvedHost","applicationId","customCommandsConfig","CustomCommands","create","config","authInfo","parameters","dialogType","requestTurnStatus","Conversation_Request_Bot_Status_Messages","queryParams","QueryParameterNames","Format","Language","RequestBotStatusMessages","BotId","CustomCommandsAppId","resourceInfix","version","headerName","hostSuffix","ConnectionFactoryBase","getHostSuffix","DialogConnectionFactory","Constants","BaseUrl","standardizedHost","endsWith","ApiKey","setCommonUrlParams","enableCompression","WebsocketConnection","WebsocketMessageFormatter","ProxyInfo","fromRecognizerConfig","ServicePropertyChannel","dialogConfig","dialogServiceConfigImpl","isTurnComplete","privIsDisposed","agentConfig","buildAgentConfig","Conversation_Speech_Activity_Template","speechActivityTemplate","listenOnceAsync","retPromise","callbackHolder","finally","sendActivityAsync","activity","errCb","sendMessage","DialogServiceAdapter","botInfo","commType","commandsCulture","Conversation_Agent_Connection_Id","conversationId","Conversation_Conversation_Id","fromId","Conversation_From_Id","ttsAudioFormat","SpeakerRecognitionResultType","audioFormat","audioContext","gainNode","autoUpdateBufferTimer","init","playAudioSample","newAudioData","ensureInitializedContext","audioData","formatAudioData","newSamplesData","samples","stopAudio","clearInterval","setInterval","updateAudioBuffer","createGain","gain","startTime","formatArrayBuffer","Int16Array","Int32Array","maxValue","float32Data","bufferSource","createBufferSource","frameCount","audioBuffer","createBuffer","channelOffset","playAudio","decodeAudioData","newBuffer","profileId","profileType","privProfileType","statusText","ResultReason","Canceled","privDetails","enrollmentStatus","EnrollingVoiceProfile","ServiceError","enrollmentsCount","enrollmentsLengthInSec","results","VoiceProfileEnrollmentResult","EnrolledVoiceProfile","getIdentificationDetails","getVerificationDetails","audioLengthInSec","parseFloat","audioSpeechLengthInSec","enrollmentsSpeechLengthInSec","identificationProfileId","remainingEnrollmentsSpeechLengthInSec","verificationProfileId","remainingEnrollmentsCount","remainingEnrollments","VoiceProfileEnrollmentCancellationDetails","VoiceProfileCancellationDetails","privPhrases","passPhrase","activationPhrase","implClientSetup","createProfileAsync","privAdapter","createProfile","ok","status","response","profile","retrieveEnrollmentResultAsync","getProfileStatus","getAllProfilesAsync","getProfiles","VoiceProfileType","TextIndependentIdentification","FromIdentificationProfileList","FromVerificationProfileList","getActivationPhrasesAsync","getPhrases","enrollProfileAsync","createEnrollment","deleteProfileAsync","deleteProfile","getResult","DeletedVoiceProfile","resetProfileAsync","resetProfile","ResetVoiceProfile","SpeakerRecognitionConfig","SpeakerIdMessageAdapter","successReason","profiles","privVoiceProfiles","map","SpeakerIdentificationModel","resultType","resultReason","RecognizedSpeaker","Identify","privProfileId","identifiedProfile","privScore","score","recognitionResult","NoMatch","SpeechServiceResponse_JsonResult","SpeakerRecognitionCancellationDetails","privVoiceProfile","SpeakerVerificationModel","privAudioConfigImpl","implSRSetup","responsePromise","identifySpeaker","verifySpeaker","Verify","voiceProfile","AutoDetectSourceLanguageConfig","SpeechServiceConnection_AutoDetectSourceLanguages","throwIfArrayEmptyOrWhitespace","configs","autoConfig","langs","endpointId","customProperty","languageDetectionConfidence","privLanguage","privLanguageDetectionConfidence","AutoDetectSourceLanguageResult","privEndpointId","SourceLanguageConfig","ConversationConnectionConfig","privHost","privApiVersion","privClientAppId","privDefaultLanguageCode","privRestPath","privWebSocketPath","privSpeechHost","privSpeechPath","privTranscriptionEventKeys","ParticipantChangedReason","participants","meId","addOrUpdateParticipant","exists","getParticipantIndex","getParticipant","findIndex","p","deleteParticipant","filter","isHost","ConversationTranslatorMessageTypes","ConversationTranslatorCommandTypes","privRequestParams","configParams","privErrors","restErrors","apiVersion","restPath","privRestAdapter","RestMessageAdapter","createOrJoin","args","conversationCode","languageCode","defaultLanguageCode","nickname","ConversationTranslator_Name","endpointHost","ConversationTranslator_Host","correlationId","ConversationTranslator_CorrelationId","subscriptionRegion","authToken","clientAppId","roomId","authInvalidSubscriptionRegion","authorization","authInvalidSubscriptionKey","options","request","Post","requestId","extractHeaderValue","conversation","errMessageRaw","errorMessage","invalidCreateJoinConversationResponse","replace","code","leave","sessionToken","invalidArgs","Delete","body","privConversationMessageType","toConnectionMessage","deferral","incomingMessage","textContent","binaryContent","fromConnectionMessage","RawWebsocketMessage","webSocketPath","ConversationTranslator_Token","expirationTime","privExpirationTime","participantId","translations","originalLanguage","resultId","text","privOrigLang","TranslationRecognitionResult","privDetachables","Array","onPreConnectionStart","privSessionId","onAuthCompleted","isError","onComplete","onConnectionEstablishCompleted","statusCode","onServiceTurnEndResponse","continuousRecognition","privRequestId","privRequestCompletionDeferral","detachable","isMuted","privIsMuted","isLocked","privIsLocked","participant","privParticipant","privKey","privValue","privParticipantId","translateTo","profanityFilter","roomProfanityFilter","isRoomLocked","isMuteAll","privRoomId","privSessionToken","privTranslateTo","privProfanityFilter","privRoomProfanityFilter","privIsRoomLocked","privParticipants","privIsMuteAll","command","privPayload","privCommand","privCommandResponse","roomid","CommandResponsePayload","privParticipantsPayloadResponse","roomLocked","muteAll","ParticipantsListPayloadResponse","privParticipantPayloadResponse","locale","usetts","ismuted","ishost","avatar","ParticipantPayloadResponse","privSpeechResponse","recognition","timestamp","SpeechResponsePayload","privTextResponse","originalText","TextResponsePayload","conversationServiceConnector","privLastPartialUtteranceId","noOp","privConversationServiceConnector","privConversationAuthentication","receiveMessageOverride","receiveConversationMessageOverride","recognizeOverride","postConnectImplOverride","conversationConnectImpl","configConnectionOverride","configConnection","disconnectOverride","privDisconnect","privConversationRequestSession","privConversationConnectionFactory","privConversationIsDisposed","privConnectionConfigPromise","connection","fetchConnection","send","terminateMessageLoop","cancelRecognition","processTypeSpecificMessages","connectionMessage","errorCallBack","cancellationReason","cancelEvent","canceled","privConnectionLoop","startMessageLoop","communicationCustodian","sendFinal","conversationMessageType","commandPayload","participantsPayload","participantsResult","displayName","isUsingTts","preferredLanguage","participantsListReceived","participantUpdateCommandReceived","muteAllCommandReceived","conversationExpiration","lockRoomCommandReceived","joinParticipantPayload","joiningParticipant","participantJoinCommandReceived","leavingParticipant","participantLeaveCommandReceived","speechPayload","speechResult","getTranslations","isFinal","translationReceived","textPayload","textResult","messageRetrievalPromise","r","privRequestSession","RuntimeError","Disconnected","privConnectionId","connectImpl","serviceResultTranslations","Translations","translation","serviceConfigImpl","conversationImpl","privConversation","privConnection","privSetTimeout","Worker","Timeout","setTimeout","privClearTimeout","clearTimeout","privSpeechRecognitionLanguage","conversationTranslatorToken","resetConversationTimeout","connectAsync","privTimeoutToken","sendRequest","msg","PromiseToEmptyCallback","getKeepAlive","SpeechState","privResult","RecognitionEventArgs","userId","privUserId","privAvatar","privDisplayName","privIsHost","privIsUsingTts","privPreferredLanguage","privVoice","Participant","arg2","arg3","arg4","createConversationAsync","privIsConnected","privConversationId","onConnected","privConversationTranslator","sessionStarted","privTranscriberRecognizer","conversationStarted","onDisconnected","sessionStopped","conversationStopped","onCanceled","conversationCanceled","onParticipantUpdateCommandReceived","updatedParticipant","useTts","translateToLanguages","participantsChanged","Updated","toParticipant","onLockRoomCommandReceived","onMuteAllCommandReceived","toParticipants","onParticipantJoinCommandReceived","newParticipant","JoinedConversation","onParticipantLeaveCommandReceived","ejectedParticipant","LeftConversation","onTranslationReceived","transcribed","transcribing","textMessageReceived","onParticipantsListReceived","privRoom","me","privIsReady","changeNicknameAsync","onConversationExpiration","privManager","Masked","hostNickname","privConfig","privTextMessageMaxLength","conversationTranslator","privConversationRecognizer","privToken","handleError","permissionDeniedStart","room","permissionDeniedConnect","handleCallback","startConversationAsync","fromConfig","addParticipantAsync","addParticipantImplAsync","joinConversationAsync","cognitiveSpeechAuthToken","deleteConversationAsync","deleteConversationImplAsync","endConversationAsync","endConversationImplAsync","lockConversationAsync","permissionDeniedSend","canSendAsHost","permissionDeniedConversation","getLockCommand","muteAllParticipantsAsync","getMuteAllCommand","muteParticipantAsync","canSend","permissionDeniedParticipant","invalidParticipantRequest","getMuteCommand","removeParticipantAsync","hasOwnProperty","removeParticipantImplAsync","getEjectCommand","unlockConversationAsync","unmuteAllParticipantsAsync","unmuteParticipantAsync","sendTextMessageAsync","getMessageCommand","getChangeNicknameCommand","connectTranscriberRecognizer","convId","part","props","transcriptionEventKeys","val","conversationProperties","conversationInfo","pushConversationEvent","includeHost","privAudioConfig","SynthesisVoiceGender","SynthesisVoiceType","translator","privSpeechState","Inactive","privTranslator","Connected","recognized","tr","cancelSpeech","fireCancelEvent","newState","privIsSpeaking","privPlaceholderKey","privPlaceholderRegion","param1","param2","param3","privSpeechTranslationConfig","fromSubscription","speechEndpointHost","leaveConversationAsync","startTranscribingAsync","privCTRecognizer","connectTranslatorRecognizer","canSpeak","startContinuousRecognition","stopTranscribingAsync","encodeURIComponent","speechHost","cognitiveSpeechRegion","speechPath","isConnected","Connecting","isMutedByHost","speechTranslationConfig","speechTranslationConfigImpl","speechRecognitionLanguage","TranscriberConnectionFactory","getConversationInfo","reco","sendSpeechEventAsync","connectCallbacks","transcriber","recognizing","disconnectCallbacks","TranscriptionServiceRecognizer","privRecognizer","PronunciationAssessmentGradingSystem","PronunciationAssessmentGranularity","privStyleList","privVoicePath","privName","Name","privLocale","Locale","privShortName","ShortName","privLocalName","LocalName","privVoiceType","VoiceType","OnlineStandard","OnlineNeural","privGender","Gender","Male","Female","StyleList","isArray","style","VoicesListRetrieved","privVoices","SynthesisResult","privSynthesizing","SpeechSynthesisConnectionFactory","synthesisRequestQueue","Queue","implCommonSynthesizeSetup","buildSsml","languageToDefaultVoice","ssml","SpeechSynthesizer","XMLEncode","autoDetectSourceLanguage","speakTextAsync","speakImpl","speakSsmlAsync","getVoicesAsync","getVoices","createSynthesizerConfig","SynthesizerConfig","createSynthesisAdapter","synthesizerConfig","audioOutputFormat","AudioOutputFormat","fromSpeechSynthesisOutputFormat","SynthesisRestAdapter","IsSsml","dataStream","audioDestination","enqueue","adapterSpeak","getVoicesList","dequeue","Speak","isSSML","referenceText","gradingSystem","FivePoint","granularity","Phoneme","enableMiscue","PronunciationAssessment_ReferenceText","PronunciationAssessment_GradingSystem","PronunciationAssessment_Granularity","PronunciationAssessment_EnableMiscue","toJSON","updateJson","PronunciationAssessment_Params","applyTo","setPronunciationAssessmentParams","phonemeAlphabet","privPhonemeAlphabet","nbestPhonemeCount","privNBestPhonemeCount","PronunciationAssessment_Json","paramsJson","dimension","enableMiscueString","PronunciationAssessmentConfig","j","NBest","privPronJson","detailResult","PronunciationAssessment","AccuracyScore","PronScore","CompletenessScore","FluencyScore","PronunciationAssessmentResult","module","exports","MEDIA_DEVICE_KINDS","AUDIO_TRACK_KIND","VIDEO_TRACK_KIND","GENERIC_AUDIO_DEVICE_KIND","GENERIC_VIDEO_DEVICE_KIND","GENERIC_INPUT_DEVICE_KIND","GENERIC_OUTPUT_DEVICE_KIND","_defineProperty","obj","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","_objectSpread2","arguments","getOwnPropertyDescriptors","defineProperties","EVENT_TYPE_MAP","pointer","change","mouse","touch","gesture","capitalize","string","toUpperCase","toHandlerProp","action","capture","deviceProps","actionKey","toDomEventType","isTouch","getValueEvent","getTouchList","changedTouches","targetTouches","distanceAngle","P1","P2","dx","clientX","dy","clientY","cx","cy","distance","hypot","angle","atan2","PI","origin","touchIds","getCurrentTargetTouchList","from","touches","_event$currentTarget","_event$currentTarget$","currentTarget","contains","call","identifier","touchDistanceAngle","ids","pointerId","valueEvent","pointerValues","wheelValues","deltaX","deltaY","deltaMode","v","noop","chain","fns","fn","assignDefault","fallback","assign","Engine","ctrl","values","initial","reset","shared","gestureEventStores","gestureTimeoutStores","handlers","ingKey","transform","threshold","_active","_blocked","_force","_step","intentional","_movement","_distance","_delta","_threshold","V","sub","abs","_bounds","Infinity","axis","memo","elapsedTime","direction","velocity","movement","delta","timeStamp","lastOffset","compute","dt","preventDefault","cancelable","pointerIds","size","locked","document","pointerLockElement","getEventDetails","buttons","shiftKey","altKey","metaKey","ctrlKey","down","pressed","_absoluteDelta","addTo","_m0","_m1","_t0","_t1","_s0","_s1","sign","intent","first","last","bounds","setup","previousOffset","computeOffset","absoluteDelta","rubberband","computeRubberband","computeMovement","emit","clean","triggerAllEvents","handler","aliasKey","eventStore","timeoutStore","CoordinatesEngine","add","selectAxis","d","lockDirection","restrictVectorToAxis","DEFAULT_RUBBERBAND","commonConfigResolver","toVector","_k","coordinatesConfigResolver","_v","current","HTMLElement","left","right","top","bottom","DISPLACEMENT","KEYS_DELTA_MAP","ArrowRight","factor","ArrowLeft","ArrowUp","ArrowDown","DragEngine","_pointerId","_pointerActive","_keyboardActive","_preventScroll","_delayed","swipe","tap","cancel","bind","boundRect","getBoundingClientRect","targetRect","setActive","pointerClean","pointerDown","pointerButtons","setEventIds","pointerCapture","setPointerCapture","setupPointer","preventScroll","setupScrollPrevention","delay","setupDelayTrigger","startPointerDrag","pointerMove","movementX","movementY","remove","preventScrollAxis","pointerUp","hasPointerCapture","releasePointerCapture","_unused","process","filterTaps","dirx","diry","vx","vy","mx","my","svx","svy","sx","sy","sdt","pointerClick","stopPropagation","pointerLock","requestPointerLock","sharedConfig","exitPointerLock","persistEvent","persist","passive","keyDown","deltaFn","keyUp","bindFunction","isBrowser","createElement","supportsTouchEvents","SUPPORT","supportsGestureEvents","GestureEvent","touchscreen","isTouchScreen","maxTouchPoints","supportsPointerEvents","supportsPointerLock","dragConfigResolver","lock","useTouch","PinchEngine","_pointerEvents","Map","_touchIds","turns","axisMovementDifference","touchStart","ctrlTouchIds","every","has","pinchStart","pointerStart","ctrlPointerIds","touchMove","pinchMove","prev_a","delta_a","delta_turns","touchEnd","some","pointerEnd","delete","gestureStart","scale","rotation","gestureMove","_previousMovement","gestureEnd","wheel","wheelChange","wheelStart","wheelEnd","pinchConfigResolver","scaleBounds","angleBounds","_scaleBounds","D","_angleBounds","A","MoveEngine","move","mouseOnly","pointerType","moveChange","moveStart","moveEnd","moveConfigResolver","ScrollEngine","scroll","scrollChange","scrollEnd","scrollValues","_ref","_ref2","scrollX","scrollY","scrollLeft","scrollTop","scrollConfigResolver","WheelEngine","wheelConfigResolver","HoverEngine","enter","hoverConfigResolver","EngineMap","ConfigResolverMap","registerAction","engine","resolver","dragAction","hoverAction","moveAction","pinchAction","scrollAction","wheelAction","_extends","prototype","_objectWithoutPropertiesLoose","excluded","sourceKeys","AuthKey","ContentType","Path","RequestId","RequestStreamId","RequestTimestamp","menuContainerClass","menuClass","menuArrowClass","menuItemClass","menuDividerClass","menuHeaderClass","subMenuClass","initialHoverIndex","HoverIndexContext","createContext","MenuListItemContext","MenuListContext","EventHandlersContext","RadioGroupContext","SettingsContext","ItemSettingsContext","Keys","freeze","ENTER","ESC","SPACE","HOME","END","LEFT","RIGHT","UP","DOWN","HoverIndexActionTypes","RESET","SET","UNSET","INCREASE","DECREASE","FIRST","LAST","SubmenuActionTypes","OPEN","CLOSE","CloseReason","CLICK","CANCEL","BLUR","SCROLL","FocusPositions","INITIAL","MenuStateMap","entering","entered","exiting","exited","isMenuOpen","batchedUpdates","unstable_batchedUpdates","callback","floatEqual","a","b","diff","getTransition","transition","safeCall","arg","getName","component","defineName","applyHOC","HOC","applyStatics","sourceComponent","wrappedComponent","attachHandlerProps","_loop","_i2","_Object$keys2","handlerName","propHandler","attachedHandler","parsePadding","paddingStr","padding","isNaN","getScrollAncestor","node","_getComputedStyle","getComputedStyle","overflow","overflowX","overflowY","test","parentNode","validateIndex","isDisabled","commonProps","isHovering","tabIndex","AudioFormatTag","AudioStreamFormatImpl","samplesPerSecond","isWavFormat","blockAlign","privHeader","setUint32","setUint16","getSupportedConstraints","AudioOutputStream","PullAudioOutputStream","PullAudioOutputStreamImpl","privStream","getDefaultOutputFormat","dataBuffer","intView","totalBytes","privLastChunkView","isReadEnded","tmpBuffer","PushAudioOutputStream","PushAudioOutputStreamImpl","privCallback","setUrlParameter","EnableAudioLogging","EnableWordLevelTimestamps","Profanity","SpeechServiceConnection_InitialSilenceTimeoutMs","InitialSilenceTimeoutMs","SpeechServiceConnection_EndSilenceTimeoutMs","EndSilenceTimeoutMs","SpeechServiceResponse_StablePartialResultThreshold","StableIntermediateThreshold","serviceProperties","num","propId","parameterName","search","toLocaleLowerCase","startsWith","Parent","Class","isNativeReflectConstruct","Reflect","construct","_construct","Function","setPrototypeOf","_cache","_wrapNativeSuper","_isNativeFunction","TypeError","Wrapper","getPrototypeOf","constructor","argumentName","objectName","PhantomCore","require","EVT_UPDATED","EVT_DESTROYED","stopMediaStreamTrack","_instances","MediaStreamTrackControllerBase","inputMediaStreamTrack","phantomCoreOptions","MediaStreamTrack","_uuid","_inputMediaStreamTrack","seal","_outputMediaStreamTrack","_isTrackEnded","_isMuted","setImmediate","_handleTrackEnded","getIsDestroying","destroy","addEventListener","once","removeEventListener","getKind","kind","getOutputMediaStreamTrack","getOutputTrack","getTrackKind","getInputDeviceId","inputSettings","getPartialMediaDeviceInfo","getInputMediaDeviceInfoFromList","mediaDeviceInfoList","getMatchedMediaDevice","partialMediaDeviceInfo","getIsMuted","setIsMuted","mediaStreamTrack","getTrackControllerInstances","controller","is","useBEM","block","element","modifiers","className","useMemo","blockElement","classString","expandedClassName","deepMerge","normalizeConstraints","userConstraints","Boolean","prevUserConstraints","mergeConstraints","defaultConstraints","defaultAudioConstraints","defaultVideoConstraints","userAudioConstraints","userVideoConstraints","nextDefaultConstraints","nextUserConstraints","merged","createGuid","createNoDashGuid","RegExp","CustomSpeechDeploymentId","CustomVoiceDeploymentId","EnableLanguageId","StableTranslation","TestHooks","clamp","v1","v2","subTo","constant","pow","rubberbandIfOutOfBounds","position","Vx","Vy","Rx","Ry","X0","X1","Y0","Y1","isObject","sanitiseKey","useFlatStyles","styles","prop","modifierValue","_i4","_Object$keys4","nestedProp","nestedValue","stylePropTypes","oneOfType","func","menuPropTypes","arrow","bool","offsetX","number","offsetY","align","oneOf","menuDefaultProps","rootMenuDefaultProps","reposition","viewScroll","transitionTimeout","submenuOpenDelay","submenuCloseDelay","AudioMediaStreamTrackController","VideoMediaStreamTrackController","MediaStreamTrackControllerFactory","MediaStreamTrackControllerFactoryCollection","MediaStreamTrackControllerCollection","utils","AudioMediaStreamTrackLevelMonitor","MultiAudioMediaStreamTrackLevelMonitor","logger","EVT_READY","EVT_CHILD_INSTANCE_ADDED","EVT_CHILD_INSTANCE_REMOVED","MediaStreamTrackController","createTrackControllersFromMediaStream","_factoryInstances","inputMediaStream","factoryOptions","initialTrackControllers","getChildren","destroyHandler","destroyAllChildren","mediaDeviceInfo","getFactoryInstances","factory","getInputDeviceIds","PushAudioInputStream","PullAudioInputStream","PushAudioInputStreamImpl","audioNode","bufferData","Buffer","readCycle","audioStreamChunk","XMLHttpRequest","concat","toBuffer","Stream","arrayBuffer","buf","alloc","PullAudioInputStreamImpl","privBufferSize","transmitBuff","readBuff","pulledBytes","createNewAudioContext","getSharedAudioContext","sharedAudioCtx","filterInputMediaDevices","stopMediaStream","removeTrack","EventType","PlatformEvent","eventName","eventType","privEventId","privEventTime","toISOString","privEventType","privMetadata","SpeechConnectionMessage","contentType","additionalHeaders","privPath","privContentType","privStreamId","privAdditionalHeaders","AudioOutputFormatImpl","audioFormatString","requestAudioFormatString","priAudioFormatString","priRequestAudioFormatString","priHasHeader","speechSynthesisOutputFormat","fromSpeechSynthesisOutputFormatString","SpeechSynthesisOutputFormatToString","speechSynthesisOutputFormatString","Siren","SILKSkype","OPUS","Raw8Khz8BitMonoMULaw","Riff16Khz16KbpsMonoSiren","Audio16Khz16KbpsMonoSiren","Audio16Khz32KBitRateMonoMp3","Audio16Khz128KBitRateMonoMp3","Audio16Khz64KBitRateMonoMp3","Audio24Khz48KBitRateMonoMp3","Audio24Khz96KBitRateMonoMp3","Audio24Khz160KBitRateMonoMp3","Raw16Khz16BitMonoTrueSilk","Riff16Khz16BitMonoPcm","Riff8Khz16BitMonoPcm","Riff24Khz16BitMonoPcm","Riff8Khz8BitMonoMULaw","Raw16Khz16BitMonoPcm","Raw24Khz16BitMonoPcm","Raw8Khz16BitMonoPcm","Ogg16Khz16BitMonoOpus","Ogg24Khz16BitMonoOpus","Raw48Khz16BitMonoPcm","Riff48Khz16BitMonoPcm","Audio48Khz96KBitRateMonoMp3","Audio48Khz192KBitRateMonoMp3","Ogg48Khz16BitMonoOpus","Webm16Khz16BitMonoOpus","Webm24Khz16BitMonoOpus","Webm24Khz16Bit24KbpsMonoOpus","Raw24Khz16BitMonoTrueSilk","Raw8Khz8BitMonoALaw","Riff8Khz8BitMonoALaw","Audio16Khz16Bit32KbpsMonoOpus","Audio24Khz16Bit48KbpsMonoOpus","Audio24Khz16Bit24KbpsMonoOpus","RecognitionCompletionStatus","SpeechRecognitionEvent","Info","RecognitionTriggeredEvent","privAudioSourceId","privAudioNodeId","ListeningStartedEvent","ConnectingToServiceEvent","authFetchEventid","privAuthFetchEventid","RecognitionStartedEvent","privAuthFetchEventId","AuthInfo","privHeaderName","DialogServiceConfigImpl","privSpeechConfig","setRef","ref","useCombinedRef","refA","refB","DEFAULT_OPTIONS","isAsync","_audioCtx","_unmutedGain","_src","_dst","createMediaStreamDestination","_gainNode","_outputMediaStream","setGain","isSetUnmutedGain","_isReady","onceReady","getGain","getIsNoiseSuppressionEnabled","noiseSuppression","isNoiseSuppressionEnabled","applyConstraints","getIsAutoGainControlEnabled","getIsEchoCancellationEnabled","echoCancellation","isEchoCancellationEnabled","autoGainControl","isAutoGainControlEnabled","dispatchEvent","Event","getAudioQualityPresetConstraints","AUDIO_QUALITY_PRESET_MUSIC_HIGH_QUALITY","makeAudioConstraints","DEFAULT_AUDIO_CONSTRAINTS","filterOutputMediaDevices","speechSynthesizer","speakOverride","connectImplOverride","sendSynthesisContext","synthesisContextJson","privSynthesisTurn","sendSpeechServiceConfig","SpeechServiceConfigJson","sendSsmlMessage","privAuthentication","privSynthesizerConfig","privSpeechSynthesizer","privSessionAudioDestination","privConnectionEvents","privServiceEvents","privSynthesisContext","privAgentConfig","connectionClosedEvent","cancelSynthesisLocal","BadRequestParameters","ConnectionFailure","privActivityTemplate","messagePayload","privAudioOutputFormat","privConnectionConfigurationPromise","privSuccessCallback","privErrorCallback","startNewSynthesis","synthesisStartEventArgs","SynthesizingAudioStarted","synthesisStarted","receiveMessage","cancelSynthesis","SynthesisCanceled","isSynthesizing","onStopSynthesizing","privServiceHasSentMessage","onServiceTurnStartResponse","onServiceResponseMessage","onAudioChunkReceived","synthesizing","audioWithHeader","SynthesizingAudio","metadataList","Metadata","metadata","Type","WordBoundary","Bookmark","Viseme","onWordBoundaryEvent","Data","wordBoundaryEventArgs","Offset","Length","currentTextOffset","wordBoundary","bookmarkEventArgs","bookmarkReached","onVisemeMetadataReceived","IsLastAnimation","visemeEventArgs","VisemeId","getAndClearVisemeAnimation","visemeReceived","getAllReceivedAudioWithHeader","SynthesizingAudioCompleted","synthesisCompleted","isUnAuthorized","privConnectionPromise","authPromise","fetchOnExpiry","fetch","open","configureConnection","SpeechServiceConfig","serialize","tmp","privKeys","privValues","keyToUse","n","clonedMap","destinationCollection","SpeechRecognitionEventArgs","ConversationTranscriptionEventArgs","CancellationEventArgsBase","privTranslations","SpeechConfigImpl","SpeechServiceConnection_IntentRegion","useRecognizers","gestureKey","nativeHandlers","React","Controller","applyHandlers","applyConfig","useEffect","effect","useDrag","drag","withHovering","WrapppedComponent","WithHovering","forwardRef","externalRef","useContext","useActiveState","moreKeys","_useState","useState","activeKeys","cancelActive","isActive","onPointerDown","onPointerUp","onPointerLeave","onKeyDown","onKeyUp","onBlur","relatedTarget","getIsSameMediaDevice","ReferenceError","pred","mediaDeviceToPlainObject","deviceA","deviceB","enforcedKind","locDeviceA","locDeviceB","PhantomCollection","initialMediaStreamTrackControllers","phantomCollectionOptions","trackController","prevChildren","_handleUpdate","nextChildren","getChildrenDiff","addedTrackControllers","added","removedTrackControllers","removed","addTrack","_syncTrackControllersMuteState","getOutputMediaStream","addChild","mediaStreamTrackController","addTrackController","removeTrackController","removeChild","getTrackControllers","getAudioTrackControllers","getVideoTrackControllers","_lookupTracksFunc","trackControllers","all","controllers","AUDIO_QUALITY_PRESET_TALK_RADIO","sampleSize","ideal","AUDIO_QUALITY_PRESET_MUSIC_LOW_QUALITY","audioQualityPresets","getAudioQualityPresetWithName","presetName","audioQualityPreset","makeVideoConstraints","makeScreenCaptureConstraints","DEFAULT_CONSTRAINTS","cursor","DEFAULT_VIDEO_CONSTRAINTS","makeSpecificDeviceIdCaptureConstraints","deviceKind","OVERRIDE_CONSTRAINTS","exact","makeSpecificDeviceCaptureConstraints","MediaDeviceInfo","cacheDiffMediaDevices","prevMediaDevices","nextMediaDevices","predicate","captureMediaDevice","fetchMediaDevices","cache","lastIsAggressive","lastMediaDevices","isAggressive","fetchDevices","tempMediaStream","getMediaDeviceTrackControllers","EVT_AUDIO_SILENCE_STARTED","EVT_AUDIO_SILENCE_ENDED","t","l","m","o","Symbol","toStringTag","__esModule","default","__e","store","self","__g","f","u","F","G","S","P","B","W","y","g","E","virtual","R","U","random","propertyIsEnumerable","_t","_i","done","ceil","floor","valueOf","mode","copyright","charAt","O","x","k","C","w","entries","display","appendChild","contentWindow","getOwnPropertyNames","callee","match","getBase16Theme","createStyling","invertTheme","rgb2yuv","yuv2rgb","reduce","defaultBase16","base16Themes","extend","Number","removeListener","EventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","newListener","listener","warned","emitter","fired","wrapFn","RangeError","setMaxListeners","getMaxListeners","addListener","prependListener","prependOnceListener","pop","off","removeAllListeners","listeners","rawListeners","listenerCount","eventNames","Dispatcher","documentElement","Arguments","KEY","M","I","L","N","z","T","q","K","QObject","H","findChild","J","iterator","Y","$","Q","Z","X","ee","te","ne","ae","re","for","keyFor","useSetter","useSimple","oe","isExtensible","preventExtensions","NEED","fastKey","getWeak","onFreeze","return","isIterable","getIterator","getIteratorMethod","parseInt","exec","IE_PROTO","placeholder","reverse","sort","NaN","threezerotwofour","apathy","ashes","atelierDune","atelierForest","atelierHeath","atelierLakeside","atelierSeaside","bespin","brewer","bright","chalk","codeschool","colors","eighties","embers","flat","google","grayscale","greenscreen","harmonic","hopscotch","isotope","marrakesh","mocha","monokai","ocean","paraiso","railscasts","shapeshifter","solarized","summerfruit","tomorrow","tube","twilight","scheme","author","base00","base01","base02","base03","base04","base05","base06","base07","base08","base09","base0A","base0B","base0C","base0D","base0E","base0F","hsl","rgb","hex","substring","toFixed","isConcatSpreadable","_callbacks","_isDispatching","_isHandled","_isPending","_lastID","register","unregister","waitFor","_invokeCallback","dispatch","_startDispatching","_stopDispatching","isDispatching","_pendingPayload","framesToPop","__proto__","sham","Proxy","getDerivedStateFromProps","setState","__reactInternalSnapshotFlag","__reactInternalSnapshot","getSnapshotBeforeUpdate","isReactComponent","componentWillMount","UNSAFE_componentWillMount","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","componentWillUpdate","UNSAFE_componentWillUpdate","componentDidUpdate","__suppressDeprecationWarning","white","black","transparent","globalFontFamily","globalCursor","indentBlockWidth","braceFontWeight","braceCursor","ellipsisFontSize","ellipsisLineHeight","ellipsisCursor","keyMargin","keyLetterSpacing","keyFontStyle","keyBorderRadius","keyColonWeight","keyVerticalAlign","keyOpacity","keyOpacityHover","keyValPaddingTop","keyValPaddingBottom","keyValPaddingRight","keyValBorderLeft","keyValBorderHover","keyValPaddingHover","pushedContentMarginLeft","variableValuePaddingRight","nullFontSize","nullFontWeight","nullPadding","nullBorderRadius","nanFontSize","nanFontWeight","nanPadding","nanBorderRadius","undefinedFontSize","undefinedFontWeight","undefinedPadding","undefinedBorderRadius","dataTypeFontSize","dataTypeMarginRight","datatypeOpacity","objectSizeBorderRadius","objectSizeFontStyle","objectSizeMargin","clipboardCursor","clipboardCheckMarginLeft","metaDataPadding","arrayGroupMetaPadding","iconContainerWidth","tooltipPadding","editInputMinWidth","editInputBorderRadius","editInputPadding","editInputMarginRight","editInputFontFamily","iconCursor","iconFontSize","iconPaddingRight","dateValueMarginLeft","iconMarginRight","detectedRowPaddingTop","addKeyCoverBackground","addKeyCoverPosition","addKeyCoverPositionPx","addKeyModalWidth","addKeyModalMargin","addKeyModalPadding","addKeyModalRadius","backgroundColor","ellipsisColor","braceColor","expandedIcon","collapsedIcon","keyColor","arrayKeyColor","objectSize","copyToClipboard","copyToClipboardCheck","objectBorder","dataTypes","boolean","date","float","function","integer","nan","null","regexp","background","editVariable","editIcon","cancelIcon","removeIcon","addIcon","checkIcon","color","border","addKeyModal","labelColor","validationFailure","iconColor","fontColor","fontFamily","ellipsis","fontSize","lineHeight","brace","fontWeight","colon","margin","verticalAlign","objectKeyVal","paddingTop","paddingRight","paddingBottom","borderLeft","paddingLeft","keyValPadding","marginLeft","variableValue","letterSpacing","fontStyle","opacity","borderRadius","marginRight","whiteSpace","width","tooltip","removeVarIcon","addVarIcon","editVarIcon","minWidth","marginTop","marginBottom","boxSizing","rjvId","type_name","displayDataTypes","theme","PureComponent","toLocaleTimeString","weekday","year","month","day","hour","minute","objects","handleAction","updated_src","updateSrc","namespace","new_value","existing_value","variable_removed","deepCopy","toggleCollapsed","collapsed","getFunctionDisplay","onClick","collapseStringsAfterLength","useLayoutEffect","useRef","useCallback","height","visibility","currentStyle","ie","cacheMeasurements","maxRows","minRows","onChange","onHeightChange","borderRightWidth","borderLeftWidth","sizingStyle","paddingSize","borderSize","borderBottomWidth","borderTopWidth","setAttribute","scrollHeight","rowHeight","se","ce","le","ue","xe","viewBox","fill","preserveAspectRatio","fe","pe","de","be","he","ve","ye","ge","Ee","je","_e","copiedTimer","handleCopy","clickCallback","innerHTML","clipboardValue","select","execCommand","copied","getClippyIcon","hidden","rowHovered","title","ke","getEditIcon","variable","hovered","prepopInput","onEdit","editMode","editValue","parsedInput","getRemoveIcon","getValue","getEditInput","inputRef","focus","submitEdit","showDetected","getDetectedInput","renameKey","singleIndent","indentWidth","enableClipboard","onDelete","onSelect","displayArrayKey","quotesOnKeys","onMouseEnter","onMouseLeave","Oe","getObjectSize","displayObjectSize","getAddAttribute","depth","key_name","getRemoveObject","hover","render","onAdd","Ce","parent_type","jsvRoot","Se","iconStyle","we","Ae","expanded","groupArraysAfterLength","getExpandedIcon","Fe","index_offset","Me","getObjectContent","renderObjectContents","getEllipsis","getObjectMetaData","object_type","sortKeys","Pe","getState","prevProps","getBraceStart","shouldCollapse","De","Ie","closeModal","submit","isValid","spellCheck","onKeyPress","Re","defaultValue","Le","Be","getListeners","resetState","addKeyRequest","existing_src","editKeyRequest","defaultProps","validationMessage","prevSrc","prevName","prevTheme","validateState","PromiseState","Deferred","privResolve","privReject","privPromise","marshalPromiseToCallbacks","RecognitionMode","SpeechResultFormat","speechServiceConfig","privRecognitionMode","privSpeechServiceConfig","Context","privParameters","privMaxRetryCount","privRecognitionActivityTimeout","Recognition","replacement","os","system","System","build","OS","SynthesisContext","sectionName","synthesisSection","buildSynthesisContext","metadataOptions","bookmarkEnabled","sentenceBoundaryEnabled","visemeEnabled","wordBoundaryEnabled","autoDetection","AgentConfig","toJsonString","iPrivConfig","CancellationErrorCode","SpeechSynthesisEventArgs","SpeechSynthesisResult","privAudioData","privResultId","MetadataType","SynthesisAudioMetadata","privSynthesisAudioMetadata","SpeechSynthesisWordBoundaryEventArgs","audioOffset","wordLength","textOffset","privAudioOffset","privText","privWordLength","privTextOffset","SpeechSynthesisBookmarkEventArgs","SpeechSynthesisVisemeEventArgs","visemeId","animation","privVisemeId","privAnimation","privOffset","IntentRecognitionEventArgs","privDuration","privJson","SpeechRecognitionResult","speakerId","privSpeakerId","IntentRecognitionResult","privIntentId","SpeechRecognitionCanceledEventArgs","TranslationRecognitionEventArgs","TranslationSynthesisEventArgs","TranslationSynthesisResult","privIsLiveAudio","sendSpeechContext","speechContextJson","onSpeechContext","sendPrePayloadJSONOverride","requestSession","privRecognizerConfig","DisableReferenceChannel","MicSpec","privMustReportEndOfStream","privAudioSource","privDynamicGrammar","privSpeechContext","numConnectionAttempts","maxRetryCount","cancelRecognitionLocal","auth","recoMode","startNewRecognition","listenForServiceTelemetry","conPromise","audioStreamNode","onAudioSourceAttachCompleted","onStopRecognizing","sessionStartEventArgs","sendAudio","isRecognizing","sendFinalAudio","turnCompletionPromise","sendTelemetryData","telemetryData","getTelemetry","speechStartDetected","speechStartEventArgs","speechStopDetected","isContinuousRecognition","onServiceRecognized","currentTurnAudioOffset","speechStopEventArgs","speechEndDetected","isSpeechEnded","EndOfStream","sessionStopEventArgs","sendPrePayloadJSON","sendWaveHeader","retryableConnect","nextSendTime","fastLaneSizeMs","maxSendUnthrottledBytes","startRecogNumber","recogNumber","readAndUploadCycle","sendDelay","onAudioSent","bytesSent","onSpeechEnded","lastStatusCode","lastReason","onRetryConnection","delayMs","writeBufferToConsole","out","readView","padStart","info","DynamicGrammarBuilder","grammar","privGrammars","clearGrammars","generateGrammarObject","retObj","retPhrases","Groups","Items","SpeechContext","params","phraseDetection","enrichment","pronunciationAssessment","phraseOutput","detailed","dgi","SpeechDetected","privSpeechStartDetected","privAuthInfo","AuthHeader","fetchCallback","fetchOnExpiryCallback","privFetchCallback","privTokenPrefix","privFetchOnExpiryCallback","interactiveRelativeUri","conversationRelativeUri","dictationRelativeUri","autoDetectSourceLanguages","Dictation","SpeechServiceConnection_Url","textMessage","headerBodySplit","parseHeaders","binaryMessage","dataView","headerLength","getInt16","headersString","getInt8","makeHeaders","content","headerBuffer","stringToArrayBuffer","headerInt8Array","payloadInt8Array","bodyInt8Array","headerMatches","separatorIndex","headerValue","speechRecognizer","privSpeechRecognizer","sourceLanguages","onSuccess","onUnknown","interimResults","phraseResults","resultProps","processed","hypothesis","RecognizingSpeech","Duration","LanguageDetectionConfidence","onHypothesis","simple","implTranslateRecognitionResult","onPhraseRecognized","cancelReason","cancellationErrorCode","implTranslateCancelErrorCode","DisplayText","totalOffset","offsetCorrectedJson","getJsonWithCorrectedOffsets","Success","Display","SpeechHypothesis","privSpeechHypothesis","PrimaryLanguage","Confidence","SpeakerId","privSimpleSpeechPhrase","SynthesisStatus","recognitionStatus","RecognizedSpeech","EndOfDictation","BadRequest","Forbidden","TooManyRequests","DetailedSpeechPhrase","privDetailedSpeechPhrase","baseOffset","firstWordOffset","Words","details","getSpeechRegionFromIntentRegion","intentRegion","privIntentRecognizer","privIntentDataSent","addedIntents","umbrellaIntent","speechHypothesis","RecognizingIntent","sendEvent","privPendingIntentArgs","intentResponse","addedIntent","topScoringIntent","RecognizedIntent","LanguageUnderstandingServiceResponse_JsonResult","IntentResponse","privIntentResponse","query","entities","IntentRecognitionCanceledEventArgs","SpeechServiceResponse_TranslationRequestStablePartialResult","translationRecognizer","privTranslationRecognizer","handleTranslationPhrase","translatedPhrase","fireEventForResult","SpeechPhrase","fromTranslationResponse","sendSynthesisAudio","synthEnd","retEvent","canceledResult","FailureReason","serviceResult","Translation","TranslationStatus","TranslatedSpeech","TranslatingSpeech","TranslationHypothesis","privTranslationHypothesis","TranslationPhrase","privTranslationPhrase","translationResponse","TranslationSynthesisEnd","privSynthesisEnd","TranslationRecognitionCanceledEventArgs","sessionid","privCancelReason","privMap","ActivityReceivedEventArgs","privActivity","privAudioStream","SpeechKeyword","privSpeechKeyword","Status","privUri","requestOptions","SpeakerRecognition_Api_Version","getOperationUri","getQueryParams","ignoreMinLength","profileIds","voiceProfileIds","Get","dependency","TextDependentVerification","multiaudioRelativeUri","hostDefault","sendSpeechEvent","speechEventJson","sendTranscriptionStartJSON","createSpeechEventPayload","meeting","eventDict","audiorecording","ConversationTranscriptionCanceledEventArgs","synthesisUri","hostPrefix","fromParameters","SynthesisServiceType","privSynthesisServiceType","Standard","setHeaders","cloneChildren","children","startIndex","inRadioGroup","descendOverflow","items","Children","child","disabled","cloneElement","innerChildren","desc","takeOverflow","descOverflow","placeLeftorRight","leftOverflow","rightOverflow","anchorRect","containerRect","menuRect","placeLeftorRightY","placeLeftX","placeRightX","getLeftOverflow","getRightOverflow","confineHorizontally","confineVertically","arrowRef","computedDirection","arrowY","placeArrowVertical","menuY","offsetHeight","placeToporBottom","topOverflow","bottomOverflow","placeToporBottomX","placeTopY","placeBottomY","getTopOverflow","getBottomOverflow","arrowX","placeArrowHorizontal","menuX","offsetWidth","useIsomorphicLayoutEffect","_excluded","MenuList","ariaLabel","menuClassName","menuStyles","arrowClassName","arrowStyles","anchorPoint","anchorRef","containerRef","parentScrollingRef","repositionFlag","_ref$captureFocus","captureFocus","endTransition","menuItemFocus","onClose","restProps","menuPosition","setMenuPosition","_useState2","arrowPosition","setArrowPosition","_useState3","overflowData","setOverflowData","_useState4","expandedDirection","setExpandedDirection","_useContext","boundingBoxRef","boundingBoxPadding","rootMenuRef","rootAnchorRef","scrollingRef","anchorScrollingRef","reposFlag","reposSubmenu","menuRef","prevOpen","latestMenuSize","latestHandlePosition","isOpen","openTransition","closeTransition","_useMemo","menuItems","menuItemsCount","_useReducer","useReducer","reducer","hoverIndex","openSubmenuCount","hoverIndexReducer","submenuCountReducer","_useReducer$","_useReducer2","forceReposSubmenu","handlePosition","positionHelpers","getPositionHelpers","boundingRect","clientWidth","innerHeight","positionContextMenu","adjustedX","adjustedY","positionMenu","horizontalOffset","verticalOffset","_results","menuHeight","_overflowAmt","prevHeight","overflowAmt","tagName","scrollCurrent","menuScroll","anchorScroll","handleScroll","scrollObservers","hasOverflow","parentScroll","ResizeObserver","resizeObserver","_ref3","entry","borderBoxSize","_ref4","inlineSize","blockSize","borderRect","flushSync","observeTarget","observe","box","unobserve","_ref5","alwaysUpdate","setItemFocus","activeElement","maxHeight","isSubmenuOpen","itemContext","parentMenuRef","parentOverflow","isParentOpen","listContext","overflowStyles","dir","arrowModifiers","_arrowClass","_arrowStyles","handleKeyDown","handled","onAnimationEnd","handleAnimationEnd","role","Provider","_ref6","_ref7","MessageDataStreamType","privActivityResponse","messageDataStreamType","ActivityPayloadResponse","manager","privIsCompleted","privTurnManager","resetTurnEndTimeout","processActivityPayload","TextToSpeechAudio","createPullStream","endAudioStream","complete","CompleteTurn","privTurnMap","StartTurn","turnState","GetTurn","dialogServiceConnector","sendAgentConfig","agentConfigSent","agentConfigJson","sendAgentContext","guid","privDialogServiceConnector","agentContext","channelData","interactionId","agentContextJson","handleResponseMessage","responseMessage","responsePayload","responseRequestId","activityPayload","turn","privTurnStateManager","updateAgentConfig","pullAudioOutputStream","activityReceived","turnStatusReceived","TurnStatusReceivedEventArgs","receiveDialogMessageOverride","listenOnce","dialogConnectImpl","privDialogAudioSource","privLastResult","interactionGuid","agentMessage","agentMessageJson","speechPhrase","keyword","RecognizedKeyword","audioRequestId","preAudioPromise","sendPreAudioMessages","ReplayableAudioNode","loop","turnRequestId","audioSessionReqId","turnEndRequestId","addKeywordContextData","keywordPropertyValue","keywordOffsetPropertyValue","keywordDurationPropertyValue","keywords","keywordOffsets","keywordDurations","keywordDefinitionArray","definition","clientDetectedKeywords","onReject","privMessageStatusResponse","TurnStatusResponsePayload","turnStatus","privTurnStatus","sessionAudioDestinationId","turnAudioDestinationId","privSessionAudioDestinationId","privTurnAudioDestinationId","privIsSynthesizing","privIsSynthesisEnded","privInTurn","privNextSearchTextIndex","responseJson","privTurnDeferral","privTurnAudioDestination","getAllReceivedAudio","privReceivedAudio","readAllAudioFromStream","privReceivedAudioWithHeader","rawText","privRawText","privIsSSML","privPartialVisemeAnimation","updateTextOffset","AnimationChunk","bytesReceived","privListeningTriggerMetric","privMicMetric","privConnectionEstablishMetric","End","eventTime","Start","privMicStartTime","privConnectionStartTime","Id","getConnectionError","privReceivedMessages","networkReceivedTime","metrics","privPhraseLatencies","PhraseLatencyMs","privHypothesisLatencies","FirstHypothesisLatencyMs","telemetry","Metrics","ReceivedMessages","phraseReceived","audioReceivedTime","hypothesisReceived","privIsAudioNodeDetached","privIsRecognizing","privIsSpeechEnded","privTurnStartAudioOffset","privLastRecoOffset","privHypothesisReceived","privBytesSent","privRecogNumber","privConnectionAttempts","privServiceTelemetryListener","hasTelemetry","eventSource","attachListener","privAudioNode","replay","findTimeAtOffset","shrinkBuffers","detachAudioNode","_objectWithoutProperties","sourceSymbolKeys","identity","sharedConfigResolver","eventOptions","resolveWith","resolvers","EventStore","_ctrl","_listeners","TimeoutStore","ms","_timeouts","timeout","Set","resolveGestures","internalHandlers","setupGesture","pinch","rest","_config","_targetEventStore","gestures","bindToProps","eventKey","handlerProp","withPassiveOption","_options$capture","_options$passive","isNative","RE_NOT_NATIVE","registerGesture","actions","handlerKey","startKey","endKey","parseMergedHandlers","mergedHandlers","mergedConfig","sortHandlers","_handlers","native","lastMatch","MenuHeader","MenuDivider","addTrackControllerFactory","removeTrackControllerFactory","getTrackControllerFactories","isAudioMuted","audioTrackControllers","setIsAudioMuted","unmuteAudio","getIsAudioMuted","untilAudioContextResumed","mediaDevice","mediaDeviceInfoFilters","filterAudioInputDevices","filterAudioOutputDevices","filterVideoInputDevices","filterVideoOutputDevices","captureSpecificMediaDevice","fetchInputMediaDevices","getIsMediaDeviceBeingCaptured","getIsMediaDeviceCaptureSupported","uncaptureSpecificMediaDevice","generators","createEmptyAudioMediaStream","createTestAudioMediaStream","createTestVideoMediaStream","screen","captureScreen","getIsScreenCaptureSupported","audioCtx","debug","nextConstraints","streamOutput","pulseHz","lfoHz","osc","createOscillator","frequency","setValueAtTime","amp","lfo","canvas","captureStream","BaseTrackController","getDisplayMedia","NativeAudioMediaStreamTrackLevelMonitor","EVT_AUDIO_LEVEL_UPDATED","_monitorInstances","_proxyCounts","validateAudioTrack","_mediaStreamTrack","_nativeMonitor","registerCleanupHandler","addProxyInstance","getMediaStreamTrack","getIsSilent","proxy","nativeMonitor","proxies","proxyEvents","proxyHandlers","proxyEvent","tickTime","fftSize","smoothingTimeConstant","mergeOptions","_silenceDetectionTimeout","_isSilent","_prevRMS","_analyser","_stream","_source","_samples","_handleFocus","_initAudioLevelPolling","initTimeout","_tickInterval","_isAudioContextStarted","createAnalyser","getOptions","frequencyBinCount","_audioLevelDidUpdate","_handleTick","_isDestroyed","getByteFrequencyData","rms","calculateRMSPressure","audioLevel","_audioLevel","_silenceDidPotentiallyEnd","_silenceDidPotentiallyStart","sumSq","sample","sqrt","initialMediaStreamTracks","bindChildEventName","getChildWithKey","addMediaStreamTrack","trackOrMonitor","trackLevelMonitor","getMediaStreamTracks","removeAllMediaStreamTracks","privEventListeners","paramName","eventId","onEventCallback","MessageType","ConnectionMessage","privBody","privMessageType","privHeaders","privSize","CertCheckAgent","proxyInfo","privProxyInfo","privDiskCache","supportBuffer","location","SPEECH_OCSP_CACHE_ROOT","GetAgent","disableStapling","agent","Agent","CreateConnection","HostName","Port","socketPromise","enableOCSP","NODE_TLS_REJECT_UNAUTHORIZED","SPEECH_CONDUCT_OCSP_CHECK","secureEndpoint","requestOCSP","forceDisableOCSPStapling","servername","baseAgent","GetProxyAgent","socket","OCSPCheck","privMemCache","httpProxyOptions","UserName","Password","resolved","cork","tlsSocket","stapling","peer","getPeerCertificate","GetIssuer","issuer","ocspRequest","generate","raw","sig","GetResponseFromCache","cacheEntry","VerifyOCSPResponse","uncork","issuerCertificate","fetchIssuer","signature","cachedResponse","diskCacheResponse","isCached","StoreMemoryCacheEntry","cachedOcspResponse","parseResponse","tbsData","tbsResponseData","responses","cachedStartTime","thisUpdate","cachedNextTime","nextUpdate","testTimeOffset","minUpdate","UpdateCache","cacheValue","ocspResponse","certID","GetOCSPResponse","StoreCacheEntry","req","rawResponse","StoreDiskCacheEntry","getAuthorityInfo","cert","parsedUri","getResponse","required","qs","controlOrWhitespace","CRHTLF","slashes","protocolre","windowsDriveLetter","trimLeft","rules","sanitize","address","isSpecial","ignore","hash","lolcation","loc","global","finaldestination","Url","unescape","extractProtocol","forwardSlashes","otherSlashes","slashesCount","parser","relative","extracted","instruction","instructions","base","up","username","password","decodeURIComponent","char","ins","decode","querystringify","prefix","pairs","undef","querystring","OCSPEvent","privSignature","OCSPMemoryCacheHitEvent","Debug","OCSPCacheMissEvent","OCSPDiskCacheHitEvent","OCSPCacheUpdateNeededEvent","OCSPMemoryCacheStoreEvent","OCSPDiskCacheStoreEvent","OCSPCacheUpdateCompleteEvent","OCSPStapleReceivedEvent","OCSPCacheEntryExpiredEvent","serialNumber","expireTime","privExpireTime","OCSPCacheEntryNeedsRefreshEvent","privStartTime","OCSPCacheHitEvent","privExpireTimeString","toLocaleDateString","privStartTimeString","OCSPVerificationFailedEvent","privError","OCSPCacheFetchErrorEvent","OCSPResponseRetrievedEvent","OCSPCacheUpdateErrorEvent","RestConfigBase","privDefaultRequestOptions","privDefaultParams","privRestErrors","Accept","ignoreCache","contentTypeKey","core","StatusError","res","captureStackTrace","statusMessage","mkrequest","statusCodes","method","encoding","baseurl","_url","_headers","parsed","Authorization","btoa","isView","Headers","resp","isNativeFunction","encodings","isDate","isEmpty","isEmptyObject","lhs","rhs","deletedValues","acc","difference","logLevelFilter","Warning","privLogLevelFilter","logFragments","EventTime","valueToLog","SubscriberType","list","privSubscriptionIdCounter","privAddSubscriptions","privRemoveSubscriptions","privDisposedSubscriptions","privDisposeReason","itemIndex","privList","insertAt","triggerSubscriptions","removeFirst","removeAt","removeLast","removedElements","onAdded","addedCallback","subscriptionId","onRemoved","removedCallback","onDisposed","disposedCallback","seperator","toArray","cloneCopy","any","where","selectList","List","filteredList","orderBy","compareFn","orderedArray","orderByDesc","concatArray","subscriptions","privPromiseStore","privIsDrainInProgress","privIsDisposing","throwIfDispose","enqueueFromPromise","deferredSubscriber","privSubscribers","Dequeue","drain","peek","Peek","subs","lists","subscriber","dequeuedItem","drainAndDispose","pendingItemProcessor","promiseArray","wrapper","_excluded2","MenuItem","checked","_useItemState","useItemState","_useContext2","timeoutId","setHover","onMouseMove","keepHover","eventHandlers","radioGroup","_useActiveState","activeStateBlur","activeStateHandlers","isRadio","isCheckBox","isAnchor","isChecked","handleClick","syntheticEvent","onRadioChange","anchor","onMouseDown","handleKeyUp","click","handleBlur","menuItemProps","renderChildren","ControlledMenu","containerProps","initialMounted","unmountOnClose","skipOpen","portal","theming","onItemClick","settings","itemSettings","isCheckorRadio","keepOpen","handleClose","itemTransition","menuList","createPortal","privInstance","setEventSource","AudioSourceEvent","AudioSourceInitializingEvent","AudioSourceReadyEvent","AudioSourceOffEvent","AudioSourceErrorEvent","AudioStreamNodeEvent","AudioStreamNodeAttachingEvent","AudioStreamNodeAttachedEvent","AudioStreamNodeDetachedEvent","AudioStreamNodeErrorEvent","targetChunkSize","privTargetChunkSize","privNextBufferReadyBytes","bytesCopiedFromBuffer","privNextBufferToWrite","privNextBufferStartTime","bytesToCopy","targetView","sourceView","privIsWriteEnded","privIsReadEnded","privReaderQueue","streamChunk","throwIfClosed","ServiceEvent","jsonstring","ConnectionEvent","ConnectionStartEvent","ConnectionEstablishedEvent","ConnectionClosedEvent","privStatusCode","ConnectionErrorEvent","privMessage","privType","ConnectionEstablishErrorEvent","statuscode","ConnectionMessageReceivedEvent","networkReceivedTimeISO","privNetworkReceivedTime","ConnectionMessageSentEvent","networkSentTimeISO","privNetworkSentTime","ConnectionState","BackgroundEvent","workerTimers","timerId","timers","scheduledTimeoutFunctions","unhandledRequests","worker","isCallNotification","idOrFunc","unhandledTimerId","isClearResponse","postMessage","performance","loadWorkerTimers","revokeObjectURL","bytesPerSecond","privBuffers","privReplayOffset","privLastShrinkOffset","privBufferStartOffset","privBufferSerial","privBufferedBytes","privReplay","privLastChunkAcquiredTime","privBytesPerSecond","offsetToSeek","bytesToSeek","retVal","BufferEntry","startOffset","endOffset","serial","privProxyHostName","privProxyPort","privProxyUserName","privProxyPassword","RestRequestType","privIgnoreCache","responseReceivedDeferral","requestCommand","handleRestResponse","blobToArrayBuffer","onloadend","postData","withQuery","queryString","headerKey","arr","headerMap","line","parts","STATES","startOrEnd","unmounted","updateState","latestState","useMenuState","_temp","_useTransition","useTransition","enterTimeout","exitTimeout","_ref$enter","_ref$exit","exit","preEnter","preExit","initialEntered","mountOnEnter","unmountOnExit","toggle","toEnter","transitState","enterStage","toggleMenu","_excluded3","_excluded4","SubMenu","openTrigger","onMenuChange","instanceRef","_ref$itemProps","itemProps","_useContext3","isPortal","_useMenuStateAndFocus","useMenuStateAndFocus","menuState","setMenuItemFocus","openMenu","_openMenu","otherStateProps","itemRef","stopTimer","_openMenu2","delayOpen","useMenuChange","useImperativeHandle","closeMenu","submenu","externaItemlRef","itemClassName","itemStyles","restItemProps","itemHandlers","handleMouseMove","handleMouseLeave","getMenuList","messageFormatter","privConnectionState","privConnectionEstablishDeferral","privCertificateValidatedDeferral","WebSocket","WebsocketMessageAdapter","forceNpmWebSocket","perMessageDeflate","privEnableCompression","checkAgent","privWebsocketClient","binaryType","privReceivingMessageQueue","privDisconnectDeferral","privSendMessageQueue","processSendQueue","onopen","privLastErrorReceived","onclose","rawMessage","privMessageFormatter","messageSendStatusDeferral","messageSendDeferral","Message","sendStatusDeferral","sendRawMessage","sendItem","isWebsocketOpen","stack","None","closeReason","pendingReceiveItem","pendingSendItem","itemToSend","queryParameters","privConnectionMessageAdapter"],"mappings":"kHAAA,mUAoDO,IAAMA,EAAmC,eACnCC,EAA4C,wBAC5CC,EAAwC,oBACxCC,GAAqC,iBACrCC,GAAuD,a,2FCjDvDC,GAAb,mIACW,gCAA8BC,EAAYC,GAC7C,QAAcC,IAAVF,GAAiC,OAAVA,EACvB,MAAM,IAAIG,MAAM,0BAA4BF,KAHxD,yBAOW,qBAAmBD,EAAYC,GAClC,GAAc,OAAVD,EACA,MAAM,IAAIG,MAAM,eAAiBF,KAT7C,qCAaW,iCAA+BD,EAAeC,GAGjD,GAFAF,UAAUK,uBAAuBJ,EAAOC,IAEnC,GAAKD,GAAOK,OAAOC,OAAS,EAC7B,MAAM,IAAIH,MAAM,2BAA6BF,KAjBzD,6BAqBW,yBAAuBM,GAC1B,GAAIA,EACA,MAAM,IAAIJ,MAAM,oCAvB5B,2CA2BW,uCAAqCK,EAAiBP,GAGzD,GAFAF,UAAUK,uBAAuBI,EAAOP,GAEnB,IAAjBO,EAAMF,OACN,MAAM,IAAIH,MAAM,iCAAmCF,GAJc,oBAOlDO,GAPkD,IAOrE,2BAA0B,KAAfC,EAAe,QACtBV,UAAUW,wBAAwBD,EAAMR,IARyB,mCA3B7E,qCAuCW,iCAA+BD,EAAYC,GAC9CF,UAAUW,wBAAwBV,EAAOC,KAxCjD,iCA6CW,6BAA2BD,EAAYC,GAC1C,QAAcC,IAAVF,EACA,MAAM,IAAIG,MAAM,uBAAyBF,OA/CrD,c,40HCJa,GAKT,wBAAmBU,EAA0BC,GAAyB,4CAK/D,KAAAC,OAAS,SACZC,GAEA,IAAMC,EAAa,EAAKC,qBAAqBF,EAAkB,EAAKG,qBAAsB,EAAKC,uBAE/F,IAAKH,EACD,OAAO,KAGX,IAAMI,EAAkC,EAApBJ,EAAWT,OAEzBc,EAAS,IAAIC,YAAYF,GACzBG,EAAO,IAAIC,SAASH,GAG1B,OAFA,EAAKI,gBAAgBF,EAAM,EAAGP,GAEvBK,GAGH,KAAAK,UAAY,SAACH,EAAgBI,EAAgBC,GACjD,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAIrB,OAAQsB,IAC5BN,EAAKO,SAASH,EAASE,EAAGD,EAAIG,WAAWF,KAIzC,KAAAJ,gBAAkB,SAACF,EAAgBI,EAAgBK,GACvD,IAAK,IAAIH,EAAI,EAAGA,EAAIG,EAAMzB,OAAQsB,IAAMF,GAAU,EAAG,CACjD,IAAMM,EAAIC,KAAKC,KAAK,EAAGD,KAAKE,IAAI,EAAGJ,EAAMH,KACzCN,EAAKc,SAASV,EAAQM,EAAI,EAAQ,MAAJA,EAAiB,MAAJA,GAAY,KAIvD,KAAAhB,qBAAuB,SAC3BqB,EACAC,EACAC,GAEA,IAAKF,EACD,OAAO,KAGX,GAAIE,IAAYD,GAAWC,EAAUD,EACjC,OAAOD,EAQX,IALA,IAAMG,EAAQF,EAAUC,EAClBE,EAAYR,KAAKS,MAAML,EAAS/B,OAASkC,GACzCG,EAAW,IAAIC,aAAaH,GAC9BI,GAAY,EACZC,GAAY,EACTA,GAAYL,GAAW,CAI1B,IAHA,IAAMM,GAAgBd,KAAKS,OAAOI,GAAY,GAAKN,GAC/CQ,GAAQ,EACRC,GAAQ,EACLJ,GAAYE,IAAiBF,GAAYR,EAAS/B,QACrD0C,IAASX,EAASQ,MAClBI,KAEJN,EAASG,MAAeE,GAAQC,GAGpC,OAAON,GAhEPO,KAAKjC,qBAAuBN,EAC5BuC,KAAKhC,sBAAwBN,GCJxB,GAAb,WAKI,qBAAmBuC,GAA2B,yCAIvC,KAAAC,OAAS,SAACC,EAAuBC,EAA0BC,GAC9D,IAEMC,EAAoB,IAAI,GAAeH,EAAQI,WAF3B,MAKpBC,EAAWL,EAAQM,wBAAwBL,GACjD,IAAK,EAAKM,0BAA2B,CACjC,IAeMC,GAAO,IAAIC,KAAK,CAfA,wlBAeiB,CAAEC,KAAM,0CAC/C,EAAKH,0BAA4BI,IAAIC,gBAAgBJ,IAGzD,IAAMK,GAAwB,SAAxBA,wBACF,IAAMC,GAAc,WAChB,IAAIC,EAAa,EACjB,IACI,OAAOf,EAAQgB,sBAAsBD,EAAY,EAAG,GACtD,MAAOE,GAELF,EAAa,KAEb,IADA,IAAIG,EAAkBlB,EAAQI,WACvBW,EAAa,OAASG,GAAoB,MAC7CH,IAAe,EACfG,IAAoB,EAExB,OAAOlB,EAAQgB,sBAAsBD,EAAY,EAAG,IAZxC,GAepBD,GAAWK,eAAiB,SAACC,GACzB,IAAMC,EAAaD,EAAME,YAAYC,eAAe,GAEpD,GAAIrB,IAAiBA,EAAasB,SAAU,CACxC,IAAMC,EAAYtB,EAAkB3C,OAAO6D,GACrCI,IACFvB,EAAawB,iBAAiB,CAC1B3D,OAAQ0D,EACRE,OAAO,EACPC,aAAcC,KAAKC,SAEV,KAIzBzB,EAAS0B,QAAQjB,IACjBA,GAAWiB,QAAQ/B,EAAQgC,aAC3B,EAAKC,mBAAqB,CACtBC,oBAAqBpB,GACrBqB,OAAQ9B,EACR+B,OAAQnC,IAOhB,GAAM,EAAKM,2BAA+BP,EAAQqC,aAC9CrC,EAAQqC,aACHC,UAAU,EAAK/B,2BACfgC,MAAK,WACF,IAAMC,GAAc,IAAIC,iBAAiBzC,EAAS,oBAClDwC,GAAYE,KAAKC,UAAY,SAACC,GAC1B,IAAMvB,EAA2BuB,EAAGC,KAEpC,GAAI3C,IAAiBA,EAAasB,SAAU,CACxC,IAAMC,EAAYtB,EAAkB3C,OAAO6D,GACrCI,IACFvB,EAAawB,iBAAiB,CAC1B3D,OAAQ0D,EACRE,OAAO,EACPC,aAAcC,KAAKC,SAEV,KAIzBzB,EAAS0B,QAAQS,IACjBA,GAAYT,QAAQ/B,EAAQgC,aAC5B,EAAKC,mBAAqB,CACtBC,oBAAqBM,GACrBL,OAAQ9B,EACR+B,OAAQnC,MAGf6C,OAAM,WACHjC,aAGR,IACIA,KACF,MAAOkC,IACL,MAAM,IAAIjG,MAAJ,8DAAiEiG,OAK5E,KAAAC,sBAAwB,SAAChD,GACxB,EAAKiC,qBACD,EAAKA,mBAAmBC,sBACxB,EAAKD,mBAAmBC,oBAAoBe,WAAWjD,EAAQgC,aAC/D,EAAKC,mBAAmBC,oBAAsB,MAE9C,EAAKD,mBAAmBE,SACxB,EAAKF,mBAAmBE,OAAOc,aAC3B,EAAKC,wBACL,EAAKjB,mBAAmBG,OAAOe,YAAYC,SAAQ,SAACC,GAAD,OAAgBA,EAAMC,UAE7E,EAAKrB,mBAAmBE,OAAS,QA5HzCtC,KAAKqD,uBAAyBpD,EANtC,4DAuIW,SAAAyD,cAAcC,GACjB3D,KAAKU,0BAA4BiD,MAxIzC,e,qdCqCa,GAAb,WAsBI,wBACqBC,EACAC,EACjBC,EACA1D,GAAyB,4CAHR,KAAAwD,eACA,KAAAC,WApBb,KAAAE,YAAsD,GAwCvD,KAAAC,OAAS,WACZ,GAAI,EAAKC,uBACL,OAAO,EAAKA,uBAAuBC,QAGvC,EAAKD,uBAAyB,IAAI,KAElC,IACI,EAAKE,qBACP,MAAO/C,IACL,GAAIA,cAAiBnE,MAAO,CACxB,IAAMmH,EAAoBhD,GAC1B,EAAK6C,uBAAuBI,OAAOD,EAAWrH,KAAO,KAAOqH,EAAWE,cAEvE,EAAKL,uBAAuBI,OAAOjD,IAEvC,OAAO,EAAK6C,uBAAuBC,QAGvC,IAAMK,EAAMC,OAAOC,UAEfC,EACAH,EAAIG,cACJH,EAAII,oBACJJ,EAAIK,iBACJL,EAAIM,eAYR,GATMN,EAAIO,eACNJ,EAAe,sBAACK,EAAqCC,EAAoDC,GACrGV,EAAIO,aACCJ,aAAaK,GACbrC,KAAKsC,GACL/B,MAAMgC,KAIdP,EAIE,CACH,IAAMQ,EAAO,SAAPA,OACF,EAAKC,QAAQ,IAAI,KAA6B,EAAKC,SAC/C,EAAKC,iBAAmB,EAAKA,gBAAgBC,QAC7C,EAAKH,QAAQ,IAAI,KAAsB,EAAKC,SAC5C,EAAKnB,uBAAuBsB,WAE5Bb,EACI,CAAEc,OAAO,EAAK3B,UAAW,CAAEA,SAAU,EAAKA,UAAmB4B,OAAO,IACpE,SAACrF,GACG,EAAKiF,gBAAkBjF,EACvB,EAAK+E,QAAQ,IAAI,KAAsB,EAAKC,SAC5C,EAAKnB,uBAAuBsB,aAC7B,SAACnE,GACA,IAAMsE,EAAW,oDAAH,OAAuDtE,GACrE,EAAK6C,uBAAuBI,OAAOqB,GACnC,EAAKP,QAAQ,IAAI,KAAsB,EAAKC,OAAQM,QAKrC,cAA3B,EAAKC,YAAYC,MAGjB,EAAKD,YAAYE,SACZnD,KAAKwC,GACLjC,OAAM,SAAC6C,GACJ,EAAK7B,uBAAuBI,OAA5B,8CAA0EyB,OAGlFZ,QAlCW,CACf,IAAMQ,EAAW,yCACjB,EAAKzB,uBAAuBI,OAAOqB,GACnC,EAAKP,QAAQ,IAAI,KAAsBO,EAAU,KAmCrD,OAAO,EAAKzB,uBAAuBC,SAGhC,KAAA6B,GAAK,WACR,OAAO,EAAKX,QAGT,KAAAY,OAAS,SAACC,GAGb,OAFA,EAAKd,QAAQ,IAAI,KAA8B,EAAKC,OAAQa,IAErD,EAAKC,OAAOD,GAAavD,MAC5B,SAACH,GAEG,OADA,EAAK4C,QAAQ,IAAI,KAA6B,EAAKC,OAAQa,IACpD,CACHE,OAAQ,yBAAW,0IACf5D,EAAO6D,mBACApG,KAAK+D,YAAYkC,GACxBjG,KAAKmF,QAAQ,IAAI,KAA6BnF,KAAKoF,OAAQa,IAH5C,kBAIRjG,KAAKqG,WAJG,uDAMnBN,GAAI,cACA,OAAOE,GAEXK,KAAM,gBACF,OAAO/D,EAAO+D,aAM3B,KAAAH,OAAS,SAACF,GACTA,GAAe,EAAKlC,YAAYkC,KAChC,EAAKlC,YAAYkC,GAAaM,eACvB,EAAKxC,YAAYkC,GACxB,EAAKd,QAAQ,IAAI,KAA6B,EAAKC,OAAQa,MA6F3D,KAAAC,OAAS,SAAOD,GAAP,OAA4D,6IACzE,OADyE,SACnEjG,KAAKgE,SAD8D,OAEnEzB,EAAS,IAAIiE,GAAA,EAAyBxG,KAAKyG,oBAAqBR,GACtEjG,KAAK+D,YAAYkC,GAAe1D,EAHyC,SAKrEvC,KAAK4D,aAAa1D,OAAOF,KAAK2F,YAAa3F,KAAKqF,gBAAiB9C,GALI,sDAOrEvC,KAAKmF,QAAQ,IAAI,KAA0BnF,KAAKoF,OAAQa,EAA3C,OAPwD,oBAUnES,EAA8BnE,EAVqC,kBAWlEmE,GAXkE,iEAcrE,KAAAvB,QAAU,SAAC5D,GACf,EAAKoF,WAAWxB,QAAQ5D,GACxBqF,GAAA,EAAOC,SAAS1B,QAAQ5D,IAGpB,KAAA4C,mBAAqB,WACnB,EAAKwB,cAIX,EAAKA,YAAcmB,GAAA,EAAsBC,gBAAgBC,eAAeC,YAAYC,iBAjPpFlH,KAAKyG,oBAAsBO,eAAeC,YAAYE,eAAiB,GACvEnH,KAAKoF,OAAStB,GAAgC,eAC9C9D,KAAK2G,WAAa,IAAIS,GAAA,EACtBpH,KAAKqF,gBAAkBjF,GAAe,KACtCJ,KAAKqH,eAAgB,EAjC7B,sDAoCI,eACI,OAAOC,QAAQ/B,QAAQyB,eAAeC,eArC9C,gBAwCI,eACI,OAAOK,QAAQjD,OAAO,mCAzC9B,qBA6JiB,SAAAgC,U,uJACT,IAAWkB,KAAYvH,KAAK+D,YACpBwD,IACMhF,EAASvC,KAAK+D,YAAYwD,KAE5BhF,EAAOgE,Q,GAKnBvG,KAAKmF,QAAQ,IAAI,KAAoBnF,KAAKoF,UACtCpF,KAAKiE,uB,gBAEL,O,SAAMjE,KAAKiE,uB,OACXjE,KAAKiE,uBAAyB,K,OAGlC,O,SAAMjE,KAAKwH,sB,0FA9KnB,kBAmLI,eACI,OAAOxH,KAAK2G,aApLpB,sBAuLI,eACI,OAAO3G,KAAKyH,qBAAqB/E,MAAK,SAACgF,GACnC,MAAO,CACHC,cAAeX,eAAeC,YAAYW,cAC1CC,aAAcb,eAAeC,YAAYa,SACzCC,aAAc,KAAaC,QAC3BC,aAAc,aACdC,MAAOR,EACPS,WAAYnB,eAAeC,YAAYC,cACvCrG,KAAM,KAAKuH,kBAhM3B,yBAqMW,SAAAC,YAAYtL,EAAcuL,GAC7B,GAxMyC,gCAwMrCvL,EAGA,MAAM,IAAIE,MAAM,aAAeF,EAAO,qCAFtCiD,KAAK4D,aAAaF,cAAc4E,KAvM5C,gCA6MY,SAAAb,qBAAkB,WAChBc,EAAgC,aAGtC,QAAiCvL,IAA7BgD,KAAKwI,oBACL,OAAOlB,QAAQ/B,QAAQvF,KAAKwI,qBAIhC,QAA6BxL,IAAzBgD,KAAKqF,kBAAkCrF,KAAKqF,gBAAgBC,OAC5D,OAAOgC,QAAQ/B,QAAQgD,GAI3BvI,KAAKwI,oBAAsBD,EAG3B,IAAME,EAA6BzI,KAAKqF,gBAAgB/B,YAAY,GAAGoF,cAAc7E,SAGrF,QAAI7G,IAAcyL,EACd,OAAOnB,QAAQ/B,QAAQvF,KAAKwI,qBAGhC,IAAMG,EAA6B,IAAI,KAcvC,OAXAlE,UAAUK,aAAa8D,mBAAmBlG,MAAK,SAACmG,GAA8B,qBACrDA,GADqD,IAC1E,2BAA8B,KAAnBC,GAAmB,QAC1B,GAAIA,GAAOjF,WAAa4E,EAAoB,CAExC,EAAKD,oBAAsBM,GAAOpB,MAClC,QALkE,gCAQ1EiB,EAASpD,QAAQ,EAAKiD,wBACvB,kBAAMG,EAASpD,QAAQ,EAAKiD,wBAExBG,EAASzE,UAnPxB,iCAiRkB,SAAAsD,sB,wJACLxH,KAAK2F,Y,oDAIV3F,KAAK4D,aAAaT,sBAAsBnD,KAAK2F,aAKzCoD,GAAoB,EACpB,UAAW/I,KAAK2F,cAChBoD,GAAW,IAGXA,E,oBACK/I,KAAKqH,c,iBAGN,OADArH,KAAKqH,eAAgB,E,UACfrH,KAAK2F,YAAYY,Q,QACvBvG,KAAK2F,YAAc,KACnB3F,KAAKqH,eAAgB,E,mCAElB,OAASrH,KAAK2F,aAA0C,YAA3B3F,KAAK2F,YAAYC,M,iBAOrD,O,UAAM5F,KAAK2F,YAAYqD,U,4DA/SnC,kBAE4B,GAAA/B,YAAqCH,GAAA,EAAkBmC,wB,OCtCvEC,G,uXCwBC,GAAb,WAgBI,yBAAmBC,EAAqBC,EAAmBtF,GAAsB,6CAZzE,KAAAC,YAAsD,GAUtD,KAAAsF,cAAwB,GAwBzB,KAAArF,OAAS,WACZ,GAAI,EAAKsF,aAAaC,YAAY,UAAY,EAAKD,aAAalM,OAAS,EAAG,CACxE,IAAMsI,EAAW,EAAK4D,aAAe,gEAErC,OADA,EAAKnE,QAAQ,IAAI,KAAsBO,EAAU,KAC1C4B,QAAQjD,OAAOqB,GAG1B,EAAKP,QAAQ,IAAI,KAA6B,EAAKC,SACnD,EAAKD,QAAQ,IAAI,KAAsB,EAAKC,UAIzC,KAAAW,GAAK,WACR,OAAO,EAAKX,QAGT,KAAAY,OAAS,SAAOC,GAAP,OAAyD,gKAGjC,OAFpCjG,KAAKmF,QAAQ,IAAI,KAA8BnF,KAAKoF,OAAQa,IADS,SAG3BjG,KAAKwJ,OAAOvD,GAHe,cAG/D1D,EAH+D,OAKrEvC,KAAKmF,QAAQ,IAAI,KAA6BnF,KAAKoF,OAAQa,IALU,kBAM9DqB,QAAQ/B,QAAQ,CACnBY,OAAQ,yBAA0B,iJAI9B,OAHA5D,EAAO6D,mBACApG,KAAK+D,YAAYkC,GACxBjG,KAAKmF,QAAQ,IAAI,KAA6BnF,KAAKoF,OAAQa,IAH7B,SAIxBjG,KAAKqG,UAJmB,uDAMlCN,GAAI,cACA,OAAOE,GAEXK,KAAM,gBACF,OAAO/D,EAAO+D,WAjB+C,wDAsBlE,KAAAH,OAAS,SAACF,GACTA,GAAe,EAAKlC,YAAYkC,KAChC,EAAKlC,YAAYkC,GAAaM,eACvB,EAAKxC,YAAYkC,GACxB,EAAKd,QAAQ,IAAI,KAA6B,EAAKC,OAAQa,MAI5D,KAAAI,QAAU,WACb,IAAK,IAAMkB,KAAY,EAAKxD,YACxB,GAAIwD,EAAU,CACV,IAAMhF,EAAS,EAAKwB,YAAYwD,GAC5BhF,IAAWA,EAAOZ,UAClBY,EAAOgE,QAMnB,OADA,EAAKpB,QAAQ,IAAI,KAAoB,EAAKC,SACnCkC,QAAQ/B,WAkIX,KAAAJ,QAAU,SAAC5D,GACf,EAAKoF,WAAWxB,QAAQ5D,GACxBqF,GAAA,EAAOC,SAAS1B,QAAQ5D,IAlNxBvB,KAAKoF,OAAStB,GAAgC,eAC9C9D,KAAK2G,WAAa,IAAIS,GAAA,EACtBpH,KAAKyJ,WAAaN,EACI,qBAAX3E,QAA0C,qBAAT5D,MAAwBZ,KAAKyJ,sBAAsB7I,KAC3FZ,KAAKsJ,aAAgBH,EAAcpM,KAEnCiD,KAAKsJ,aAAeF,GAAY,cAIpCpJ,KAAK0J,uBAAyB1J,KAAK2J,aA3B3C,uDA8BI,eACI,OAAO3J,KAAK0J,yBA/BpB,gBAkCI,eACI,OAAOpC,QAAQ/B,QAAQvF,KAAKyJ,cAnCpC,kBAkGI,eACI,OAAOzJ,KAAK2G,aAnGpB,sBAsGI,eACI,OAAO3G,KAAK0J,uBAAuBhH,MAA+B,SAACgE,GAC/D,OAAOY,QAAQ/B,QAAQ,CACnBoC,cAAejB,EAAOkB,cACtBC,aAAcnB,EAAOoB,SACrBC,aAAc,KAAaC,QAC3BC,aAAc,aACdC,MAAO,OACPC,WAAYzB,EAAOQ,cACnBrG,KAAM,KAAK+I,YA/G3B,wBAoHY,SAAAD,aAAU,WAGRE,EAAwB7J,KAAKyJ,WAAWK,MAAM,EADtB,KAGxBC,EAAgD,IAAI,KAEpDC,EAAgB,SAAhBA,cAAiBH,GACnB,IAAMzL,EAAiB,IAAIC,SAASwL,GAE9BI,EAAU,SAAVA,QAAWC,GACb,OAAOC,OAAOC,aAAahM,EAAKiM,SAASH,GAAQ9L,EAAKiM,SAASH,EAAQ,GAAI9L,EAAKiM,SAASH,EAAQ,GAAI9L,EAAKiM,SAASH,EAAQ,KAI/H,GAAI,SAAWD,EAAQ,GAOvB,GAAI,SAAWA,EAAQ,IAAM,SAAWA,EAAQ,IAAhD,CAWA,IANA,IAAMK,EAAqBlM,EAAKmM,SAAS,IAAI,GACvCC,GAAuBpM,EAAKqM,UAAU,IAAI,GAC1ClK,GAAqBnC,EAAKsM,UAAU,IAAI,GACxC9C,GAAwBxJ,EAAKqM,UAAU,IAAI,GAE7CE,GAAc,GAAK5L,KAAKC,IAAIsL,EAAa,GAAI,GACzB,SAAjBL,EAAQU,IAAiBA,IAAO,EACnC,GAAIA,GAAMC,IAEN,YADAb,EAAa1F,OAAO,wDAI5B,EAAKgF,cAAgBsB,GAAM,EAC3BZ,EAAaxE,QAAQuB,GAAA,EAAkB+D,iBAAiBtK,GAAYqH,GAAe4C,UAjB/ET,EAAa1F,OAAO,0DAPpB0F,EAAa1F,OAAO,mDA2B5B,GAAsB,qBAAXG,QAA0C,qBAAT5D,MAAwBiJ,aAAkBjJ,KAAM,CACxF,IAAMkK,EAAqB,IAAIC,WAE/BD,EAAOE,OAAS,SAACzJ,GACb,IAAMsI,EAAuBtI,EAAM0J,OAAsBvE,OACzDsD,EAAcH,IAGlBiB,EAAOI,kBAAkBrB,OACtB,CACH,IAAMsB,EAAYtB,EAClBG,EAAcmB,EAAEjN,OAAO4L,MAAMqB,EAAEC,WAAYD,EAAEC,WAAaD,EAAEE,aAEhE,OAAOtB,EAAa7F,UA5K5B,oBA+KkB,SAAAsF,OAAOvD,G,4LAQb,OAPEqF,EAAU,SAAVA,QAAWlK,GACb,IAAMsE,EAAW,oCAAH,OAAuC,GAAK4D,aAA5C,cAA8DlI,GAE5E,MADA,GAAK+D,QAAQ,IAAI,KAA0B,GAAKC,OAAQa,EAAaP,IAC/D,IAAIzI,MAAMyI,I,oBAIV1F,KAAKgE,S,OAE2B,O,UAAMhE,KAAK0J,uB,cAA3C6B,E,QACAhJ,EAAS,IAAIiE,GAAA,EAAyB+E,EAAOpE,eAAiB,GAAIlB,GAExEjG,KAAK+D,YAAYkC,GAAe1D,EAC1BiJ,EAAuBxL,KAAKyJ,WAAWK,MAAM9J,KAAKqJ,eAElDoC,EAAc,SAAdA,YAAeC,GACbnJ,EAAOZ,WAIXY,EAAOV,iBAAiB,CACpB3D,OAAQwN,EACR5J,OAAO,EACPC,aAAcC,KAAKC,QAEvBM,EAAOgE,UAGW,qBAAX/B,QAA0C,qBAAT5D,MAAwB4K,aAAiB5K,OAC3EkK,GAAqB,IAAIC,YACxBO,QAAU,SAACvI,GAAoCuI,EAAQvI,EAAG4I,aAEjEb,GAAOE,OAAS,SAACzJ,GACb,IAAMqK,EAA2BrK,EAAM0J,OAAsBvE,OAC7D+E,EAAYG,IAGhBd,GAAOI,kBAAkBM,IAGzBC,GADMI,GAAYL,GACJtN,OAAO4L,MAAM+B,GAAET,WAAYS,GAAET,WAAaS,GAAER,a,mBAGvD9I,G,qCAEP+I,EAAQ,GAAD,I,sEA7NnB,mB,UCxBsB,GAAtB,wF,ibCWMQ,IAAqB,sBACtB,KAAeC,IAAM,aADC,gBAEtB,KAAeC,MAAQ,eAFD,gBAGtB,KAAeC,IAAM,cAHC,gBAItB,KAAeC,SAAW,aAJJ,gBAKtB,KAAeC,UAAY,2BALL,gBAMtB,KAAeC,KAAO,eANA,gBAOtB,KAAeC,KAAO,cAPA,IAiBd,GAAb,WAeI,iCAAmBC,GAA2B,0CATtC,KAAAC,qBAA+B,EAE/B,KAAAC,uBAAiC,EACjC,KAAAC,uBAAiC,EAIjC,KAAAC,kBAA4B,EAGhC1M,KAAKoF,OAASkH,GAA0C,eACxDtM,KAAK2M,cAAe,EACpB3M,KAAK4M,cAAe,EAlB5B,6DAqBW,SAAA7G,KACH,OAAO/F,KAAKoF,SAtBpB,mBAyBW,SAAAyH,MAAM3O,EAAqB4O,EAAiB5J,QAClBlG,IAAzBgD,KAAK+M,iBACL/M,KAAK+M,gBAAgBC,KAAK9O,GAC1B8B,KAAKiN,qBAAqBvK,MAAK,WACrBoK,GACFA,OAEL,SAAC1L,GACM8B,GACFA,EAAI9B,YAG0BpE,IAA/BgD,KAAKkN,wBACZlN,KAAKkN,sBAAsBL,MAAM3O,GACjC8B,KAAK0M,mBAAqBxO,EAAOmN,cAvC7C,mBA2CW,SAAA9E,MAAMuG,EAAiB5J,GAA6B,WAEvD,GADAlD,KAAK4M,cAAe,OACU5P,IAA1BgD,KAAKmN,iBACLnN,KAAKoN,8BAA8B1K,MAAK,WAC9BoK,GACFA,OAEL,SAAC1L,GACM8B,GACFA,EAAI9B,WAGT,QAAmCpE,IAA/BgD,KAAKkN,sBACZ,GAAKlN,KAAKqN,WAAWC,YAAc,KAAevB,KAAO/L,KAAKqN,WAAWC,YAAc,KAAetB,OAC/FhM,KAAKqN,WAAWC,YAAc,KAAelB,OAAuC,IAA9BpM,KAAKqN,WAAWE,UAMtE,CACH,IAAIC,EAAgB,IAAIrP,YAAY6B,KAAK0M,mBACzC1M,KAAKkN,sBAAsB5G,KAAKkH,GAAe9K,MAAK,SAAC+K,GACjDD,EAAgBE,GAAA,EAAqBC,UAAUH,EAAe,EAAKH,YACnE,IAAMO,EAAY,IAAIhN,KAAK,CAAC4M,GAAgB,CAAE3M,KAAMiL,GAAsB,EAAKuB,WAAWC,aAC1F,EAAKO,UAAUC,IAAMtJ,OAAO1D,IAAIC,gBAAgB6M,GAChD,EAAKG,iBAAiBrL,MAAK,WACjBoK,GACFA,OAEL,SAAC1L,GACM8B,GACFA,EAAI9B,SAGb,SAACA,GACM8B,GACFA,EAAI9B,WArBZ4M,QAAQC,KAAR,gFACMjO,KAAKkO,YACPlO,KAAKkO,WAAWlO,WAyBlBA,KAAKkO,YACPlO,KAAKkO,WAAWlO,QAvFhC,kBA4FI,SAAAmO,IAAW5C,GAAyB,WAChC,GAA8B,qBAAlB6C,cAAiF,qBAAvC5J,OAAe6J,mBAAqC,CACtGrO,KAAKqN,WAAa9B,EAClB,IAAM+C,EAAmBxC,GAAsB9L,KAAKqN,WAAWC,gBAC9CtQ,IAAbsR,EAEAN,QAAQC,KAAR,sCACmC,KAAejO,KAAKqN,WAAWC,WADlE,iCAGgC,qBAAjBiB,aAAgCA,YAAYC,gBAAgBF,IAC3EtO,KAAK6N,UAAY,IAAIY,MACrBzO,KAAK+M,gBAAkB,GACvB/M,KAAK0O,gBAAkB,IAAIH,YAC3BvO,KAAK6N,UAAUC,IAAMhN,IAAIC,gBAAgBf,KAAK0O,iBAC9C1O,KAAK6N,UAAUc,OACf3O,KAAK0O,gBAAgBE,aAAe,SAACrN,GACjC,EAAKkL,uBAAwB,EAC7B,EAAKiC,gBAAgBG,SAhID,KAiIpB,EAAK1B,iBAAmB,EAAKuB,gBAAgBI,gBAAgBR,GAC7D,EAAKnB,iBAAiB4B,SAAW,SAACtB,GAC9B,EAAKR,qBAAqBhK,OAAM,SAAC6C,GAC7Bc,GAAA,EAAOC,SAAS1B,QAAQ,IAAI,KAAgBW,QAGpD,EAAKqH,iBAAiB6B,YAAc,SAACvB,GACjC,EAAKL,8BAA8BnK,OAAM,SAAC6C,GACtCc,GAAA,EAAOC,SAAS1B,QAAQ,IAAI,KAAgBW,QAGpD,EAAKqH,iBAAiB8B,cAAgB,SAACxB,GACnC,EAAKjB,uBAAwB,IAGrCxM,KAAKiN,qBAAqBhK,OAAM,SAAC6C,GAC7Bc,GAAA,EAAOC,SAAS1B,QAAQ,IAAI,KAAgBW,SAKhDkI,QAAQC,KAAR,iBACc,KAAejO,KAAKqN,WAAWC,WAD7C,oEAEAtN,KAAKkN,sBAAwB,IAAI,KACjClN,KAAKkN,sBAAsB3B,OAASvL,KAAKqN,WACzCrN,KAAK6N,UAAY,IAAIY,UAvIrC,kBA4II,eACI,OAAOzO,KAAK6N,UAAUqB,QA7I9B,IAgJI,aAAkBA,GACdlP,KAAK6N,UAAUqB,OAASA,IAjJhC,kBAoJW,SAAAC,OACHnP,KAAK6N,UAAUuB,OAAQ,IArJ/B,oBAwJW,SAAAC,SACHrP,KAAK6N,UAAUuB,OAAQ,IAzJ/B,oBA4JI,eACI,OAAOpP,KAAK4M,eA7JpB,uBAgKI,eACI,YAAuB5P,IAAnBgD,KAAK6N,UACE7N,KAAK6N,UAAUyB,aAElB,IApKhB,mBAuKW,SAAAC,QACEvP,KAAK2M,mBAAmC3P,IAAnBgD,KAAK6N,YAC3B7N,KAAK6N,UAAU0B,QACfvP,KAAK2M,cAAe,KA1KhC,oBA8KW,SAAA9G,OAAOiH,EAAiB5J,GACvBlD,KAAK2M,mBAAmC3P,IAAnBgD,KAAK6N,YAC1B7N,KAAK6N,UAAU2B,OAAO9M,MAAK,WACjBoK,GACFA,OAEL,SAAC1L,GACM8B,GACFA,EAAI9B,MAGZpB,KAAK2M,cAAe,KAzLhC,yBAiMI,eACI,OAAO3M,KAAK6N,YAlMpB,gCAqMkB,SAAAZ,qB,mLACmBjQ,IAAzBgD,KAAK+M,iBAAkC/M,KAAK+M,gBAAgB3P,OAAS,GAAM4C,KAAKyP,yB,iBAChFzP,KAAKwM,uBAAwB,EACvBkD,EAAS1P,KAAK+M,gBAAgB4C,Q,SAEhC3P,KAAKmN,iBAAiByC,aAAaF,G,uDAEnC1P,KAAK+M,gBAAgB8C,QAAQH,GAE7B1B,QAAQ8B,IACJ,mE,2BAGR,O,UAAM9P,KAAK+N,iB,oCACJ/N,KAAK+P,e,iBACZ,O,UAAM/P,KAAKoN,8B,iEApNvB,yCAwNkB,SAAAA,8B,yKACNpN,KAAK+P,iBAAkB/P,KAAKyP,wB,gBAE5B,OADAzP,KAAK0O,gBAAgBsB,c,SACfhQ,KAAK+N,iB,yDA3NvB,4BA+NkB,SAAAA,iB,mLACL/N,KAAKuM,0BAA0CvP,IAAnBgD,KAAK6N,U,mBAClC7N,KAAKuM,qBAAsB,EACrBvM,KAAKiQ,cACPjQ,KAAKiQ,aAAajQ,MAEtBA,KAAK6N,UAAUqC,QAAU,WACf,EAAKhC,YACP,EAAKA,WAAW,IAGnBlO,KAAK2M,a,gBACN,O,SAAM3M,KAAK6N,UAAU2B,O,yDA3OrC,0BAgPY,SAAAO,eACJ,OAAQ/P,KAAK2B,eAAsC3E,IAA1BgD,KAAKmN,kBAAmE,IAAhCnN,KAAK+M,gBAAgB3P,QAC/E4C,KAAKyM,wBAA0BzM,KAAKwM,uBAA6D,SAApCxM,KAAK0O,gBAAgByB,aAlPjG,mCAqPY,SAAAV,wBACJ,YAAkCzS,IAA1BgD,KAAKmN,mBAAmCnN,KAAKmN,iBAAiBiD,aAtP9E,2BC5BsB,GAAtB,0F,UCEa,GAAb,WAMI,yBAAmBhH,GAAqB,6CA0CjC,KAAArD,GAAK,WACR,OAAO,EAAKX,QA1CZvI,GAAA,EAAUK,uBAAuB,YAAa,gFAC9C8C,KAAKqQ,OAAS,YAAYjH,EAAU,KAR5C,uDAWI,aAAkBmC,GACd1O,GAAA,EAAUyT,oBAAoBtQ,KAAKuQ,gBAAiB,yBACpDvQ,KAAKuQ,gBAAkBhF,EACvB,IAAIiF,EAAuB,EACvBxQ,KAAKuQ,gBAAgBhD,YACrBiD,EAAexQ,KAAKuQ,gBAAgB1G,OAAOwB,iBAE3BrO,IAAhBgD,KAAKqQ,SACLrQ,KAAKyQ,gBAAkB,qBAAqB,GAAI,CAACC,GAAI1Q,KAAKqQ,OAAQM,MAAOH,EAAcI,WAAW,OAnB9G,mBAuBW,SAAA/D,MAAM3O,GACTrB,GAAA,EAAUK,uBAAuB8C,KAAKuQ,gBAAiB,wCAC1BvT,IAAzBgD,KAAKyQ,iBACLzQ,KAAKyQ,gBAAgB5D,MAAM,IAAIgE,WAAW3S,EAAO4L,MAAM,OA1BnE,mBA8BW,SAAAvD,QAAK,gBACYvJ,IAAhBgD,KAAKqQ,SACLrQ,KAAKyQ,gBAAgBK,GAAG,UAAU,WAC1B,EAAKP,gBAAgBhD,YACrB,EAAKgD,gBAAgBQ,aAAa,EAAKN,gBAAgBO,cACvD,aAAa,EAAKX,OACd,IAAIY,UAAU,EAAKV,gBAAgB1G,QACnC,EACA,EAAK0G,gBAAgB1G,OAAOwB,WAC5B,IAER,aAAa,EAAKgF,QAClB,EAAKA,YAASrT,KAElBgD,KAAKyQ,gBAAgBS,WA5CjC,mBCmCsB,GAAtB,8IAQW,sCACH,IAAMC,EAAc,IAAI,IAAY,GACpC,OAAO,IAAI,GAAgB,IAAI,GAAeA,MAVtD,iCAsBW,6BAA2BtN,GAC9B,IAAMsN,EAAc,IAAI,IAAY,GACpC,OAAO,IAAI,GAAgB,IAAI,GAAeA,EAAatN,MAxBnE,8BAmCW,0BAAwBsF,GAAuD,IAAlCpM,EAAkC,uDAAnB,oBAC/D,OAAO,IAAI,GAAgB,IAAI,GAAgBoM,EAAMpM,MApC7D,6BAgDW,yBAAuBqU,GAE1B,GAAIA,aAAuB,GACvB,OAAO,IAAI,GAAgB,IAAI,KAAyBA,IAG5D,GAAIA,aAAuBC,GAAA,EACvB,OAAO,IAAI,GAAgBD,GAE/B,GAA2B,qBAAhBE,aAA+BF,aAAuBE,YAAa,CAC1E,IAAMH,EAAc,IAAI,IAAY,GACpC,OAAO,IAAI,GAAgB,IAAI,GAAeA,EAAa,KAAM,KAAMC,IAG3E,MAAM,IAAInU,MAAM,wBA9DxB,sCAyEW,oCACH,OAAO,IAAI,GAAsB,IAAI,MA1E7C,+BAuFW,2BAAyBsU,GAC5B,QAAevU,IAAXuU,EACA,OAAOC,YAAYC,2BAEvB,GAAIF,aAAkB,GAClB,OAAO,IAAI,GAAsBA,GAGrC,MAAM,IAAItU,MAAM,wBA/FxB,iCA2GW,6BAA2BmM,GAC9B,OAAO,IAAI,GAAsB,IAAI,GAAgBA,MA5G7D,8BAyHW,0BAAwBgI,GAC3B,GAAIA,aAAuB,GACvB,OAAO,IAAI,GAAsB,IAAI,KAA0BA,IAGnE,GAAIA,aAAuB,KACvB,OAAO,IAAI,GAAsBA,GAGrC,GAAIA,aAAuB,KACvB,OAAO,IAAI,GAAsBA,GAGrC,MAAM,IAAInU,MAAM,0BAtIxB,eA6Ka,GAAb,8EAQI,yBAAmBqF,GAAoB,gDACnC,gBACKmH,WAAanH,EAFiB,EAR3C,uDAgBI,eACI,OAAOtC,KAAKyJ,WAAW8B,SAjB/B,mBAyBW,SAAAhF,MAAMuG,EAAiB5J,GAC1BlD,KAAKyJ,WAAWpD,UAAU3D,MAAK,WACrBoK,GACFA,OAEL,SAAC1L,GACM8B,GACFA,EAAI9B,QAhCpB,gBA0CW,SAAA2E,KACH,OAAO/F,KAAKyJ,WAAW1D,OA3C/B,gBAmDI,eACI,OAAO/F,KAAKyJ,WAAW9I,OApD/B,oBA6DW,SAAAqD,SACH,OAAOhE,KAAKyJ,WAAWzF,WA9D/B,oBAwEW,SAAAgC,OAAOC,GACV,OAAOjG,KAAKyJ,WAAWzD,OAAOC,KAzEtC,oBAkFW,SAAAE,OAAOF,GACV,OAAOjG,KAAKyJ,WAAWtD,OAAOF,KAnFtC,qBA4FW,SAAAI,UACH,OAAOrG,KAAKyJ,WAAWpD,YA7F/B,kBAsGI,eACI,OAAOrG,KAAKyJ,WAAWiI,SAvG/B,yBA0GW,SAAArJ,YAAYtL,EAAcuL,GAG7B,GAFAzL,GAAA,EAAU8U,YAAYrJ,EAAO,cAEzBtL,IAAcgD,KAAKyJ,WAAWpB,YAG9B,MAAM,IAAIpL,MAAM,kEAFhB+C,KAAKyJ,WAAWpB,YAAYtL,EAAMuL,KA9G9C,yBAqHW,SAAAsJ,YAAY7U,EAAc8U,GAC7B,QAAI7U,IAAcgD,KAAKyJ,WAAWmI,YAC9B,OAAO5R,KAAKyJ,WAAWmI,YAAY7U,EAAM8U,GAEzC,MAAM,IAAI5U,MAAM,oEAzH5B,sBA+HI,eACI,OAAO+C,KAAKyJ,WAAWqI,eAhI/B,iBAAqC,IAoIxB,GAAb,0FAQI,+BAAmB3P,GAA8B,sDAC7C,gBACK4P,gBAAkB5P,EAFsB,EARrD,6DAaI,aAAkBoJ,GACdvL,KAAK+R,gBAAgBxG,OAASA,IAdtC,mBAiBW,SAAAsB,MAAM3O,GACT8B,KAAK+R,gBAAgBlF,MAAM3O,KAlBnC,mBAqBW,SAAAqI,QACHvG,KAAK+R,gBAAgBxL,UAtB7B,gBAyBW,SAAAR,KACH,OAAO/F,KAAK+R,gBAAgBhM,OA1BpC,yBA6BW,SAAAsC,YAAYtL,EAAcuL,GAC7B,MAAM,IAAIrL,MAAM,oEA9BxB,yBAiCW,SAAA2U,YAAY7U,EAAc8U,GAC7B,MAAM,IAAI5U,MAAM,sEAlCxB,uBAA2C,I,UCnV9B,GAAb,WAOI,6EANQ,KAAA+U,cAAwB,EADpC,gEA+CW,SAAAzL,QACCvG,KAAKgS,eAIThS,KAAKgS,cAAe,MApD5B,uBAoBW,kBAAgBC,GAGnB,MAFApV,GAAA,EAAUqV,wBAAwBD,EAAU,YAEtC,IAAIhV,MAAM,0BAvBxB,wBAmCW,oBAAkBkM,GAGrB,MAFAtM,GAAA,EAAU8U,YAAYxI,EAAM,QAEtB,IAAIlM,MAAM,4BAtCxB,2B,sECDa,GAAb,WAKI,mFALJ,+EAgBW,sBAAoBkV,GACvBtV,GAAA,EAAU8U,YAAYQ,EAAK,OAC3BtV,GAAA,EAAUW,wBAAwB2U,EAAIC,SAAU,OAEhD,IAAMC,EAA+C,IAAI,GAOnDC,EAAmBH,EAAII,KAAKC,QAAQ,KAC1C,IAAK,IAAMF,EACP,MAAM,IAAIrV,MAAM,4CAEpBoV,EAAaI,OAASN,EAAII,KAAKG,OAAO,EAAGJ,GAIzC,IAAMK,EAAsBR,EAAIS,SAASrJ,YAAY,KAAO,EAC5D,IAAK,IAAMoJ,EACP,MAAM,IAAI1V,MAAM,2CAOpB,GAJAoV,EAAaQ,MAAQV,EAAIS,SAASF,OAAOC,GAGzCN,EAAaS,gBAAkBX,EAAIY,aAAaC,IAAI,yBAChDhW,IAAcqV,EAAaS,gBAC3B,MAAM,IAAI7V,MAAM,sDAGpB,OAAOoV,IAhDf,uBA2DW,mBAAiBQ,GACpBhW,GAAA,EAAUW,wBAAwBqV,EAAO,SAEzC,IAAMR,EAA+C,IAAI,GAEzD,OADAA,EAAaQ,MAAQA,EACdR,IAhEf,8BAiFW,0BAAwBS,EAAyBD,EAAeJ,GACnE5V,GAAA,EAAUW,wBAAwBsV,EAAiB,mBACnDjW,GAAA,EAAUW,wBAAwBqV,EAAO,SACzChW,GAAA,EAAUW,wBAAwBiV,EAAQ,UAE1C,IAAMJ,EAA+C,IAAI,GAIzD,OAHAA,EAAaQ,MAAQA,EACrBR,EAAaI,OAASA,EACtBJ,EAAaS,gBAAkBA,EACxBT,MA1Ff,8BAmGa,GAAb,6QAAoD,I,kICrF9B,GAAtB,8FAKI,iGALJ,gFAkBW,0BAAwBS,EAAyBL,GACpD5V,GAAA,EAAUW,wBAAwBsV,EAAiB,mBACnDjW,GAAA,EAAUW,wBAAwBiV,EAAQ,UAE1C,IAAMQ,EAAmC,IAAI,GAG7C,OAFAA,EAAIC,WAAW7K,YAAY8K,GAAA,EAAWC,4BAA6BN,GACnEG,EAAIC,WAAW7K,YAAY8K,GAAA,EAAWE,+BAAgCZ,GAC/DQ,IAzBf,oCA6CW,gCAA8BK,EAA4Bb,GAC7D5V,GAAA,EAAUW,wBAAwB8V,EAAoB,sBACtDzW,GAAA,EAAUW,wBAAwBiV,EAAQ,UAE1C,IAAMQ,EAAmC,IAAI,GAG7C,OAFAA,EAAIC,WAAW7K,YAAY8K,GAAA,EAAWI,iCAAkCD,GACxEL,EAAIC,WAAW7K,YAAY8K,GAAA,EAAWE,+BAAgCZ,GAC/DQ,IApDf,sBAsEW,kBAAgBO,EAAeV,GAClCjW,GAAA,EAAU8U,YAAY6B,EAAU,YAEhC,IAAMC,EAA0C,IAAI,GAMpD,OALAA,EAAWpL,YAAY8K,GAAA,EAAWO,6BAA8BF,EAASG,SAAW,KAAOH,EAASpB,UAA8B,KAAlBoB,EAAS3Q,KAAc,GAAK,IAAM2Q,EAAS3Q,YAEvJ7F,IAAc8V,GACdW,EAAWpL,YAAY8K,GAAA,EAAWC,4BAA6BN,GAE5DW,IA/Ef,0BAoGW,sBAAoBG,EAAed,GACtCjW,GAAA,EAAU8U,YAAYiC,EAAU,YAChC/W,GAAA,EAAU8U,YAAYmB,EAAiB,mBAEvC,IAAMG,EAAmC,IAAI,GAG7C,OAFAA,EAAIC,WAAW7K,YAAY8K,GAAA,EAAWU,iCAAkCD,EAASE,MACjFb,EAAIC,WAAW7K,YAAY8K,GAAA,EAAWC,4BAA6BN,GAC5DG,MA3Gf,yBAAsDc,GAAA,GA8LzC,GAAb,sGAII,mGACI,gBACKC,qBAAuB,IAAIC,GAAA,EAChC,EAAKC,aAAeC,GAAA,EAAaC,OAHrC,EAJJ,+EAkBI,aAA8B9L,GAC1BzL,GAAA,EAAUW,wBAAwB8K,EAAO,SAEzCtI,KAAKgU,qBAAqB3L,YAAY8K,GAAA,EAAWI,iCAAkCjL,KArB3F,qCA2CI,eACI,OAAOtI,KAAKgU,qBAAqBpC,YAAYuB,GAAA,EAAWA,GAAA,EAAWkB,wCA5C3E,IA+BI,aAAqC/L,GACjCzL,GAAA,EAAUW,wBAAwB8K,EAAO,SACzCtI,KAAKgU,qBAAqB3L,YAAY8K,GAAA,EAAWkB,qCAAsC/L,KAjC/F,2BAoDI,eACI,OAAOtI,KAAKgU,qBAAqBpC,YAAYuB,GAAA,EAAWA,GAAA,EAAWC,gCArD3E,wBA8DI,eACI,OAAQe,GAAA,EAAqBnU,KAAKgU,qBAAqBpC,YAAY,iCAA0B5U,KA/DrG,IAwEI,aAAwBsL,GACpBtI,KAAKgU,qBAAqB3L,YAAY,4BAA0B8L,GAAA,EAAa7L,MAzErF,sBAkFI,eACI,OAAOtI,KAAKgU,qBAAqBpC,YAAYuB,GAAA,EAAWmB,qCAnFhE,IA4FI,aAAsBhM,GAClBtI,KAAKgU,qBAAqB3L,YAAY8K,GAAA,EAAWmB,mCAAoChM,KA7F7F,+BAuGW,SAAAiM,kBAAkBjM,GACrBzL,GAAA,EAAUW,wBAAwB8K,EAAO,SAEzC,IAAMkM,EAAsBxU,KAAKyU,gBACjCD,EAAUxH,KAAK1E,GACftI,KAAKgU,qBAAqB3L,YAAY8K,GAAA,EAAWuB,+CAAgDF,EAAUG,KAAK,QA5GxH,2BAsHI,eAEI,YAAoH3X,IAAhHgD,KAAKgU,qBAAqBpC,YAAYuB,GAAA,EAAWuB,oDAAgD1X,GAC1FgD,KAAKgU,qBAAqBpC,YAAYuB,GAAA,EAAWuB,gDAAgDE,MAAM,KAEvG,KA3HnB,qBAsII,eACI,OAAO5U,KAAK4R,YAAYuB,GAAA,EAAWA,GAAA,EAAW0B,4CAvItD,IAiJI,aAAqBvM,GACjBzL,GAAA,EAAUW,wBAAwB8K,EAAO,SAEzCtI,KAAKgU,qBAAqB3L,YAAY8K,GAAA,EAAW0B,yCAA0CvM,KApJnG,kBA8JI,eACI,OAAOtI,KAAKgU,qBAAqBpC,YAAYuB,GAAA,EAAWE,kCA/JhE,sBAoKW,SAAAyB,SAASC,EAAoBC,EAAgBC,EAAqBC,GACrElV,KAAKqI,YAAY8K,GAAA,EAAWA,GAAA,EAAWgC,uCAAwCJ,GAC/E/U,KAAKqI,YAAY8K,GAAA,EAAWA,GAAA,EAAWiC,mCAAoCJ,GAC3EhV,KAAKqI,YAAY8K,GAAA,EAAWA,GAAA,EAAWkC,uCAAwCJ,GAC/EjV,KAAKqI,YAAY8K,GAAA,EAAWA,GAAA,EAAWmC,uCAAwCJ,KAxKvF,yBAoLW,SAAAtD,YAAY7U,EAAc8U,GAC7B,OAAO7R,KAAKgU,qBAAqBpC,YAAY7U,EAAM8U,KArL3D,yBAgMW,SAAAxJ,YAAYtL,EAA2BuL,GAC1CtI,KAAKgU,qBAAqB3L,YAAYtL,EAAMuL,KAjMpD,sBA2MI,eACI,OAAOtI,KAAKgU,uBA5MpB,mBAqNW,SAAAzN,WArNX,gCAyNW,SAAAgP,mBAAmBxY,EAAcuL,EAAekN,GACnD,IAAMC,EAA+CC,KAAKC,MAAM3V,KAAKgU,qBAAqBpC,YAAY,iCAA+B,OAErI6D,EAAkB1Y,GAAQuL,EAE1BtI,KAAKgU,qBAAqB3L,YAAY,iCAA+BqN,KAAKE,UAAUH,MA9N5F,0BAiOW,SAAAI,aAAaC,GAChB9V,KAAKgU,qBAAqB3L,YAAY8K,GAAA,EAAW4C,sCAAuCC,GAAA,EAAgBF,MAlOhH,gCAqOW,SAAAG,qBACHjW,KAAKgU,qBAAqB3L,YAAY8K,GAAA,EAAW+C,2CAA4C,UAtOrG,wCAwOW,SAAAC,6BACHnW,KAAKgU,qBAAqB3L,YAAY8K,GAAA,EAAWiD,iDAAkD,UAzO3G,6BA2OW,SAAAC,kBACHrW,KAAKgU,qBAAqB3L,YAAY,8BAA4B,UA5O1E,mCA+OI,eACI,OAAOrI,KAAKgU,qBAAqBpC,YAAYuB,GAAA,EAAWmD,wCAhPhE,IAmPI,aAAmCC,GAC/BvW,KAAKgU,qBAAqB3L,YAAY8K,GAAA,EAAWmD,sCAAuCC,KApPhG,oCAuPI,eACI,OAAOvW,KAAKgU,qBAAqBpC,YAAYuB,GAAA,EAAWqD,qCAxPhE,IA2PI,aAAoCC,GAChCzW,KAAKgU,qBAAqB3L,YAAY8K,GAAA,EAAWqD,mCAAoCC,KA5P7F,uCA+PI,eACI,OAAQC,GAAA,EAAoC1W,KAAKgU,qBAAqBpC,YAAYuB,GAAA,EAAWwD,+CAA2C3Z,KAhQhJ,IAmQI,aAAuCuO,GACnCvL,KAAKgU,qBAAqB3L,YAAY8K,GAAA,EAAWwD,0CAA2CD,GAAA,EAA4BnL,QApQhI,6BAAiD,I,gZCjL3B,GAAtB,WAYI,oBAAsBqL,EAA0B1D,EAAgC2D,GAAqC,6BACjH7W,KAAK4W,iBAA+B5Z,IAAhB4Z,EAA6BA,EAAc,GAAYE,6BAC3E9W,KAAKgS,cAAe,EACpBhS,KAAK+W,eAAiB7D,EAAW8D,QACjChX,KAAKiX,sBAAwBJ,EAC7B7W,KAAKkX,4BAjBb,mDA0DW,SAAA3Q,MAAMuG,EAAiBqK,GAC1Bta,GAAA,EAAUua,gBAAgBpX,KAAKgS,cAC/B,aAA0BhS,KAAKqX,SAAQ,GAAOvK,EAAIqK,KA5D1D,wBAoEI,eACI,OAAOnX,KAAKsX,WArEpB,qBAkFoB,SAAAD,QAAQE,G,0JAChBvX,KAAKgS,a,oDAIThS,KAAKgS,cAAe,GAEhBuF,E,oBACIvX,KAAKsX,S,gBACL,O,SAAMtX,KAAKsX,SAASE,YAAYnR,U,OAChC,O,SAAMrG,KAAKsX,SAASD,U,wDA5FpC,uCA2Ic,SAAAH,4BAEN,IAAIO,EAAgC,qBAAXjT,OAA0B,UAAY,OAC3DkT,EAAS,UACTC,EAAY,UAES,qBAAdlT,YACPgT,EAAaA,EAAa,IAAMhT,UAAUmT,SAC1CF,EAASjT,UAAUoT,UACnBF,EAAYlT,UAAUqT,YAG1B,IAAMC,EAAmB/X,KAAKgY,uBAC1B,IAAI,KACA,IAAI,KAAQ,IAAI,KAAGP,EAAYC,EAAQC,MAE/C3X,KAAKsX,SAAWtX,KAAKiY,wBACjBC,WAAWC,sBAAsBnY,KAAK+W,gBACtC/W,KAAKiX,sBACLjX,KAAK4W,YACLmB,KA/JZ,oCAkKoB,SAAAK,uBAAuBC,G,gKAInC,OAHAxb,GAAA,EAAUua,gBAAgBpX,KAAKgS,cACzBiB,EAAyC,IAAI,K,SAE7CjT,KAAKsY,qB,OACX,O,SAAMtY,KAAKsX,SAASiB,UAAUF,EAAiBpF,EAAI1N,QAAS0N,EAAI5O,Q,OACxB,O,SAAM4O,EAAI/O,Q,OAClD,OADMwC,E,iBACA1G,KAAKsY,qB,iCAEJ5R,G,0DA3Kf,iDA+KoB,SAAA8R,oCAAoCH,G,wJAGhD,OAFAxb,GAAA,EAAUua,gBAAgBpX,KAAKgS,c,SAEzBhS,KAAKsY,qB,OACX,O,SAAMtY,KAAKsX,SAASiB,UAAUF,OAAiBrb,OAAWA,G,yDAnLlE,gDAsLoB,SAAAyb,qC,wJAEZ,OADA5b,GAAA,EAAUua,gBAAgBpX,KAAKgS,c,SACzBhS,KAAKsY,qB,yDAxLnB,gCA2LoB,SAAAA,qB,4JACRtY,KAAKsX,S,gBACL,O,SAAMtX,KAAKsX,SAASoB,kB,2FA7LhC,6BAwGW,eACH,OAAOC,GAAA,EAAsBC,uBAzGrC,6BAuHW,yBAAuBC,GAC1BF,GAAA,EAAsBC,qBAAuBC,IAxHrD,mCAkMc,+BAA6B3F,GACnC,IAAMJ,EAAkBI,EAAWtB,YAAYuB,GAAA,EAAWC,iCAA6BpW,GAavF,OAZwB8V,GAAuC,KAApBA,EACvC,IAAIgG,GAAA,EAAuChG,GAC3C,IAAIiG,GAAA,GACA,SAACC,GACG,IAAM1F,EAAqBJ,EAAWtB,YAAYuB,GAAA,EAAWI,sCAAkCvW,GAC/F,OAAOsK,QAAQ/B,QAAQ+N,MAE3B,SAAC0F,GACG,IAAM1F,EAAqBJ,EAAWtB,YAAYuB,GAAA,EAAWI,sCAAkCvW,GAC/F,OAAOsK,QAAQ/B,QAAQ+N,UA7M3C,c,8ZCDa,GAAb,gFASI,0BAAmB2F,EAA4BrC,GAAyB,yCACpE,IAAMsC,EAAqCD,EADyB,OAEpEpc,GAAA,EAAU8U,YAAYuH,EAAkB,gBAExCrc,GAAA,EAAUW,wBACN0b,EAAiBhG,WAAWtB,YAAYuB,GAAA,EAAWkB,sCACnDlB,GAAA,EAAWA,GAAA,EAAWkB,wCAE1B,cAAMuC,EAAasC,EAAiBhG,WAAY,IAAIiG,GAAA,IAC/CC,wBAAyB,EATsC,EAT5E,4DAkEI,eAGI,OAFAvc,GAAA,EAAUua,gBAAgBpX,KAAKoZ,wBAExBpZ,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWmB,mCAAoC,0CArE1F,8BA+EI,eACI,OAAOtU,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWI,mCAhFtD,IA0FI,aAA8B8F,GAC1Bxc,GAAA,EAAUW,wBAAwB6b,EAAO,SACzCrZ,KAAKkT,WAAW7K,YAAY8K,GAAA,EAAWI,iCAAkC8F,KA5FjF,qCAsGI,eAGI,OAFAxc,GAAA,EAAUua,gBAAgBpX,KAAKoZ,wBAExBpZ,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWkB,wCAzGtD,wBAmHI,eAGI,OAFAxX,GAAA,EAAUua,gBAAgBpX,KAAKoZ,wBAE3BpZ,KAAKkT,WAAWtB,YAAY,4BAA0BuC,GAAA,EAAaA,GAAA,EAAaC,WAAaD,GAAA,EAAaA,GAAA,EAAaC,QAChHD,GAAA,EAAaC,OAEbD,GAAA,EAAamF,WAzHhC,sBAoII,eACI,OAAOtZ,KAAK+W,iBArIpB,gCAoJW,SAAAwC,mBAAmBzM,EAA2C5J,GACjE,aAA0BlD,KAAKoY,uBAAuB,KAAgBoB,aAAc1M,EAAI5J,KArJhG,6CAiKW,SAAAuW,gCAAgC3M,EAAiB5J,GACpD,aAA0BlD,KAAKwY,oCAAoC,KAAgBkB,cAAe5M,EAAI5J,KAlK9G,4CA6KW,SAAAyW,+BAA+B7M,EAAiB5J,GACnD,aAA0BlD,KAAKyY,qCAAsC3L,EAAI5J,KA9KjF,0CA+LW,SAAA0W,6BAA6B1R,EAAgC4E,EAAiB5J,GACjFrG,GAAA,EAAU8U,YAAYzJ,EAAO,SAEvBhF,GACFA,EAAI,0BAnMhB,yCAiNW,SAAA2W,4BAA4B/M,EAAiB5J,GAC1C4J,GACFA,MAnNZ,mBA6NW,SAAAvG,MAAMuG,EAAiBqK,GAC1Bta,GAAA,EAAUua,gBAAgBpX,KAAKoZ,wBAC/B,aAA0BpZ,KAAKqX,SAAQ,GAAOvK,EAAIqK,KA/N1D,qBAyOoB,SAAAE,QAAQE,GAAkB,W,gSAClCvX,KAAKoZ,uB,qDAIL7B,E,gBAEA,OADAvX,KAAKoZ,wBAAyB,E,SACxBpZ,KAAKsY,qB,OAGf,O,SAAM,EAAMjB,QAAO,UAACE,G,wDAnP5B,oCAsPc,SAAAS,uBAAuBiB,GAC7B,OAAO,IAAIa,GAAA,EACPb,EACAjZ,KAAKkT,cAzPjB,qCA4Pc,SAAA+E,wBACN8B,EACAlD,EACAD,EACAmB,GACA,IAAMiC,EAA8BpD,EACpC,OAAO,IAAIqD,GAAA,EAAwBF,EAAgBlD,EAAmBmD,EAAYjC,EAAkB/X,SAlQ5G,yBA4BW,oBAAkBiZ,EAA4BiB,EAAgEtD,GACjH,IAAMsC,EAAqCD,EAG3C,OAFAiB,EAA+BhH,WAAWiH,QAAQjB,EAAiBhG,YAChD,IAAIkH,iBAAiBnB,EAAcrC,OA/B9D,kBAAsC,I,sZCCzB,GAAb,gFAYI,0BAAmBqC,EAA4BrC,GAAyB,yCACpE/Z,GAAA,EAAUK,uBAAuB+b,EAAc,gBAC/C,IAAMe,EAA+Bf,EAF+B,OAGpEpc,GAAA,EAAUK,uBAAuB8c,EAAY,iBAE7C,cAAMpD,EAAaoD,EAAW9G,WAAY,IAAImH,GAAA,IACzCC,iBAAmB,GACxB,EAAKC,mBAAqB,GAE1B,EAAKC,8BAA+B,EACpC,EAAKzD,eAAiBiD,EAAW9G,WAEjCrW,GAAA,EAAUW,wBAAwB,EAAK0V,WAAWtB,YAAYuB,GAAA,EAAWkB,sCAAuClB,GAAA,EAAWA,GAAA,EAAWkB,uCAZlE,EAZ5E,2EA0DI,eAGI,OAFAxX,GAAA,EAAUua,gBAAgBpX,KAAKwa,8BAExBxa,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWkB,wCA7DtD,8BAuEI,eACI,OAAOrU,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWI,mCAxEtD,IAmFI,aAA8BjL,GAC1BtI,KAAKkT,WAAW7K,YAAY8K,GAAA,EAAWI,iCAAkCjL,KApFjF,sBA+FI,eACI,OAAOtI,KAAK+W,iBAhGpB,gCA+GW,SAAAwC,mBAAmBzM,EAA2C5J,GAGjE,GAFArG,GAAA,EAAUua,gBAAgBpX,KAAKwa,8BAEqB,IAAhDC,OAAOC,KAAK1a,KAAKua,oBAAoBnd,aAAgBJ,IAAcgD,KAAK2a,mBAAoB,CAC5F,IAAMxa,EAA0BH,KAAK4a,qBAErC5a,KAAKsX,SAASuD,cAAcC,WAAW,SAAU3a,EAAQ4a,QACzD/a,KAAKsX,SAAS0D,eAAeC,oBAAoB9a,EAAQ+a,mBAEblb,KAAKsX,SACtC6D,WAAWnb,KAAKua,mBAAoBva,KAAK2a,oBAGxD,aAA0B3a,KAAKoY,uBAAuB,KAAgBoB,aAAc1M,EAAI5J,KA5HhG,6CAwIW,SAAAuW,gCAAgC3M,EAAiB5J,GACpD,GAAoD,IAAhDuX,OAAOC,KAAK1a,KAAKua,oBAAoBnd,aAAgBJ,IAAcgD,KAAK2a,mBAAoB,CAC5F,IAAMxa,EAA0BH,KAAK4a,qBAErC5a,KAAKsX,SAASuD,cAAcC,WAAW,SAAU3a,EAAQ4a,QACzD/a,KAAKsX,SAAS0D,eAAeC,oBAAoB9a,EAAQ+a,mBAEblb,KAAKsX,SACtC6D,WAAWnb,KAAKua,mBAAoBva,KAAK2a,oBAGxD,aAA0B3a,KAAKwY,oCAAoC,KAAgBkB,cAAe5M,EAAI5J,KAnJ9G,4CA8JW,SAAAyW,+BAA+B7M,EAAiB5J,GACnD,aAA0BlD,KAAKyY,qCAAsC3L,EAAI5J,KA/JjF,0CA8KW,SAAA0W,6BAA6B1R,EAAgC4E,EAAiB5J,GACjFrG,GAAA,EAAU8U,YAAYzJ,EAAO,SAEvBhF,GACFA,EAAI,0BAlLhB,yCAgMW,SAAA2W,4BAA4B/M,EAAiB5J,GAC1C4J,GACFA,MAlMZ,uBA8MW,SAAAsO,UAAUC,EAAsBC,GACnCze,GAAA,EAAUua,gBAAgBpX,KAAKwa,8BAC/B3d,GAAA,EAAUW,wBAAwB8d,EAAU,YAC5Cze,GAAA,EAAUW,wBAAwB6d,EAAc,gBAEhDrb,KAAKsa,iBAAiBtN,KAAK,CAACsO,EAAUD,MAnN9C,wCAiOW,SAAAE,2BAA2BD,EAAkBpT,EAAmCsT,GACnF3e,GAAA,EAAUua,gBAAgBpX,KAAKwa,8BAC/B3d,GAAA,EAAUW,wBAAwB8d,EAAU,YAC5Cze,GAAA,EAAU8U,YAAYzJ,EAAO,SAE7B,IAAMuT,EAA4CvT,EAClDrL,GAAA,EAAUW,wBAAwBie,EAAU5I,MAAO,eAEnD7S,KAAKua,mBAAmBe,GAAY,IAAII,GAAA,EAAcD,EAAWD,KAzOzE,2BAsPW,SAAAG,cAAczT,EAAmCoT,GACpDze,GAAA,EAAU8U,YAAYzJ,EAAO,SAE7B,IAAMuT,EAA4CvT,EAClDrL,GAAA,EAAUW,wBAAwBie,EAAU5I,MAAO,eAEnD7S,KAAK2a,mBAAqB,IAAIe,GAAA,EAAcD,EAAWH,KA5P/D,mBAqQW,SAAA/U,MAAMuG,EAAiBqK,GAC1Bta,GAAA,EAAUua,gBAAgBpX,KAAKwa,8BAE/B,aAA0Bxa,KAAKqX,SAAQ,GAAOvK,EAAIqK,KAxQ1D,oCA2Qc,SAAAa,uBAAuBiB,GAC7B,OAAO,IAAIa,GAAA,EAAiBb,EAAcjZ,KAAKkT,cA5QvD,qCA+Qc,SAAA+E,wBAAwB8B,EAAiClD,EAAuCD,EAA0BmB,GAChI,IAAM6D,EAA6BhF,EACnC,OAAO,IAAIiF,GAAA,EAAwB9B,EAAgBlD,EAAmB+E,EAAW7D,EAAkB/X,QAjR3G,qBAoRoB,SAAAqX,QAAQE,GAAkB,W,gSAClCvX,KAAKwa,6B,qDAILjD,E,gBAEA,OADAvX,KAAKwa,8BAA+B,E,SAC9B,EAAMnD,QAAO,UAACE,G,wDA3RhC,gCA+RY,SAAAqD,qBACJ,IAAI/H,EACAJ,EACAK,EACEgJ,EAAwB,QAE1B9e,IAAcgD,KAAK2a,qBACnB9H,EAAQ7S,KAAK2a,mBAAmBc,UAAU5I,MAC1CJ,EAASzS,KAAK2a,mBAAmBc,UAAUhJ,OAC3CK,EAAkB9S,KAAK2a,mBAAmBc,UAAU3I,iBAIxD,cAAuB2H,OAAOC,KAAK1a,KAAKua,oBAAxC,eAA6D,CAAxD,IAAMe,GAAQ,KACTS,GAA+B/b,KAAKua,mBAAmBe,IAG7D,QAActe,IAAV6V,EACAA,EAAQkJ,GAAcN,UAAU5I,WAEhC,GAAIA,IAAUkJ,GAAcN,UAAU5I,MAClC,MAAM,IAAI5V,MAAM,gDAIxB,QAAeD,IAAXyV,EACAA,EAASsJ,GAAcN,UAAUhJ,YAEjC,GAAIA,IAAWsJ,GAAcN,UAAUhJ,OACnC,MAAM,IAAIxV,MAAM,mEAIxB,QAAwBD,IAApB8V,EACAA,EAAkBiJ,GAAcN,UAAU3I,qBAE1C,GAAIA,IAAoBiJ,GAAcN,UAAU3I,gBAC5C,MAAM,IAAI7V,MAAM,kDAIxB,IAAM+e,GAAkB,QAAUnJ,EAAQ,eAAiByI,GAC3DQ,EAAY9O,KAAKgP,IAGrB,MAAO,CACHjB,OAAQ,CACJhV,GAAI8M,EACJoJ,SAA0Bjf,IAApB8V,EAAiC9S,KAAK+W,eAAenF,YAAYuB,GAAA,EAAWA,GAAA,EAAWC,8BAAgCN,EAC7HoJ,SAAU,QAEdhB,uBAAoBle,IAAcgD,KAAK2a,mBAAsBmB,EAAc,CAAC,QAAUjJ,EAAQ,oBAlV1G,kBAAsC,I,kDCbhB,GAAtB,kEA2Ca,GAAb,WAKI,+BAAYvO,GAA6B,mDACrCtE,KAAKmc,sBAAwB7X,EAC7BtE,KAAK+W,eAAiB,IAAI9C,GAAA,EACpBjU,KAAKmc,sBAAsBC,QAAQC,GAAA,EAAYC,eACjDtc,KAAK+W,eAAe1O,YAAY8K,GAAA,EAAWoJ,iBAAkBvc,KAAKmc,sBAAsBC,QAAQC,GAAA,EAAYC,eAGhH7B,OAAOC,KAAK1a,KAAKmc,sBAAsBC,SAAS7Y,SAAQ,SAACsG,EAAgBK,EAAe5M,GACpF,EAAKyZ,eAAe1O,YAAYwB,EAAQ,EAAKsS,sBAAsBC,QAAQvS,OAbvF,2DAoBI,eACI,OAAO7J,KAAKmc,sBAAsBC,QAAQ3B,OAAOC,KAAK1a,KAAKmc,sBAAsBC,SAASI,MAAK,SAACP,GAAD,OAAiBA,EAAIQ,gBAAkB,OAAOA,oBArBrJ,yBA4BI,eACI,OAAOzc,KAAKmc,sBAAsBO,cAAgB,KAAYC,OA7BtE,2BAoCI,eACI,OAAO3c,KAAKmc,sBAAsBO,cAAgB,KAAYE,SArCtE,uBA6CI,eACI,OAAO5c,KAAKmc,sBAAsBU,WA9C1C,yBAoDI,eACI,OAAO7c,KAAKmc,sBAAsBW,aArD1C,sBA4DI,eACI,OAAO9c,KAAK+W,iBA7DpB,sBAmEW,SAAApL,WACH,MAAO,OApEf,yBCvDa,GAAb,sNAAyCoR,GAAA,GCD5B,GAAb,WAII,oCAAYzY,GAA0B,6CAClCtE,KAAKmc,sBAAwB7X,EALrC,mEAWI,eACI,OAAOtE,KAAKmc,wBAZpB,sBAkBW,SAAAxQ,WACH,MAAO,YAAc3L,KAAKmc,sBAAsBxQ,eAnBxD,8BCEa,GAAb,gFASI,0BAAmBqR,EAAejgB,EAAckgB,GAAkB,iDAC9D,cAAMA,IACDC,eAAiBF,EACtB,EAAKG,cAAgBpgB,EAHyC,EATtE,4DAeI,eACI,OAAOiD,KAAKkd,iBAhBpB,qBAmBI,eACI,OAAOld,KAAKmd,kBApBpB,kBAAsCJ,GAAA,GC8BzB,GAAb,0HA2CW,SAAAK,eAAetQ,EAAiB5J,GACnC,aAA0BlD,KAAKqd,iBAAiBnb,UAAW4K,EAAI5J,KA5CvE,6BAqDW,SAAAoa,gBAAgBxQ,EAAiB5J,GACpC,GAAIlD,KAAKqd,4BAA4B3P,GAAA,EACjC,MAAM,IAAIzQ,MAAM,uEAEhB,aAA2B+C,KAAKqd,iBAA2Cja,aAAc0J,EAAI5J,KAzDzG,gCAoEW,SAAAqa,mBAAmBC,EAAcC,EAAsBC,GAG1D,GAFA7gB,GAAA,EAAUW,wBAAwBigB,EAAc,gBAE5Czd,KAAKqd,4BAA4B1E,GAAA,EAAuB,CACxD,GAA2B,mBAAvB6E,EAAKf,cACL,MAAM,IAAIxf,MAAM,oFAEf+C,KAAKqd,iBAA2CxC,cAAcC,WAAW2C,EAAcC,QAEzF,GAAI1d,KAAKqd,4BAA4B3P,GAAA,EAAsB,CAC9D,GAA2B,sBAAvB8P,EAAKf,cACL,MAAM,IAAIxf,MAAM,wFAEf+C,KAAKqd,iBAA0CM,iBAAiB7C,WAAW2C,EAAcC,MAjF1G,8BA8FW,SAAAE,iBAAiBJ,EAAcK,EAA+BC,EAAsB1c,GACvF,aAA0BpB,KAAKqd,iBAAiBU,mBAAmBP,EAAMK,GAAUC,EAAS1c,KA/FpG,mBAgIW,SAAAmF,WAhIX,yBAoIY,SAAAyX,cAAW,WACfhe,KAAKie,kBAAoBje,KAAKqd,iBAAiBa,iBAAiBlY,QAAO,SAACmY,GACvC,+BAAzBA,EAAgBphB,KACV,EAAKqhB,WACP,EAAKA,UAAU,IAAI,GAAoBD,EAAgBE,eAE3B,0BAAzBF,EAAgBphB,KACjB,EAAKuhB,cACP,EAAKA,aAAa,IAAI,GAAoBH,EAAgBE,eAE9B,+BAAzBF,EAAgBphB,KACjB,EAAKwhB,aACP,EAAKA,YAAY,IAAI,GAA2B,IAAI,GAAuBJ,EAA+C7Z,WAE9F,mCAAzB6Z,EAAgBphB,MACjB,EAAKyhB,iBACP,EAAKA,gBAAgB,IAAI,GAA2B,IAAI,GAAuBL,EAAmD7Z,cAK9ItE,KAAKye,yBAA2Bze,KAAKqd,iBAAiBqB,cAAc1Y,QAAO,SAAC2Y,GAClE,EAAKC,wBACP,EAAKA,uBAAuB,IAAI,GAAiBD,EAAEE,WAAYF,EAAE5hB,aA3JjF,6BAUW,wBAAsB+hB,GACzB,IAAMC,EAAkCD,EAAWE,aAE7C/L,EAAkB,IAAIgM,WAI5B,OAFAhM,EAAIoK,iBAAmB0B,EACvB9L,EAAI+K,cACG/K,IAjBf,6BAyBW,yBAAuBiM,GAC1B,IAAMC,EAAkCD,EAAYF,aAE9C/L,EAAkB,IAAIgM,WAI5B,OAFAhM,EAAIoK,iBAAmB8B,EACvBlM,EAAI+K,cACG/K,MAhCf,c,6XCTa,GAAb,0FASI,+BAAmBgG,EAAuCrC,GAAyB,8CAC/E,IAAMoD,EAAaf,EAD4D,OAE/Epc,GAAA,EAAU8U,YAAYqI,EAAY,iBAElC,cAAMpD,EAAaoD,EAAW9G,WAAY,IAAIkM,GAAA,IAEzCC,mCAAoC,OAE2DriB,IAAhG,EAAKkW,WAAWtB,YAAYuB,GAAA,EAAW0B,8CAA0C7X,IACjFH,GAAA,EAAUW,wBACN,EAAK0V,WAAWtB,YAAYuB,GAAA,EAAW0B,0CACvC1B,GAAA,EAAWA,GAAA,EAAW0B,2CAG9BhY,GAAA,EAAUW,wBACN,EAAK0V,WAAWtB,YAAYuB,GAAA,EAAWuB,gDACvCvB,GAAA,EAAWA,GAAA,EAAWuB,iDAE1B7X,GAAA,EAAUW,wBAAwB,EAAK0V,WAAWtB,YAC9CuB,GAAA,EAAWkB,sCACXlB,GAAA,EAAWA,GAAA,EAAWkB,uCApBqD,EATvF,gFAwEI,eAGI,OAFAxX,GAAA,EAAUua,gBAAgBpX,KAAKqf,mCAExBrf,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWkB,wCA3EtD,2BAsFI,eAGI,OAFAxX,GAAA,EAAUua,gBAAgBpX,KAAKqf,mCAExBrf,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWuB,gDAAgDE,MAAM,OAzF5G,qBAmGI,eAGI,OAFA/X,GAAA,EAAUua,gBAAgBpX,KAAKqf,mCAExBrf,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAW0B,8CAA0C7X,KAtGhG,8BAgHI,eACI,OAAOgD,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWI,mCAjHtD,IA2HI,aAA8BjL,GAC1BtI,KAAKkT,WAAW7K,YAAY8K,GAAA,EAAWI,iCAAkCjL,KA5HjF,sBAsII,eACI,OAAOtI,KAAK+W,iBAvIpB,gCAsJW,SAAAwC,mBAAmBzM,EAAgD5J,GACtErG,GAAA,EAAUua,gBAAgBpX,KAAKqf,mCAC/B,aAA0Brf,KAAKoY,uBAAuB,KAAgBsB,cAAe5M,EAAI5J,KAxJjG,6CAoKW,SAAAuW,gCAAgC3M,EAAiB5J,GACpD,aAA0BlD,KAAKwY,oCAAoC,KAAgBkB,cAAe5M,EAAI5J,KArK9G,4CAgLW,SAAAyW,+BAA+B7M,EAAiB5J,GACnD,aAA0BlD,KAAKyY,qCAAsC3L,EAAI5J,KAjLjF,kCA4LW,SAAAoc,qBAAqBC,GAExB,GADA1iB,GAAA,EAAUK,uBAAuBqiB,EAAM,+BACmEviB,IAAtGgD,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWuB,oDAAgD1X,GAA0B,CACjH,IAAMwX,EAAsBxU,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWuB,gDAAgDE,MAAM,KACnH1K,EAAgBsK,EAAUhC,QAAQ+M,GACpCrV,GAAS,IACTsK,EAAUgL,OAAOtV,EAAO,GACxBlK,KAAKkT,WAAW7K,YAAY8K,GAAA,EAAWuB,+CAAgDF,EAAUG,KAAK,MACtG3U,KAAKyf,gBAAgBjL,OApMrC,+BAiNW,SAAAD,kBAAkBgL,GACrB1iB,GAAA,EAAUK,uBAAuBqiB,EAAM,wBACvC,IAAI/K,EAAsB,QACgFxX,IAAtGgD,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWuB,oDAAgD1X,IACvFwX,EAAYxU,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWuB,gDAAgDE,MAAM,MAC1F8K,SAASH,KACpB/K,EAAUxH,KAAKuS,GACfvf,KAAKkT,WAAW7K,YAAY8K,GAAA,EAAWuB,+CAAgDF,EAAUG,KAAK,QAG1G3U,KAAKkT,WAAW7K,YAAY8K,GAAA,EAAWuB,+CAAgD6K,GACvF/K,EAAY,CAAC+K,IAEjBvf,KAAKyf,gBAAgBjL,KA9N7B,mBAuOW,SAAAjO,MAAMuG,EAAiBqK,GAC1Bta,GAAA,EAAUua,gBAAgBpX,KAAKqf,mCAC/B,aAA0Brf,KAAKqX,SAAQ,GAAOvK,EAAIqK,KAzO1D,0BAmPW,SAAAwI,kBAnPX,6BA4PiB,SAAAC,kB,mEAAmC,0IA5PpD,qBA8PoB,SAAAvI,QAAQE,GAAkB,W,4SAClCvX,KAAKqf,kC,oDAITrf,KAAKqf,mCAAoC,GAErC9H,E,gBACA,O,SAAMvX,KAAKsY,qB,OACX,O,SAAM,EAAMjB,QAAO,UAACE,G,yDAvQhC,oCA2Qc,SAAAS,uBAAuBiB,GAC7B,OAAO,IAAIa,GAAA,EAAiBb,EAAcjZ,KAAKkT,cA5QvD,qCA+Qc,SAAA+E,wBACN8B,EACAlD,EACAD,EACAmB,GAEA,IAAMiC,EAA8BpD,EAEpC,OAAO,IAAIiJ,GAAA,EAA6B9F,EAAgBlD,EAAmBmD,EAAYjC,EAAkB/X,QAvRjH,6BA0RY,SAAAyf,gBAAgBjL,GACpB,IAAMsL,EAAmB,GAAWC,eAAe/f,MAC7C8f,IACFA,EAAKvC,mBAAmB,iBAAkB,qBAAsB,CAACyC,GAAIxL,IACrEsL,EAAKlC,iBAAiB,QAASlI,KAAKE,UAAU,CAC1C7P,GAAI,cACJhJ,KAAM,iBACNijB,GAAIxL,UAjSpB,uBAA2C,I,WlB1B3C,SAAYtL,GAMR,qCAOA,qDAOA,mDApBJ,CAAYA,QAAa,K,2BmBGZ,GAAb,WAQI,wBAAoBpD,GAAqB,iCACrC9F,KAAKigB,WAAana,EAT1B,sDAgDI,eACI,OAAO9F,KAAKigB,cAjDpB,yBAqBW,oBAAkBvZ,GACrB,IAAMwZ,EAAmCC,GAAA,EAAmBC,SAAS1Z,EAAOsW,MAExElX,EAAwBoD,GAAcmX,cAE1C,OAAQH,EAAaI,mBACjB,KAAK,KAAkBC,cACnBza,EAASoD,GAAcsX,qBACvB,MACJ,KAAK,KAAkBC,sBACnB3a,EAASoD,GAAcuX,sBACvB,MACJ,QACI3a,EAASoD,GAAcmX,cAI/B,OAAO,IAAIK,eAAe5a,OAtClC,kB,oBCEa,GAAb,WAWI,iCAAsBA,EAA4B6a,EAAsBC,GAAgC,0CACpG5gB,KAAKigB,WAAana,EAClB9F,KAAK6gB,iBAAmBF,EACxB3gB,KAAK8gB,cAAgBF,EAd7B,+DAwBI,eACI,OAAO5gB,KAAKigB,aAzBpB,wBAmCI,eACI,OAAOjgB,KAAK6gB,mBApCpB,qBA4CI,eACI,OAAO7gB,KAAK8gB,kBA7CpB,2B,oBCIa,GAAb,sFAEI,6BAAoBhb,EAA4B6a,EAAsBC,GAAgC,yDAC5F9a,EAAQ6a,EAAcC,GAHpC,sEAcW,oBAAkBla,GACrB,IAAIZ,EAASib,GAAA,EAAmB9jB,MAC5B2jB,EAAmC,KAAsBI,QAE7D,GAAIta,aAAkBua,GAAA,GAAuBva,EAAOsW,KAAM,CACtD,IAAMkD,EAAmCC,GAAA,EAAmBC,SAAS1Z,EAAOsW,MAC5ElX,EAASob,GAAA,EAAgBC,0BAA0BjB,EAAaI,mBAOpE,OAJM5Z,EAAOwM,aACT0N,EAAa,KAA8Bla,EAAOwM,WAAWtB,YAAY,qCAAmC,KAAsB,KAAsBoP,YAGrJ,IAAII,oBAAoBtb,EAAQY,EAAOia,cAAgBO,GAAA,EAAgBG,0BAA0BT,GAAYA,OA3B5H,qBAAyC,ICD5B,GAAb,WAGI,2BAAoBU,GAAgC,oCAChDthB,KAAKuhB,mBAAqBD,EAAUtG,eAJ5C,8DAqBW,SAAAwG,UAAUC,GACbzhB,KAAKuhB,mBAAmBC,UAAUC,KAtB1C,wBA6BW,SAAAC,WAAWC,GACd3hB,KAAKuhB,mBAAmBC,UAAUG,KA9B1C,mBAoCW,SAAAC,QACH5hB,KAAKuhB,mBAAmBM,kBArChC,6BAWW,wBAAsB/C,GAGzB,OAAO,IAAIgD,kBAF6BhD,EAAWE,kBAZ3D,qB,UCJa,GAAb,oFAKI,uFALJ,2EAoBW,0BAAwB+C,EAAsBtP,EAAgBuP,GACjEnlB,GAAA,EAAUW,wBAAwBukB,EAAc,gBAChDllB,GAAA,EAAUW,wBAAwBiV,EAAQ,UAE1C,IAAMwP,EAAyC,IAAIC,GAAA,EAWnD,OAVAD,EAAmB5Z,YACf8K,GAAA,EAAWgP,wBACXD,GAAA,EAAoBE,YAAYC,cACpCJ,EAAmB5Z,YAAY8K,GAAA,EAAWC,4BAA6B2O,GACvEE,EAAmB5Z,YAAY8K,GAAA,EAAWE,+BAAgCZ,GAEtEuP,GACAC,EAAmB5Z,YAAY8K,GAAA,EAAWmP,2BAA4BN,GAGnEC,IAnCf,oCAwDW,gCACH3O,EAA4Bb,EAAgBuP,GAE5CnlB,GAAA,EAAUW,wBAAwB8V,EAAoB,sBACtDzW,GAAA,EAAUW,wBAAwBiV,EAAQ,UAE1C,IAAMwP,EAAyC,IAAIC,GAAA,EAWnD,OAVAD,EAAmB5Z,YACf8K,GAAA,EAAWgP,wBACXD,GAAA,EAAoBE,YAAYC,cACpCJ,EAAmB5Z,YAAY8K,GAAA,EAAWI,iCAAkCD,GAC5E2O,EAAmB5Z,YAAY8K,GAAA,EAAWE,+BAAgCZ,GAEtEuP,GACAC,EAAmB5Z,YAAY8K,GAAA,EAAWmP,2BAA4BN,GAGnEC,IAzEf,sBAgGW,kBACH1P,EACAO,EACAkP,GAEAnlB,GAAA,EAAUK,uBAAuBqV,EAAM,QACvC,IAAMgQ,EAAoBhQ,aAAgBzR,IAAMyR,EAAO,IAAIzR,IAAJ,gBAAiByR,EAAjB,4BACvD1V,GAAA,EAAUK,uBAAuBqlB,EAAc,gBAE/C,IAAMN,EAAyC,IAAIC,GAAA,EAUnD,OATAD,EAAmB5Z,YACf8K,GAAA,EAAWgP,wBACXD,GAAA,EAAoBE,YAAYC,cACpCJ,EAAmB5Z,YAAY8K,GAAA,EAAWO,6BAA8B6O,EAAa5W,iBAEjF3O,IAAc8V,GACdmP,EAAmB5Z,YAAY8K,GAAA,EAAWC,4BAA6BN,GAGpEmP,IAnHf,0BAsIW,sBAAoBrO,EAAed,GACtCjW,GAAA,EAAU8U,YAAYiC,EAAU,YAEhC,IAAMqO,EAAyC,IAAIC,GAAA,EAUnD,OATAD,EAAmB5Z,YACf8K,GAAA,EAAWgP,wBACXD,GAAA,EAAoBE,YAAYC,cACpCJ,EAAmB5Z,YAAY8K,GAAA,EAAWU,iCAAkCD,EAASjI,iBAEjF3O,IAAc8V,GACdmP,EAAmB5Z,YAAY8K,GAAA,EAAWC,4BAA6BN,GAGpEmP,MAnJf,oBAAwCC,GAAA,GCA3B,GAAb,wFAKI,2FALJ,mEA+EI,eACI,OAAOliB,KAAK4R,YAAYuB,GAAA,EAAWmP,6BAhF3C,IAmEI,aAAyBha,GACrBzL,GAAA,EAAUW,wBAAwB8K,EAAO,SACzCtI,KAAKqI,YAAY8K,GAAA,EAAWmP,2BAA4Bha,MArEhE,+BAmBW,0BAAwBka,EAAuBT,EAAsBtP,GACxE5V,GAAA,EAAUW,wBAAwBglB,EAAe,iBACjD3lB,GAAA,EAAUW,wBAAwBukB,EAAc,gBAChDllB,GAAA,EAAUW,wBAAwBiV,EAAQ,UAE1C,IAAMgQ,EAA6C,IAAIP,GAAA,EAKvD,OAJAO,EAAqBpa,YAAY8K,GAAA,EAAWgP,wBAAyBD,GAAA,EAAoBE,YAAYM,gBACrGD,EAAqBpa,YAAY8K,GAAA,EAAWmP,2BAA4BE,GACxEC,EAAqBpa,YAAY8K,GAAA,EAAWC,4BAA6B2O,GACzEU,EAAqBpa,YAAY8K,GAAA,EAAWE,+BAAgCZ,GACrEgQ,IA7Bf,oCA+CW,gCAA8BD,EAAuBlP,EAA4Bb,GACpF5V,GAAA,EAAUW,wBAAwBglB,EAAe,iBACjD3lB,GAAA,EAAUW,wBAAwB8V,EAAoB,sBACtDzW,GAAA,EAAUW,wBAAwBiV,EAAQ,UAE1C,IAAMgQ,EAA6C,IAAIP,GAAA,EAKvD,OAJAO,EAAqBpa,YAAY8K,GAAA,EAAWgP,wBAAyBD,GAAA,EAAoBE,YAAYM,gBACrGD,EAAqBpa,YAAY8K,GAAA,EAAWmP,2BAA4BE,GACxEC,EAAqBpa,YAAY8K,GAAA,EAAWI,iCAAkCD,GAC9EmP,EAAqBpa,YAAY8K,GAAA,EAAWE,+BAAgCZ,GACrEgQ,MAzDf,sBAA0CP,GAAA,G,kDCI7B,GAAb,yL,2BAOWS,OAAS,SACZC,EACAC,EACAxE,GAEA,IAAMmE,EAAwBI,EAAOE,WAAWlR,YAAYuB,GAAA,EAAWmP,2BAA4B,IAC7FS,EAAqBH,EAAOE,WAAWlR,YAAYuB,GAAA,EAAWgP,yBAC9D1P,GAAiBmQ,EAAOE,WAAWlR,YAAYuB,GAAA,EAAWE,gCAC1DkD,GAAmBqM,EAAOE,WAAWlR,YAAYuB,GAAA,EAAWkB,qCAAsC,SAClG2O,GAA4BJ,EAAOE,WAAWlR,YAAYuB,GAAA,EAAW8P,yCAA0C,QAE/GC,GAAyC,GAC/CA,GAAY7G,GAAA,EAAYC,cAAgB+B,EACxC6E,GAAYC,GAAA,EAAoBC,QAAUR,EAAOE,WAAWlR,YAAY,4BAA0BuC,GAAA,EAAaA,GAAA,EAAaC,SAASqI,cACrIyG,GAAYC,GAAA,EAAoBE,UAAY9M,GAC5C2M,GAAYC,GAAA,EAAoBG,0BAA4BN,GACxDR,IACAU,GAAYC,GAAA,EAAoBI,OAASf,EACrCO,IAAeb,GAAA,EAAoBE,YAAYM,iBAC/CQ,GAAY7G,GAAA,EAAYmH,qBAAuBhB,IAIvD,IAAMiB,GACFV,IAAeb,GAAA,EAAoBE,YAAYM,eAAiB,YAC9D,GACAgB,GACFX,IAAeb,GAAA,EAAoBE,YAAYM,eAAiB,KAC9DK,IAAeb,GAAA,EAAoBE,YAAYC,aAAe,KAC9D,KAEAjG,GAAqC,GAErB,MAAlByG,EAASxJ,OAAoC,KAAnBwJ,EAASxJ,QACnC+C,GAAQyG,EAASc,YAAcd,EAASxJ,OAO5C,IAAIzF,GAAmBgP,EAAOE,WAAWlR,YAAYuB,GAAA,EAAWU,iCAAkC,IAClG,IAAKD,GAAU,CACX,IAAMgQ,GAAqBC,GAAA,EAAsBC,cAAcrR,IACzDF,GAAeqQ,EAAOE,WAAWlR,YACnCuB,GAAA,EAAWO,6BADM,gBAERjB,GAFQ,YAEEsR,wBAAwBC,UAAUC,SAFpC,OAE8CL,KAC7DM,GAA2B3R,GAAK4R,SAAS,KAAO5R,GAAOA,GAAO,IACpEqB,GAAW,GAAH,OAAMsQ,IAAN,OAAyBT,IAAzB,OAAyCM,wBAAwBC,UAAUI,OAA3E,YAAqFV,IAGjG,EAAKW,mBAAmBzB,EAAQM,GAAatP,IAE7C,IAAM0Q,GAA6G,SAAhF1B,EAAOE,WAAWlR,YAAY,oCAAqC,SACtG,OAAO,IAAI2S,GAAA,EAAoB3Q,GAAUsP,GAAa9G,GAAS,IAAIoI,GAAA,EAA6BC,GAAA,EAAUC,qBAAqB9B,GAAS0B,GAAmBjG,IA7DnK,kCAA6CwF,GAAA,GAE1B,GAAAG,YAAS,wCACLI,OAAiB,MACjB,GAAAH,QAAkB,gBACnC,I,ICbMU,G,wYC+BC,GAAb,4FAUI,gCAAmBC,EAAmChO,GAAyB,+CAC3E,IAAMiO,EAA0BD,EAChC/nB,GAAA,EAAU8U,YAAYiT,EAAc,iBAEpC,cAAMhO,EAAaiO,EAAwB3R,WAAY,IAAI,KAEtD4R,gBAAiB,EACtB,EAAKC,gBAAiB,EACtB,EAAKhO,eAAiB8N,EAAwB3R,WAAW8D,QAEzD,IAAMgO,GAAc,EAAKC,mBAVkD,OAW3E,EAAK3N,SAAS0N,YAAY7W,IAAI6W,IAX6C,EAVnF,iEA6EW,SAAA9iB,QAAQ4K,EAAiB5J,GAC5B,aAA0BlD,KAAKsX,SAASpV,UAAW4K,EAAI5J,KA9E/D,wBAuFW,SAAAE,WAAW0J,EAAiB5J,GAC/B,aAA0BlD,KAAKsX,SAASlU,aAAc0J,EAAI5J,KAxFlE,8BAkGI,eACI,OAAOlD,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWI,mCAnGtD,IA6GI,aAA8B8F,GAC1Bxc,GAAA,EAAUW,wBAAwB6b,EAAO,SACzCrZ,KAAKkT,WAAW7K,YAAY8K,GAAA,EAAWI,iCAAkC8F,KA/GjF,sBAyHI,eACI,OAAOrZ,KAAK+W,iBA1HpB,kCAiII,eACI,OAAO/W,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAW+R,wCAlItD,IA0II,aAAkCC,GAC9BnlB,KAAKkT,WAAW7K,YAAY8K,GAAA,EAAW+R,sCAAuCC,KA3ItF,6BAsJW,SAAAC,gBAAgBtY,EAA2C5J,GAAyB,WACvF,GAAIlD,KAAK8kB,eAAgB,CACrBjoB,GAAA,EAAUua,gBAAgBpX,KAAK+kB,gBAC/B,IAcMM,EAdiB,SAAjBC,iBAAiB,OAA6C,gKAChE,OADgE,SAC1DtlB,KAAKsX,SAASpV,UAD4C,OAEhE,OAFgE,SAE1DlC,KAAKsY,qBAFqD,OAMhE,OAHAtY,KAAK8kB,gBAAiB,EAEhB7R,EAAyC,IAAI,KALa,SAM1DjT,KAAKsX,SAASiB,UAAU,KAAgBmB,aAAczG,EAAI1N,QAAS0N,EAAI5O,QANb,OAQ7B,OAR6B,UAQvB4O,EAAI/O,QARmB,QAShE,OADMya,EAR0D,iBAS1D3e,KAAKsY,qBATqD,iCAWzDqG,GAXyD,uDAcf2G,GAErDD,EAAWpiB,OAAM,WAGb,EAAKoU,SAAQ,GAAMpU,OAAM,kBAG7B,aAA0BoiB,EAAWE,SAAQ,WACzC,EAAKT,gBAAiB,KACtBhY,EAAI5J,MAjLpB,+BAqLW,SAAAsiB,kBAAkBC,EAAkB3Y,EAAiB4Y,GACxD,aAA2B1lB,KAAKsX,SAAkCqO,YAAYF,GAAW3Y,EAAI4Y,KAtLrG,mBA+LW,SAAAnf,MAAMuG,EAAiB5J,GAC1BrG,GAAA,EAAUua,gBAAgBpX,KAAK+kB,gBAE/B,aAA0B/kB,KAAKqX,SAAQ,GAAOvK,EAAI5J,KAlM1D,qBAqMoB,SAAAmU,QAAQE,GAAkB,W,8SAClCvX,KAAK+kB,e,qDAILxN,E,gBAEA,OADAvX,KAAK+kB,gBAAiB,E,SAChB/kB,KAAKsY,qB,OACX,O,SAAM,EAAMjB,QAAO,UAACE,G,yDA7MhC,oCAiNc,SAAAS,uBAAuBiB,GAC7B,OAAO,IAAIa,GAAA,EAAiBb,EAAcjZ,KAAK+W,kBAlNvD,qCAqNc,SAAAkB,wBACN8B,EACAlD,EACAD,EACAmB,GAEA,IAAMP,EAA+BZ,EAErC,OAAO,IAAIgP,GAAA,EAAqB7L,EAAgBlD,EAAmBW,EAAaO,EAAkB/X,QA7N1G,8BAgOY,SAAAilB,mBAGJ,MAAO,CACHY,QAAS,CACLC,SAJkB9lB,KAAKkT,WAAWtB,YAAY,kCAAmC,WAKjFmU,qBAAiB/oB,EACjBqhB,aAAcre,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAW6S,kCACrDC,eAAgBjmB,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAW+S,kCAA8BlpB,GACrFmpB,OAAQnmB,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWiT,0BAAsBppB,GACrEqpB,eAAgBrmB,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWwD,+CAA2C3Z,IAEtG0mB,QAAS,QA5OrB,wBAA4C,I,qBD/B5C,SAAYiB,GAIR,6CAJJ,CAAYA,QAAsB,K,IEOtB2B,G,iYCAC,GAAb,WAcI,yBAAmBC,GAA+B,kCAZ1C,KAAAC,aAA6B,KAC7B,KAAAC,SAAqB,KAErB,KAAAC,sBAA6B,OAUb1pB,IAAhBupB,IACAA,EAAczf,GAAA,EAAkBmC,yBAEpCjJ,KAAK2mB,KAAKJ,GAlBlB,kEAyBW,SAAAK,gBAAgBC,EAA2B/Z,EAAiB5J,GAA6B,WAC5F,aAAqD,yJAC7ClD,KAAK8mB,2BACCC,EAAY/mB,KAAKgnB,gBAAgBH,IACjCI,EAAiB,IAAIvnB,aAAaM,KAAKknB,QAAQ9pB,OAAS2pB,EAAU3pB,SACzD+Q,IAAInO,KAAKknB,QAAS,GACjCD,EAAe9Y,IAAI4Y,EAAW/mB,KAAKknB,QAAQ9pB,QAC3C4C,KAAKknB,QAAUD,EAN8B,sDAO/Cna,EAAI5J,KAjClB,uBAuCW,SAAAikB,UAAUra,EAAiB5J,GACJ,OAAtBlD,KAAKwmB,eACLxmB,KAAKknB,QAAU,IAAIxnB,aACnB0nB,cAAcpnB,KAAK0mB,uBACnB1mB,KAAKwmB,aAAajgB,QAAQ7D,MAAK,WACrBoK,GACFA,OAEL,SAAC1L,GACM8B,GACFA,EAAI9B,MAGZpB,KAAKwmB,aAAe,QApDhC,kBAwDY,SAAAG,KAAKJ,GACTvmB,KAAKumB,YAAcA,EACnBvmB,KAAKknB,QAAU,IAAIxnB,eA1D3B,sCA6DY,SAAAonB,2BAAwB,WAC5B,GAA0B,OAAtB9mB,KAAKwmB,aAAuB,CAC5BxmB,KAAKmE,qBAELnE,KAAK0mB,sBAAwBW,aAAY,WACrC,EAAKC,sBAFW,QAhEhC,gCAuEY,SAAAnjB,qBAEJnE,KAAKwmB,aAAe1f,GAAA,EAAsBC,kBAI1C/G,KAAKymB,SAAWzmB,KAAKwmB,aAAae,aAClCvnB,KAAKymB,SAASe,KAAKlf,MAAQ,EAC3BtI,KAAKymB,SAASvkB,QAAQlC,KAAKwmB,aAAarkB,aACxCnC,KAAKynB,UAAYznB,KAAKwmB,aAAalX,cAhF3C,6BAmFY,SAAA0X,gBAAgBD,GACpB,OAAQ/mB,KAAKumB,YAAY3e,eACrB,KAAK,EACD,OAAO5H,KAAK0nB,kBAAkB,IAAIzW,UAAU8V,GAAY,KAC5D,KAAK,GACD,OAAO/mB,KAAK0nB,kBAAkB,IAAIC,WAAWZ,GAAY,OAC7D,KAAK,GACD,OAAO/mB,KAAK0nB,kBAAkB,IAAIE,WAAWb,GAAY,YAC7D,QACI,MAAM,IAAI,KAAsB,uEA5FhD,+BAgGY,SAAAW,kBAAkBX,EAAgCc,GAEtD,IADA,IAAMC,EAAc,IAAIpoB,aAAaqnB,EAAU3pB,QACtCsB,EAAI,EAAGA,EAAIqoB,EAAU3pB,OAAQsB,IAClCopB,EAAYppB,GAAKqoB,EAAUroB,GAAKmpB,EAEpC,OAAOC,IArGf,+BAwGY,SAAAR,oBACJ,GAA4B,IAAxBtnB,KAAKknB,QAAQ9pB,OAAjB,CAUA,IANA,IAAMoN,EAAexK,KAAKumB,YAAYze,SAChCigB,EAAe/nB,KAAKwmB,aAAawB,qBACjCC,EAAajoB,KAAKknB,QAAQ9pB,OAASoN,EACnC0d,EAAcloB,KAAKwmB,aAAa2B,aAAa3d,EAAcyd,EAAYjoB,KAAKumB,YAAYrf,eAGrFsO,EAAU,EAAGA,EAAUhL,EAAcgL,IAI1C,IAFA,IAAI4S,EAAgB5S,EACduR,GAAYmB,EAAYxmB,eAAe8T,GACpC9W,GAAI,EAAGA,GAAIsB,KAAKknB,QAAQ9pB,OAAQsB,KAAK0pB,GAAiB5d,EAC3Duc,GAAUroB,IAAKsB,KAAKknB,QAAQkB,GAIhCpoB,KAAKynB,UAAYznB,KAAKwmB,aAAalX,cACnCtP,KAAKynB,UAAYznB,KAAKwmB,aAAalX,aAGvCyY,EAAa7pB,OAASgqB,EACtBH,EAAa7lB,QAAQlC,KAAKymB,UAC1BsB,EAAapX,MAAM3Q,KAAKynB,WAGxBznB,KAAKynB,WAAaS,EAAYrZ,SAG9B7O,KAAKknB,QAAU,IAAIxnB,gBAxI3B,uBA2IkB,SAAA2oB,UAAUtB,G,qKAMpB,OAL0B,OAAtB/mB,KAAKwmB,cACLxmB,KAAKmE,qBAEH7B,EAAgCtC,KAAKwmB,aAAawB,qBAClD7lB,EAAoCnC,KAAKwmB,aAAarkB,Y,SACtDnC,KAAKwmB,aAAa8B,gBAAgBvB,GAAW,SAACwB,GAChDjmB,EAAOpE,OAASqqB,EAChBjmB,EAAOJ,QAAQC,GACfG,EAAOqO,MAAM,M,2DApJzB,mBCLa,GAAb,WAUI,sBAAY6X,EAAmBC,GAA6B,+BACxDzoB,KAAKoF,OAASojB,EACdxoB,KAAK0oB,gBAAkBD,EAZ/B,uDAsBI,eACI,OAAOzoB,KAAKoF,SAvBpB,uBAiCI,eACI,OAAOpF,KAAK0oB,oBAlCpB,gBCoBa,GAAb,WAMI,sCAAmB5iB,EAAsBkX,EAAc2L,GAAkB,+CACrE3oB,KAAKigB,WAAana,EAClB9F,KAAK+W,eAAiB,IAAI9C,GAAA,EACtBjU,KAAKigB,aAAe2I,GAAA,EAAaC,SAC3B7L,IACFhd,KAAK8oB,YAAcpT,KAAKC,MAAMqH,GAC0B,cAApDhd,KAAK8oB,YAAYC,iBAAiBtM,gBAClCzc,KAAKigB,WAAa2I,GAAA,EAAaI,yBAIvChpB,KAAK6gB,iBAAmB8H,EACxB3oB,KAAK+W,eAAe1O,YAAY,qCAAmC,KAAsB,KAAsB4gB,gBAlB3H,oEAgDI,eACI,OAAOjpB,KAAKigB,aAjDpB,4BAoDI,eACI,OAAOjgB,KAAK8oB,YAAYI,mBArDhC,kCAwDI,eACI,OAAOlpB,KAAK8oB,YAAYK,yBAzDhC,sBA4DI,eACI,OAAOnpB,KAAK+W,iBA7DpB,mCAgEI,eACI,OAAO/W,KAAK8oB,cAjEpB,wBAoEI,eACI,OAAO9oB,KAAK6gB,oBArEpB,4CAsBW,uCAAqC7D,GACxC,IAD8D,EACxDoM,EAA0C,GADc,eAE3CpM,EAAK1U,OAFsC,IAE9D,2BAA+B,KAApB/K,EAAoB,QAIrBmJ,EAAS,IAAI2iB,6BAHkD,cAAxC9rB,EAAKwrB,iBAAiBtM,cAC/CmM,GAAA,EAAaI,sBAAgE,aAAxCzrB,EAAKwrB,iBAAiBtM,cAC3DmM,GAAA,EAAaU,qBAAuBV,GAAA,EAAaC,SACG,KAAM,MAC9DniB,EAAOoiB,YAAc9oB,KAAKupB,yBAAyBhsB,GACnD6rB,EAAQpc,KAAKtG,IAR6C,gCAU9D,OAAO0iB,IAhCf,yCAmCW,qCAAmCpM,GACtC,IAD4D,EACtDoM,EAA0C,GADY,eAEzCpM,EAAK1U,OAFoC,IAE5D,2BAA+B,KAApB/K,EAAoB,QAIrBmJ,EAAS,IAAI2iB,6BAHkD,cAAxC9rB,EAAKwrB,iBAAiBtM,cAC/CmM,GAAA,EAAaI,sBAAgE,aAAxCzrB,EAAKwrB,iBAAiBtM,cAC3DmM,GAAA,EAAaU,qBAAuBV,GAAA,EAAaC,SACG,KAAM,MAC9DniB,EAAOoiB,YAAc9oB,KAAKwpB,uBAAuBjsB,GACjD6rB,EAAQpc,KAAKtG,IAR2C,gCAU5D,OAAO0iB,IA7Cf,sCAwEY,kCAAgCpM,GACpC,MAAO,CACHyM,iBAAkBzM,EAAKyM,iBAAmBC,WAAW1M,EAAKyM,kBAAoB,EAC9EE,uBAAwB3M,EAAK2M,uBAAyBD,WAAW1M,EAAK2M,wBAA0B,EAChGZ,iBAAkB/L,EAAK+L,iBACvBG,iBAAkBlM,EAAKkM,kBAAoB,EAC3CC,uBAAwBnM,EAAKmM,uBAAyBO,WAAW1M,EAAKmM,wBAA0B,EAChGS,6BAA8B5M,EAAK4M,6BAA+BF,WAAW1M,EAAK4M,8BAAgC,EAClHpB,UAAWxL,EAAKwL,WAAaxL,EAAK6M,wBAClCC,sCAAuC9M,EAAK8M,sCAAwCJ,WAAW1M,EAAK8M,uCAAyC,KAjFzJ,oCAqFY,gCAA8B9M,GAClC,MAAO,CACHyM,iBAAkBzM,EAAKyM,iBAAmBC,WAAW1M,EAAKyM,kBAAoB,EAC9EE,uBAAwB3M,EAAK2M,uBAAyBD,WAAW1M,EAAK2M,wBAA0B,EAChGZ,iBAAkB/L,EAAK+L,iBACvBG,iBAAkBlM,EAAKkM,iBACvBC,uBAAwBnM,EAAKmM,uBAAyBO,WAAW1M,EAAKmM,wBAA0B,EAChGS,6BAA8B5M,EAAK4M,6BAA+BF,WAAW1M,EAAK4M,8BAAgC,EAClHpB,UAAWxL,EAAKwL,WAAaxL,EAAK+M,sBAClCC,0BAA2BhN,EAAKiN,sBAAwBjN,EAAKgN,0BAC7DF,sCAAuC9M,EAAK8M,sCAAwCJ,WAAW1M,EAAK8M,uCAAyC,OA/FzJ,gCAwGa,GAAb,kIAEI,mDAAoBhkB,EAA4B6a,EAAsBC,GAAgC,+EAC5F9a,EAAQ6a,EAAcC,GAHpC,4FAcW,oBAAkBla,GACrB,IAAMZ,EAASib,GAAA,EAAmB9jB,MAC9B2jB,EAAmC,KAAsBI,QAM7D,OAJMta,EAAOwM,aACT0N,EAAa,KAA8Bla,EAAOwM,WAAWtB,YAAY,qCAAmC,KAAsB,KAAsBoP,YAGrJ,IAAIkJ,0CAA0CpkB,EAAQY,EAAOia,aAAcC,OAtB1F,2CAA+D,ICpHlD,GAAb,WAKI,4BAAmB9a,EAAsB6iB,GAAkB,qCACvD3oB,KAAKigB,WAAana,EAClB9F,KAAK+W,eAAiB,IAAI9C,GAAA,EACtBnO,IAAW8iB,GAAA,EAAaC,WACxBhsB,GAAA,EAAUK,uBAAuByrB,EAAY,cAC7C3oB,KAAK6gB,iBAAmB8H,EACxB3oB,KAAK+W,eAAe1O,YAAY,qCAAmC,KAAsB,KAAsB4gB,gBAX3H,0DAeI,eACI,OAAOjpB,KAAKigB,aAhBpB,sBAmBI,eACI,OAAOjgB,KAAK+W,iBApBpB,wBAuBI,eACI,OAAO/W,KAAK6gB,qBAxBpB,sBAgCa,GAAb,8GAEI,yCAAoB/a,EAA4B6a,EAAsBC,GAAgC,qEAC5F9a,EAAQ6a,EAAcC,GAHpC,kFAcW,oBAAkBla,GACrB,IAAMZ,EAASib,GAAA,EAAmB9jB,MAC9B2jB,EAAmC,KAAsBI,QAM7D,OAJMta,EAAOwM,aACT0N,EAAa,KAA8Bla,EAAOwM,WAAWtB,YAAY,qCAAmC,KAAsB,KAAsBoP,YAGrJ,IAAImJ,gCAAgCrkB,EAAQY,EAAOia,aAAcC,OAtBhF,iCAAqD,ICpCxC,GAAb,gGAGI,kCAAmB9a,EAAsB6iB,EAAoB3L,GAAS,MAGlE,GAHkE,4CAClE,cAAMlX,EAAQ6iB,IAHVyB,YAAwB,GAI5BvtB,GAAA,EAAUK,uBAAuB8f,EAAM,sBACjCA,EAAK1U,OAAW0U,EAAK1U,MAAM,GAAI,wBACd0U,EAAK1U,OADS,IACjC,8BAA+B,KAApB/K,GAAoB,SAC3B,EAAK6sB,YAAYpd,KAAKzP,GAAK8sB,YAAc9sB,GAAK+sB,mBAFjB,mCAH6B,SAH1E,iEAaI,eACI,OAAOtqB,KAAKoqB,gBAdpB,0BAA8C,I,8YCmBjC,GAAb,WA2CI,4BAAmBnR,GAA0B,qCACzC,IAAMC,EAAqCD,EAC3Cpc,GAAA,EAAU8U,YAAYuH,EAAkB,gBAExClZ,KAAK+W,eAAiBmC,EAAiBhG,WAAW8D,QAClDhX,KAAKuqB,kBAhDb,sEAWI,eACI,OAAOvqB,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWI,mCAZtD,IAsBI,aAA8B8F,GAC1Bxc,GAAA,EAAUW,wBAAwB6b,EAAO,SACzCrZ,KAAKkT,WAAW7K,YAAY8K,GAAA,EAAWI,iCAAkC8F,KAxBjF,sBAkCI,eACI,OAAOrZ,KAAK+W,iBAnCpB,gCA8DiB,SAAAyT,mBAAmB/B,EAA+BlJ,G,wKAC7B,O,SAAMvf,KAAKyqB,YAAYC,cAAcjC,EAAalJ,G,WAA1E7Y,E,QACMikB,G,sBACF,IAAI1tB,MAAJ,+CAAkDyJ,EAAOkkB,OAAzD,sBAA6ElkB,EAAOiiB,a,cAExFkC,EAAkCnkB,EAAOsW,KACzC8N,EAAU,IAAI,GAAaD,EAASrC,UAAWC,G,kBAC9CqC,G,wDArEf,2CAgFiB,SAAAC,8BAA8BD,G,sKACT,O,SAAM9qB,KAAKyqB,YAAYO,iBAAiBF,G,cAAhEpkB,E,yBACC,IAAI,GACPA,EAAOikB,GAAK/B,GAAA,EAAaU,qBAAuBV,GAAA,EAAaC,SAC7DniB,EAAO1D,KACP0D,EAAOiiB,a,yDArFnB,iCAkGiB,SAAAsC,oBAAoBxC,G,sKACC,O,SAAMzoB,KAAKyqB,YAAYS,YAAYzC,G,UAA3D/hB,E,OACF+hB,IAAgB0C,GAAA,EAAiBC,8B,yCAC1B,GAA6BC,8BAA8B3kB,EAAOsW,O,gCAEtE,GAA6BsO,4BAA4B5kB,EAAOsW,O,yDAvG/E,uCAmHiB,SAAAuO,0BAA0B9C,EAA+BlJ,G,sKACpC,O,SAAMvf,KAAKyqB,YAAYe,WAAW/C,EAAalJ,G,cAAvE7Y,E,yBACC,IAAI,GACPA,EAAOikB,GAAK/B,GAAA,EAAaI,sBAAwBJ,GAAA,EAAaC,SAC9DniB,EAAOiiB,WACPjiB,EAAOsW,O,yDAxHnB,gCAsIiB,SAAAyO,mBAAmBX,EAAuBlU,G,wKAIrB,OAHxBoD,EAA8BpD,EACpC/Z,GAAA,EAAUK,uBAAuB8c,EAAY,e,SAETha,KAAKyqB,YAAYiB,iBAAiBZ,EAAS9Q,G,cAAzEtT,E,yBACC,IAAI,GACPA,EAAOikB,GAAK/B,GAAA,EAAaU,qBAAuBV,GAAA,EAAaC,SAC7DniB,EAAO1D,KACP0D,EAAOiiB,a,yDA9InB,gCA2JiB,SAAAgD,mBAAmBb,G,sKACE,O,SAAM9qB,KAAKyqB,YAAYmB,cAAcd,G,cAA7DpkB,E,yBACC1G,KAAK6rB,UAAUnlB,EAAQkiB,GAAA,EAAakD,sB,yDA7JnD,+BAyKiB,SAAAC,kBAAkBjB,G,sKACG,O,SAAM9qB,KAAKyqB,YAAYuB,aAAalB,G,cAA5DpkB,E,yBACC1G,KAAK6rB,UAAUnlB,EAAQkiB,GAAA,EAAaqD,oB,yDA3KnD,mBAoLW,SAAA1lB,WApLX,6BAyLc,SAAAgkB,kBAEN,IAAI9S,EAAgC,qBAAXjT,OAA0B,UAAY,OAC3DkT,EAAS,UACTC,EAAY,UAES,qBAAdlT,YACPgT,EAAaA,EAAa,IAAMhT,UAAUmT,SAC1CF,EAASjT,UAAUoT,UACnBF,EAAYlT,UAAUqT,YAG1B,IAAMC,EACF,IAAImU,GAAA,EACA,IAAI,KAAQ,IAAI,KAAGzU,EAAYC,EAAQC,IACvC3X,KAAK+W,gBAEb/W,KAAKyqB,YAAc,IAAI0B,GAAA,EAAwBpU,KA1MvD,uBA6MY,SAAA8T,UAAUnlB,EAAuB0lB,EAA6Btf,GAMlE,OAJI,IAAI,GACApG,EAAOikB,GAAKyB,EAAgBxD,GAAA,EAAaC,SACzCniB,EAAOiiB,gBAjNvB,sBClBa,GAAb,WAGI,oCAAoB0D,GAAwB,WAExC,GAFwC,6CAFpC,KAAAC,kBAAoC,GAGxCzvB,GAAA,EAAUK,uBAAuBmvB,EAAU,iBACnB,IAApBA,EAASjvB,OACT,MAAM,IAAIH,MAAM,8BAEpBovB,EAAS9oB,SAAQ,SAACunB,GACd,GAAIA,EAAQrC,cAAgB0C,GAAA,EAAiBC,8BACzC,MAAM,IAAInuB,MAAM,yEAA2E6tB,EAAQtC,WAEvG,EAAK8D,kBAAkBtf,KAAK8d,MAZxC,2EAmBI,eACI,OAAO9qB,KAAKssB,kBAAkBC,KAAI,SAACzB,GAAD,OAA2BA,EAAQtC,aAAW7T,KAAK,QApB7F,2BAeW,sBAAoB0X,GACvB,OAAO,IAAIG,2BAA2BH,OAhB9C,+BPAA,SAAY/F,GACR,uBACA,2BAFJ,CAAYA,QAA4B,KAQjC,IAAM,GAAb,WAOI,kCAAmBmG,EAA0CzpB,EAAcwlB,GAA8E,IAA3DkE,EAA2D,uDAA9B9D,GAAA,EAAa+D,kBAGpI,GAHqJ,2CACrJ3sB,KAAK+W,eAAiB,IAAI9C,GAAA,EAC1BjU,KAAKigB,WAAayM,EACd1sB,KAAKigB,aAAe2I,GAAA,EAAaC,SACjC,GAAI4D,IAAenG,GAA6BsG,SAAU,CACtD,IAAM5P,EAAoEtH,KAAKC,MAAM3S,GACrFnG,GAAA,EAAUK,uBAAuB8f,EAAM,QACvChd,KAAK6sB,cAAgB7P,EAAK8P,kBAAkBtE,UAC5CxoB,KAAK+sB,UAAY/P,EAAK8P,kBAAkBE,UACrC,CACH,IAAM,GAAqDtX,KAAKC,MAAM3S,GACtEnG,GAAA,EAAUK,uBAAuB,GAAM,QACvC8C,KAAK+sB,UAAY,GAAKC,MACuB,WAAzC,GAAKC,kBAAkBxQ,gBACvBzc,KAAKigB,WAAa2I,GAAA,EAAasE,cAEjBlwB,IAAdwrB,GAAyC,KAAdA,IAC3BxoB,KAAK6sB,cAAgBrE,OAG1B,CACH,IAAM,GAA+B9S,KAAKC,MAAM3S,GAChDnG,GAAA,EAAUK,uBAAuB,GAAM,QACvC8C,KAAK6gB,iBAAmB,GAAK8H,WAC7B3oB,KAAK+W,eAAe1O,YAAY,qCAAmC,KAAsB,KAAsB4gB,eAEnHjpB,KAAK+W,eAAe1O,YAAY8K,GAAA,EAAWga,iCAAkCnqB,GAjCrF,oEAoCI,eACI,OAAOhD,KAAK+W,iBArCpB,kBAwCI,eACI,OAAO/W,KAAKigB,aAzCpB,qBA4CI,eACI,OAAOjgB,KAAK6sB,gBA7CpB,wBAgDI,eACI,OAAO7sB,KAAK6gB,mBAjDpB,iBAoDI,eACI,OAAO7gB,KAAK+sB,cArDpB,4BA6Da,GAAb,0HAEI,+CAAoBjnB,EAA4B6a,EAAsBC,GAAgC,2EAC5F9a,EAAQ6a,EAAcC,GAHpC,wFAcW,oBAAkBla,GACrB,IAAMZ,EAASib,GAAA,EAAmB9jB,MAC9B2jB,EAAmC,KAAsBI,QAM7D,OAJMta,EAAOwM,aACT0N,EAAa,KAA8Bla,EAAOwM,WAAWtB,YAAY,qCAAmC,KAAsB,KAAsBoP,YAGrJ,IAAIoM,sCAAsCtnB,EAAQY,EAAOia,aAAcC,OAtBtF,uCAA2D,IQrE9C,GAAb,WAGI,kCAAoBkK,GAEhB,GAFqC,2CACrCjuB,GAAA,EAAUK,uBAAuB4tB,EAAS,gBACtCA,EAAQrC,cAAgB0C,GAAA,EAAiBC,8BACzC,MAAM,IAAInuB,MAAM,oEAEpB+C,KAAKqtB,iBAAmBvC,EARhC,sEAeI,eACI,OAAO9qB,KAAKqtB,oBAhBpB,0BAWW,qBAAmBvC,GACtB,OAAO,IAAIwC,yBAAyBxC,OAZ5C,4B,yXCiBa,GAAb,WA4CI,2BAAmB7R,EAA4BrC,GAAwB,oCACnE,IAAMsC,EAAqCD,EAC3Cpc,GAAA,EAAU8U,YAAYuH,EAAkB,gBAExClZ,KAAKutB,oBAAsB3W,EAC3B/Z,GAAA,EAAU8U,YAAY3R,KAAKutB,oBAAqB,eAEhDvtB,KAAK+W,eAAiBmC,EAAiBhG,WAAW8D,QAClDhX,KAAKwtB,cApDb,qEAYI,eACI,OAAOxtB,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWI,mCAbtD,IAuBI,aAA8B8F,GAC1Bxc,GAAA,EAAUW,wBAAwB6b,EAAO,SACzCrZ,KAAKkT,WAAW7K,YAAY8K,GAAA,EAAWI,iCAAkC8F,KAzBjF,sBAmCI,eACI,OAAOrZ,KAAK+W,iBApCpB,gCAiEiB,SAAAwC,mBAAmBrR,G,0KAExBA,aAAiB,I,uBACXulB,EAA0CztB,KAAKyqB,YAAYiD,gBAAgBxlB,EAAOlI,KAAKutB,qB,kBACtFvtB,KAAK6rB,UAAU4B,EAAiBnH,GAA6BsG,cAAU5vB,I,YACvEkL,aAAiB,I,wBAClB,EAA0ClI,KAAKyqB,YAAYkD,cAAczlB,EAAOlI,KAAKutB,qB,kBACpFvtB,KAAK6rB,UAAU,EAAiBvF,GAA6BsH,OAAQ1lB,EAAM2lB,aAAarF,Y,cAEzF,IAAIvrB,MAAM,0D,yDA1E5B,mBAoFW,SAAAsJ,WApFX,yBAyFY,SAAAinB,cAEJ,IAAI/V,EAAgC,qBAAXjT,OAA0B,UAAY,OAC3DkT,EAAS,UACTC,EAAY,UAES,qBAAdlT,YACPgT,EAAaA,EAAa,IAAMhT,UAAUmT,SAC1CF,EAASjT,UAAUoT,UACnBF,EAAYlT,UAAUqT,YAG1B,IAAMC,EACF,IAAImU,GAAA,EACA,IAAI,KAAQ,IAAI,KAAGzU,EAAYC,EAAQC,IACvC3X,KAAK+W,gBAEb/W,KAAKyqB,YAAc,IAAI0B,GAAA,EAAwBpU,KA1GvD,uBA6GkB,SAAA8T,UAAU4B,EAAyChB,EAA0CjE,G,qKACvE,O,SAAMiF,E,cAAhC5C,E,yBACC,IAAI,GACP4B,EACA5B,EAAS7nB,KACTwlB,EACAqC,EAASF,GAAK/B,GAAA,EAAa+D,kBAAoB/D,GAAA,EAAaC,W,sDAnHxE,qBCfa,GAAb,WAGI,2FACI7oB,KAAK+W,eAAiB,IAAI9C,GAAA,EAJlC,0EAsEI,eACI,OAAOjU,KAAK+W,kBAvEpB,4BAgBW,yBACH,IAAM6L,EAAS,IAAIkL,+BAEnB,OADAlL,EAAO1P,WAAW7K,YAAY8K,GAAA,EAAW4a,kDAAmD,iDACrFnL,IAnBf,2BA8BW,uBAAqBpO,GACxB3X,GAAA,EAAUmxB,8BAA8BxZ,EAAW,aACnD,IAAMoO,EAAS,IAAIkL,+BAEnB,OADAlL,EAAO1P,WAAW7K,YAAY8K,GAAA,EAAW4a,kDAAmDvZ,EAAUG,QAC/FiO,IAlCf,uCA6CW,mCAAiCqL,GACpC,GAAIA,EAAQ7wB,OAAS,EACjB,MAAM,IAAIH,MAAM,kDAEpB,IAAMixB,EAAa,IAAIJ,+BACjBK,EAAkB,GAUxB,OATAF,EAAQ1qB,SAAQ,SAACqf,GAEb,GADAuL,EAAMnhB,KAAK4V,EAAOrM,eACQvZ,IAAtB4lB,EAAOwL,YAAkD,KAAtBxL,EAAOwL,WAAmB,CAC7D,IAAMC,EAAiBzL,EAAOrM,SAAWpD,GAAA,EAAWmB,mCAAmC3I,WACvFuiB,EAAWhb,WAAW7K,YAAYgmB,EAAgBzL,EAAOwL,gBAGjEF,EAAWhb,WAAW7K,YAAY8K,GAAA,EAAW4a,kDAAmDI,EAAMxZ,QAE/FuZ,MA5Df,kCCJa,GAAb,WAKI,wCAAoB3X,EAAkB+X,GAAmC,iDACrEzxB,GAAA,EAAUK,uBAAuBqZ,EAAU,YAC3C1Z,GAAA,EAAUK,uBAAuBoxB,EAA6B,+BAC9DtuB,KAAKuuB,aAAehY,EACpBvW,KAAKwuB,gCAAkCF,EAT/C,wEAwBI,eACI,OAAOtuB,KAAKuuB,eAzBpB,uCA4BI,eACI,OAAOvuB,KAAKwuB,mCA7BpB,yBAoBW,oBAAkB9nB,GACrB,OAAO,IAAI+nB,+BAA+B/nB,EAAO6P,SAAU7P,EAAO4nB,iCArB1E,kCCHa,GAAb,WAII,8BAAoB/X,EAAkB6X,GAAmB,uCACrDvxB,GAAA,EAAUK,uBAAuBqZ,EAAU,YAC3CvW,KAAKuuB,aAAehY,EACpBvW,KAAK0uB,eAAiBN,EAP9B,8DAwBI,eACI,OAAOpuB,KAAKuuB,eAzBpB,sBA4BI,eACI,OAAOvuB,KAAK0uB,kBA7BpB,2BAoBW,sBAAoBnY,EAAkB6X,GACzC,OAAO,IAAIO,qBAAqBpY,EAAU6X,OArBlD,wB,kBCDa,GAAb,qSAYW,eACH,OAAOQ,6BAA6BC,WAb5C,sBAgBW,eACH,OAAOD,6BAA6BE,iBAjB5C,uBAoBW,eACH,OAAOF,6BAA6BG,kBArB5C,+BAwBW,eACH,OAAOH,6BAA6BI,0BAzB5C,oBA4BW,eACH,OAAOJ,6BAA6BK,eA7B5C,yBAgCW,eACH,OAAOL,6BAA6BM,oBAjC5C,sBAoCW,eACH,OAAON,6BAA6BO,iBArC5C,sBAwCW,eACH,OAAOP,6BAA6BQ,iBAzC5C,kCA4CW,eACH,OAAOR,6BAA6BS,+BA7C5C,8B,OAAkD,GAEtB,GAAAR,SAAmB,8BACnB,GAAAI,aAAuB,eACvB,GAAAH,eAAyB,MACzB,GAAAE,wBAAkC,QAClC,GAAAD,gBAA0B,uCAC1B,GAAAG,kBAA4B,oBAC5B,GAAAC,eAAyB,oCACzB,GAAAC,eAAyB,2CACzB,GAAAC,2BAAuC,CAAC,UAAW,SAAU,YAAa,OAAQ,QAAS,6BAA8B,iBAAkB,WAAY,eAAgB,oBAAqB,aCkDjN,IChEKC,GDgEC,GAAb,WAEI,gCAAkF,IAA/DC,EAA+D,uDAAxB,GAAWC,EAAa,8EAA/D,KAAAD,eAAkD,KAAAC,OAFzE,8EAUW,SAAAC,uBAAuBnnB,GAC1B,QAActL,IAAVsL,EAAJ,CAIA,IAAMonB,EAAiB1vB,KAAK2vB,oBAAoBrnB,EAAMvC,IAQtD,OAPI2pB,GAAU,EACV1vB,KAAKuvB,aAAa/P,OAAOkQ,EAAQ,EAAGpnB,GAEpCtI,KAAKuvB,aAAaviB,KAAK1E,GAIpBtI,KAAK4vB,eAAetnB,EAAMvC,OAvBzC,iCA8BW,SAAA4pB,oBAAoB5pB,GACvB,OAAO/F,KAAKuvB,aAAaM,WAAU,SAACC,GAAD,OAA6BA,EAAE/pB,KAAOA,OA/BjF,4BAsCW,SAAA6pB,eAAe7pB,GAClB,OAAO/F,KAAKuvB,aAAa/S,MAAK,SAACsT,GAAD,OAA6BA,EAAE/pB,KAAOA,OAvC5E,+BA6CW,SAAAgqB,kBAAkBhqB,GACrB/F,KAAKuvB,aAAevvB,KAAKuvB,aAAaS,QAAO,SAACF,GAAD,OAA6BA,EAAE/pB,KAAOA,OA9C3F,gBAoDI,eACI,OAAO/F,KAAKuvB,aAAa/S,MAAK,SAACsT,GAAD,OAA0C,IAAbA,EAAEG,YArDrE,cA2DI,eACI,OAAOjwB,KAAK4vB,eAAe5vB,KAAKwvB,UA5DxC,wBAqLaU,GAEF,QAFEA,GAIO,kBAJPA,GAKE,aALFA,GAMA,UANAA,GAOW,sBAOXC,GACO,iBADPA,GAGS,mBAHTA,GASK,eATLA,GAUA,UAVAA,GAWG,aAXHA,GAYc,wBAZdA,GAagB,0BAbhBA,GAcE,Y,UErQF,GAAb,WASI,qEAEInwB,KAAKowB,kBAAoB,GAA6BC,aACtDrwB,KAAKswB,WAAa,GAA6BC,WAC/CvwB,KAAK6uB,SAAW,GAA6Btc,KAC7CvS,KAAK8uB,eAAiB,GAA6B0B,WACnDxwB,KAAKivB,aAAe,GAA6BwB,SACjDzwB,KAAK0wB,gBAAkB,IAAIC,GAAA,EAAmB,IAhBtD,mEA0BW,SAAAC,aAAaC,EAA0BC,EAA0BhkB,EAAU5J,GAAS,WAEvF,IAEIrG,GAAA,EAAUK,uBAAuB2zB,EAAM,QAEvC,IAAME,EAAuBF,EAAKjf,YAAYuB,GAAA,EAAWkB,qCAAsC,GAA6B2c,qBACtHC,GAAmBJ,EAAKjf,YAAYuB,GAAA,EAAW+d,4BAA6B,qBAC5EC,GAAuBN,EAAKjf,YAAYuB,GAAA,EAAWie,4BAA6BpxB,KAAK6uB,UACrFwC,GAAwBR,EAAKjf,YAAYuB,GAAA,EAAWme,sCACpDxe,GAA0B+d,EAAKjf,YAAYuB,GAAA,EAAWC,6BACtDme,GAA6BV,EAAKjf,YAAYuB,GAAA,EAAWE,gCACzDme,GAAoBX,EAAKjf,YAAYuB,GAAA,EAAWI,kCAEtD1W,GAAA,EAAUW,wBAAwBuzB,EAAc,gBAChDl0B,GAAA,EAAUW,wBAAwByzB,GAAU,YAC5Cp0B,GAAA,EAAUW,wBAAwB2zB,GAAc,gBAEhD,IAAMjO,GAAyC,GAC/CA,GAAYljB,KAAKowB,kBAAkBI,YAAcxwB,KAAK8uB,eACtD5L,GAAYljB,KAAKowB,kBAAkBW,cAAgBA,EACnD7N,GAAYljB,KAAKowB,kBAAkBa,UAAYA,GAE/C,IAAM7U,GAAqC,GACvCiV,KACAjV,GAAQpc,KAAKowB,kBAAkBiB,eAAiBA,IAEpDjV,GAAQpc,KAAKowB,kBAAkBqB,aAAe,GAA6BA,iBAElDz0B,IAArB8zB,EACA5N,GAAYljB,KAAKowB,kBAAkBsB,QAAUZ,GAE7Cj0B,GAAA,EAAUK,uBAAuBq0B,GAAoBvxB,KAAKswB,WAAWqB,+BACrEvV,GAAQpc,KAAKowB,kBAAkBmB,oBAAsBA,GACjDze,GACAsJ,GAAQpc,KAAKowB,kBAAkBtd,iBAAmBA,GAC3C0e,GACPpV,GAAQpc,KAAKowB,kBAAkBwB,eAA/B,iBAA0DJ,IAE1D30B,GAAA,EAAUK,uBAAuB4V,GAAiB9S,KAAKswB,WAAWuB,6BAI1E,IAAMjP,GAA0B,GAChCA,GAAOxG,QAAUA,GACjBpc,KAAK0wB,gBAAgBoB,QAAUlP,GAE/B,IAAMhP,GAAQ,kBAAsBud,IAAtB,OAAqCnxB,KAAKivB,cAGxDjvB,KAAK0wB,gBAAgBqB,QAAQ,KAAgBC,KAAMpe,GAAUsP,GAAa,MAAMxgB,MAAK,SAACmoB,GAElF,IAAMoH,EAAoBtB,GAAA,EAAmBuB,mBAAmB,EAAK9B,kBAAkB6B,UAAWpH,EAASzO,SAE3G,GAAKyO,EAASF,GAAd,CAmBA,IAAMwH,EAAsCzc,KAAKC,MAAMkV,EAAS7nB,MAIhE,GAHImvB,IACAA,EAAaF,UAAYA,GAEvBnlB,EAAI,CACN,IACIA,EAAGqlB,GACL,MAAOxT,IACCzb,GACFA,EAAIyb,IAGZ7R,OAAK9P,QA9BL,GAAMkG,EAAK,CAEP,IACIkvB,GADAC,GAAuB,EAAK/B,WAAWgC,sCAAsCC,QAAQ,WAAY1H,EAASD,OAAOjf,YAErH,IACIymB,GAAgB1c,KAAKC,MAAMkV,EAAS7nB,MACpCqvB,IAAgB,KAAJ,OAASD,GAAchxB,MAAMoxB,KAA7B,aAAsCJ,GAAchxB,MAAMkD,QAA1D,KACd,MAAOqa,IACL0T,IAAgB,KAAJ,OAASxH,EAAS7nB,KAAlB,KAEZivB,IACAI,IAAgB,IAAJ,OAAQJ,IAGxB/uB,EAAImvB,QAmBbpvB,OAAO,SAAC0b,OAEb,MAAOvd,IACL,GAAM8B,EACF,GAAI9B,cAAiBnE,MAAO,CACxB,IAAMmH,GAAoBhD,GAC1B8B,EAAIkB,GAAWrH,KAAO,KAAOqH,GAAWE,cAGxCpB,EAAI9B,OA3HxB,mBAuIW,SAAAqxB,MAAM5B,EAA0B6B,GAAoB,WACvD,OAAO,IAAIprB,SAAc,SAAC/B,EAAqBlB,GAC3C,IAEIxH,GAAA,EAAUK,uBAAuB2zB,EAAM,EAAKP,WAAWqC,YAAYJ,QAAQ,QAAS,WACpF11B,GAAA,EAAUW,wBAAwBk1B,EAAc,EAAKpC,WAAWqC,YAAYJ,QAAQ,QAAS,UAE7F,IAAMpB,EAAuBN,EAAKjf,YAAYuB,GAAA,EAAWie,4BAA6B,EAAKvC,UACrFwC,GAAwBR,EAAKjf,YAAYuB,GAAA,EAAWme,sCAEpDpO,GAAyC,GAC/CA,GAAY,EAAKkN,kBAAkBI,YAAc,EAAK1B,eACtD5L,GAAY,EAAKkN,kBAAkBsC,cAAgBA,EAEnD,IAAMtW,GAAqC,GACvCiV,KACAjV,GAAQ,EAAKgU,kBAAkBiB,eAAiBA,IAGpD,IAAMzO,GAA0B,GAChCA,GAAOxG,QAAUA,GACjB,EAAKsU,gBAAgBoB,QAAUlP,GAE/B,IAAMhP,GAAQ,kBAAsBud,GAAtB,OAAqC,EAAKlC,cAGxD,EAAKyB,gBAAgBqB,QAAQ,KAAgBa,OAAQhf,GAAUsP,GAAa,MAAMxgB,MAAK,SAACmoB,GAE/EA,EAASF,GAIdplB,OAEDtC,OAAO,SAAC0b,OAEb,MAAOvd,IACL,GAAIA,cAAiBnE,MAAO,CACxB,IAAMmH,GAAoBhD,GAC1BiD,EAAOD,GAAWrH,KAAO,KAAOqH,GAAWE,cAG3CD,EAAOjD,YAjL3B,uB,oBCXa,GAAb,0GAGI,uCACIsb,EACAmW,EACAzW,EACArW,GAAW,uDACP,eAAM2W,EAAamW,EAAMzW,EAASrW,GAClC,IAAMiX,GAAOtH,KAAKC,MAAM,GAAKkH,UAFtB,YAGW7f,IAAdggB,GAAKnc,OACL,GAAKiyB,4BAA8B9V,GAAKnc,MAJrC,GAPnB,sFAeI,eACI,OAAOb,KAAK8yB,gCAhBpB,+BAAmD,MCWtC,GAAb,yGAKW,KAAAC,oBAAsB,SAACzuB,GAC1B,IAAM0uB,EAAW,IAAI,KAErB,IACI,GAAI1uB,EAAQoY,cAAgB,KAAYC,KAAM,CAC1C,IAAMsW,EAAiD,IAAI,GAA8B3uB,EAAQoY,YAAapY,EAAQ4uB,YAAa,GAAI5uB,EAAQyB,IAC/IitB,EAASztB,QAAQ0tB,QACV3uB,EAAQoY,cAAgB,KAAYE,QAC3CoW,EAASztB,QAAQ,IAAI,GAA8BjB,EAAQoY,YAAapY,EAAQ6uB,mBAAen2B,EAAWsH,EAAQyB,KAExH,MAAO4Y,GACLqU,EAAS3uB,OAAT,+CAAwDsa,IAG5D,OAAOqU,EAAS9uB,SAMb,KAAAkvB,sBAAwB,SAAC9uB,GAE5B,IAAM0uB,EAAW,IAAI,KAErB,IACI,GAAI1uB,EAAQoY,cAAgB,KAAYC,KAAM,CAC1C,IAAMkB,EAAU,GAAH,OAAMvZ,EAAQuY,SAAWvY,EAAQuY,SAAW,IACzDmW,EAASztB,QAAQ,IAAI8tB,GAAA,EAAoB,KAAY1W,KAAMkB,EAASvZ,EAAQyB,MAElF,MAAO4Y,GACLqU,EAAS3uB,OAAT,wCAAiDsa,IAGrD,OAAOqU,EAAS9uB,UCtCX,GAAb,ySAEW,SAAAye,OAAOC,EAA0BC,EAAoBxE,GAExD,IAAM8S,EAAuBvO,EAAOE,WAAWlR,YAAYuB,GAAA,EAAWie,4BAA6B,GAA6B7e,MAC1H8e,EAAwBzO,EAAOE,WAAWlR,YAAYuB,GAAA,EAAWme,qCAAsC,gBAEvG1d,EAAQ,gBAAoBud,GAApB,OAAmC,GAA6BmC,eACxEja,GAAgBuJ,EAAOE,WAAWlR,YAAYuB,GAAA,EAAWogB,kCAA8Bv2B,GAC7FH,GAAA,EAAUK,uBAAuBmc,GAAO,SAExC,IAAM6J,GAAyC,GAC/CA,GAAY,GAA6BmN,aAAaG,YAAc,GAA6BA,WACjGtN,GAAY,GAA6BmN,aAAahX,OAASA,GAC/D6J,GAAY,GAA6BmN,aAAagB,eAAiBA,EACvE,IAAM/M,GAA6G,SAAhF1B,EAAOE,WAAWlR,YAAY,oCAAqC,SACtG,OAAO,IAAI2S,GAAA,EAAoB3Q,EAAUsP,GAAa,GAAI,IAAI,GAAyCuB,GAAA,EAAUC,qBAAqB9B,GAAS0B,GAAmBjG,OAhB1K,+BAAmDwF,GAAA,G,UCVtC,GAAb,+T,OAA8D,GCAjD,GAAb,8GAGI,yCAAY2P,EAAwBvW,GAAkB,gEAClD,cAAMA,IACDwW,mBAAqBD,EAFwB,EAH1D,+EASI,SAAAxgB,MACI,OAAOhT,KAAKyzB,uBAVpB,iCAAqD1W,GAAA,GCGxC,GAAb,0GAII,uCAAmB2W,EACAC,EACAC,EACAC,EACA/tB,GACAguB,GACAjlB,GACArQ,GACAmiB,GACA3D,GACA9J,IAA+B,+DAC9C,eAAMygB,EAAcE,EAAU/tB,GAAQguB,GAAMjlB,GAAUrQ,GAAQmiB,GAAc3D,GAAM9J,KAC7E9N,OAASsuB,EACd,GAAKK,aAAeH,EAH0B,GAdtD,4EAuBI,eACI,OAAO5zB,KAAKoF,SAxBpB,wBA8BI,eACI,OAAOpF,KAAK+zB,iBA/BpB,+BAAmDC,GAAA,G,kYCItC,GAAb,WAOI,oCAAY/W,GAAiB,wDANrB,KAAA8H,gBAA0B,EAC1B,KAAAkP,gBAAiC,IAAIC,MAuBtC,KAAAC,qBAAuB,SAACnb,EAA0BqF,GACrD,EAAK+V,cAAgB/V,GAGlB,KAAAgW,gBAAkB,SAACC,EAAkBlzB,GACpCkzB,GACA,EAAKC,cAIN,KAAAC,+BAAiC,SAACC,EAAoB3uB,GACtC,MAAf2uB,GAEsB,MAAfA,GACP,EAAKF,cAIN,KAAAG,yBAA2B,SAACC,GAC1BA,EAGD,EAAKC,cAAgB,eAFrB,EAAKL,cAgBL,KAAAA,WAAa,aArDjBv0B,KAAKo0B,cAAgBnX,EACrBjd,KAAK40B,cAAgB,eACrB50B,KAAK60B,8BAAgC,IAAI,KAVjD,qEAaI,eACI,OAAO70B,KAAKo0B,gBAdpB,qBAiBI,eACI,OAAOp0B,KAAK40B,gBAlBpB,6BAqBI,eACI,OAAO50B,KAAK60B,8BAA8B3wB,UAtBlD,qBAmDiB,SAAAmT,QAAQjW,G,mLACZpB,KAAK+kB,e,iBAEN/kB,KAAK+kB,gBAAiB,E,eACG/kB,KAAKi0B,iB,yDAC1B,OADOa,E,iBACDA,EAAW3uB,S,gNAxDjC,8BCRa,GAAb,gFAGI,0BAAmB4uB,EAAkB9X,GAAkB,iDACnD,cAAMA,IAED+X,YAAcD,EAHgC,EAH3D,yDASI,eACI,OAAO/0B,KAAKg1B,gBAVpB,kBAAsCjY,GAAA,GAezB,GAAb,kFAGI,2BAAmBkY,EAAmBhY,GAAkB,kDACpD,cAAMA,IAEDiY,aAAeD,EAHgC,EAH5D,0DASI,eACI,OAAOj1B,KAAKk1B,iBAVpB,mBAAuCnY,GAAA,GAe1B,GAAb,wFAGI,8BAAmBoY,EAAmClY,GAAkB,qDACpE,cAAMA,IACDmY,gBAAkBD,EAF6C,EAH5E,iEAQI,eACI,OAAOn1B,KAAKo1B,oBATpB,sBAA0CrY,GAAA,GAc7B,GAAb,0GAKI,uCAAmB2W,EAAuBzX,EAAa3T,EAA8C2U,GAAkB,+DACnH,eAAMA,IAEDoY,QAAUpZ,EACf,GAAKqZ,UAAYhtB,EACjB,GAAKitB,kBAAoB7B,EAL0F,GAL3H,oEAaI,eACI,OAAO1zB,KAAKs1B,YAdpB,eAiBI,eACI,OAAOt1B,KAAKq1B,UAlBpB,cAoBI,eACI,OAAOr1B,KAAKu1B,sBArBpB,+BAAmDxY,GAAA,GA0BtC,GAAb,kGAWI,mCAAmBkJ,EAAwB5M,EAAemc,EAAuBC,EAC9DC,GAA6BC,GAAuBC,GAAoBrG,GAAsCtS,IAAkB,2DAC/I,eAAMA,KACD4Y,WAAa5P,EAClB,GAAK6P,iBAAmBzc,EACxB,GAAK0c,gBAAkBP,EACvB,GAAKQ,oBAAsBP,EAC3B,GAAKQ,wBAA0BP,GAC/B,GAAKQ,iBAAmBP,GACxB,GAAKO,iBAAmBN,GACxB,GAAKO,iBAAmB5G,GATuH,GAZvJ,uEAuBI,eACI,OAAOvvB,KAAK81B,mBAxBpB,0BA2BI,eACI,OAAO91B,KAAK61B,aA5BpB,uBA+BI,eACI,OAAO71B,KAAK+1B,kBAhCpB,2BAmCI,eACI,OAAO/1B,KAAKg2B,sBApCpB,+BAuCI,eACI,OAAOh2B,KAAKi2B,0BAxCpB,wBA2CI,eACI,OAAOj2B,KAAKk2B,mBA5CpB,qBA+CI,eACI,OAAOl2B,KAAKo2B,gBAhDpB,wBAmDI,eACI,OAAOp2B,KAAKm2B,qBApDpB,2BAA+CpZ,GAAA,GAyDlC,GAAb,WAKI,kDAAmBsZ,EAAiBxY,EAAeZ,GAAkB,2DACjEjd,KAAKs2B,YAAczY,EACnB7d,KAAKu2B,YAAcF,EACnBr2B,KAAKo0B,cAAgBnX,EAR7B,iFAWI,eACI,OAAOjd,KAAKs2B,cAZpB,mBAeI,eACI,OAAOt2B,KAAKu2B,cAhBpB,qBAmBI,eACI,OAAOv2B,KAAKo0B,kBApBpB,4CCnHa,GAAb,WAGI,gCAAmBpX,GAAY,yCAC3Bhd,KAAKw2B,oBAAsB9gB,KAAKC,MAAMqH,GAJ9C,4DAWI,eACI,OAAOhd,KAAKw2B,oBAAoB31B,OAZxC,mBAcI,eACI,OAAOb,KAAKw2B,oBAAoBH,UAfxC,cAiBI,eACI,OAAOr2B,KAAKw2B,oBAAoBzwB,KAlBxC,oBAoBI,eACI,OAAO/F,KAAKw2B,oBAAoBvF,WArBxC,yBAuBI,eACI,OAAOjxB,KAAKw2B,oBAAoB9C,gBAxBxC,kBA0BI,eACI,OAAO1zB,KAAKw2B,oBAAoBC,SA3BxC,iBA6BI,eACI,OAAOz2B,KAAKw2B,oBAAoBluB,QA9BxC,iBAgCI,eACI,OAAOtI,KAAKw2B,oBAAoBnd,SAjCxC,uBAOW,kBAAgB2D,GACnB,OAAO,IAAI0Z,uBAAuB1Z,OAR1C,0BCgBa,GAAb,WAGI,yCAAoBA,GAAY,kDAC5Bhd,KAAK22B,gCAAkCjhB,KAAKC,MAAMqH,GAJ1D,uEAWI,eACI,OAAOhd,KAAK22B,gCAAgCF,SAZpD,cAeI,eACI,OAAOz2B,KAAK22B,gCAAgC5wB,KAhBpD,mBAmBI,eACI,OAAO/F,KAAK22B,gCAAgCN,UApBpD,wBAuBI,eACI,OAAOr2B,KAAK22B,gCAAgCpH,eAxBpD,iBA2BI,eACI,OAAOvvB,KAAK22B,gCAAgCtd,QA5BpD,uBA+BI,eACI,OAAOrZ,KAAK22B,gCAAgCnB,cAhCpD,2BAmCI,eACI,OAAOx1B,KAAK22B,gCAAgClB,kBApCpD,+BAuCI,eACI,OAAOz1B,KAAK22B,gCAAgCjB,sBAxCpD,sBA2CI,eACI,OAAO11B,KAAK22B,gCAAgCC,aA5CpD,mBA+CI,eACI,OAAO52B,KAAK22B,gCAAgCE,UAhDpD,gBAmDI,eACI,OAAO72B,KAAK22B,gCAAgC91B,QApDpD,uBAOW,kBAAgBmc,GACnB,OAAO,IAAI8Z,gCAAgC9Z,OARnD,mCA0Da,GAAb,WAII,oCAAoBA,GAAY,6CAC5Bhd,KAAK+2B,+BAAiCrhB,KAAKC,MAAMqH,GALzD,oEAYI,eACI,OAAOhd,KAAK+2B,+BAA+B9F,WAbnD,kBAgBI,eACI,OAAOjxB,KAAK+2B,+BAA+BC,SAjBnD,kBAoBI,eACI,OAAOh3B,KAAK+2B,+BAA+BE,SArBnD,mBAwBI,eACI,OAAOj3B,KAAK+2B,+BAA+BG,UAzBnD,kBA4BI,eACI,OAAOl3B,KAAK+2B,+BAA+BI,SA7BnD,yBAgCI,eACI,OAAOn3B,KAAK+2B,+BAA+BrD,gBAjCnD,kBAoCI,eACI,OAAO1zB,KAAK+2B,+BAA+BK,UArCnD,uBAQW,kBAAgBpa,GACnB,OAAO,IAAIqa,2BAA2Bra,OAT9C,8BC5Da,GAAb,WAII,+BAAoBA,GAAY,wCAC5Bhd,KAAKs3B,mBAAqB5hB,KAAKC,MAAMqH,GAL7C,kEAYI,eACI,OAAOhd,KAAKs3B,mBAAmBC,cAbvC,wBAgBI,eACI,OAAOv3B,KAAKs3B,mBAAmB3D,eAjBvC,cAoBI,eACI,OAAO3zB,KAAKs3B,mBAAmBvxB,KArBvC,oBAwBI,eACI,OAAO/F,KAAKs3B,mBAAmB/gB,WAzBvC,oBA4BI,eACI,OAAOvW,KAAKs3B,mBAAmBrG,WA7BvC,yBAgCI,eACI,OAAOjxB,KAAKs3B,mBAAmB5D,gBAjCvC,kBAoCI,eACI,OAAO1zB,KAAKs3B,mBAAmBb,SArCvC,qBAwCI,eACI,OAAOz2B,KAAKs3B,mBAAmBE,YAzCvC,gBA4CI,eACI,OAAOx3B,KAAKs3B,mBAAmBz2B,OA7CvC,mBAgDI,eACI,MAAwC,UAAjCb,KAAKs3B,mBAAmBz2B,QAjDvC,uBAQW,kBAAgBmc,GACnB,OAAO,IAAIya,sBAAsBza,OATzC,yBAsDa,GAAb,WAII,6BAAoBA,GAAY,sCAC5Bhd,KAAK03B,iBAAmBhiB,KAAKC,MAAMqH,GAL3C,iEAYI,eACI,OAAOhd,KAAK03B,iBAAiBC,eAbrC,wBAgBI,eACI,OAAO33B,KAAK03B,iBAAiB/D,eAjBrC,cAoBI,eACI,OAAO3zB,KAAK03B,iBAAiB3xB,KArBrC,oBAwBI,eACI,OAAO/F,KAAK03B,iBAAiBnhB,WAzBrC,oBA4BI,eACI,OAAOvW,KAAK03B,iBAAiBzG,WA7BrC,yBAgCI,eACI,OAAOjxB,KAAK03B,iBAAiBhE,gBAjCrC,kBAoCI,eACI,OAAO1zB,KAAK03B,iBAAiBjB,SArCrC,qBAwCI,eACI,OAAOz2B,KAAK03B,iBAAiBF,YAzCrC,gBA4CI,eACI,OAAOx3B,KAAK03B,iBAAiB72B,QA7CrC,uBAQW,kBAAgBmc,GACnB,OAAO,IAAI4a,oBAAoB5a,OATvC,uB,kYC5Ba,GAAb,oGAYI,oCACIjD,EACAlD,EACAW,EACAO,EACA8f,IAA8D,4DAE9D,eAAM9d,EAAgBlD,EAAmBW,EAAaO,EAAkB8f,KAVpEC,2BAAqC,GAmGnC,GAAAC,KAAO,aAvFb,GAAKC,iCAAmCH,GACxC,GAAKI,+BAAiCle,EACtC,GAAKme,uBAAyB,GAAKC,mCACnC,GAAKC,kBAAoB,GAAKL,KAC9B,GAAKM,wBAA0B,GAAKC,wBACpC,GAAKC,yBAA2B,GAAKC,iBACrC,GAAKC,mBAAqB,GAAKC,eAC/B,GAAKC,+BAAiC,IAAI,GAA2B,gBACrE,GAAKC,kCAAoC/hB,EACzC,GAAKgiB,4BAA6B,EAb4B,GAjBtE,wEAiCW,SAAAx7B,aACH,OAAO,+FAAsB2C,KAAK64B,6BAlC1C,qBAqCiB,SAAAxhB,QAAQvR,GAAe,W,yTAChC9F,KAAK64B,4BAA6B,GAC9B74B,KAAK84B,4B,gBAC2B,O,SAAM94B,KAAK84B,4B,OAC3C,OADMC,E,gBACAA,EAAW1hB,QAAQvR,G,OAE7B,O,SAAM,EAAMuR,QAAO,UAACvR,G,wDA3C5B,yBA8CiB,SAAA6f,YAAYrhB,G,8KACW,O,SAAMtE,KAAKg5B,kB,cAArCD,E,yBACCA,EAAWE,KAAK,IAAI,GACvB,KAAYtc,KACZrY,K,yDAlDZ,8BAqDiB,SAAAsZ,iBAAiBtZ,G,8KAGM,OAFH,IAAI,K,SAEKtE,KAAKg5B,kB,OAE3C,OAFMD,E,gBAEAA,EAAWE,KAAK,IAAI,GAA8B,KAAYtc,KAAMrY,I,yDA1DlF,4BA6Dc,SAAAo0B,iBACN,IAAI14B,KAAKk5B,qBAUT,OAPAl5B,KAAKm5B,kBAAkBn5B,KAAK24B,+BAA+B1b,UACvDjd,KAAK24B,+BAA+B1G,UACpClR,GAAA,EAAmB9jB,MACnB,KAAsB+jB,QACtB,iBAEJhhB,KAAKk5B,sBAAuB,EACrB5xB,QAAQ/B,YAxEvB,yCA2EoB,SAAA6zB,4BACZC,EACAr0B,EACAs0B,G,kMACO,G,oDA/Ef,+BAmFc,SAAAH,kBACNlc,EACAgV,EACAsH,EACA3Y,EACAxf,GAEApB,KAAKk5B,sBAAuB,EAE5B,IAAMM,EAAwD,IAAI,GAC9DD,EACAn4B,EACAwf,OACA5jB,EACAigB,GAEJ,IACUjd,KAAKg4B,iCAAiCyB,UACxCz5B,KAAKg4B,iCAAiCyB,SAASz5B,KAAKg4B,iCAAkCwB,GAE5F,cAvGV,qCAmHoB,SAAAlB,wBAAwBS,G,+KACpC/4B,KAAK05B,mBAAqB15B,KAAK25B,mB,kBACxBZ,G,yDArHf,gDA2HkB,SAAAZ,qC,6NACNn4B,KAAK3C,eAAgB2C,KAAKk5B,qB,2CACnB5xB,QAAQ/B,W,OAMiB,OAH9Bq0B,EAAyC,IAAI,K,oBAGT55B,KAAKg5B,kB,OACI,OADzCD,E,kBAC+CA,EAAWzyB,O,UAA1DhC,E,SACFtE,KAAK3C,eAAgB2C,KAAKk5B,qB,yBAE1BU,EAAuBr0B,U,mBAChB+B,QAAQ/B,W,WAGdjB,E,4CACMtE,KAAKm4B,sC,QAGVlb,EAAoBjd,KAAK24B,+BAA+B1b,UAC1D4c,GAAqB,E,iBAGbv1B,EAAQw1B,wBAAwBrd,c,QAC/B,S,OACA,wB,OACA,Y,SAkOA,Y,OAKA,U,SA8CA,uB,0BApRKsd,EAAyC,GAAuB3Z,SAAS9b,EAAQuY,U,MAC/Ekd,EAAe1D,QAAQ5Z,c,QAOtB,oB,SA8BA,4B,SAiBA,0B,SAeA,Y,SAcA,e,SAYA,0B,SAYA,c,SAcA,iB,SAaA,mB,SAcA,gB,SA0BA,iB,SAiBA,sB,SAQA,U,iCA9LKud,GAAwD,GAAgC5Z,SAAS9b,EAAQuY,UAEzGod,GAA6CD,GAAoBzK,aAAahD,KAAI,SAACuD,GAUrF,MAT0C,CACtCsH,OAAQtH,EAAEsH,OACV8C,YAAapK,EAAEmB,SACflrB,GAAI+pB,EAAE4D,cACNzD,OAAQH,EAAEqH,OACVpC,QAASjF,EAAEoH,QACXiD,WAAYrK,EAAEmH,OACdmD,kBAAmBtK,EAAEkH,WAKvBh3B,KAAKg4B,iCAAiCqC,0BACxCr6B,KAAKg4B,iCAAiCqC,yBAAyBr6B,KAAKg4B,iCAChE,IAAI,GAA0BgC,GAAoBvD,OAAQuD,GAAoB3gB,MAC1E2gB,GAAoBxE,YAAawE,GAAoBvE,gBACrDuE,GAAoBtE,oBAAqBsE,GAAoBpD,WAC7DoD,GAAoBnD,QAASoD,GAAoBhd,I,qCAUvDjd,KAAKg4B,iCAAiCsC,kCACxCt6B,KAAKg4B,iCAAiCsC,iCAAiCt6B,KAAKg4B,iCACxE,IAAI,GAA8B+B,EAAerG,cAC7CvD,GACA4J,EAAezxB,MAAO2U,I,qCAa5Bjd,KAAKg4B,iCAAiCsC,kCACxCt6B,KAAKg4B,iCAAiCsC,iCAAiCt6B,KAAKg4B,iCACxE,IAAI,GAA8B+B,EAAerG,cAC7CvD,GACA4J,EAAezxB,MAAO2U,I,qCAW5Bjd,KAAKg4B,iCAAiCsC,kCACxCt6B,KAAKg4B,iCAAiCsC,iCAAiCt6B,KAAKg4B,iCACxE,IAAI,GAA8B+B,EAAerG,cAC7CvD,GACA4J,EAAezxB,MAAO2U,I,qCAU5Bjd,KAAKg4B,iCAAiCuC,wBACxCv6B,KAAKg4B,iCAAiCuC,uBAAuBv6B,KAAKg4B,iCAC9D,IAAI,GAAiB+B,EAAezxB,MAAkB2U,I,qCAUxDjd,KAAKg4B,iCAAiCwC,wBACxCx6B,KAAKg4B,iCAAiCwC,uBAAuBx6B,KAAKg4B,iCAC9D,IAAI,GAAgC+B,EAAezxB,MAAiBtI,KAAK24B,+BAA+B1b,Y,qCAU1Gjd,KAAKg4B,iCAAiCsC,kCACxCt6B,KAAKg4B,iCAAiCsC,iCAAiCt6B,KAAKg4B,iCACxE,IAAI,GAA8B+B,EAAerG,cAC7CvD,GACA4J,EAAezxB,MAAO2U,I,qCAU5Bjd,KAAKg4B,iCAAiCyC,yBACxCz6B,KAAKg4B,iCAAiCyC,wBAAwBz6B,KAAKg4B,iCAC/D,IAAI,GAAkB+B,EAAezxB,MAAkB2U,I,qCAWzDjd,KAAKg4B,iCAAiCsC,kCACxCt6B,KAAKg4B,iCAAiCsC,iCAAiCt6B,KAAKg4B,iCACxE,IAAI,GAA8B+B,EAAerG,cAC7CvD,GACA4J,EAAe9I,SAAUhU,I,qCAU/Byd,GAAqD,GAA2Bta,SAAS9b,EAAQuY,UAEjG8d,GAA2C,CAC7CvD,OAAQsD,GAAuBtD,OAC/B8C,YAAaQ,GAAuBzJ,SACpClrB,GAAI20B,GAAuBhH,cAC3BzD,OAAQyK,GAAuBvD,OAC/BpC,QAAS2F,GAAuBxD,QAChCiD,WAAYO,GAAuBzD,OACnCmD,kBAAmBM,GAAuB1D,QAGxCh3B,KAAKg4B,iCAAiC4C,gCACxC56B,KAAKg4B,iCAAiC4C,+BAA+B56B,KAAKg4B,iCACtE,IAAI,GACA2C,GACA1d,I,qCAUN4d,GAA2C,CAC7C90B,GAAIg0B,EAAerG,eAGjB1zB,KAAKg4B,iCAAiC8C,iCACxC96B,KAAKg4B,iCAAiC8C,gCAAgC96B,KAAKg4B,iCACvE,IAAI,GAAqB6C,GAAoB5d,I,oCAWD,CAChDlX,GAAIg0B,EAAerG,e,qCAMjBra,GAAQ,IAAIN,GAAA,GACd,SAACC,GACG,IAAM1F,EAAqBymB,EAAe1gB,MAC1C,OAAO/R,QAAQ/B,QAAQ+N,MAE3B,SAAC0F,GACG,IAAM1F,EAAqBymB,EAAe1gB,MAC1C,OAAO/R,QAAQ/B,QAAQ+N,MAE/BtT,KAAK+Z,eAAiBV,G,+GAsBxB0hB,GAAuC,GAAsB3a,SAAS9b,EAAQuY,UAE9Eme,GAA8C,IAAI,GAA8BD,GAAcrH,cAChG1zB,KAAKi7B,gBAAgBF,GAAcpH,cACnCoH,GAAcxkB,cACdvZ,OACAA,EACA+9B,GAAcxD,iBACdv6B,OACAA,EACAsH,EAAQuY,cACR7f,GAEA+9B,GAAcG,eAEYl+B,IAAtBg+B,GAAalH,MAAsBkH,GAAalH,KAAK12B,OAAS,GAEvD29B,GAAch1B,KAAO/F,KAAK83B,8BADjC+B,GAAY,GASZA,GACM75B,KAAKg4B,iCAAiCmD,qBACxCn7B,KAAKg4B,iCAAiCmD,oBAAoBn7B,KAAKg4B,iCAC3D,IAAI,GAAyC9H,GAA0C8K,GAAc/d,UAGpFjgB,IAAtBg+B,GAAalH,OACpB9zB,KAAK83B,2BAA6BiD,GAAch1B,GAC1C/F,KAAKg4B,iCAAiCmD,qBACxCn7B,KAAKg4B,iCAAiCmD,oBAAoBn7B,KAAKg4B,iCAC3D,IAAI,GAAyC9H,GAA4C8K,GAAc/d,K,qCAW7Gme,GAAmC,GAAoBhb,SAAS9b,EAAQuY,UAExEwe,GAA4C,IAAI,GAA8BD,GAAY1H,cAC5F1zB,KAAKi7B,gBAAgBG,GAAYzH,cACjCyH,GAAY7kB,cACZvZ,OACAA,EACAo+B,GAAYzD,kBACZ36B,OACAA,OACAA,EACAsH,EAAQuY,cACR7f,GAEEgD,KAAKg4B,iCAAiCmD,qBACxCn7B,KAAKg4B,iCAAiCmD,oBAAoBn7B,KAAKg4B,iCAC3D,IAAI,GAAyC9H,GAAmDmL,GAAYpe,I,4JAWzHjd,KAAKm4B,sC,qCAEZn4B,KAAKk5B,sBAAuB,E,kCAGzBU,EAAuB11B,S,4EA7ctC,8BAgdkB,SAAAy1B,mB,oLACN35B,KAAK3C,a,yCACEiK,QAAQ/B,W,OAOL,OALdvF,KAAKk5B,sBAAuB,EAEtBoC,EAA0Bt7B,KAAKm4B,qC,kBAGjBmD,E,cAAVC,E,yBACCA,G,yCAEPv7B,KAAKm5B,kBAAkBn5B,KAAKw7B,mBAAqBx7B,KAAKw7B,mBAAmBve,UAAY,GAAIjd,KAAKw7B,mBAAqBx7B,KAAKw7B,mBAAmBvJ,UAAY,GAAIlR,GAAA,EAAmB9jB,MAAO,KAAsBw+B,aAA3M,M,kBACO,M,mEA7dnB,8BAkeY,SAAAjD,mBAAgB,WACpB,OAAIx4B,KAAK3C,aACEiK,QAAQ/B,aAAqBvI,GAEpCgD,KAAK84B,4BACE94B,KAAK84B,4BAA4Bp2B,MAAK,SAACq2B,GAC1C,OAAIA,EAAWnzB,UAAY,KAAgB81B,cACvC,EAAKC,iBAAmB,KACxB,EAAK7C,4BAA8B,KAC5B,EAAKN,oBAET,EAAKM,+BACb,SAAC13B,GAGA,OAFA,EAAKu6B,iBAAmB,KACxB,EAAK7C,4BAA8B,KAC5B,EAAKN,sBAGhBx4B,KAAKk5B,qBACE5xB,QAAQ/B,aAAqBvI,IAGxCgD,KAAK84B,4BAA8B94B,KAAK47B,cAAcl5B,MAAK,SAACq2B,GACxD,OAAOA,KAGJ/4B,KAAK84B,+BA5fpB,6BA+fY,SAAAmC,gBAAgBY,GACpB,IAAIlI,EAEJ,QAAI32B,IAAc6+B,EAA2B,CACzClI,EAAe,IAAImI,GAAA,EADsB,qBAEfD,GAFe,IAEzC,2BAAqD,KAA1CE,EAA0C,QACjDpI,EAAaxlB,IAAI4tB,EAAYxc,KAAMwc,EAAYA,cAHV,+BAO7C,OAAOpI,MAzgBf,4BAAgDhb,GAAA,G,wYCVnC,GAAb,oLACW,oBAAkBwZ,EAA6BlZ,EAAuCrC,GACzF,OAAO,IAAI,GAAiCub,EAAclZ,EAAcrC,OAFhF,iCAWa,GAAb,gHAUI,0CAAmBub,EAA6BlZ,EAAuCrC,GAAyB,yDAC5G,IAAMolB,GAAoB/iB,EAC1Bpc,GAAA,EAAU8U,YAAYqqB,GAAmB,gBACzC,IAAMC,GAAmB9J,EAHmF,OAI5Gt1B,GAAA,EAAU8U,YAAYsqB,GAAkB,qBAExC,cAAMrlB,EAAaolB,GAAkB9oB,WAAY,IAAI,KAEhDgpB,iBAAmBD,GACxB,EAAKlX,gBAAiB,EACtB,EAAKhO,eAAiBilB,GAAkB9oB,WAAW8D,QACnD,EAAKmlB,eAAiB,GAAWpc,eAAX,iBACtB,EAAKqc,eAAoC,qBAAVx7B,MAA6C,qBAAZy7B,OAA2BC,GAAA,EAAQC,WAAaA,WAChH,EAAKC,iBAAsC,qBAAV57B,MAA6C,qBAAZy7B,OAA2BC,GAAA,EAAQG,aAAeA,aAbR,EAVpH,2EAuCI,aAAqB3vB,GACjB9M,KAAKm8B,eAAe/d,UAAYtR,IAxCxC,wBA2CI,aAAwBA,GACpB9M,KAAKm8B,eAAe7d,aAAexR,IA5C3C,qCAkDI,eACI,OAAO9M,KAAK08B,gCAnDpB,sBAyDI,eACI,OAAO18B,KAAK+W,iBA1DpB,wBA6DW,SAAA1Z,aACH,OAAO2C,KAAK+kB,iBA9DpB,qBAqEW,SAAA7iB,QAAQmX,EAAevM,EAAiB5J,GAC3C,IACIrG,GAAA,EAAUua,gBAAgBpX,KAAK+kB,gBAC/BloB,GAAA,EAAUW,wBAAwB6b,EAAO,SACzCrZ,KAAKsX,SAASqlB,4BAA8BtjB,EAC5CrZ,KAAK48B,2BACL58B,KAAKsX,SAASulB,aAAa/vB,EAAI5J,GACjC,MAAO9B,GACL,GAAM8B,EACF,GAAI9B,aAAiBnE,MAAO,CACxB,IAAMmH,EAAoBhD,EAC1B8B,EAAIkB,EAAWrH,KAAO,KAAOqH,EAAWE,cAExCpB,EAAI9B,MAlFxB,wBA2FW,SAAAgC,WAAW0J,EAAiB5J,GAC/B,IACIrG,GAAA,EAAUua,gBAAgBpX,KAAK+kB,qBACD/nB,IAA1BgD,KAAK88B,kBACN98B,KAAKw8B,iBAAiBx8B,KAAK88B,kBAE9B98B,KAAKsX,SAASlU,aAAaV,MAAK,WACtBoK,GACFA,OAEL,SAAC1L,GACM8B,GACFA,EAAI9B,MAGd,MAAOA,GACL,GAAM8B,EACF,GAAI9B,aAAiBnE,MAAO,CACxB,IAAMmH,EAAoBhD,EAC1B8B,EAAIkB,EAAWrH,KAAO,KAAOqH,EAAWE,cAExCpB,EAAI9B,GAIZpB,KAAKqX,SAAQ,GAAMpU,OAAM,SAAC6C,GACtBc,GAAA,EAAOC,SAAS1B,QAAQ,IAAI,KAAgBW,UArH5D,yBAiIW,SAAAi3B,YAAY1G,EAAiBvpB,EAAiB5J,GACjD,IACIrG,GAAA,EAAUua,gBAAgBpX,KAAK+kB,gBAC/B/kB,KAAK2lB,YAAY0Q,EAASvpB,EAAI5J,GAChC,MAAO9B,GACL,GAAM8B,EACF,GAAI9B,aAAiBnE,MAAO,CACxB,IAAMmH,EAAoBhD,EAC1B8B,EAAIkB,EAAWrH,KAAO,KAAOqH,EAAWE,cAExCpB,EAAI9B,GAKZpB,KAAKqX,SAAQ,GAAMpU,OAAM,SAAC6C,GACtBc,GAAA,EAAOC,SAAS1B,QAAQ,IAAI,KAAgBW,UAjJ5D,mBA0JiB,SAAAS,Q,uLACJvG,KAAK+kB,e,gBAIN,OAHmB,QAAnB,EAAA/kB,KAAKm8B,sBAAc,SAAE7e,kBACF,QAAnB,EAAAtd,KAAKm8B,sBAAc,SAAE51B,QACrBvG,KAAKm8B,oBAAiBn/B,E,SAChBgD,KAAKqX,SAAQ,G,wDA/J/B,qBAuKoB,SAAAA,QAAQE,GAAkB,W,kUAClCvX,KAAK+kB,e,qDAGLxN,E,gBAUA,YAT8Bva,IAA1BgD,KAAK88B,kBACL98B,KAAKw8B,iBAAiBx8B,KAAK88B,kBAE/B98B,KAAK+kB,gBAAiB,EAChB/kB,KAAKm8B,iBACPn8B,KAAKm8B,eAAe7e,kBACpBtd,KAAKm8B,eAAe51B,QACpBvG,KAAKm8B,oBAAiBn/B,G,SAEpB,EAAMqa,QAAO,UAACE,G,yDArLhC,oCA6Lc,SAAAS,uBAAuBiB,GAC7B,OAAO,IAAIa,GAAA,EAAiBb,EAAcjZ,KAAK+W,kBA9LvD,qCAyMc,SAAAkB,wBACN8B,EACAlD,EACAD,EACAmB,GAIA,OAAO,IAAI,GAA2BgC,EAAgBlD,EAFjBD,EAEiDmB,EAAkB/X,QAjNhH,yBAoNY,SAAA2lB,YAAYqX,EAAalwB,EAAe5J,IAE5C,SAAS+5B,uBAA0B/4B,EAAqB4I,EAAe5J,GAC7DgB,EACFA,EAAQxB,MAAK,SAACgE,GACV,IACUoG,GACFA,IAEN,MAAO6R,GACCzb,GACFA,EAAI,yCAAD,OAA0Cyb,EAA1C,UAGZ,SAAC7Y,GACA,IACU5C,GACFA,EAAI4C,GAGV,MAAO1E,QAIP8B,GACFA,EAAI,gBAKhB+5B,CA7BkBj9B,KAAKsX,SA6BUsG,iBAAiBof,GAAMlwB,EAAI5J,GAC5DlD,KAAK48B,6BAnPb,sCAsPY,SAAAA,2BAAwB,gBACE5/B,IAA1BgD,KAAK88B,kBACL98B,KAAKw8B,iBAAiBx8B,KAAK88B,kBAG/B98B,KAAK88B,iBAAmB98B,KAAKo8B,gBAAe,WACxC,EAAKW,YAAY,EAAKb,iBAAiBgB,kBACxC,SA7PX,kCAAsD,IClDzC,GAAb,gIAII,kDAAmBp3B,EAAkCypB,EAA8BtS,GAAkB,yEACjG,cAAMA,IACDgD,WAAana,EAClB,EAAKsvB,gBAAkB7F,EAH0E,EAJzG,gFAUI,eACI,OAAOvvB,KAAKigB,aAXpB,wBAcI,eACI,OAAOjgB,KAAKo1B,oBAfpB,0CAA8DrY,GAAA,IfJ9D,SAAYuS,GAER,+CAKA,2CAGA,yBAVJ,CAAYA,QAAwB,KgBG7B,IC8BK6N,GD9BC,GAAb,gHAUI,0CAAmBz2B,EAAuClI,EAAiBye,GAAkB,iEACzF,cAAMze,EAAQye,IACTmgB,WAAa12B,EAFuE,EAVjG,wEAmBI,eACI,OAAO1G,KAAKo9B,eApBpB,kCAAsDC,GAAA,GEQzC,GAAb,WAGI,cAAYC,GAAc,uBACtBt9B,KAAKu9B,WAAaD,EAJ1B,4CAOI,eACI,OAAOt9B,KAAKu9B,eARpB,QAkDa,GAAb,WAWI,qBAAYx3B,EAAYqxB,EAAgB8C,EAAqBjK,EAAiB8E,EAAkBoF,GAAqBC,GAA2B3jB,IAAc,8BAC1JzW,KAAKoF,OAASW,EACd/F,KAAKw9B,WAAapG,EAClBp3B,KAAKy9B,gBAAkBvD,EACvBl6B,KAAK09B,WAAazN,EAClBjwB,KAAKg1B,YAAcD,EACnB/0B,KAAK29B,eAAiBxD,GACtBn6B,KAAK49B,sBAAwBxD,GAC7Bp6B,KAAK69B,UAAYpnB,GACjBzW,KAAK+W,eAAiB,IAAI9C,GAAA,EApBlC,mDA2BI,eACI,OAAOjU,KAAKw9B,aA5BpB,uBA+BI,eACI,OAAOx9B,KAAKy9B,kBAhCpB,cAmCI,eACI,OAAOz9B,KAAKoF,SApCpB,6BAuCI,eACI,OAAOpF,KAAK49B,wBAxCpB,kBA2CI,eACI,OAAO59B,KAAK09B,aA5CpB,mBA+CI,eACI,OAAO19B,KAAKg1B,cAhDpB,sBAmDI,eACI,OAAOh1B,KAAK29B,iBApDpB,iBAuDI,eACI,OAAO39B,KAAK69B,YAxDpB,sBA2DI,eACI,OAAO79B,KAAK+W,kBA5DpB,mBAuBW,cAAYhR,EAAYwQ,EAAkBE,GAC7C,OAAO,IAAIqnB,YAAY/3B,EAAI,GAAIA,GAAI,GAAO,GAAO,EAAOwQ,EAAUE,OAxB1E,e,oXClBsB,GAAtB,WAcI,uDAdJ,4EAsBW,iCAA+BwC,EAAuC8kB,EAA0BC,EAAiBC,GAMpH,IAAIhC,EACAnvB,EACA5J,GAqBJ,OA5BArG,GAAA,EAAUK,uBAAuB+b,EAAc,GAA6BsX,WAAWoC,YAAYJ,QAAQ,QAAS,WACpH11B,GAAA,EAAUK,uBAAuB+b,EAAaxG,OAAQ,GAA6B8d,WAAWoC,YAAYJ,QAAQ,QAAS,mCACtHtZ,EAAanG,iBAAoBmG,EAAarH,YAAYuB,GAAA,EAAWA,GAAA,EAAWI,oCACjF1W,GAAA,EAAUK,uBAAuB+b,EAAanG,gBAAiB,GAA6Byd,WAAWoC,YAAYJ,QAAQ,QAAS,gCAKpH,kBAATwL,GACP9B,EAAmB,IAAI,GAAiBhjB,EAAc8kB,GACtDjxB,EAAKkxB,EACL96B,GAAM+6B,IAENhC,EAAmB,IAAI,GAAiBhjB,GACxCnM,EAAKixB,EACL76B,GAAM86B,GAEV/B,EAAiBiC,yBACZ,WACSpxB,GACFA,OAGR,SAAC1L,GACS8B,IACFA,GAAI9B,MAGT66B,MAnDf,gBAsGa,GAAb,gFAwFI,0BAAmBhjB,EAAuClT,GAAW,MAYjE,GAZiE,oCACjE,gBAnFIgf,gBAA0B,EAI1B,EAAAoZ,iBAA2B,EAK3B,EAAA7N,WAA6B,GAA6BC,WAC1D,EAAA6N,mBAA6B,GAgmB7B,EAAAC,YAAc,SAAC1f,G,QACnB,EAAKwf,iBAAkB,EACvB,KACyC,QAAhC,EAAC,EAAKG,kCAA0B,eAAEC,iBACnC,EAAKD,2BAA2BC,eAAe,EAAKD,2BAA4B3f,IAEhD,QAA/B,EAAC,EAAK6f,iCAAyB,eAAEC,sBAClC,EAAKD,0BAA0BC,oBAAoB,EAAKD,0BAA2B7f,GAEzF,MAAOA,MAKL,EAAA+f,eAAiB,SAAO/f,GAAP,OAAgD,8KAE5B,QAAhC,EAAC3e,KAAKs+B,kCAA0B,eAAEK,iBACnC3+B,KAAKs+B,2BAA2BK,eAAe3+B,KAAKs+B,2BAA4B3f,IAEhD,QAA/B,EAAC3e,KAAKw+B,iCAAyB,eAAEI,sBAClC5+B,KAAKw+B,0BAA0BI,oBAAoB5+B,KAAKw+B,0BAA2B7f,GANtB,sDAWjE,OAXiE,mBAW3D3e,KAAKuG,OAAM,GAXgD,gGAejE,EAAAs4B,WAAa,SAAOtD,EAA2B5c,GAAlC,OAAgG,sKACjH,KACyC,QAAhC,EAAC3e,KAAKs+B,kCAA0B,eAAE7E,WACnCz5B,KAAKs+B,2BAA2B7E,SAASz5B,KAAKs+B,2BAA4B3f,IAE1C,QAA/B,EAAC3e,KAAKw+B,iCAAyB,eAAEM,uBAClC9+B,KAAKw+B,0BAA0BM,qBAAqB9+B,KAAKw+B,0BAA2B7f,GAE1F,MAAOA,IARwG,wDAa7G,EAAAogB,mCAAqC,SAACxD,EAA2B5c,G,QACrE,IACI,IAAMqgB,EAA0B,EAAK7I,iBAAiBvG,eAAejR,EAAE5Y,IACvE,QAA2B/I,IAAvBgiC,EAAkC,CAElC,OAAQrgB,EAAE1C,KACN,KAAKkU,GACD6O,EAAmB9E,YAAcvb,EAAErW,MACnC,MACJ,KAAK6nB,GACD6O,EAAmBC,OAAStgB,EAAErW,MAC9B,MACJ,KAAK6nB,GACD6O,EAAmBlpB,UAAY6I,EAAErW,MACjC,MACJ,KAAK6nB,GACD6O,EAAmBjK,QAAUpW,EAAErW,MAC/B,MACJ,KAAK6nB,GACD6O,EAAmBE,qBAAuBvgB,EAAErW,MAGpD,EAAK6tB,iBAAiB1G,uBAAuBuP,IAER,QAAhC,EAAC,EAAKV,kCAA0B,eAAEa,uBACJ,QAA/B,IAAKb,kCAA0B,SAAEa,oBAC7B,EAAKb,2BACL,IAAI,GAAyChP,GAAyB8P,QAClE,CAAC,EAAKC,cAAcL,IAAsBrgB,EAAE1B,cAG9D,MAAO0B,MAKL,EAAA2gB,0BAA4B,SAAC/D,EAA2B5c,KAIxD,EAAA4gB,yBAA2B,SAAChE,EAA2B5c,G,QAC3D,IACI,EAAKwX,iBAAiB5G,aAAahsB,SAAQ,SAACusB,GAAD,OAA6BA,EAAEiF,SAAWjF,EAAEG,QAAiBtR,EAAEoW,YACrE,QAAhC,EAAC,EAAKuJ,kCAA0B,eAAEa,uBACJ,QAA/B,IAAKb,kCAA0B,SAAEa,oBAC7B,EAAKb,2BACL,IAAI,GAAyChP,GAAyB8P,QAClE,EAAKI,gBAAe,GAAQ7gB,EAAE1B,aAE5C,MAAO0B,MAKL,EAAA8gB,iCAAmC,SAAClE,EAA2B5c,G,QACnE,IACI,IAAM+gB,EAAuC,EAAKvJ,iBAAiB1G,uBAAuB9Q,EAAEwW,kBACrEn4B,IAAnB0iC,IACqC,QAAhC,EAAC,EAAKpB,kCAA0B,eAAEa,uBACJ,QAA/B,IAAKb,kCAA0B,SAAEa,oBAC7B,EAAKb,2BACL,IAAI,GAAyChP,GAAyBqQ,mBAClE,CAAC,EAAKN,cAAcK,IAAkB/gB,EAAE1B,aAG1D,MAAO0B,MAKL,EAAAihB,kCAAoC,SAACrE,EAA2B5c,G,QACpE,IACI,IAAMkhB,EAA2C,EAAK1J,iBAAiBvG,eAAejR,EAAEwW,YAAYpvB,SACzE/I,IAAvB6iC,IAEA,EAAK1J,iBAAiBpG,kBAAkBpR,EAAEwW,YAAYpvB,KACjB,QAAhC,EAAC,EAAKu4B,kCAA0B,eAAEa,uBAEJ,QAA/B,IAAKb,kCAA0B,SAAEa,oBAC7B,EAAKb,2BACL,IAAI,GAAyChP,GAAyBwQ,iBAClE,CAAC,EAAKT,cAAcQ,IAAsBlhB,EAAE1B,cAG9D,MAAO0B,MAKL,EAAAohB,sBAAwB,SAACxE,EAA2B5c,G,mBACxD,IACI,OAAQA,EAAE0X,SACN,KAAKnG,IACoC,QAAhC,EAAC,EAAKoO,kCAA0B,eAAE0B,eACJ,QAA/B,IAAK1B,kCAA0B,SAAE0B,YAC7B,EAAK1B,2BACL,IAAI,GAAiC3f,EAAEd,aAAS7gB,EAAW2hB,EAAE1B,aAErE,MACJ,KAAKiT,IACoC,QAAhC,EAAC,EAAKoO,kCAA0B,eAAE2B,gBACJ,QAA/B,KAAK3B,kCAA0B,WAAE2B,aAC7B,EAAK3B,2BACL,IAAI,GAAiC3f,EAAEd,aAAS7gB,EAAW2hB,EAAE1B,aAErE,MACJ,KAAKiT,IACoC,QAAhC,GAAC,EAAKoO,kCAA0B,iBAAE4B,uBACJ,QAA/B,KAAK5B,kCAA0B,WAAE4B,oBAC7B,EAAK5B,2BACL,IAAI,GAAiC3f,EAAEd,aAAS7gB,EAAW2hB,EAAE1B,cAI/E,MAAO0B,MAKL,EAAAwhB,2BAA6B,SAAC5E,EAA2B5c,G,UAC7D,IAiBI,QAfuB3hB,IAAnB2hB,EAAE+T,cAAiD,OAAnB/T,EAAE+T,eAClC,EAAK0N,SAAS/mB,MAAQsF,EAAE+T,cAG5B,EAAKyD,iBAAiB5G,aAAtB,aAAyC5Q,EAAE4Q,mBAEVvyB,IAA7B,EAAKm5B,iBAAiBkK,KACtB,EAAKC,aAAc,IAEc,QAAhC,EAAC,EAAKhC,kCAA0B,eAAEa,uBACJ,QAA/B,IAAKb,kCAA0B,SAAEa,oBAC7B,EAAKb,2BACL,IAAI,GAAyChP,GAAyBqQ,mBAAoB,EAAKH,gBAAe,GAAO7gB,EAAE1B,aAG3H,EAAKojB,GAAGpQ,OAAQ,CAChB,IAAMgB,GAAkD,QAA1C,EAAW,EAAKqN,kCAA0B,eAAEprB,WAAWtB,YAAYuB,GAAA,EAAW+d,kCAC3El0B,IAAbi0B,IAA0BA,GAAS7zB,OAAS,GAAK6zB,KAAa,EAAKoP,GAAGnG,aAEtE,EAAKqG,oBAAoBtP,KAGnC,MAAOtS,MAKL,EAAA6hB,yBAA2B,SAACjF,EAA2B5c,G,QAC3D,KACyC,QAAhC,EAAC,EAAK2f,kCAA0B,eAAE9D,0BACJ,QAA/B,IAAK8D,kCAA0B,SAAE9D,uBAC7B,EAAK8D,2BACL3f,IAEV,MAAOA,MA5tBT,EAAK5H,eAAiB,IAAI9C,GAAA,EAC1B,EAAKwsB,YAAc,IAAI,GAGExnB,EAAarH,YAAYuB,GAAA,EAAWA,GAAA,EAAWkB,wCAEpE4E,EAAa5Q,YAAY8K,GAAA,EAAWA,GAAA,EAAWkB,sCAAuC,GAA6B2c,qBAEvH,EAAKzC,aAAetV,EAAarH,YAAYuB,GAAA,EAAWA,GAAA,EAAWkB,uCAE9DtO,EAqBD,EAAKq4B,mBAAqBr4B,MArBrB,CAEuC,IAAxCkT,EAAaxE,gBAAgBrX,QAC7B6b,EAAa1E,kBAAkB,EAAKga,cAIdtV,EAAarH,YAAYuB,GAAA,EAAWA,GAAA,EAAW4C,yCAErEkD,EAAapD,aAAaG,GAAA,EAAgB0qB,QAK9C,IAAIC,EAAuB1nB,EAAarH,YAAYuB,GAAA,EAAWA,GAAA,EAAW+d,oCACrDl0B,IAAjB2jC,GAA+C,OAAjBA,GAAyBA,EAAavjC,QAAU,GAAKujC,EAAavjC,OAAS,MACzGujC,EAAe,QAEnB1nB,EAAa5Q,YAAY8K,GAAA,EAAWA,GAAA,EAAW+d,6BAA8ByP,GAOjF,EAAKC,WAAa3nB,EAGlB,IAAMe,GAAaf,EAxC8C,OAyCjEpc,GAAA,EAAU8U,YAAYqI,GAAY,gBAClC,EAAKjD,eAAiBiD,GAAW9G,WAAW8D,QAC5C,EAAKmnB,iBAAkB,EACvB,EAAKhI,iBAAmB,IAAI,GAC5B,EAAKmK,aAAc,EACnB,EAAKO,yBAA2B,IA9CiC,EAxFzE,wEAmBI,aAAkCC,GAC9B9gC,KAAKs+B,2BAA6BwC,IApB1C,gBAwBI,eACI,OAAO9gC,KAAKogC,WAzBpB,sBA6BI,eACI,OAAOpgC,KAAK+gC,6BA9BpB,8BAkCI,eACI,OAAO/gC,KAAKghC,WAnCpB,IAsCI,aAA8B14B,GAC1BzL,GAAA,EAAUW,wBAAwB8K,EAAO,sBACzCtI,KAAKghC,UAAY14B,IAxCzB,kBA4CI,eACI,OAAOtI,KAAK4gC,aA7CpB,0BAiDI,eACI,OAAO5gC,KAAKogC,SAAWpgC,KAAKogC,SAAS1O,OAAS1xB,KAAKo+B,qBAlD3D,sBAsDI,eACI,OAAOp+B,KAAK+W,iBAvDpB,qCA2DI,eACI,OAAO/W,KAAKuuB,eA5DpB,yBA+DI,e,QACI,QAA+B,QAAxB,EAAAvuB,KAAKm2B,iBAAiBkK,UAAE,eAAEpQ,UAAyC,QAAzB,EAACjwB,KAAKm2B,iBAAiBkK,UAAE,eAAEtL,WAhEpF,uBAmEI,eACI,OAAO/0B,KAAKm+B,iBAAmBn+B,KAAKsgC,cApE5C,wBAuEI,eACI,OAAOtgC,KAAKw/B,gBAAe,KAxEnC,cA2EI,eACI,OAAOx/B,KAAKq/B,cAAcr/B,KAAKm2B,iBAAiBkK,MA5ExD,gBA+EI,eACI,OAAOrgC,KAAKq/B,cAAcr/B,KAAKm2B,iBAAiB5jB,QAhFxD,qCA8IW,SAAA2rB,wBAAwBpxB,EAAe5J,GAAc,WACxD,IACUlD,KAAK+gC,4BACP/gC,KAAKihC,YAAY,IAAIhkC,MAAM+C,KAAKswB,WAAW4Q,uBAAwBh+B,GAEvElD,KAAKygC,YAAY7P,aAAa5wB,KAAK+W,oBAAgB/Z,GAC9C,SAACmkC,GACOA,GACD,EAAKF,YAAY,IAAIhkC,MAAM,EAAKqzB,WAAW8Q,yBAA0Bl+B,GAEzE,EAAKk9B,SAAWe,EAChB,EAAKE,eAAev0B,EAAI5J,MAE3B,SAAC9B,GACE,EAAK6/B,YAAY7/B,EAAO8B,MAElC,MAAO9B,GACLpB,KAAKihC,YAAY7/B,EAAO8B,MA/JpC,oCAwKW,SAAAo+B,uBAAuBx0B,EAAe5J,GAAc,WACvD,IAEUlD,KAAK+gC,4BACP/gC,KAAKihC,YAAY,IAAIhkC,MAAM+C,KAAKswB,WAAW4Q,uBAAwBh+B,GAGvErG,GAAA,EAAUK,uBAAuB8C,KAAKogC,SAAUpgC,KAAKswB,WAAW8Q,yBAEhEphC,KAAKm2B,iBAAiB3G,KAAOxvB,KAAKogC,SAAS1M,cAC3C1zB,KAAK+gC,2BAA6B,GAA8BQ,WAAWvhC,KAAMA,KAAK4gC,YAItF5gC,KAAK+gC,2BAA2B3iB,UAAYpe,KAAKq+B,YACjDr+B,KAAK+gC,2BAA2BziB,aAAete,KAAK0+B,eACpD1+B,KAAK+gC,2BAA2BtH,SAAWz5B,KAAK6+B,WAEhD7+B,KAAK+gC,2BAA2BzG,iCAAmCt6B,KAAK++B,mCACxE/+B,KAAK+gC,2BAA2BtG,wBAA0Bz6B,KAAKs/B,0BAC/Dt/B,KAAK+gC,2BAA2BxG,uBAAyBv6B,KAAKu/B,yBAC9Dv/B,KAAK+gC,2BAA2BnG,+BAAiC56B,KAAKy/B,iCACtEz/B,KAAK+gC,2BAA2BjG,gCAAkC96B,KAAK4/B,kCACvE5/B,KAAK+gC,2BAA2B5F,oBAAsBn7B,KAAK+/B,sBAC3D//B,KAAK+gC,2BAA2B1G,yBAA2Br6B,KAAKmgC,2BAChEngC,KAAK+gC,2BAA2BvG,uBAAyBx6B,KAAKwgC,yBAE9DxgC,KAAK+gC,2BAA2B7+B,QAAQlC,KAAKogC,SAAS/mB,OACjD,WACG,EAAKgoB,eAAev0B,EAAI5J,MAE3B,SAAC9B,GACE,EAAK6/B,YAAY7/B,EAAO8B,MAElC,MAAO9B,GACLpB,KAAKihC,YAAY7/B,EAAO8B,MA3MpC,iCAqNW,SAAAs+B,oBAAoBrM,EAA2BroB,EAAe5J,GACjErG,GAAA,EAAUK,uBAAuBi4B,EAAa,eAC9C,aAA0Bn1B,KAAKyhC,wBAAwBtM,GAAcroB,EAAI5J,KAvNjF,mCAkOW,SAAAw+B,sBAAsBzb,EAAwBgL,EAAkB1R,EAAczS,EAAe5J,GAAc,WAC9G,IAKIrG,GAAA,EAAUW,wBAAwByoB,EAAgBjmB,KAAKswB,WAAWqC,YAAYJ,QAAQ,QAAS,mBAC/F11B,GAAA,EAAUW,wBAAwByzB,EAAUjxB,KAAKswB,WAAWqC,YAAYJ,QAAQ,QAAS,aACzF11B,GAAA,EAAUW,wBAAwB+hB,EAAMvf,KAAKswB,WAAWqC,YAAYJ,QAAQ,QAAS,aAErFvyB,KAAKygC,YAAY7P,aAAa5wB,KAAK+W,eAAgBkP,GAC9C,SAACkb,GACEtkC,GAAA,EAAUK,uBAAuBikC,EAAM,EAAK7Q,WAAW8Q,yBACvD,EAAKhB,SAAWe,EAChB,EAAKP,WAAWttB,mBAAqB6tB,EAAKQ,yBAEpC70B,GACFA,EAAGq0B,EAAKQ,6BAGf,SAACvgC,GACE,EAAK6/B,YAAY7/B,EAAO8B,MAElC,MAAO9B,IACLpB,KAAKihC,YAAY7/B,GAAO8B,MA1PpC,qCAmQW,SAAA0+B,wBAAwB90B,EAAe5J,GAC1C,aAA0BlD,KAAK6hC,8BAA+B/0B,EAAI5J,KApQ1E,yCAuQiB,SAAA2+B,8B,0JAGL,OAFAhlC,GAAA,EAAUK,uBAAuB8C,KAAK+W,eAAgB/W,KAAKswB,WAAW8Q,yBACtEvkC,GAAA,EAAUW,wBAAwBwC,KAAKogC,SAAS/mB,MAAOrZ,KAAKswB,WAAW8Q,yB,SACjEphC,KAAKygC,YAAYhO,MAAMzyB,KAAK+W,eAAgB/W,KAAKogC,SAAS/mB,O,OAEhErZ,KAAKqX,U,yDA5QjB,kCAoRW,SAAAyqB,qBAAqBh1B,EAAe5J,GACvC,aAA0BlD,KAAK+hC,2BAA4Bj1B,EAAI5J,KArRvE,sCAwRW,SAAA6+B,2BACH,OAAO/hC,KAAKuG,OAAM,KAzR1B,mCAiSW,SAAAy7B,sBAAsBl1B,EAAe5J,GAAc,I,EAAA,OACtD,IACIrG,GAAA,EAAUua,gBAAgBpX,KAAK+kB,gBAC/BloB,GAAA,EAAUua,gBAAgBpX,KAAK+gC,2BAA2B1jC,cAC1DR,GAAA,EAAUK,uBAAuB8C,KAAKogC,SAAUpgC,KAAKswB,WAAW2R,sBAC3DjiC,KAAKkiC,eACNliC,KAAKihC,YAAY,IAAIhkC,MAAM+C,KAAKswB,WAAW6R,6BAA6B5P,QAAQ,YAAa,SAAUrvB,GAE5E,QAA/B,EAAAlD,KAAK+gC,kCAA0B,SAAEhE,YAAY/8B,KAAKoiC,gBAAe,IAC5D,WACG,EAAKf,eAAev0B,EAAI5J,MAE3B,SAAC9B,GACE,EAAK6/B,YAAY7/B,EAAO8B,MAElC,MAAO9B,GACLpB,KAAKihC,YAAY7/B,EAAO8B,MAjTpC,sCA0TW,SAAAm/B,yBAAyBv1B,EAAe5J,GAAc,I,EAAA,OACzD,IACIrG,GAAA,EAAUua,gBAAgBpX,KAAK+kB,gBAC/BloB,GAAA,EAAUua,gBAAgBpX,KAAK+gC,2BAA2B1jC,cAC1DR,GAAA,EAAUK,uBAAuB8C,KAAK+gC,2BAA4B/gC,KAAKswB,WAAW2R,sBAClFplC,GAAA,EAAUK,uBAAuB8C,KAAKogC,SAAUpgC,KAAKswB,WAAW2R,sBAE3DjiC,KAAKkiC,eACNliC,KAAKihC,YAAY,IAAIhkC,MAAM+C,KAAKswB,WAAW6R,6BAA6B5P,QAAQ,YAAa,SAAUrvB,GAE5E,QAA/B,EAAAlD,KAAK+gC,kCAA0B,SAAEhE,YAAY/8B,KAAKsiC,mBAAkB,IAC/D,WACG,EAAKjB,eAAev0B,EAAI5J,MAE3B,SAAC9B,GACE,EAAK6/B,YAAY7/B,EAAO8B,MAElC,MAAO9B,GACLpB,KAAKihC,YAAY7/B,EAAO8B,MA5UpC,kCAsVW,SAAAq/B,qBAAqBjF,EAAgBxwB,EAAe5J,GAAc,I,EAAA,OACrE,IACIrG,GAAA,EAAUua,gBAAgBpX,KAAK+kB,gBAC/BloB,GAAA,EAAUua,gBAAgBpX,KAAK+gC,2BAA2B1jC,cAC1DR,GAAA,EAAUW,wBAAwB8/B,EAAQt9B,KAAKswB,WAAWqC,YAAYJ,QAAQ,QAAS,WACvF11B,GAAA,EAAUK,uBAAuB8C,KAAKogC,SAAUpgC,KAAKswB,WAAW2R,sBAE3DjiC,KAAKwiC,SACNxiC,KAAKihC,YAAY,IAAIhkC,MAAM+C,KAAKswB,WAAW2R,sBAAuB/+B,GAGjElD,KAAKqgC,GAAGpQ,QAAUjwB,KAAKqgC,GAAGt6B,KAAOu3B,GAClCt9B,KAAKihC,YAAY,IAAIhkC,MAAM+C,KAAKswB,WAAWmS,4BAA4BlQ,QAAQ,YAAa,SAAUrvB,IAI1F,IADOlD,KAAKm2B,iBAAiBxG,oBAAoB2N,IAE7Dt9B,KAAKihC,YAAY,IAAIhkC,MAAM+C,KAAKswB,WAAWoS,2BAA4Bx/B,GAE5C,QAA/B,EAAAlD,KAAK+gC,kCAA0B,SAAEhE,YAAY/8B,KAAK2iC,eAAerF,GAAQ,IAAQ,WAC7E,EAAK+D,eAAev0B,EAAI5J,MAEvB,SAAC9B,GACE,EAAK6/B,YAAY7/B,EAAO8B,MAElC,MAAO9B,GACLpB,KAAKihC,YAAY7/B,EAAO8B,MAhXpC,oCA0XW,SAAA0/B,uBAAuBtF,EAAuCxwB,EAAe5J,GAAc,I,EAAA,OAC9F,IAEI,GADArG,GAAA,EAAUua,gBAAgBpX,KAAK+kB,gBACzB/kB,KAAKw+B,2BAA6BlB,EAAOuF,eAAe,MAE1D,aAA0B7iC,KAAK8iC,2BAA2BxF,GAAyBxwB,EAAI5J,OACpF,CACHrG,GAAA,EAAUua,gBAAgBpX,KAAK+gC,2BAA2B1jC,cAC1DR,GAAA,EAAUK,uBAAuB8C,KAAKogC,SAAUpgC,KAAKswB,WAAW2R,sBAC3DjiC,KAAKkiC,eACNliC,KAAKihC,YAAY,IAAIhkC,MAAM+C,KAAKswB,WAAWmS,4BAA4BlQ,QAAQ,YAAa,WAAYrvB,GAE5G,IAAIwwB,EAAwB,GAC5B,GAAsB,kBAAX4J,EACP5J,EAAgB4J,OACb,GAAIA,EAAOuF,eAAe,MAAO,CAEpCnP,EADkC4J,EACNv3B,QACzB,GAAIu3B,EAAOuF,eAAe,UAAW,CAExCnP,EADoB4J,EACCA,OAEzBzgC,GAAA,EAAUW,wBAAwBk2B,EAAe1zB,KAAKswB,WAAWqC,YAAYJ,QAAQ,QAAS,YAG/E,IADOvyB,KAAKuvB,aAAaM,WAAU,SAACC,GAAD,OAAoBA,EAAE/pB,KAAO2tB,MAE3E1zB,KAAKihC,YAAY,IAAIhkC,MAAM+C,KAAKswB,WAAWoS,2BAA4Bx/B,GAE5C,QAA/B,EAAAlD,KAAK+gC,kCAA0B,SAAEhE,YAAY/8B,KAAK+iC,gBAAgBrP,IAAiB,WAC/E,EAAK2N,eAAev0B,EAAI5J,MAEvB,SAAC9B,GACE,EAAK6/B,YAAY7/B,EAAO8B,OAGtC,MAAO9B,IACLpB,KAAKihC,YAAY7/B,GAAO8B,MA9ZpC,qCAuaW,SAAA8/B,wBAAwBl2B,EAAe5J,GAAc,I,EAAA,OACxD,IACIrG,GAAA,EAAUua,gBAAgBpX,KAAK+kB,gBAC/BloB,GAAA,EAAUua,gBAAgBpX,KAAK+gC,2BAA2B1jC,cAC1DR,GAAA,EAAUK,uBAAuB8C,KAAKogC,SAAUpgC,KAAKswB,WAAW2R,sBAC3DjiC,KAAKkiC,eACNliC,KAAKihC,YAAY,IAAIhkC,MAAM+C,KAAKswB,WAAW6R,6BAA6B5P,QAAQ,YAAa,WAAYrvB,GAE9E,QAA/B,EAAAlD,KAAK+gC,kCAA0B,SAAEhE,YAAY/8B,KAAKoiC,gBAAe,IAAS,WACtE,EAAKf,eAAev0B,EAAI5J,MAEvB,SAAC9B,GACE,EAAK6/B,YAAY7/B,EAAO8B,MAElC,MAAO9B,GACLpB,KAAKihC,YAAY7/B,EAAO8B,MAtbpC,wCA+bW,SAAA+/B,2BAA2Bn2B,EAAe5J,GAAc,I,EAAA,OAC3D,IACIrG,GAAA,EAAUua,gBAAgBpX,KAAK+kB,gBAC/BloB,GAAA,EAAUua,gBAAgBpX,KAAK+gC,2BAA2B1jC,cAC1DR,GAAA,EAAUK,uBAAuB8C,KAAKogC,SAAUpgC,KAAKswB,WAAW2R,sBAC3DjiC,KAAKkiC,eACNliC,KAAKihC,YAAY,IAAIhkC,MAAM+C,KAAKswB,WAAW6R,6BAA6B5P,QAAQ,YAAa,eAAgBrvB,GAElF,QAA/B,EAAAlD,KAAK+gC,kCAA0B,SAAEhE,YAAY/8B,KAAKsiC,mBAAkB,IAAS,WACzE,EAAKjB,eAAev0B,EAAI5J,MAEvB,SAAC9B,GACE,EAAK6/B,YAAY7/B,EAAO8B,MAElC,MAAO9B,GACLpB,KAAKihC,YAAY7/B,EAAO8B,MA9cpC,oCAwdW,SAAAggC,uBAAuB5F,EAAgBxwB,EAAe5J,GAAc,I,EAAA,OACvE,IACIrG,GAAA,EAAUua,gBAAgBpX,KAAK+kB,gBAC/BloB,GAAA,EAAUua,gBAAgBpX,KAAK+gC,2BAA2B1jC,cAC1DR,GAAA,EAAUW,wBAAwB8/B,EAAQt9B,KAAKswB,WAAWqC,YAAYJ,QAAQ,QAAS,WACvF11B,GAAA,EAAUK,uBAAuB8C,KAAKogC,SAAUpgC,KAAKswB,WAAW2R,sBAE3DjiC,KAAKwiC,SACNxiC,KAAKihC,YAAY,IAAIhkC,MAAM+C,KAAKswB,WAAW2R,sBAAuB/+B,GAGjElD,KAAKqgC,GAAGpQ,QAAUjwB,KAAKqgC,GAAGt6B,KAAOu3B,GAClCt9B,KAAKihC,YAAY,IAAIhkC,MAAM+C,KAAKswB,WAAWmS,4BAA4BlQ,QAAQ,YAAa,SAAUrvB,IAI1F,IADOlD,KAAKm2B,iBAAiBxG,oBAAoB2N,IAE7Dt9B,KAAKihC,YAAY,IAAIhkC,MAAM+C,KAAKswB,WAAWoS,2BAA4Bx/B,GAE5C,QAA/B,EAAAlD,KAAK+gC,kCAA0B,SAAEhE,YAAY/8B,KAAK2iC,eAAerF,GAAQ,IAAS,WAC9E,EAAK+D,eAAev0B,EAAI5J,MAEvB,SAAC9B,GACE,EAAK6/B,YAAY7/B,EAAO8B,MAElC,MAAO9B,GACLpB,KAAKihC,YAAY7/B,EAAO8B,MAlfpC,kCA4fW,SAAAigC,qBAAqB7+B,EAAiBwI,EAAe5J,GAAc,I,EAAA,OACtE,IACIrG,GAAA,EAAUua,gBAAgBpX,KAAK+kB,gBAC/BloB,GAAA,EAAUua,gBAAgBpX,KAAK+gC,2BAA2B1jC,cAC1DR,GAAA,EAAUW,wBAAwB8G,EAAStE,KAAKswB,WAAWqC,YAAYJ,QAAQ,QAAS,YACxF11B,GAAA,EAAUK,uBAAuB8C,KAAKogC,SAAUpgC,KAAKswB,WAAW2R,sBAC3DjiC,KAAKwiC,SACNxiC,KAAKihC,YAAY,IAAIhkC,MAAM+C,KAAKswB,WAAW2R,sBAAuB/+B,GAGlEoB,EAAQlH,OAAS4C,KAAK6gC,0BACtB7gC,KAAKihC,YAAY,IAAIhkC,MAAM+C,KAAKswB,WAAWqC,YAAYJ,QAAQ,QAAS,mBAAoBrvB,GAEjE,QAA/B,EAAAlD,KAAK+gC,kCAA0B,SAAEhE,YAAY/8B,KAAKojC,kBAAkB9+B,IAAW,WAC3E,EAAK+8B,eAAev0B,EAAI5J,MAEvB,SAAC9B,GACE,EAAK6/B,YAAY7/B,EAAO8B,MAElC,MAAO9B,GACLpB,KAAKihC,YAAY7/B,EAAO8B,MAhhBpC,iCA0hBW,SAAAq9B,oBAAoBtP,EAAkBnkB,EAAe5J,GAAc,I,EAAA,OACtE,IACIrG,GAAA,EAAUua,gBAAgBpX,KAAK+kB,gBAC/BloB,GAAA,EAAUua,gBAAgBpX,KAAK+gC,2BAA2B1jC,cAC1DR,GAAA,EAAUW,wBAAwByzB,EAAUjxB,KAAKswB,WAAWqC,YAAYJ,QAAQ,QAAS,aACzF11B,GAAA,EAAUK,uBAAuB8C,KAAKogC,SAAUpgC,KAAKswB,WAAW2R,sBAC3DjiC,KAAKwiC,SACNxiC,KAAKihC,YAAY,IAAIhkC,MAAM+C,KAAKswB,WAAW2R,sBAAuB/+B,GAEvC,QAA/B,EAAAlD,KAAK+gC,kCAA0B,SAAEhE,YAAY/8B,KAAKqjC,yBAAyBpS,IAAY,WACnF,EAAKoQ,eAAev0B,EAAI5J,MAEvB,SAAC9B,GACE,EAAK6/B,YAAY7/B,EAAO8B,MAElC,MAAO9B,GACLpB,KAAKihC,YAAY7/B,EAAO8B,MA1iBpC,wBA8iBW,SAAA7F,aACH,OAAO2C,KAAK+kB,iBA/iBpB,qBAkjBW,SAAA1N,QAAQvR,G,MACP9F,KAAK3C,aAGT2C,KAAK+kB,gBAAiB,EACX,QAAX,EAAA/kB,KAAK4iB,cAAM,SAAErc,QACbvG,KAAK4gC,gBAAa5jC,EAClBgD,KAAKuuB,kBAAevxB,EACpBgD,KAAK+W,oBAAiB/Z,EACtBgD,KAAKogC,cAAWpjC,EAChBgD,KAAKghC,eAAYhkC,EACjBgD,KAAKygC,iBAAczjC,EACnBgD,KAAKm+B,iBAAkB,EACvBn+B,KAAKsgC,aAAc,EACnBtgC,KAAKm2B,sBAAmBn5B,KAhkBhC,iCAmkBI,eACI,OAAOgD,KAAKw+B,4BApkBpB,0CAukBiB,SAAA8E,6BAA6BxkB,G,8JAChC9e,KAAKw+B,0B,gBACP,O,SAAMx+B,KAAKw+B,0BAA0Bj4B,Q,OAEzCvG,KAAKw+B,0BAA4B1f,EACjC9e,KAAKw+B,0BAA0BrM,aAAenyB,K,yDA5kBtD,4BA+kBI,eACI,IADuB,EACjBujC,EAAiBvjC,KAAKimB,eACtB6J,EAAgC9vB,KAAKuvB,aAAahD,KAAI,SAACiX,GACzD,MAAO,CACHz9B,GAAIy9B,EAAKz9B,GACTq0B,kBAAmBoJ,EAAKpJ,kBACxB3jB,MAAO+sB,EAAK/sB,UAGdgtB,EAAkC,GATjB,eAUL,GAA6BC,wBAVxB,IAUvB,2BAAuE,KAA5DznB,EAA4D,QAC7D0nB,GAAc3jC,KAAKkT,WAAWtB,YAAYqK,EAAK,IACzC,KAAR0nB,KACAF,EAAMxnB,GAAO0nB,KAbE,gCAiBvB,MAD+B,CAAE59B,GAAIw9B,EAAQhU,aAAcO,EAAG8T,uBAAwBH,KA/lB9F,0BAmmBW,SAAAvG,eACH,IAAMjM,EAAsBjxB,KAAKqgC,GAAMrgC,KAAKqgC,GAAGnG,YAAc,mBAC7D,OAAOxkB,KAAKE,UAAU,CAElB7P,GAAI,IACJkrB,WACAyC,cAAe1zB,KAAKogC,SAAS1M,cAC7BhC,OAAQ1xB,KAAKogC,SAAS1O,OACtB7wB,KAAMqvB,OA3mBlB,qCA2zBY,SAAAuR,wBAAwBtM,GAE5B,QAAuBn4B,IADsBgD,KAAKm2B,iBAAiB1G,uBAAuB0F,IAEhFn1B,KAAKw+B,0BAA2B,CAClC,IAAMqF,EAAmB7jC,KAAK6jC,iBAE9B,OADAA,EAAiBtU,aAAe,CAAC4F,GAC1Bn1B,KAAKw+B,0BAA0BsF,sBAAsBD,EAAkB,WAj0B9F,wCAs0BY,SAAAf,2BAA2B3N,GAC/Bn1B,KAAKm2B,iBAAiBpG,kBAAkBoF,EAAYpvB,IACpD,IAAM89B,EAAmB7jC,KAAK6jC,iBAE9B,OADAA,EAAiBtU,aAAe,CAAC4F,GAC1Bn1B,KAAKw+B,0BAA0BsF,sBAAsBD,EAAkB,WA10BtF,mBA60BkB,SAAAt9B,MAAM8Q,G,kKAGZ,O,SADArX,KAAKm+B,iBAAkB,E,SACc,QAArC,EAAMn+B,KAAK+gC,kCAA0B,eAAEx6B,Q,OACvCvG,KAAK+gC,gCAA6B/jC,EACH,QAA/B,EAAAgD,KAAKs+B,kCAA0B,SAAEjnB,U,mEAKjCA,GACArX,KAAKqX,U,kEAx1BjB,mBA61BI,e,MACI,OAAOrX,KAAKm+B,mBAA4C,QAAzB,EAACn+B,KAAKm2B,iBAAiBkK,UAAE,eAAEtL,WA91BlE,yBAi2BI,e,MACI,OAAO/0B,KAAKm+B,kBAA2C,QAA5B,EAAIn+B,KAAKm2B,iBAAiBkK,UAAE,eAAEpQ,UAl2BjE,4BAq2BY,SAAAoR,eAAev0B,EAAS5J,GAC5B,GAAM4J,EAAI,CACN,IACIA,IACF,MAAO6R,GACCzb,GACFA,EAAIyb,GAGZ7R,OAAK9P,KA92BjB,yBAk3BY,SAAAikC,YAAY7/B,EAAY8B,GAC5B,GAAMA,EACF,GAAI9B,aAAiBnE,MAAO,CACxB,IAAMmH,EAAoBhD,EAC1B8B,EAAIkB,EAAWrH,KAAO,KAAOqH,EAAWE,cAGxCpB,EAAI9B,KAz3BpB,4BA+3BY,SAAAo+B,eAAeuE,GAAoB,WAEjCxU,EAA8BvvB,KAAKm2B,iBAAiB5G,aAAahD,KAAI,SAACuD,GACxE,OAAO,EAAKuP,cAAcvP,MAE9B,OAAKiU,EAGMxU,EAFAA,EAAaS,QAAO,SAACF,GAAD,OAAiC,IAAbA,EAAEG,YAr4B7D,2BA24BY,SAAAoP,cAAcvP,GAClB,OAAO,IAAI,GAAYA,EAAE/pB,GAAI+pB,EAAEsH,OAAQtH,EAAEoK,YAAapK,EAAEG,OAAQH,EAAEiF,QAASjF,EAAEqK,WAAYrK,EAAEsK,kBAAmBtK,EAAErZ,SA54BxH,+BA+4BY,SAAA6rB,kBAAkBvN,GAItB,OAHAl4B,GAAA,EAAUW,wBAAwBwC,KAAKogC,SAAS1O,OAAQ,kBACxD70B,GAAA,EAAUW,wBAAwBwC,KAAKogC,SAAS1M,cAAe,iBAExDhe,KAAKE,UAAU,CAClBygB,QAASlG,GAETuD,cAAe1zB,KAAKogC,SAAS1M,cAC7B+C,OAAQz2B,KAAKogC,SAAS1O,OACtB7wB,KAAMqvB,GACN5nB,MAAOysB,MAz5BnB,4BA65BY,SAAA4N,eAAejP,EAAuBqB,GAI1C,OAHAl4B,GAAA,EAAUW,wBAAwBwC,KAAKogC,SAAS1O,OAAQ,kBACxD70B,GAAA,EAAUW,wBAAwBk2B,EAAe,iBAE1Che,KAAKE,UAAU,CAClBygB,QAASlG,GAETuD,cAAeA,EACf+C,OAAQz2B,KAAKogC,SAAS1O,OACtB7wB,KAAMqvB,GACN5nB,MAAOysB,MAv6BnB,4BA26BY,SAAAqN,eAAenN,GAInB,OAHAp4B,GAAA,EAAUW,wBAAwBwC,KAAKogC,SAAS1O,OAAQ,kBACxD70B,GAAA,EAAUW,wBAAwBwC,KAAKogC,SAAS1M,cAAe,iBAExDhe,KAAKE,UAAU,CAClBygB,QAASlG,GAETuD,cAAe1zB,KAAKogC,SAAS1M,cAC7B+C,OAAQz2B,KAAKogC,SAAS1O,OACtB7wB,KAAMqvB,GACN5nB,MAAO2sB,MAr7BnB,6BAy7BY,SAAA8N,gBAAgBrP,GAIpB,OAHA72B,GAAA,EAAUW,wBAAwBwC,KAAKogC,SAAS1O,OAAQ,kBACxD70B,GAAA,EAAUW,wBAAwBk2B,EAAe,iBAE1Che,KAAKE,UAAU,CAClBygB,QAASlG,GAETuD,cAAeA,EACf+C,OAAQz2B,KAAKogC,SAAS1O,OACtB7wB,KAAMqvB,OAl8BlB,sCAs8BY,SAAAmT,yBAAyBpS,GAK7B,OAJAp0B,GAAA,EAAUW,wBAAwBwC,KAAKogC,SAAS1O,OAAQ,kBACxD70B,GAAA,EAAUW,wBAAwByzB,EAAU,YAC5Cp0B,GAAA,EAAUW,wBAAwBwC,KAAKogC,SAAS1M,cAAe,iBAExDhe,KAAKE,UAAU,CAClBygB,QAASlG,GACTc,WAEAyC,cAAe1zB,KAAKogC,SAAS1M,cAC7B+C,OAAQz2B,KAAKogC,SAAS1O,OACtB7wB,KAAMqvB,GACN5nB,MAAO2oB,MAl9BnB,+BAs9BY,SAAAmS,kBAAkB9+B,GAKtB,OAJAzH,GAAA,EAAUW,wBAAwBwC,KAAKogC,SAAS1O,OAAQ,kBACxD70B,GAAA,EAAUW,wBAAwBwC,KAAKogC,SAAS1M,cAAe,iBAC/D72B,GAAA,EAAUW,wBAAwB8G,EAAS,WAEpCoR,KAAKE,UAAU,CAElB8d,cAAe1zB,KAAKogC,SAAS1M,cAC7BhC,OAAQ1xB,KAAKogC,SAAS1O,OACtBoC,KAAMxvB,EACNzD,KAAMqvB,SAh+BlB,kBAAsC,IC5IzB,GAAb,WAKI,4BAAmBtZ,GAAyB,qCACxC5W,KAAKgkC,gBAAkBptB,EAN/B,oEASc,SAAAyqB,eAAev0B,EAAc5J,GACnC,GAAM4J,EAAI,CACN,IACIA,IACF,MAAO6R,GACCzb,GACFA,EAAIyb,GAGZ7R,OAAK9P,KAlBjB,yBAsBc,SAAAikC,YAAY7/B,EAAY8B,GAC9B,GAAMA,EACF,GAAI9B,aAAiBnE,MAAO,CACxB,IAAMmH,EAAoBhD,EAC1B8B,EAAIkB,EAAWrH,KAAO,KAAOqH,EAAWE,cAGxCpB,EAAI9B,OA7BpB,sB,+XH4BA,SAAY+7B,GACR,2BAAU,+BAAY,6BAD1B,CAAYA,QAAW,K,II9BX8G,GAYAC,GJyBN,G,kHAGF,2CAAmBjrB,EAAuCrC,EAA2ButB,GAAmC,kEACpH,cAAMlrB,EAAcrC,IACfwtB,gBAAkBjH,GAAYkH,SAC7BF,IACF,EAAKG,eAAiBH,EACtB,EAAK5F,eAAiB,WAClB,EAAK6F,gBAAkBjH,GAAYoH,WAGvC,EAAK5F,eAAiB,WAClB,EAAKyF,gBAAkBjH,GAAYkH,UAGvC,EAAKG,WAAa,SAAOC,EAA2B9lB,GAAlC,OAAwE,iLAI1E,QAAZ,EAAIA,EAAEjY,cAAM,eAAEia,cAJwE,gBAKlF,OALkF,SAK5E3gB,KAAK0kC,eALuE,OAOlF1kC,KAAK2kC,gBAAgBhmB,EAAEjY,OAAOia,cAPoD,uDAW1F,EAAK8Y,SAAW,SAAO8B,EAA0B5c,GAAjC,OAA+E,2KACvF3e,KAAKokC,kBAAoBjH,GAAYkH,SADkD,gBAGnF,OAHmF,kBAG7ErkC,KAAK0kC,eAHwE,sDAKnF1kC,KAAKokC,gBAAkBjH,GAAYkH,SALgD,iEAxBiB,E,wEAmCxH,eACI,OAAOrkC,KAAKokC,iB,IAGhB,aAAiBQ,GACb5kC,KAAKokC,gBAAkBQ,I,0BAGpB,SAAAjlB,eACH3f,KAAKokC,gBAAkBjH,GAAYoH,Y,6BAG1B,SAAA3kB,kB,oKAET,OADA5f,KAAKokC,gBAAkBjH,GAAYkH,S,SAC7BrkC,KAAK0kC,e,sFAOP,SAAAC,gBAAgBvjC,G,UACpB,IACI,GAAMpB,KAAKskC,eAAe7K,SAAU,CAChC,IAAMD,EAAwD,IAAI,GACjD,QAD0F,EAClG,OAALp4B,QAAK,IAALA,OAAK,EAALA,EAAO0E,cAAM,QAAIib,GAAA,EAAmB9jB,MACjB,QADsB,EACpC,OAALmE,QAAK,IAALA,OAAK,EAALA,EAAOuf,oBAAY,QAAIvf,EACP,QADY,EACvB,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOwf,iBAAS,QAAI,KAAsB6a,kBAC1Cz+B,EACK,OAALoE,QAAK,IAALA,OAAK,EAALA,EAAO6b,WAEXjd,KAAKskC,eAAe7K,SAASz5B,KAAKskC,eAAgB9K,IAExD,MAAO7a,O,0BAKC,SAAA+lB,e,0KAGN,O,SADA1kC,KAAK2Z,iC,SACc,QAAnB,EAAM3Z,KAAKsX,gBAAQ,eAAElU,a,OACrBpD,KAAKokC,gBAAkBjH,GAAYkH,S,qJAhFC,IA2FnC,GAAb,4FAYI,gCAAmBztB,GAAyB,uDACxC,cAAMA,IATFmO,gBAA0B,EAE1B,EAAA8f,gBAA0B,EAE1B,EAAAvU,WAA6B,GAA6BC,WAC1D,EAAAuU,mBAA6B,mCAC7B,EAAAC,sBAAgC,SAIpC,EAAKhuB,eAAiB,IAAI9C,GAAA,EAFc,EAZhD,kEAiBI,eACI,OAAOjU,KAAK+W,iBAlBpB,qCAqBI,eACI,OAAO/W,KAAK08B,gCAtBpB,wBAyBI,e,MACI,OAA4B,QAA5B,EAAO18B,KAAKk8B,wBAAgB,eAAE3M,eA1BtC,mCAgDW,SAAAmS,sBAAsBvP,EAAmBlB,EAAkB+T,EAA4BC,EAAmBC,GAAiB,WAE9H,IAEI,GAA4B,kBAAjB/S,EAA2B,CAElCt1B,GAAA,EAAUK,uBAAuBi1B,EAAcnyB,KAAKswB,WAAWqC,YAAYJ,QAAQ,QAAS,oBAC5F11B,GAAA,EAAUW,wBAAwByzB,EAAUjxB,KAAKswB,WAAWqC,YAAYJ,QAAQ,QAAS,aAEnFvyB,KAAKk8B,kBACPl8B,KAAKihC,YAAY,IAAIhkC,MAAM+C,KAAKswB,WAAW4Q,uBAAwBgE,GAGvE,IAAI3lB,GAAeylB,OACNhoC,IAATuiB,IAA+B,OAATA,IAA0B,KAATA,KAAeA,GAAO,GAA6ByR,qBAG9FhxB,KAAKmlC,4BAA8B,GAAwBC,iBACvDplC,KAAK8kC,mBACL9kC,KAAK+kC,uBACT/kC,KAAKmlC,4BAA4BtvB,aAAaG,GAAA,EAAgB0qB,QAC9D1gC,KAAKmlC,4BAA4B5wB,kBAAkBgL,IACnDvf,KAAKmlC,4BAA4B98B,YAAY8K,GAAA,EAAWA,GAAA,EAAWkB,sCAAuCkL,IAC1Gvf,KAAKmlC,4BAA4B98B,YAAY8K,GAAA,EAAWA,GAAA,EAAW+d,6BAA8BD,GAEjG,IAAMrd,GAAmB5T,KAAK+W,eAAenF,YAAYuB,GAAA,EAAWie,6BAChExd,IACA5T,KAAKmlC,4BAA4B98B,YAAY8K,GAAA,EAAWA,GAAA,EAAWie,6BAA8Bxd,IAErG,IAAMyxB,GAA6BrlC,KAAK+W,eAAenF,YAAYuB,GAAA,EAAWO,8BAC1E2xB,IACArlC,KAAKmlC,4BAA4B98B,YAAY8K,GAAA,EAAWA,GAAA,EAAWO,8BAA+B2xB,IAItGrlC,KAAKk8B,iBAAmB,IAAI,GAAiBl8B,KAAKmlC,6BAClDnlC,KAAKk8B,iBAAiB4E,uBAAyB9gC,KAE/CA,KAAKk8B,iBAAiBwF,sBAClBvP,EACAlB,EACA1R,IACC,SAAC7Y,GAEOA,GACD,EAAKu6B,YAAY,IAAIhkC,MAAM,EAAKqzB,WAAW8Q,yBAA0B8D,GAGzE,EAAKC,4BAA4B7xB,mBAAqB5M,EAGtD,EAAKw1B,iBAAiBoF,wBACjB,WACG,EAAKD,eAAe4D,EAAQC,MAE/B,SAAC9jC,GACE,EAAK6/B,YAAY7/B,EAAO8jC,SAInC,SAAC9jC,GACE,EAAK6/B,YAAY7/B,EAAO8jC,UAGD,kBAAjB/S,GAEdt1B,GAAA,EAAUK,uBAAuBi1B,EAAcnyB,KAAKswB,WAAWqC,YAAYJ,QAAQ,QAAS,oBAC5F11B,GAAA,EAAUW,wBAAwByzB,EAAUjxB,KAAKswB,WAAWqC,YAAYJ,QAAQ,QAAS,aAGzFvyB,KAAK+W,eAAe1O,YAAY8K,GAAA,EAAW+d,4BAA6BD,GAExEjxB,KAAKk8B,iBAAmB/J,EAExBnyB,KAAKk8B,iBAAiB4E,uBAAyB9gC,KAE/CnD,GAAA,EAAUK,uBAAuB8C,KAAKk8B,iBAAkBl8B,KAAKswB,WAAW8Q,yBACxEvkC,GAAA,EAAUK,uBAAuB8C,KAAKk8B,iBAAiBiF,KAAK9nB,MAAOrZ,KAAKswB,WAAW8Q,yBAEnFphC,KAAKmlC,4BAA8BhT,EAAavP,OAEhD5iB,KAAKqhC,eAAe2D,EAAoBC,IAExCjlC,KAAKihC,YACD,IAAIhkC,MAAM+C,KAAKswB,WAAWqC,YAAYJ,QAAQ,QAAS,8BACvD0S,GAGV,MAAO7jC,IACLpB,KAAKihC,YAAY7/B,GAAyB,kBAAX4jC,EAAsBE,EAASD,MAzI1E,oCAkJW,SAAAK,uBAAuBx4B,EAAe5J,GAAc,WAEvD,aAAqD,0JAGjD,OAHiD,SAG3ClD,KAAK0kC,eAHsC,OAKjD,OALiD,SAK3C1kC,KAAKk8B,iBAAiB6F,2BALqB,OAOjD,OAPiD,SAO3C/hC,KAAKk8B,iBAAiB2F,8BAPqB,OAQjD7hC,KAAKqX,UAR4C,uDAU/CvK,EAAI5J,KA9JlB,kCAuKW,SAAAigC,qBAAqB7+B,EAAiBwI,EAAe5J,G,MAExD,IACIrG,GAAA,EAAUK,uBAAuB8C,KAAKk8B,iBAAkBl8B,KAAKswB,WAAW2R,sBACxEplC,GAAA,EAAUW,wBAAwB8G,EAAStE,KAAKswB,WAAWqC,YAAYJ,QAAQ,QAASjuB,IAEnE,QAArB,EAAAtE,KAAKk8B,wBAAgB,SAAEiH,qBAAqB7+B,EAASwI,EAAI5J,GAC3D,MAAO9B,GAELpB,KAAKihC,YAAY7/B,EAAO8B,MAhLpC,oCAyLW,SAAAqiC,uBAAuBz4B,EAAe5J,GAAc,WACvD,aAAqD,sKAE7CrG,GAAA,EAAUK,uBAAuB8C,KAAKk8B,iBAAkBl8B,KAAKswB,WAAW2R,sBACxEplC,GAAA,EAAUK,uBAAuB8C,KAAKk8B,iBAAiBiF,KAAK9nB,MAAOrZ,KAAKswB,WAAW8Q,8BAErDpkC,IAA1BgD,KAAKwlC,iBALoC,gBAMzC,OANyC,SAMnCxlC,KAAKylC,8BAN8B,OAc7C,OANA5oC,GAAA,EAAUK,uBAAuB8C,KAAKwlC,iBAAkBxlC,KAAKswB,WAAW2R,sBAEnEjiC,KAAK0lC,UACN1lC,KAAKihC,YAAY,IAAIhkC,MAAM+C,KAAKswB,WAAW2R,sBAAuB/+B,GAXzB,UAcvClD,KAAK2lC,6BAdkC,QAgB7C3lC,KAAK6kC,gBAAiB,EAhBuB,wBAmB7C,OAnB6C,0BAkB7C7kC,KAAK6kC,gBAAiB,EAlBuB,UAmBvC7kC,KAAK0kC,eAnBkC,oFAsB/C53B,EAAI5J,KAhNlB,mCAwNW,SAAA0iC,sBAAsB94B,EAAe5J,GAAc,WACtD,aAAqD,iLAExClD,KAAK6kC,eAFmC,gBAIzC,OAJyC,SAInC7kC,KAAK0kC,eAJ8B,wCAU7C,OADA1kC,KAAK6kC,gBAAiB,EATuB,SAUvC,IAAIv9B,SAAQ,SAAC/B,EAAqBlB,G,MACf,QAArB,IAAKmhC,wBAAgB,SAAE7rB,+BAA+BpU,EAASlB,MAXtB,+BAe7C,OAf6C,oCAevCrE,KAAK0kC,eAfkC,iEAiB/C53B,EAAI5J,KA1OlB,wBA6OW,SAAA7F,aACH,OAAO2C,KAAK+kB,iBA9OpB,qBAiPW,SAAA1N,QAAQvR,EAAiBgY,EAAsB5a,GAA6B,WAC/E,aAAqD,sKAC7ClD,KAAK3C,YAAe2C,KAAK6kC,eADoB,iDAIjD,OAJiD,SAI3C7kC,KAAK0kC,eAJsC,OAKjD1kC,KAAK+kB,gBAAiB,EACU,QAAhC,EAAA/kB,KAAKmlC,mCAA2B,SAAE5+B,QAClCvG,KAAK08B,mCAAgC1/B,EACrCgD,KAAK+W,oBAAiB/Z,EACtBgD,KAAKgkC,qBAAkBhnC,EACvBgD,KAAKmlC,iCAA8BnoC,EACd,QAArB,EAAAgD,KAAKk8B,wBAAgB,SAAE7kB,UACvBrX,KAAKk8B,sBAAmBl/B,EAZyB,wDAa/C8gB,EAAS5a,KA/PvB,0BAqQkB,SAAAwhC,e,0KAGN,O,SADA1kC,KAAK6kC,gBAAiB,E,SACK,QAA3B,EAAM7kC,KAAKwlC,wBAAgB,eAAE5lB,kB,OAC7B5f,KAAKwlC,sBAAmBxoC,E,gHAzQpC,yCAqRkB,SAAAyoC,8B,8LAGuBzoC,IAAzBgD,KAAKgkC,kBACLhkC,KAAKgkC,gBAAkB,GAAYltB,8BAInC9W,KAAKmlC,4BAA4BvzB,YAAYuB,GAAA,EAAWA,GAAA,EAAWC,gCAC/DpT,KAAK8kC,oBACT9kC,KAAKmlC,4BAA4B98B,YAAY8K,GAAA,EAAWA,GAAA,EAAWC,6BAA8B,IAI/FiG,EAAgBwsB,mBAAmB7lC,KAAKk8B,iBAAiBiF,KAAK9nB,OAIpE8X,GAFIA,EAAuBnxB,KAAKmlC,4BAA4BvzB,YACxDuB,GAAA,EAAWA,GAAA,EAAWO,8BAA+B,GAA6BoyB,aAC1DvT,QAAQ,WAAYvyB,KAAKk8B,iBAAiBiF,KAAK4E,uBAErEpiC,E,gBAAuBwtB,G,OAAe,GAA6B6U,W,YAAc,GAA6B3V,aAAahX,M,YAASA,GAE1IrZ,KAAKmlC,4BAA4B98B,YAAY8K,GAAA,EAAWA,GAAA,EAAWU,kCAAmClQ,GAEtG3D,KAAKwlC,iBAAmB,IAAI,GAAkCxlC,KAAKmlC,4BAA6BnlC,KAAKgkC,gBAAiBhkC,M,wBAEtH,O,oCAAMA,KAAK0kC,e,uFA/SvB,wCAuTY,SAAAiB,6BAA0B,WAC9B,OAAO,IAAIr+B,SAAQ,SAAC/B,EAAqBlB,GACrC,EAAKmhC,iBAAiB/rB,gCAAgClU,EAASlB,QAzT3E,oBA6TI,eAGI,SAAKrE,KAAKk8B,iBAAiB+J,cAAgBjmC,KAAKwlC,qBAK5CxlC,KAAK6kC,gBAAkB7kC,KAAKwlC,iBAAiB5/B,QAAUu3B,GAAYoH,WAAavkC,KAAKwlC,iBAAiB5/B,QAAUu3B,GAAY+I,aAK5HlmC,KAAKk8B,iBAAiBiK,mBA1UlC,wBAA4C,I,iZKxG/B,GAAb,0FASI,+BAAmBC,EAAkDxvB,GAAyB,8CAC1F,IAAMyvB,EAA2DD,EADyB,OAE1FvpC,GAAA,EAAU8U,YAAY00B,EAA6B,2BAEnDxpC,GAAA,EAAUW,wBACN6oC,EAA4BC,0BAC5BnzB,GAAA,EAAWA,GAAA,EAAWkB,wCAE1B,cAAMuC,EAAayvB,EAA4BnzB,WAAY,IAAIqzB,GAAA,IAC1DntB,wBAAyB,EAT4D,EATlG,4EAiCW,SAAAotB,sBAEH,OADA3pC,GAAA,EAAUK,uBAAuB8C,KAAKk8B,iBAAkB,gBACjDl8B,KAAKk8B,iBAAiB2H,mBAnCrC,8BAsCI,eACI,OAAO7jC,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWI,mCAvCtD,IA0CI,aAA8B8F,GAC1Bxc,GAAA,EAAUW,wBAAwB6b,EAAO,SACzCrZ,KAAKkT,WAAW7K,YAAY8K,GAAA,EAAWI,iCAAkC8F,KA5CjF,wBA+CI,aAAwBxN,GACpBhP,GAAA,EAAUK,uBAAuB2O,EAAG,gBACpC7L,KAAKk8B,iBAAmBrwB,IAjDhC,qCAoDI,eAGI,OAFAhP,GAAA,EAAUua,gBAAgBpX,KAAKoZ,wBAExBpZ,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWkB,wCAvDtD,sBA0DI,eACI,OAAOrU,KAAK+W,iBA3DpB,6CA8DW,SAAA0C,gCAAgC3M,EAAiB5J,GACpD,aAA0BlD,KAAKwY,oCAAoC,KAAgBkB,cAAe5M,EAAI5J,KA/D9G,4CAkEW,SAAAyW,+BAA+B7M,EAAiB5J,GACnD,aAA0BlD,KAAKyY,qCAAsC3L,EAAI5J,KAnEjF,mBAsEiB,SAAAqD,Q,oKACJvG,KAAKoZ,uB,gBACN,O,SAAMpZ,KAAKqX,SAAQ,G,wDAxE/B,mCA6EiB,SAAAysB,sBAAsBD,EAAoCxN,G,yKAGnE,OAFMoQ,EAAQzmC,KAAKsX,SACnBza,GAAA,EAAUK,uBAAuBupC,EAAM,qB,SACjCA,EAAKC,qBAAqB7C,EAAkBxN,G,yDAhF1D,8BAmFW,SAAAsQ,iBAAiBC,GACpB5mC,KAAKy5B,SAAW,SAAC36B,EAAQ6f,GACfioB,EAAYnN,UACdmN,EAAYnN,SAASmN,EAAajoB,IAG1C3e,KAAK8+B,qBAAuB,SAAChgC,EAAQ6f,GAC3BioB,EAAY9H,sBACd8H,EAAY9H,qBAAqB8H,EAAajoB,IAGtD3e,KAAK6mC,YAAc,SAAC/nC,EAAQ6f,GAClBioB,EAAY3G,cACd2G,EAAY3G,aAAa2G,EAAajoB,IAG9C3e,KAAKwkC,WAAa,SAAC1lC,EAAQ6f,GACjBioB,EAAY5G,aACd4G,EAAY5G,YAAY4G,EAAajoB,IAG7C3e,KAAKy+B,oBAAsB,SAAC3/B,EAAQ6f,GAC1BioB,EAAYnI,qBACdmI,EAAYnI,oBAAoBmI,EAAajoB,IAGrD3e,KAAK4+B,oBAAsB,SAAC9/B,EAAQ6f,GAC1BioB,EAAYhI,qBACdgI,EAAYhI,oBAAoBgI,EAAajoB,IAGrD3e,KAAKu+B,eAAiB,SAACz/B,EAAQ6f,GACrBioB,EAAYrI,gBACdqI,EAAYrI,eAAeqI,EAAajoB,IAGhD3e,KAAK2+B,eAAiB,SAAC7/B,EAAQ6f,GACrBioB,EAAYjI,gBACdiI,EAAYjI,eAAeiI,EAAajoB,MAzHxD,iCA8HW,SAAAmoB,sBACH9mC,KAAKy5B,cAAWz8B,EAChBgD,KAAK6mC,iBAAc7pC,EACnBgD,KAAKwkC,gBAAaxnC,EAClBgD,KAAKu+B,oBAAiBvhC,EACtBgD,KAAK2+B,oBAAiB3hC,EACtBgD,KAAK8+B,0BAAuB9hC,EAC5BgD,KAAKy+B,yBAAsBzhC,EAC3BgD,KAAK4+B,yBAAsB5hC,IAtInC,qBAgJoB,SAAAqa,QAAQE,GAAkB,W,4SAClCvX,KAAKoZ,uB,qDAIL7B,E,gBAEA,OADAvX,KAAKoZ,wBAAyB,E,SACxBpZ,KAAKsY,qB,OAGf,O,SAAM,EAAMjB,QAAO,UAACE,G,yDA1J5B,oCA6Jc,SAAAS,uBAAuBiB,GAC7B,OAAO,IAAIa,GAAA,EACPb,EACAjZ,KAAKkT,cAhKjB,qCAmKc,SAAA+E,wBACN8B,EACAlD,EACAD,EACAmB,GACA,IAAMiC,EAA8BpD,EACpC,OAAO,IAAImwB,GAAA,EAA+BhtB,EAAgBlD,EAAmBmD,EAAYjC,EAAkB/X,UAzKnH,uBAA2C,I,+XCV9B,GAAb,WAWI,iCAAmB4W,GAAyB,0CACxC5W,KAAKgkC,gBAAkBptB,EACvB5W,KAAK+W,eAAiB,IAAI9C,GAAA,EAC1BjU,KAAKgnC,oBAAiBhqC,EACtBgD,KAAKoZ,wBAAyB,EAftC,gFAqCW,SAAAsoB,sBAAsBvP,EAA6BrlB,EAAe5J,GACrE,IAAM+4B,EAAmB9J,EACzBt1B,GAAA,EAAUK,uBAAuB++B,EAAkB,gBAInDj8B,KAAKgnC,eAAiB,IAAI,GAAsB7U,EAAavP,OAAQ5iB,KAAKgkC,iBAC1EnnC,GAAA,EAAUK,uBAAuB8C,KAAKgnC,eAAgB,cACtDhnC,KAAKgnC,eAAeL,iBAAiB3mC,MAErC,aAA0Bi8B,EAAiBqH,6BAA6BtjC,KAAKgnC,gBAAiBl6B,EAAI5J,KA/C1G,8BAyGI,eACI,OAAOlD,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWI,mCA1GtD,IAoHI,aAA8B8F,GAC1Bxc,GAAA,EAAUW,wBAAwB6b,EAAO,SACzCrZ,KAAKkT,WAAW7K,YAAY8K,GAAA,EAAWI,iCAAkC8F,KAtHjF,qCAgII,eAGI,OAFAxc,GAAA,EAAUua,gBAAgBpX,KAAKoZ,wBAExBpZ,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWkB,wCAnItD,sBA6II,eACI,OAAOrU,KAAK+W,iBA9IpB,oCA0JW,SAAAwuB,uBAAuBz4B,EAAe5J,GACzClD,KAAKgnC,eAAevtB,gCAAgC3M,EAAI5J,KA3JhE,mCAuKW,SAAA0iC,sBAAsB94B,EAAe5J,GACxClD,KAAKgnC,eAAertB,+BAA+B7M,EAAI5J,KAxK/D,oCA8KW,SAAAoiC,uBAAuBx4B,EAAe5J,GAAc,WACvDlD,KAAKgnC,eAAeF,sBACpB,aAAqD,oOAAiBh6B,EAAI5J,KAhLlF,mBAyLW,SAAAqD,MAAMuG,EAAiBqK,GAC1Bta,GAAA,EAAUua,gBAAgBpX,KAAKoZ,wBAC/B,aAA0BpZ,KAAKqX,SAAQ,GAAOvK,EAAIqK,KA3L1D,qBAqMoB,SAAAE,QAAQE,G,yKAChBvX,KAAKoZ,uB,qDAGHpZ,KAAKgnC,e,gBACP,O,SAAMhnC,KAAKgnC,eAAezgC,Q,OAC1BvG,KAAKgnC,oBAAiBhqC,E,OAEtBua,IACAvX,KAAKoZ,wBAAyB,G,2DA9M1C,2B,6DFdA,SAAY6qB,GAGR,yBAGA,uBAGA,mBATJ,CAAYA,QAAoB,KAYhC,SAAYC,GACR,mCACA,uCACA,qCACA,yCAJJ,CAAYA,QAAkB,KAYvB,IGvBK+C,GCAAC,GJuBC,GAAb,WAUI,mBAAmBlqB,GACf,GAD8I,4BAH1I,KAAAmqB,cAA0B,GAC1B,KAAAC,cAAwB,GAGtBpqB,IACFhd,KAAKqnC,SAAWrqB,EAAKsqB,KACrBtnC,KAAKunC,WAAavqB,EAAKwqB,OACvBxnC,KAAKynC,cAAgBzqB,EAAK0qB,UAC1B1nC,KAAK2nC,cAAgB3qB,EAAK4qB,UAC1B5nC,KAAK6nC,cAAgB7qB,EAAK8qB,UAAU3jB,SAAS,YAAc+f,GAAmB6D,eAAiB7D,GAAmB8D,aAClHhoC,KAAKioC,WAA6B,SAAhBjrB,EAAKkrB,OAAoBjE,GAAqBkE,KAAuB,WAAhBnrB,EAAKkrB,OAAsBjE,GAAqBmE,OAASnE,GAAqBj8B,QAC/IgV,EAAKqrB,WAAanU,MAAMoU,QAAQtrB,EAAKqrB,YAAY,sBAC/BrrB,EAAKqrB,WAD0B,IACnD,2BAAoC,KAAzBE,EAAyB,QAChCvoC,KAAKmnC,cAAcn6B,KAAKu7B,IAFuB,gCAlBnE,+CA0BI,eACI,OAAOvoC,KAAKqnC,WA3BpB,kBA8BI,eACI,OAAOrnC,KAAKunC,aA/BpB,qBAkCI,eACI,OAAOvnC,KAAKynC,gBAnCpB,qBAsCI,eACI,OAAOznC,KAAK2nC,gBAvCpB,kBA0CI,eACI,OAAO3nC,KAAKioC,aA3CpB,qBA8CI,eACI,OAAOjoC,KAAK6nC,gBA/CpB,qBAkDI,eACI,OAAO7nC,KAAKmnC,gBAnDpB,qBAsDI,eACI,OAAOnnC,KAAKonC,kBAvDpB,a,UKrBa,GAAb,0FASI,+BAAYnV,EAAmBjV,GAAS,MACpC,GADoC,wCAChCkX,MAAMoU,QAAQtrB,GAAO,EACrB,cAAMiV,EAAWrJ,GAAA,EAAa4f,yBAAqBxrC,EAAW,IAAIiX,GAAA,IAC7Dw0B,WAAa,GAFG,sBAGFzrB,GAHE,IAGrB,6BAAyB,KAAdzf,GAAc,QACrB,EAAKkrC,WAAWz7B,KAAK,IAAI,GAAUzP,MAJlB,wCAOrB,cAAM00B,EAAWrJ,GAAA,EAAaC,SAAY7L,EAAK2D,aAAe3D,EAAK2D,aAAe,gCAAiC,IAAI1M,GAAA,GARvF,uBAT5C,6DA4BI,eACI,OAAOjU,KAAKyoC,eA7BpB,uBAA2CC,GAAA,G,yXCgD9B,GAAb,WAwHI,2BAAmBzvB,EAA4BrC,GAAyB,oCACpE,IAAMsC,EAAqCD,EAC3Cpc,GAAA,EAAU8U,YAAYuH,EAAkB,gBAEpB,OAAhBtC,IAEI5W,KAAK4W,iBADW5Z,IAAhB4Z,EACsC,qBAAXpS,YAA0BxH,EAAY,GAAYyU,2BAE1DmF,GAI3B5W,KAAK+W,eAAiBmC,EAAiBhG,WAAW8D,QAClDhX,KAAKgS,cAAe,EACpBhS,KAAK2oC,kBAAmB,EACxB3oC,KAAKiX,sBAAwB,IAAI2xB,GAAA,EACjC5oC,KAAK6oC,sBAAwB,IAAIC,GAAA,EACjC9oC,KAAK+oC,4BAzIb,qEAwEI,eACI,OAAO/oC,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWI,mCAzEtD,IAmFI,aAA8B8F,GAC1Bxc,GAAA,EAAUW,wBAAwB6b,EAAO,SACzCrZ,KAAKkT,WAAW7K,YAAY8K,GAAA,EAAWI,iCAAkC8F,KArFjF,sBA+FI,eACI,OAAOrZ,KAAK+W,iBAhGpB,oCA0GI,eACI,OAAO/W,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAW4a,qDAAuD,kDA3G7G,uBAyJW,SAAAib,UAAUlV,GAAY,MACnBmV,GAAsB,oBACvB,QAAU,oBADa,eAEvB,QAAU,qBAFa,eAGvB,QAAU,sBAHa,eAIvB,QAAU,mBAJa,eAKvB,QAAU,qBALa,eAMvB,QAAU,qBANa,eAOvB,QAAU,sBAPa,eAQvB,QAAU,oBARa,eASvB,QAAU,qBATa,eAUvB,QAAU,oBAVa,eAWvB,QAAU,qBAXa,eAYvB,QAAU,oBAZa,eAavB,QAAU,qBAba,eAcvB,QAAU,qBAda,eAevB,QAAU,oBAfa,eAgBvB,QAAU,sBAhBa,eAiBvB,QAAU,wBAjBa,eAkBvB,QAAU,wBAlBa,eAmBvB,QAAU,qBAnBa,eAoBvB,QAAU,uBApBa,eAqBvB,QAAU,oBArBa,eAsBvB,QAAU,wBAtBa,eAuBvB,QAAU,sBAvBa,eAwBvB,QAAU,mBAxBa,eAyBvB,QAAU,qBAzBa,eA0BvB,QAAU,sBA1Ba,eA2BvB,QAAU,uBA3Ba,eA4BvB,QAAU,qBA5Ba,eA6BvB,QAAU,qBA7Ba,eA8BvB,QAAU,mBA9Ba,eA+BvB,QAAU,sBA/Ba,eAgCvB,QAAU,sBAhCa,eAiCvB,QAAU,sBAjCa,eAkCvB,QAAU,oBAlCa,eAmCvB,QAAU,wBAnCa,eAoCvB,QAAU,qBApCa,eAqCvB,QAAU,oBArCa,eAsCvB,QAAU,qBAtCa,eAuCvB,QAAU,qBAvCa,eAwCvB,QAAU,oBAxCa,eAyCvB,QAAU,qBAzCa,eA0CvB,QAAU,uBA1Ca,eA2CvB,QAAU,wBA3Ca,eA4CvB,QAAU,uBA5Ca,eA6CvB,QAAU,oBA7Ca,eA8CvB,QAAU,sBA9Ca,eA+CvB,QAAU,sBA/Ca,eAgDvB,QAAU,sBAhDa,eAiDvB,QAAU,sBAjDa,eAkDvB,QAAU,sBAlDa,eAmDvB,QAAU,sBAnDa,eAoDvB,QAAU,sBApDa,eAqDvB,QAAU,qBArDa,eAsDvB,QAAU,wBAtDa,eAuDvB,QAAU,yBAvDa,eAwDvB,QAAU,oBAxDa,eAyDvB,QAAU,sBAzDa,eA0DvB,QAAU,qBA1Da,eA2DvB,QAAU,sBA3Da,eA4DvB,QAAU,sBA5Da,eA6DvB,QAAU,qBA7Da,eA8DvB,QAAU,qBA9Da,eA+DvB,QAAU,mBA/Da,eAgEvB,QAAU,sBAhEa,eAiEvB,QAAU,qBAjEa,eAkEvB,SAAW,uBAlEY,eAmEvB,QAAU,wBAnEa,eAoEvB,QAAU,sBApEa,eAqEvB,QAAU,sBArEa,eAsEvB,QAAU,sBAtEa,eAuEvB,QAAU,oBAvEa,eAwEvB,QAAU,mBAxEa,eAyEvB,QAAU,sBAzEa,eA0EvB,QAAU,oBA1Ea,eA2EvB,QAAU,sBA3Ea,eA4EvB,QAAU,yBA5Ea,eA6EvB,QAAU,qBA7Ea,eA8EvB,QAAU,oBA9Ea,eA+EvB,QAAU,wBA/Ea,eAgFvB,QAAU,sBAhFa,eAiFvB,QAAU,qBAjFa,eAkFvB,QAAU,sBAlFa,eAmFvB,QAAU,qBAnFa,eAoFvB,QAAU,sBApFa,eAqFvB,QAAU,uBArFa,eAsFvB,QAAU,sBAtFa,eAuFvB,QAAU,qBAvFa,eAwFvB,QAAU,qBAxFa,eAyFvB,QAAU,qBAzFa,eA0FvB,QAAU,wBA1Fa,eA2FvB,QAAU,sBA3Fa,eA4FvB,QAAU,uBA5Fa,eA6FvB,QAAU,yBA7Fa,eA8FvB,QAAU,yBA9Fa,eA+FvB,QAAU,sBA/Fa,eAgGvB,QAAU,qBAhGa,eAiGvB,QAAU,wBAjGa,eAkGvB,QAAU,qBAlGa,eAmGvB,QAAU,qBAnGa,eAoGvB,QAAU,qBApGa,eAqGvB,QAAU,sBArGa,eAsGvB,QAAU,qBAtGa,eAuGvB,QAAU,sBAvGa,eAwGvB,QAAU,qBAxGa,eAyGvB,QAAU,uBAzGa,eA0GvB,QAAU,qBA1Ga,eA2GvB,QAAU,oBA3Ga,eA4GvB,QAAU,qBA5Ga,eA6GvB,QAAU,yBA7Ga,eA8GvB,QAAU,qBA9Ga,eA+GvB,QAAU,qBA/Ga,eAgHvB,QAAU,mBAhHa,eAiHvB,QAAU,oBAjHa,eAkHvB,QAAU,sBAlHa,eAmHvB,QAAU,sBAnHa,eAoHvB,QAAU,wBApHa,eAqHvB,QAAU,uBArHa,eAsHvB,QAAU,yBAtHa,eAuHvB,QAAU,sBAvHa,GA0HxB1yB,EAAWvW,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWmD,sCAAuC,SACzFG,EAAQzW,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWqD,mCAAoC,IACnF0yB,EAAeC,kBAAkBC,UAAUtV,GAU/C,OATI9zB,KAAKqpC,yBACL9yB,EAAW,QAEXE,EAAQA,GAASwyB,EAAuB1yB,GAExCE,IACAyyB,EAAO,gBAAH,OAAmBzyB,EAAnB,aAA6ByyB,EAA7B,aAERA,EAAO,yKAAH,OAA4K3yB,EAA5K,aAAyL2yB,EAAzL,cA/RZ,4BA8SW,SAAAI,eAAexV,EAAchnB,EAAyC5J,EAA2BX,GACpGvC,KAAKupC,UAAUzV,GAAM,EAAOhnB,EAAI5J,EAAKX,KA/S7C,4BA6TW,SAAAinC,eAAeN,EAAcp8B,EAAyC5J,EAA2BX,GACpGvC,KAAKupC,UAAUL,GAAM,EAAMp8B,EAAI5J,EAAKX,KA9T5C,4BA2UiB,SAAAknC,iBAAkC,IAAnBzS,EAAmB,uDAAF,G,sLAClCh3B,KAAK0pC,UAAU1S,I,wDA5U9B,mBAqVW,SAAAzwB,MAAMuG,EAAiB5J,GAC1BrG,GAAA,EAAUua,gBAAgBpX,KAAKgS,cAE/B,aAA0BhS,KAAKqX,SAAQ,GAAOvK,EAAI5J,KAxV1D,wBA+VI,eACI,OAAOlD,KAAKyqB,cAhWpB,qBA6WoB,SAAApT,QAAQE,G,mKAChBvX,KAAKgS,a,qDAILuF,E,oBACIvX,KAAKyqB,Y,gBACL,O,SAAMzqB,KAAKyqB,YAAYpT,U,OAI/BrX,KAAKgS,cAAe,E,yDAxX5B,qCAiYc,SAAA23B,wBAAwB1wB,GAC9B,OAAO,IAAI2wB,GAAA,EACP3wB,EACAjZ,KAAK+W,kBApYjB,oCAwYc,SAAA8yB,uBACN9vB,EACAlD,EACAD,EACAkzB,GACA,OAAO,IAAIp8B,GAAA,EAAqBqM,EAAgBlD,EAC5CizB,EAAmB9pC,KAAMA,KAAK4W,eA9Y1C,uCAiZc,SAAAmyB,4BAAyB,WAE3BtxB,EAAgC,qBAAXjT,OAA0B,UAAY,OAC3DkT,EAAS,UACTC,EAAY,UAES,qBAAdlT,YACPgT,EAAaA,EAAa,IAAMhT,UAAUmT,SAC1CF,EAASjT,UAAUoT,UACnBF,EAAYlT,UAAUqT,YAG1B,IAAMgyB,EAAoB9pC,KAAK2pC,wBAC3B,IAAI,KACA,IAAI,KAAQ,IAAI,KAAGlyB,EAAYC,EAAQC,MAEzC7E,EAAkB9S,KAAK+W,eAAenF,YAAYuB,GAAA,EAAWC,iCAA6BpW,GAC1F+c,GAAkBjH,GAAuC,KAApBA,EACvC,IAAIgG,GAAA,EAAuChG,GAC3C,IAAIiG,GAAA,GACA,SAACC,GACG,IAAM1F,EAAqB,EAAKyD,eAAenF,YAAYuB,GAAA,EAAWI,sCAAkCvW,GACxG,OAAOsK,QAAQ/B,QAAQ+N,MAE3B,SAAC0F,GACG,IAAM1F,EAAqB,EAAKyD,eAAenF,YAAYuB,GAAA,EAAWI,sCAAkCvW,GACxG,OAAOsK,QAAQ/B,QAAQ+N,MAGnCtT,KAAKyqB,YAAczqB,KAAK6pC,uBACpB9vB,GACA/Z,KAAKiX,sBACLjX,KAAK4W,YACLkzB,GAEJ9pC,KAAKyqB,YAAYsf,kBAAoBC,GAAA,EAAsBC,gCACtDvzB,GAAA,EAAoC1W,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWwD,+CAA2C3Z,KAG3HgD,KAAK0wB,gBAAkB,IAAIwZ,GAAA,EAAqBJ,KAxbxD,uBA2bc,SAAAP,UAAUzV,EAAcqW,EAAiBr9B,EAAyC5J,EAA2BknC,GAAyE,WAC5L,IACIvtC,GAAA,EAAUua,gBAAgBpX,KAAKgS,cAC/B,IACIq4B,GADEpY,GAAY,eAGdoY,GADAD,aAAsB,GACH,IAAI,KAA0BA,GAC1CA,aAAsB,KACVA,OACGptC,IAAfotC,EACY,IAAI,GAAgBA,QAEpBptC,EAEvBgD,KAAK6oC,sBAAsByB,QAAQ,IAAI,GAAiBrY,GAAW6B,EAAMqW,GAAQ,SAACxrB,GAE9E,GADA,EAAKgqB,kBAAmB,EAClB77B,EACF,IACIA,EAAG6R,GACL,MAAOA,GACCzb,GACFA,EAAIyb,GAIhB7R,OAAK9P,EAEL,EAAKutC,eAAetnC,OAAM,kBAE3B,SAAC0b,GACMzb,GACFA,EAAIyb,KAET0rB,KAGHrqC,KAAKuqC,eAAetnC,OAAM,eAE5B,MAAO7B,IACL,GAAM8B,EACF,GAAI9B,cAAiBnE,MAAO,CACxB,IAAMmH,GAAoBhD,GAC1B8B,EAAIkB,GAAWrH,KAAO,KAAOqH,GAAWE,cAExCpB,EAAI9B,IAMZpB,KAAKqX,SAAQ,GAAMpU,OAAM,kBA7erC,uBAifoB,SAAAymC,UAAU1S,G,yKAEU,OAD1B/E,EAAY,e,SACoBjyB,KAAK0wB,gBAAgB8Z,cAAcvY,G,YAAnEpH,E,QACOF,KAAMuJ,MAAMoU,QAAQzd,EAAS7N,M,wBAClCA,EAAO6N,EAAS7N,KACdga,GAAUA,EAAO55B,OAAS,IAC5B4f,EAAOA,EAAKgT,QAAO,SAACzyB,GAAD,QAAiBA,EAAKiqC,QAAUjqC,EAAKiqC,OAAO/qB,gBAAkBua,EAAOva,kB,kBAErF,IAAI,GAAsBwV,EAAWjV,I,iCAErC,IAAI,GAAsBiV,EAAW,CAAEtR,aAAc,UAAF,OAAYkK,EAASD,OAArB,aAAgCC,EAASlC,e,0DA3f/G,0BA+foB,SAAA4hB,e,wKACPvqC,KAAKgS,cAAiBhS,KAAK2oC,iB,gBAEM,OADlC3oC,KAAK2oC,kBAAmB,E,SACgB3oC,KAAK6oC,sBAAsB4B,U,cAA7D1Y,E,yBACC/xB,KAAKyqB,YAAYigB,MAAM3Y,EAAQ+B,KAAM/B,EAAQ4Y,OAAQ5Y,EAAQE,UAAWF,EAAQjlB,GAAIilB,EAAQ7uB,IAAK6uB,EAAQqY,a,0DAngB5H,yBAmJW,oBAAkBnxB,EAA4BiB,EAAgEtD,GACjH,IAAMsC,EAAqCD,EAE3C,OADAiB,EAA+BhH,WAAWiH,QAAQjB,EAAiBhG,YAC5D,IAAIi2B,kBAAkBlwB,EAAcrC,KAtJnD,uBAugBY,mBAAiBkd,GACrB,OAAOA,EAAKvB,QAAQ,KAAM,SACrBA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,UACdA,QAAQ,KAAM,cA5gB3B,qBAihBa,GAQT,0BAAYN,EAAmB6B,EAAc6W,EAAiB79B,EAAyC5J,EAA2BknC,IAA8B,mCAC5JpqC,KAAKiyB,UAAYA,EACjBjyB,KAAK8zB,KAAOA,EACZ9zB,KAAK2qC,OAASA,EACd3qC,KAAK8M,GAAKA,EACV9M,KAAKkD,IAAMA,EACXlD,KAAKoqC,WAAaA,I,6DHjlB1B,SAAYnD,GAKR,6BAMA,iCAXJ,CAAYA,QAAoC,KCAhD,SAAYC,GAKR,yBAMA,mBAMA,2BAjBJ,CAAYA,QAAkC,KGUvC,IAAM,GAAb,WAaI,uCAAmB0D,GAG6B,IAF7BC,EAE6B,uDAFyB5D,GAAqC6D,UAC3FC,EAC6B,uDADqB7D,GAAmC8D,QACrFC,EAA6B,wGAC5CpuC,GAAA,EAAUK,uBAAuB0tC,EAAe,iBAChD5qC,KAAK+W,eAAiB,IAAI9C,GAAA,EAC1BjU,KAAK+W,eAAe1O,YAAY8K,GAAA,EAAW+3B,sCAAuCN,GAClF5qC,KAAK+W,eAAe1O,YAAY8K,GAAA,EAAWg4B,sCAAuClE,GAAqC4D,IACvH7qC,KAAK+W,eAAe1O,YAAY8K,GAAA,EAAWi4B,oCAAqClE,GAAmC6D,IACnH/qC,KAAK+W,eAAe1O,YAAY8K,GAAA,EAAWk4B,qCAAsClhC,OAAO8gC,IAtBhG,uEAyCW,SAAAK,SAEH,OADAtrC,KAAKurC,aACEvrC,KAAK+W,eAAenF,YAAYuB,GAAA,EAAWq4B,kCA3C1D,qBA8CW,SAAAC,QAAQ3sB,GACX9e,KAAKurC,aACYzsB,EAAWE,aACnBnE,cAAc6wB,iCAAiC1rC,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAWq4B,mCAjDvG,yBA2DI,eACI,OAAOxrC,KAAKkT,WAAWtB,YAAYuB,GAAA,EAAW+3B,wCA5DtD,IAsEI,aAAyBN,GACrB/tC,GAAA,EAAUW,wBAAwBotC,EAAe,iBACjD5qC,KAAKkT,WAAW7K,YAAY8K,GAAA,EAAW+3B,sCAAuCN,KAxEtF,2BAoFI,aAA2Be,GACvB9uC,GAAA,EAAUW,wBAAwBmuC,EAAiB,mBACnD3rC,KAAK4rC,oBAAsBD,IAtFnC,6BAiGI,aAA6BE,GACzB7rC,KAAK8rC,sBAAwBD,IAlGrC,sBA4GI,eACI,OAAO7rC,KAAK+W,iBA7GpB,wBAgHY,SAAAw0B,aACJ,IAAM1sB,EAAa7e,KAAK+W,eAAenF,YAAYuB,GAAA,EAAW44B,6BAA8B,MACtFC,EAAat2B,KAAKC,MAAMkJ,GAExB+rB,EAAgB5qC,KAAK+W,eAAenF,YAAYuB,GAAA,EAAW+3B,uCAC7DN,IACAoB,EAAWpB,cAAgBA,GAG/B,IAAMC,EAAgB7qC,KAAK+W,eAAenF,YAAYuB,GAAA,EAAWg4B,uCAC7DN,IACAmB,EAAWnB,cAAgBA,GAG/B,IAAME,EAAc/qC,KAAK+W,eAAenF,YAAYuB,GAAA,EAAWi4B,qCAC3DL,IACAiB,EAAWjB,YAAcA,GAGzB/qC,KAAK4rC,sBACLI,EAAWL,gBAAkB3rC,KAAK4rC,qBAGlC5rC,KAAK8rC,wBACLE,EAAWH,kBAAoB7rC,KAAK8rC,uBAIxCE,EAAWC,UAAY,gBAEvB,IAAMC,EAAqBlsC,KAAK+W,eAAenF,YAAYuB,GAAA,EAAWk4B,sCAC3C,SAAvBa,EACAF,EAAWf,cAAe,EACI,UAAvBiB,IACPF,EAAWf,cAAe,GAG9BjrC,KAAK+W,eAAe1O,YAAY8K,GAAA,EAAWq4B,+BAAgC91B,KAAKE,UAAUo2B,OArJlG,uBAiCW,kBAAgBhvB,GACnBngB,GAAA,EAAUK,uBAAuB8f,EAAM,QACvC,IAAM4F,EAAS,IAAIupB,8BAA8B,IAGjD,OAFAvpB,EAAO7L,eAAiB,IAAI9C,GAAA,EAC5B2O,EAAO1P,WAAW7K,YAAY8K,GAAA,EAAW44B,6BAA8B/uB,GAChE4F,MAtCf,iCCJa,GAAb,WAGI,uCAAoB/D,GAAkB,gDAClC,IAAMutB,EAAI12B,KAAKC,MAAMkJ,GACrBhiB,GAAA,EAAUK,uBAAuBkvC,EAAEC,MAAM,GAAI,SAC7CrsC,KAAKssC,aAAeF,EAAEC,MAAM,GANpC,2EA+BI,eACI,OAAOrsC,KAAKssC,eAhCpB,yBA2CI,eACI,OAAOtsC,KAAKusC,aAAaC,wBAAwBC,gBA5CzD,8BAuDI,eACI,OAAOzsC,KAAKusC,aAAaC,wBAAwBE,YAxDzD,6BAkEI,eACI,OAAO1sC,KAAKusC,aAAaC,wBAAwBG,oBAnEzD,wBA6EI,eACI,OAAO3sC,KAAKusC,aAAaC,wBAAwBI,gBA9EzD,yBAiBW,oBAAkBlmC,GACrB7J,GAAA,EAAUK,uBAAuBwJ,EAAQ,UACzC,IAAMsW,EAAetW,EAAOwM,WAAWtB,YAAYuB,GAAA,EAAWga,kCAE9D,OADAtwB,GAAA,EAAUK,uBAAuB8f,EAAM,QAChC,IAAI6vB,8BAA8B7vB,OArBjD,kC,iBCdA8vB,EAAOC,QAAQC,mBAAqB,CAClC,aACA,aACA,cACA,eAGFF,EAAOC,QAAQE,iBAAmB,QAClCH,EAAOC,QAAQG,iBAAmB,QASlCJ,EAAOC,QAAQI,0BAA4B,QAC3CL,EAAOC,QAAQK,0BAA4B,QAE3CN,EAAOC,QAAQM,0BAA4B,QAC3CP,EAAOC,QAAQO,2BAA6B,U,wyBCnB5C,SAASC,gBAAgBC,EAAKvxB,EAAK3T,GAYjC,OAXI2T,KAAOuxB,EACT/yB,OAAOgzB,eAAeD,EAAKvxB,EAAK,CAC9B3T,MAAOA,EACPolC,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZJ,EAAIvxB,GAAO3T,EAGNklC,EAGT,SAASK,QAAQC,EAAQC,GACvB,IAAIrzB,EAAOD,OAAOC,KAAKozB,GAEvB,GAAIrzB,OAAOuzB,sBAAuB,CAChC,IAAIC,EAAUxzB,OAAOuzB,sBAAsBF,GAEvCC,IACFE,EAAUA,EAAQje,QAAO,SAAUke,GACjC,OAAOzzB,OAAO0zB,yBAAyBL,EAAQI,GAAKR,eAIxDhzB,EAAK1N,KAAKohC,MAAM1zB,EAAMuzB,GAGxB,OAAOvzB,EAGT,SAAS2zB,eAAepjC,GACtB,IAAK,IAAIvM,EAAI,EAAGA,EAAI4vC,UAAUlxC,OAAQsB,IAAK,CACzC,IAAI4D,EAAyB,MAAhBgsC,UAAU5vC,GAAa4vC,UAAU5vC,GAAK,GAE/CA,EAAI,EACNmvC,QAAQpzB,OAAOnY,IAAS,GAAMiB,SAAQ,SAAU0Y,GAC9CsxB,gBAAgBtiC,EAAQgR,EAAK3Z,EAAO2Z,OAE7BxB,OAAO8zB,0BAChB9zB,OAAO+zB,iBAAiBvjC,EAAQwP,OAAO8zB,0BAA0BjsC,IAEjEurC,QAAQpzB,OAAOnY,IAASiB,SAAQ,SAAU0Y,GACxCxB,OAAOgzB,eAAexiC,EAAQgR,EAAKxB,OAAO0zB,yBAAyB7rC,EAAQ2Z,OAKjF,OAAOhR,EAGT,IAAMwjC,GAAiB,CACrBC,QAAS,CACP/9B,MAAO,OACPg+B,OAAQ,OACRz9B,IAAK,MAEP09B,MAAO,CACLj+B,MAAO,OACPg+B,OAAQ,OACRz9B,IAAK,MAEP29B,MAAO,CACLl+B,MAAO,QACPg+B,OAAQ,OACRz9B,IAAK,OAEP49B,QAAS,CACPn+B,MAAO,QACPg+B,OAAQ,SACRz9B,IAAK,QAIT,SAAS69B,WAAWC,GAClB,OAAKA,EACEA,EAAO,GAAGC,cAAgBD,EAAOllC,MAAM,GAD1B,GAItB,SAASolC,cAAcpmC,GAAsC,IAA9BqmC,EAA8B,uDAArB,GAAIC,EAAiB,wDACrDC,EAAcZ,GAAe3lC,GAC7BwmC,EAAYD,GAAcA,EAAYF,IAAoBA,EAChE,MAAO,KAAOJ,WAAWjmC,GAAUimC,WAAWO,IAAcF,EAAU,UAAY,IAEpF,SAASG,eAAezmC,GAAqB,IAAbqmC,EAAa,uDAAJ,GACjCE,EAAcZ,GAAe3lC,GAC7BwmC,EAAYD,GAAcA,EAAYF,IAAoBA,EAChE,OAAOrmC,EAASwmC,EAElB,SAASE,QAAQjuC,GACf,MAAO,YAAaA,EAetB,SAASkuC,cAAcluC,GACrB,OAAOiuC,QAAQjuC,GALjB,SAASmuC,aAAanuC,GACpB,MAAsB,aAAfA,EAAMV,KAAsBU,EAAMouC,eAAiBpuC,EAAMquC,cAIxCF,CAAanuC,GAAO,GAAKA,EAGnD,SAASsuC,cAAcC,EAAIC,GACzB,IAAMC,EAAKD,EAAGE,QAAUH,EAAGG,QACrBC,EAAKH,EAAGI,QAAUL,EAAGK,QACrBC,GAAML,EAAGE,QAAUH,EAAGG,SAAW,EACjCI,GAAMN,EAAGI,QAAUL,EAAGK,SAAW,EACjCG,GAAWvxC,KAAKwxC,MAAMP,EAAIE,GAGhC,MAAO,CACLM,OAHmC,IAArBzxC,KAAK0xC,MAAMT,EAAIE,GAAanxC,KAAK2xC,GAI/CJ,YACAK,OAJa,CAACP,EAAIC,IAOtB,SAASO,SAASrvC,GAChB,OA/BF,SAASsvC,0BAA0BtvC,GACjC,OAAO2yB,MAAM4c,KAAKvvC,EAAMwvC,SAAS/gB,QAAO,SAAArR,GACtC,IAAIqyB,EAAsBC,EAE1B,OAAOtyB,EAAE1T,SAAW1J,EAAM2vC,gBAAmE,QAAhDF,EAAuBzvC,EAAM2vC,qBAAoD,IAAzBF,GAAuG,QAA3DC,EAAwBD,EAAqBG,gBAAgD,IAA1BF,OAA7E,EAAyHA,EAAsBG,KAAKJ,EAAsBryB,EAAE1T,YA2B9S4lC,CAA0BtvC,GAAOgrB,KAAI,SAAAsiB,GAAK,OAAIA,EAAMwC,cAE7D,SAASC,mBAAmB/vC,EAAOgwC,GACjC,MAAiBrd,MAAM4c,KAAKvvC,EAAMwvC,SAAS/gB,QAAO,SAAA6e,GAAK,OAAI0C,EAAI7xB,SAASmvB,EAAMwC,eAA9E,oBACA,OAAOxB,cADP,WAGF,SAAS2B,UAAUjwC,GACjB,IAAMkwC,EAAahC,cAAcluC,GACjC,OAAOiuC,QAAQjuC,GAASkwC,EAAWJ,WAAaI,EAAWD,UAE7D,SAASE,cAAcnwC,GACrB,IAAMkwC,EAAahC,cAAcluC,GACjC,MAAO,CAACkwC,EAAWxB,QAASwB,EAAWtB,SAIzC,SAASwB,YAAYpwC,GACnB,IACEqwC,EAGErwC,EAHFqwC,OACAC,EAEEtwC,EAFFswC,OACAC,EACEvwC,EADFuwC,UAWF,OARkB,IAAdA,GACFF,GAVgB,GAWhBC,GAXgB,IAYO,IAAdC,IACTF,GAZgB,IAahBC,GAbgB,KAgBX,CAACD,EAAQC,GAmClB,SAAST,KAAKW,GACZ,GAAiB,oBAANA,EAAkB,4BADXlhB,EACW,iCADXA,EACW,kBAC3B,OAAOkhB,EAAC,WAAD,EAAKlhB,GAEZ,OAAOkhB,EAGX,SAASC,QACT,SAASC,QAAc,2BAALC,EAAK,yBAALA,EAAK,gBACrB,OAAmB,IAAfA,EAAI90C,OAAqB40C,KACV,IAAfE,EAAI90C,OAAqB80C,EAAI,GAC1B,WACL,IAAIxrC,EADa,iBAGAwrC,GAHA,IAGjB,2BAAsB,KAAXC,EAAW,QACpBzrC,EAASyrC,EAAG/D,MAAMpuC,KAAMsuC,YAAc5nC,GAJvB,8BAOjB,OAAOA,GAGX,SAAS0rC,cAAc9pC,EAAO+pC,GAC5B,OAAO53B,OAAO63B,OAAO,GAAID,EAAU/pC,GAAS,IAG9C,IACMiqC,G,WACJ,gBAAYC,EAAM3hB,EAAM5U,GAAK,0BAC3Bjc,KAAKwyC,KAAOA,EACZxyC,KAAK6wB,KAAOA,EACZ7wB,KAAKic,IAAMA,EAENjc,KAAK4F,QACR5F,KAAK4F,MAAQ,CACX6sC,OAAQ,CAAC,EAAG,GACZC,QAAS,CAAC,EAAG,IAEX1yC,KAAK2mB,MAAM3mB,KAAK2mB,OACpB3mB,KAAK2yC,S,6CAIT,SAAA3/B,MACE,OAAOhT,KAAKwyC,KAAK5sC,MAAM5F,KAAKic,M,IAG9B,SAAA9N,IAAUvI,GACR5F,KAAKwyC,KAAK5sC,MAAM5F,KAAKic,KAAOrW,I,kBAG9B,SAAAoN,MACE,OAAOhT,KAAKwyC,KAAK5sC,MAAMgtC,S,sBAGzB,SAAA5/B,MACE,OAAOhT,KAAKwyC,KAAKK,mBAAmB7yC,KAAKic,O,wBAG3C,SAAAjJ,MACE,OAAOhT,KAAKwyC,KAAKM,qBAAqB9yC,KAAKic,O,kBAG7C,SAAAjJ,MACE,OAAOhT,KAAKwyC,KAAK5vB,OAAO5iB,KAAKic,O,wBAG/B,SAAAjJ,MACE,OAAOhT,KAAKwyC,KAAK5vB,OAAOgwB,S,mBAG1B,SAAA5/B,MACE,OAAOhT,KAAKwyC,KAAKO,SAAS/yC,KAAKic,O,mBAGjC,SAAA02B,QACE,IACE/sC,EAKE5F,KALF4F,MACAgtC,EAIE5yC,KAJF4yC,OACAhwB,EAGE5iB,KAHF4iB,OACAowB,EAEEhzC,KAFFgzC,OACAniB,EACE7wB,KADF6wB,KAGAoiB,EAEErwB,EAFFqwB,UACAC,GACEtwB,EADFswB,UAEFN,EAAOI,GAAUptC,EAAMutC,QAAUvtC,EAAMN,OAASM,EAAMwtC,SAAWxtC,EAAMytC,QAAS,EAChFztC,EAAM0tC,MAAQ,EAAC,GAAO,GACtB1tC,EAAM2tC,aAAc,EACpB3tC,EAAM4tC,UAAY,CAAC,EAAG,GACtB5tC,EAAM6tC,UAAY,CAAC,EAAG,GACtB7tC,EAAM8tC,OAAS,CAAC,EAAG,GACnB9tC,EAAM+tC,WAAaC,KAAEC,IAAIZ,EAAUC,IAAYD,EAAU,CAAC,EAAG,KAAK1mB,IAAIxtB,KAAK+0C,KAC3EluC,EAAMmuC,QAAU,CAAC,EAAEC,IAAUA,KAAW,EAAEA,IAAUA,MACpDpuC,EAAMirB,KAAOA,EACbjrB,EAAMquC,UAAOj3C,EACb4I,EAAMsuC,UAAOl3C,EACb4I,EAAMuuC,YAAc,EACpBvuC,EAAMwuC,UAAY,CAAC,EAAG,GACtBxuC,EAAM0qC,SAAW,CAAC,EAAG,GACrB1qC,EAAMyuC,SAAW,CAAC,EAAG,GACrBzuC,EAAM0uC,SAAW,CAAC,EAAG,GACrB1uC,EAAM2uC,MAAQ,CAAC,EAAG,GAClB3uC,EAAM4uC,UAAY,I,mBAGpB,SAAA7jC,MAAMpP,GACJ,IAAMqE,EAAQ5F,KAAK4F,MACbgd,EAAS5iB,KAAK4iB,OAEfhd,EAAMutC,UACTnzC,KAAK2yC,QACL/sC,EAAMutC,SAAU,EAChBvtC,EAAMqF,OAAS1J,EAAM0J,OACrBrF,EAAMsrC,cAAgB3vC,EAAM2vC,cAC5BtrC,EAAM8sC,QAAU9sC,EAAM6sC,OACtB7sC,EAAM6uC,WAAa7xB,EAAOkuB,KAAOM,KAAKxuB,EAAOkuB,KAAMlrC,GAASA,EAAMpH,OAClEoH,EAAMpH,OAASoH,EAAM6uC,YAGvB7uC,EAAM6hB,UAAY7hB,EAAM4uC,UAAYjzC,EAAMizC,Y,qBAG5C,SAAAE,QAAQnzC,GACN,IACEqE,EAGE5F,KAHF4F,MACAgd,EAEE5iB,KAFF4iB,OACAgwB,EACE5yC,KADF4yC,OAEFhtC,EAAMirB,KAAO7wB,KAAK6wB,KAClB,IAAI8jB,EAAK,EAeT,GAbIpzC,IACFqE,EAAMrE,MAAQA,EACVqhB,EAAOgyB,gBAAkBrzC,EAAMszC,YAAYjvC,EAAMrE,MAAMqzC,iBAC3DhvC,EAAM/E,KAAOU,EAAMV,KACnB+xC,EAAO7B,QAAU/wC,KAAKwyC,KAAKsC,WAAWC,MAAQ/0C,KAAKwyC,KAAK5B,SAASmE,KACjEnC,EAAOoC,SAAWC,SAASC,mBAC3Bz6B,OAAO63B,OAAOM,EAhKpB,SAASuC,gBAAgB5zC,GACvB,IAAMsc,EAAU,GAGhB,GAFI,YAAatc,IAAOsc,EAAQu3B,QAAU7zC,EAAM6zC,SAE5C,aAAc7zC,EAAO,CACvB,IACE8zC,EAIE9zC,EAJF8zC,SACAC,EAGE/zC,EAHF+zC,OACAC,EAEEh0C,EAFFg0C,QACAC,EACEj0C,EADFi0C,QAEF/6B,OAAO63B,OAAOz0B,EAAS,CACrBw3B,WACAC,SACAC,UACAC,YAIJ,OAAO33B,EA6ImBs3B,CAAgB5zC,IACtCqxC,EAAO6C,KAAO7C,EAAO8C,QAAU9C,EAAOwC,QAAU,IAAM,GAAKxC,EAAO7B,QAAU,EAC5E4D,EAAKpzC,EAAMizC,UAAY5uC,EAAM4uC,UAC7B5uC,EAAM4uC,UAAYjzC,EAAMizC,UACxB5uC,EAAMuuC,YAAcvuC,EAAM4uC,UAAY5uC,EAAM6hB,WAG1C7hB,EAAMutC,QAAS,CACjB,IAAMwC,EAAiB/vC,EAAM8tC,OAAOnnB,IAAIxtB,KAAK+0C,KAE7CF,KAAEgC,MAAMhwC,EAAM6tC,UAAWkC,GAG3B,OAAmB/yB,EAAOqwB,UAAUrtC,EAAM4tC,WAA1C,sBAAOqC,GAAP,MAAYC,GAAZ,MAUA,gBAAmBlwC,EAAM+tC,WAAzB,GAAOoC,GAAP,MAAYC,GAAZ,MACA,gBAAiBpwC,EAAM0tC,MAAvB,GAAK2C,GAAL,MAAUC,GAAV,MAIA,IAHY,IAARD,KAAeA,GAAMl3C,KAAK+0C,IAAI+B,KAAQE,IAAOh3C,KAAKo3C,KAAKN,IAAOE,KACtD,IAARG,KAAeA,GAAMn3C,KAAK+0C,IAAIgC,KAAQE,IAAOj3C,KAAKo3C,KAAKL,IAAOE,IAClEpwC,EAAM2tC,aAAsB,IAAR0C,KAAyB,IAARC,GAChCtwC,EAAM2tC,YAAX,CACA3tC,EAAM0tC,MAAQ,CAAC2C,GAAKC,IACpB,IAAM5B,GAAW,CAAC,EAAG,GAKrB,GAJAA,GAAS,IAAa,IAAR2B,GAAgBJ,GAAMI,GAAM,EAC1C3B,GAAS,IAAa,IAAR4B,GAAgBJ,GAAMI,GAAM,EACtCl2C,KAAKo2C,QAAQp2C,KAAKo2C,OAAO9B,KAEzB1uC,EAAMutC,UAAYvtC,EAAMwtC,UAAYxtC,EAAMN,UAC5CM,EAAMywC,MAAQzwC,EAAMutC,UAAYvtC,EAAMN,OACtCM,EAAM0wC,MAAQ1wC,EAAMutC,SAAWvtC,EAAMN,OACrCM,EAAMN,OAASstC,EAAO5yC,KAAKgzC,QAAUptC,EAAMutC,QAEvC5xC,GAAO,CACLqE,EAAMywC,QACJ,WAAYzzB,IAAQhd,EAAMmuC,QAAU3C,KAAKxuB,EAAO2zB,OAAQ3wC,IACxD5F,KAAKw2C,OAAOx2C,KAAKw2C,SAGvB5wC,EAAM0uC,SAAWA,GACjB,IAAMmC,GAAiB7wC,EAAMpH,OAG7B,GAFAwB,KAAK02C,iBAEA9wC,EAAM0wC,MAAQ3B,EAnKU,GAmKyB,CACpD/uC,EAAM2uC,MAAQX,KAAEC,IAAIjuC,EAAMpH,OAAQi4C,IAClC,IAAME,GAAgB/wC,EAAM2uC,MAAMhoB,IAAIxtB,KAAK+0C,KAC3CF,KAAEgC,MAAMhwC,EAAM0qC,SAAUqG,IACxB/wC,EAAMwuC,UAAYxuC,EAAM2uC,MAAMhoB,IAAIxtB,KAAKo3C,OAElCvwC,EAAMywC,OAAS1B,EAAK,IACvB/uC,EAAMyuC,SAAW,CAACsC,GAAc,GAAKhC,EAAIgC,GAAc,GAAKhC,KAMpE,IAAMiC,GAAahxC,EAAMutC,SAAUvwB,EAAOg0B,YAAuB,CAAC,EAAG,GACrEhxC,EAAMpH,OAASq4C,aAAkBjxC,EAAMmuC,QAASnuC,EAAMpH,OAAQo4C,IAC9D52C,KAAK82C,qB,kBAGP,SAAAC,OACE,IAAMnxC,EAAQ5F,KAAK4F,MACbgtC,EAAS5yC,KAAK4yC,OACdhwB,EAAS5iB,KAAK4iB,OAEpB,GADKhd,EAAMutC,SAASnzC,KAAKg3C,SACpBpxC,EAAMwtC,UAAaxtC,EAAM2tC,aAAiB3tC,EAAMytC,QAAWzwB,EAAOq0B,iBAAvE,CACA,IAAM/C,EAAOl0C,KAAKk3C,QAAQ7I,eAAeA,eAAeA,eAAe,GAAIuE,GAAShtC,GAAQ,GAApD,gBACrC5F,KAAKm3C,SAAWvxC,EAAM6sC,eAEZz1C,IAATk3C,IAAoBtuC,EAAMsuC,KAAOA,M,mBAGvC,SAAA8C,QACEh3C,KAAKo3C,WAAWJ,QAChBh3C,KAAKq3C,aAAaL,Y,cAwBhBM,G,oFACJ,6BAAqB,sEAANzmB,EAAM,yBAANA,EAAM,uBACnB,+BAASA,IAET0c,gBAAgB,eAAM,WAAY,MAHf,E,0DAMrB,SAAAoF,QACE,+EACA3yC,KAAK4F,MAAMquC,UAAOj3C,I,kBAGpB,SAAA2pB,OACE3mB,KAAK4F,MAAMpH,OAAS,CAAC,EAAG,GACxBwB,KAAK4F,MAAM6uC,WAAa,CAAC,EAAG,K,2BAG9B,SAAAiC,gBACE12C,KAAK4F,MAAMpH,OAASo1C,KAAE2D,IAAIv3C,KAAK4F,MAAM6uC,WAAYz0C,KAAK4F,MAAM0uC,Y,6BAG9D,SAAAwC,kBACE92C,KAAK4F,MAAM0uC,SAAWV,KAAEC,IAAI7zC,KAAK4F,MAAMpH,OAAQwB,KAAK4F,MAAM6uC,c,oBAG5D,SAAA2B,OAAOrE,GACL/xC,KAAK4F,MAAMquC,KAAOj0C,KAAK4F,MAAMquC,MA7CjC,SAASuD,WAAT,GAA8B,wBAATxH,EAAS,KAALE,EAAK,KACtBuH,EAAI14C,KAAK+0C,IAAI9D,GAAMjxC,KAAK+0C,IAAI5D,GAClC,OAAIuH,EAAI,EAAU,IACdA,EAAI,EAAU,SAAlB,EA0CuCD,CAAWzF,GAChD/xC,KAAK4F,MAAMwtC,UAAYpzC,KAAK4iB,OAAO80B,iBAAmB13C,KAAK4iB,OAAOqxB,QAAUj0C,KAAK4F,MAAMquC,QAAUj0C,KAAK4iB,OAAOqxB,MAAQj0C,KAAK4iB,OAAOqxB,OAASj0C,KAAK4F,MAAMquC,KACjJj0C,KAAK4F,MAAMwtC,WAEXpzC,KAAK4iB,OAAOqxB,MAAQj0C,KAAK4iB,OAAO80B,gBA1CxC,SAASC,qBAAqB5F,EAAGkC,GAC/B,OAAQA,GACN,IAAK,IACHlC,EAAE,GAAK,EACP,MAEF,IAAK,IACHA,EAAE,GAAK,GAoCP4F,CAAqB5F,EAAG/xC,KAAK4F,MAAMquC,U,mBA/BT1B,IAqC1BqF,GAAqB,IACrBC,GAAuB,CAC3Bh/B,QAD2B,mBACL,IAAdvQ,IAAc,yDACpB,OAAOA,GAGTssC,eAL2B,0BAKG,IAAftsC,EAAe,wDAC5B,OAAOA,GAGT2uC,iBAT2B,4BASK,IAAf3uC,EAAe,wDAC9B,OAAOA,GAGTsuC,WAb2B,sBAaL,IAAXtuC,EAAW,uDAAH,EACjB,OAAQA,GACN,KAAK,EACH,MAAO,CAACsvC,GAAoBA,IAE9B,KAAK,EACH,MAAO,CAAC,EAAG,GAEb,QACE,OAAOhE,KAAEkE,SAASxvC,KAIxBwoC,KA1B2B,cA0BtBxoC,GACH,MAAqB,oBAAVA,EAA6BA,EAC3B,MAATA,EAAsBsrC,KAAEkE,SAASxvC,QAArC,GAGF2qC,UA/B2B,mBA+BjB3qC,EAAOyvC,EAAIn1B,GACnB,OAAOta,GAASsa,EAAOgwB,OAAOK,WAGhCC,UAnC2B,mBAmCjB5qC,GACR,OAAOsrC,KAAEkE,SAASxvC,EAAO,KA4B7B,IAAM0vC,GAA4B3J,eAAeA,eAAe,GAAIwJ,IAAuB,GAAI,CAC7F5D,KAD6F,cACxFgE,EAAIF,EADoF,GAG1F,IADD9D,KACC,EADDA,KAGA,GADAj0C,KAAK03C,cAAyB,SAATzD,MAChBj0C,KAAK03C,cAAe,OAAOzD,MAGlCsC,OAR6F,kBAQ1E,IAAZjuC,EAAY,uDAAJ,GACb,GAAqB,oBAAVA,EACT,OAAO,SAAA1C,GAAK,OAAIoyC,GAA0BzB,OAAOjuC,EAAM1C,KAGzD,GAAI,YAAa0C,EACf,OAAO,kBAAMA,EAAM4vC,SAGrB,GAA2B,oBAAhBC,aAA8B7vC,aAAiB6vC,YACxD,OAAO7vC,EAGT,MAKIA,EAJF8vC,YADF,OACUpE,IADV,IAKI1rC,EAHF+vC,aAFF,MAEUrE,IAFV,IAKI1rC,EAFFgwC,YAHF,OAGStE,IAHT,KAKI1rC,EADFiwC,eAJF,OAIWvE,IAJX,GAMA,MAAO,CAAC,CAACoE,EAAMC,GAAQ,CAACC,GAAKC,QAK3BC,GAAe,GACfC,GAAiB,CACrBC,WAAY,0BAACC,EAAD,uDAAU,EAAV,MAAgB,CAACH,GAAeG,EAAQ,IACpDC,UAAW,yBAACD,EAAD,uDAAU,EAAV,MAAgB,EAAC,GAAgBA,EAAQ,IACpDE,QAAS,uBAACF,EAAD,uDAAU,EAAV,MAAgB,CAAC,GAAG,GAAgBA,IAC7CG,UAAW,yBAACH,EAAD,uDAAU,EAAV,MAAgB,CAAC,EAAGH,GAAeG,KAE1CI,G,sEACJ,sBAAqB,+DAANloB,EAAM,yBAANA,EAAM,uBACnB,+BAASA,IAET0c,gBAAgB,eAAM,SAAU,YAHb,E,mDAMrB,SAAAoF,QACE,wEACA,IAAM/sC,EAAQ5F,KAAK4F,MACnBA,EAAMozC,gBAAah8C,EACnB4I,EAAMqzC,gBAAiB,EACvBrzC,EAAMszC,iBAAkB,EACxBtzC,EAAMuzC,gBAAiB,EACvBvzC,EAAMwzC,UAAW,EACjBxzC,EAAMyzC,MAAQ,CAAC,EAAG,GAClBzzC,EAAM0zC,KAAM,EACZ1zC,EAAM6zB,UAAW,EACjB7zB,EAAM2zC,OAASv5C,KAAKu5C,OAAOC,KAAKx5C,Q,mBAGlC,SAAAw2C,QACE,IAAM5wC,EAAQ5F,KAAK4F,MAEnB,GAAIA,EAAMmuC,mBAAmBoE,YAAa,CACxC,IAAMsB,EAAY7zC,EAAMmuC,QAAQ2F,wBAE1BC,EAAa/zC,EAAMsrC,cAAcwI,wBACjC3F,EAAU,CACdqE,KAAMqB,EAAUrB,KAAOuB,EAAWvB,KAAOxyC,EAAMpH,OAAO,GACtD65C,MAAOoB,EAAUpB,MAAQsB,EAAWtB,MAAQzyC,EAAMpH,OAAO,GACzD85C,IAAKmB,EAAUnB,IAAMqB,EAAWrB,IAAM1yC,EAAMpH,OAAO,GACnD+5C,OAAQkB,EAAUlB,OAASoB,EAAWpB,OAAS3yC,EAAMpH,OAAO,IAE9DoH,EAAMmuC,QAAUiE,GAA0BzB,OAAOxC,M,oBAIrD,SAAAwF,SAAS,WACD3zC,EAAQ5F,KAAK4F,MACfA,EAAM6zB,WACV7zB,EAAM6zB,UAAW,EACjB7zB,EAAMutC,SAAU,EAChB5W,YAAW,WACT,EAAKmY,UACL,EAAKqC,SACJ,M,uBAGL,SAAA6C,YACE55C,KAAK4F,MAAMutC,QAAUnzC,KAAK4F,MAAMqzC,gBAAkBj5C,KAAK4F,MAAMszC,kB,mBAG/D,SAAAlC,QACEh3C,KAAK65C,eACL75C,KAAK4F,MAAMqzC,gBAAiB,EAC5Bj5C,KAAK4F,MAAMszC,iBAAkB,EAC7B,0E,yBAGF,SAAAY,YAAYv4C,GACV,IAAMqhB,EAAS5iB,KAAK4iB,OACdhd,EAAQ5F,KAAK4F,OACE,MAAjBrE,EAAM6zC,SAAmBlhB,MAAMoU,QAAQ1lB,EAAOm3B,gBAAmBn3B,EAAOm3B,eAAer6B,SAASne,EAAM6zC,UAAsC,IAA3BxyB,EAAOm3B,gBAAyBn3B,EAAOm3B,iBAAmBx4C,EAAM6zC,WACrLp1C,KAAKwyC,KAAKwH,YAAYz4C,GAElBqhB,EAAOq3B,gBACT14C,EAAM0J,OAAOivC,kBAAkB34C,EAAMiwC,WAGnC5rC,EAAMqzC,iBACVj5C,KAAK2Q,MAAMpP,GACXvB,KAAKm6C,aAAa54C,GAClBqE,EAAMozC,WAAaxH,UAAUjwC,GAC7BqE,EAAMqzC,gBAAiB,EACvBrzC,EAAM6sC,OAASf,cAAcnwC,GAC7BqE,EAAM8sC,QAAU9sC,EAAM6sC,OAElB7vB,EAAOw3B,cACTp6C,KAAKq6C,sBAAsB94C,GAClBqhB,EAAO03B,MAAQ,EACxBt6C,KAAKu6C,kBAAkBh5C,GAEvBvB,KAAKw6C,iBAAiBj5C,O,8BAI1B,SAAAi5C,iBAAiBj5C,GACf,IAAMqE,EAAQ5F,KAAK4F,MACnBA,EAAMutC,SAAU,EAChBvtC,EAAMuzC,gBAAiB,EACvBvzC,EAAMwzC,UAAW,EACjBp5C,KAAK00C,QAAQnzC,GACbvB,KAAK+2C,S,yBAGP,SAAA0D,YAAYl5C,GACV,IAAMqE,EAAQ5F,KAAK4F,MACbgd,EAAS5iB,KAAK4iB,OACpB,GAAKhd,EAAMqzC,iBACPrzC,EAAM/E,OAASU,EAAMV,MAAQU,EAAMizC,YAAc5uC,EAAM4uC,WAA3D,CACA,IAAMzuC,EAAKyrC,UAAUjwC,GACrB,IAAIqE,EAAMozC,YAAcjzC,IAAOH,EAAMozC,WAArC,CACA,IAAMvG,EAASf,cAAcnwC,GAY7B,OAVI0zC,SAASC,qBAAuB3zC,EAAM0J,OACxCrF,EAAM8tC,OAAS,CAACnyC,EAAMm5C,UAAWn5C,EAAMo5C,YAEvC/0C,EAAM8tC,OAASE,KAAEC,IAAIpB,EAAQ7sC,EAAM6sC,QACnC7sC,EAAM6sC,OAASA,GAGjBmB,KAAEgC,MAAMhwC,EAAM4tC,UAAW5tC,EAAM8tC,QAC/B1zC,KAAK00C,QAAQnzC,GAETqE,EAAMwzC,UACRp5C,KAAKq3C,aAAauD,OAAO,aACzBh1C,EAAMN,QAAS,OACftF,KAAKw6C,iBAAiBj5C,IAIpBqhB,EAAOw3B,gBAAkBx0C,EAAMuzC,eAC7BvzC,EAAMquC,KACJruC,EAAMquC,OAASrxB,EAAOi4B,mBAAkD,OAA7Bj4B,EAAOi4B,mBACpDj1C,EAAMutC,SAAU,OAChBnzC,KAAKg3C,UAGLh3C,KAAKq3C,aAAauD,OAAO,yBACzB56C,KAAKw6C,iBAAiBj5C,SAIxB,OAIJvB,KAAK+2C,W,uBAGP,SAAA+D,UAAUv5C,GACRvB,KAAKwyC,KAAKwH,YAAYz4C,GAEtB,IACMvB,KAAK4iB,OAAOq3B,gBAAkB14C,EAAM0J,OAAO8vC,kBAAkBx5C,EAAMiwC,YAErEjwC,EAAM0J,OAAO+vC,sBAAsBz5C,EAAMiwC,WAE3C,MAAOyJ,IACHC,EAKN,IAAMt1C,EAAQ5F,KAAK4F,MACbgd,EAAS5iB,KAAK4iB,OACpB,GAAKhd,EAAMqzC,eAAX,CACA,IAAMlzC,EAAKyrC,UAAUjwC,GACrB,IAAIqE,EAAMozC,YAAcjzC,IAAOH,EAAMozC,WAArC,CACAh5C,KAAK4F,MAAMqzC,gBAAiB,EAC5Bj5C,KAAK45C,YACL55C,KAAK00C,QAAQnzC,GACb,mBAAiBqE,EAAM6tC,UAAvB,GAAOzD,EAAP,KAAWE,GAAX,KAGA,GAFAtqC,EAAM0zC,IAAMtJ,GAAM,GAAKE,IAAM,EAEzBtqC,EAAM0zC,KAAO12B,EAAOu4B,WACtBv1C,EAAMytC,QAAS,MACV,CACL,oBAAqBztC,EAAMwuC,UAA3B,GAAOgH,GAAP,MAAaC,GAAb,MACA,gBAAiBz1C,EAAMyuC,SAAvB,GAAOiH,GAAP,MAAWC,GAAX,MACA,gBAAiB31C,EAAM0uC,SAAvB,GAAOkH,GAAP,MAAWC,GAAX,MACA,gBAAmB74B,EAAOy2B,MAAMhF,SAAhC,GAAOqH,GAAP,MAAYC,GAAZ,MACA,gBAAiB/4B,EAAOy2B,MAAM/I,SAA9B,GAAOsL,GAAP,MAAWC,GAAX,MACMC,GAAMl5B,EAAOy2B,MAAMxqC,SAErBjJ,EAAMuuC,YAAc2H,KAClB/8C,KAAK+0C,IAAIwH,IAAMI,IAAO38C,KAAK+0C,IAAI0H,IAAMI,KAAIh2C,EAAMyzC,MAAM,GAAK+B,IAC1Dr8C,KAAK+0C,IAAIyH,IAAMI,IAAO58C,KAAK+0C,IAAI2H,IAAMI,KAAIj2C,EAAMyzC,MAAM,GAAKgC,KAIlEr7C,KAAK+2C,W,0BAGP,SAAAgF,aAAax6C,GACNvB,KAAK4F,MAAM0zC,MACd/3C,EAAMqzC,iBACNrzC,EAAMy6C,qB,0BAIV,SAAA7B,aAAa54C,GACX,IAAMqhB,EAAS5iB,KAAK4iB,OAChB9Z,EAAS8Z,EAAO9Z,OAehB8Z,EAAOq5B,aACT16C,EAAM2vC,cAAcgL,qBAGjBt5B,EAAOq3B,iBACVj6C,KAAKo3C,WAAWG,IAAIv3C,KAAKm8C,aAAa33C,OAAQsE,EAAQ,SAAU9I,KAAKy6C,YAAYjB,KAAKx5C,OACtFA,KAAKo3C,WAAWG,IAAIv3C,KAAKm8C,aAAa33C,OAAQsE,EAAQ,MAAO9I,KAAK86C,UAAUtB,KAAKx5C,U,0BAIrF,SAAA65C,eACM75C,KAAK4iB,OAAOq5B,aAAehH,SAASC,qBAAuBl1C,KAAK4F,MAAMsrC,eACxE+D,SAASmH,oB,2BAIb,SAAAhC,cAAc74C,GACRvB,KAAK4F,MAAMuzC,gBAAkB53C,EAAMszC,YACrCtzC,EAAMqzC,mB,mCAIV,SAAAyF,sBAAsB94C,IAgExB,SAAS86C,aAAa96C,GACpB,YAAaA,GAAkC,oBAAlBA,EAAM+6C,SAA0B/6C,EAAM+6C,UAhEjED,CAAa96C,GACbvB,KAAKo3C,WAAWG,IAAIv3C,KAAKm8C,aAAa33C,OAAQ,QAAS,SAAUxE,KAAKo6C,cAAcZ,KAAKx5C,MAAO,CAC9Fu8C,SAAS,IAEXv8C,KAAKo3C,WAAWG,IAAIv3C,KAAKm8C,aAAa33C,OAAQ,QAAS,MAAOxE,KAAKg3C,MAAMwC,KAAKx5C,MAAO,CACnFu8C,SAAS,IAEXv8C,KAAKo3C,WAAWG,IAAIv3C,KAAKm8C,aAAa33C,OAAQ,QAAS,SAAUxE,KAAKg3C,MAAMwC,KAAKx5C,MAAO,CACtFu8C,SAAS,IAEXv8C,KAAKq3C,aAAaE,IAAI,mBAAoBv3C,KAAKw6C,iBAAiBhB,KAAKx5C,MAAOA,KAAK4iB,OAAOw3B,cAAe74C,K,+BAGzG,SAAAg5C,kBAAkBh5C,GAChBvB,KAAK4F,MAAMwzC,UAAW,EACtBp5C,KAAKq3C,aAAaE,IAAI,YAAav3C,KAAKw6C,iBAAiBhB,KAAKx5C,MAAOA,KAAK4iB,OAAO03B,MAAO/4C,K,qBAG1F,SAAAi7C,QAAQj7C,GACN,IAAMk7C,EAAUhE,GAAel3C,EAAM0a,KAC/BrW,EAAQ5F,KAAK4F,MAEnB,GAAI62C,EAAS,CACX,IAAM9D,EAASp3C,EAAM8zC,SAAW,GAAK9zC,EAAM+zC,OAAS,GAAM,EAC1D1vC,EAAM8tC,OAAS+I,EAAQ9D,GACvB34C,KAAK2Q,MAAMpP,GACXqE,EAAMszC,iBAAkB,EACxBtF,KAAEgC,MAAMhwC,EAAM4tC,UAAW5tC,EAAM8tC,QAC/B1zC,KAAK00C,QAAQnzC,GACbvB,KAAK+2C,U,mBAIT,SAAA2F,MAAMn7C,GACEA,EAAM0a,OAAOw8B,KACnBz4C,KAAK4F,MAAMszC,iBAAkB,EAC7Bl5C,KAAK45C,YACL55C,KAAK00C,QAAQnzC,GACbvB,KAAK+2C,U,kBAGP,SAAAyC,KAAKmD,GACH,IAAM7zC,EAAS9I,KAAK4iB,OAAO9Z,OAC3B6zC,EAAa7zC,EAAQ,QAAS9I,KAAK85C,YAAYN,KAAKx5C,OAEhDA,KAAK4iB,OAAOq3B,iBACd0C,EAAa7zC,EAAQ,SAAU9I,KAAKy6C,YAAYjB,KAAKx5C,OACrD28C,EAAa7zC,EAAQ,MAAO9I,KAAK86C,UAAUtB,KAAKx5C,OAChD28C,EAAa7zC,EAAQ,SAAU9I,KAAK86C,UAAUtB,KAAKx5C,QAGrD28C,EAAa,MAAO,OAAQ38C,KAAKw8C,QAAQhD,KAAKx5C,OAC9C28C,EAAa,MAAO,KAAM38C,KAAK08C,MAAMlD,KAAKx5C,OAEtCA,KAAK4iB,OAAOu4B,YACdwB,EAAa,QAAS,GAAI38C,KAAK+7C,aAAavC,KAAKx5C,MAAO,CACtDovC,SAAS,Q,YAhSQkI,IA2SzB,IAAMsF,GAA8B,qBAAXp4C,QAA0BA,OAAOywC,UAAYzwC,OAAOywC,SAAS4H,cAEtF,SAASC,sBACP,OAAOF,IAAa,iBAAkBp4C,OAuBxC,IAAMu4C,GAAU,CACdH,aACA9N,QAVF,SAASkO,wBACP,IACE,MAAO,gBAAiBC,aACxB,MAAOt+B,GACP,OAAO,GAMAq+B,GACTnO,MAAOiO,sBACPI,YAxBF,SAASC,gBACP,OAAOL,uBAAyBF,IAAap4C,OAAOC,UAAU24C,eAAiB,EAuBlED,GACbzO,QArBF,SAAS2O,wBACP,OAAOT,IAAa,kBAAmBp4C,OAoB9B64C,GACTpB,YAlBF,SAASqB,sBACP,OAAOV,IAAa,oBAAqBp4C,OAAOywC,SAiBnCqI,IAQTC,GAAqBlP,eAAeA,eAAe,GAAI2J,IAA4B,GAAI,CAC3FiE,YAD2F,qBAC/EhE,EAAIF,EAD2E,GAMxF,QAJDrJ,QAIC,gBADG,GACH,GAHC8O,YAGD,cAFC3O,cAED,WAED,OADA7uC,KAAKy9C,SAAWV,GAAQlO,OAASA,GAC1BkO,GAAQd,aAAeuB,GAGhC10C,OAX2F,gBAWpFmvC,EAAIF,GACT,OAAI/3C,KAAKy9C,SAAiB,QACtBz9C,KAAKi8C,YAAoB,QACzBc,GAAQrO,QAAgB,UACxBqO,GAAQlO,MAAc,QACnB,SAGTuL,cAnB2F,yBAqBxF,IAFW9xC,EAEX,qGADDuyC,yBACC,MADmB,IACnB,EAED,OADIA,IAAmB76C,KAAK66C,kBAAoBA,KAC3CkC,GAAQG,cACQ,kBAAV50C,EAA2BA,IAC/BA,GA9B0B,MAiCnC2xC,eA5B2F,wBA4B5EhC,EAAIF,EA5BwE,GAiCxF,QAJDrJ,QAIC,gBADG,GACH,GAHCU,eAGD,cAFCgG,gBAED,OAFW,EAEX,GAED,OADAp1C,KAAK+5C,eAAiB3E,IACdp1C,KAAKi8C,aAA+B,YAAhBj8C,KAAK8I,QAAwBsmC,GAG3D8D,UAtC2F,mBAsCjF5qC,EAAOyvC,EAtC0E,GAyCxF,QAFDoD,kBAEC,aADDlH,aACC,WADMj3C,EACN,EACKk2C,UAAYU,KAAEkE,SAASxvC,EAAO6yC,EAAa,EAAIlH,GAAO,EAAI,GAEhE,OADAj0C,KAAKm7C,WAAaA,EACXjI,WAGTmG,MA/C2F,iBAmDnF,6DAAJ,GAAI,IAHNhF,gBAGM,MAtDqB,GAsDrB,MAFN/D,gBAEM,MArDqB,GAqDrB,MADNzhC,iBACM,MApDqB,IAoDrB,EACN,MAAO,CACLwlC,SAAUr0C,KAAKizC,UAAUW,KAAEkE,SAASzD,IACpC/D,SAAUtwC,KAAKizC,UAAUW,KAAEkE,SAASxH,IACpCzhC,cAIJyrC,MA3D2F,iBA2D1E,IAAXhyC,EAAW,uDAAH,EACZ,OAAQA,GACN,KAAK,EACH,OAlEmB,IAoErB,KAAK,EACH,OAAO,EAET,QACE,OAAOA,MAyCf,IAEMo1C,G,wEACJ,uBAAqB,gEAAN7sB,EAAM,yBAANA,EAAM,uBACnB,+BAASA,IAET0c,gBAAgB,eAAM,SAAU,YAEhCA,gBAAgB,eAAM,WAAY,MALf,E,mDAQrB,SAAA5mB,OACE3mB,KAAK4F,MAAMpH,OAAS,CAAC,EAAG,GACxBwB,KAAK4F,MAAM6uC,WAAa,CAAC,EAAG,GAC5Bz0C,KAAK4F,MAAM+3C,eAAiB,IAAIC,M,mBAGlC,SAAAjL,QACE,yEACA,IAAM/sC,EAAQ5F,KAAK4F,MACnBA,EAAMi4C,UAAY,GAClBj4C,EAAM6zB,UAAW,EACjB7zB,EAAM2zC,OAASv5C,KAAKu5C,OAAOC,KAAKx5C,MAChC4F,EAAMk4C,MAAQ,I,2BAGhB,SAAApH,gBACE,MAII12C,KAAK4F,MAHP/E,EADF,EACEA,KACAyzC,EAFF,EAEEA,SACAG,EAHF,EAGEA,WAIAz0C,KAAK4F,MAAMpH,OADA,UAATqC,EACkB+yC,KAAE2D,IAAIjD,EAAUG,GAEhB,EAAE,EAAIH,EAAS,IAAMG,EAAW,GAAIH,EAAS,GAAKG,EAAW,M,6BAIrF,SAAAqC,kBACE,MAGI92C,KAAK4F,MAFPpH,EADF,EACEA,OACAi2C,EAFF,EAEEA,WAEFz0C,KAAK4F,MAAM0uC,SAAW,CAAC91C,EAAO,GAAKi2C,EAAW,GAAIj2C,EAAO,GAAKi2C,EAAW,M,oBAG3E,SAAA2B,OAAOrE,GACL,IAAMnsC,EAAQ5F,KAAK4F,MAEnB,IAAKA,EAAMquC,KAAM,CACf,IAAM8J,EApDyB,GAoDAh/C,KAAK+0C,IAAI/B,EAAE,IAAqChzC,KAAK+0C,IAAI/B,EAAE,IACtFgM,EAAyB,EAAGn4C,EAAMquC,KAAO,QAAiB8J,EAAyB,IAAGn4C,EAAMquC,KAAO,SAGrGj0C,KAAK4iB,OAAO80B,gBACK,UAAf9xC,EAAMquC,KAAkBlC,EAAE,GAAK,EAA0B,UAAfnsC,EAAMquC,OAAkBlC,EAAE,GAAK,M,oBAIjF,SAAAwH,SAAS,WACD3zC,EAAQ5F,KAAK4F,MACfA,EAAM6zB,UACV8C,YAAW,WACT32B,EAAM6zB,UAAW,EACjB7zB,EAAMutC,SAAU,EAChB,EAAKuB,UACL,EAAKqC,SACJ,K,wBAGL,SAAAiH,WAAWz8C,GACTvB,KAAKwyC,KAAKwH,YAAYz4C,GACtB,IAAMqE,EAAQ5F,KAAK4F,MACbq4C,EAAej+C,KAAKwyC,KAAK5B,SAE/B,KAAIhrC,EAAMutC,UACJvtC,EAAMi4C,UAAUK,OAAM,SAAAn4C,GAAE,OAAIk4C,EAAaE,IAAIp4C,UAG/Ck4C,EAAalJ,KAAO,GAAxB,CACA/0C,KAAK2Q,MAAMpP,GACXqE,EAAMi4C,UAAY3pB,MAAM4c,KAAKmN,GAAcn0C,MAAM,EAAG,GACpD,IAAM+T,EAAUyzB,mBAAmB/vC,EAAOqE,EAAMi4C,WAChD79C,KAAKo+C,WAAW78C,EAAOsc,M,0BAGzB,SAAAwgC,aAAa98C,GACX,GAAqB,MAAjBA,EAAM6zC,SAAmB7zC,EAAM6zC,QAAU,IAAM,EAAnD,CACAp1C,KAAKwyC,KAAKwH,YAAYz4C,GACtBA,EAAM0J,OAAOivC,kBAAkB34C,EAAMiwC,WACrC,IAAM5rC,EAAQ5F,KAAK4F,MACb+3C,EAAiB/3C,EAAM+3C,eACvBW,EAAiBt+C,KAAKwyC,KAAKsC,WAEjC,KAAIlvC,EAAMutC,UACJjf,MAAM4c,KAAK6M,EAAejjC,QAAQwjC,OAAM,SAAAn4C,GAAE,OAAIu4C,EAAeH,IAAIp4C,SAGnE43C,EAAe5I,KAAO,GACxB4I,EAAexvC,IAAI5M,EAAMiwC,UAAWjwC,KAGlCqE,EAAM+3C,eAAe5I,KAAO,IAAhC,CACA/0C,KAAK2Q,MAAMpP,GACX,IAAMsc,EAAUgyB,cAAa,WAAb,cAAiB3b,MAAM4c,KAAK6M,EAAelL,YAC3DzyC,KAAKo+C,WAAW78C,EAAOsc,O,wBAGzB,SAAAugC,WAAW78C,EAAOsc,GAChB,IAAMjY,EAAQ5F,KAAK4F,MACnBA,EAAM+qC,OAAS9yB,EAAQ8yB,OACvB/qC,EAAM6sC,OAAS,CAAC50B,EAAQyyB,SAAUzyB,EAAQ2yB,OAC1C5qC,EAAM8sC,QAAU9sC,EAAM6sC,OACtBzyC,KAAK00C,QAAQnzC,GACbvB,KAAK+2C,S,uBAGP,SAAAwH,UAAUh9C,GACR,GAAKvB,KAAK4F,MAAMutC,QAAhB,CACA,IAAMt1B,EAAUyzB,mBAAmB/vC,EAAOvB,KAAK4F,MAAMi4C,WACrD79C,KAAKw+C,UAAUj9C,EAAOsc,M,yBAGxB,SAAA48B,YAAYl5C,GACV,IAAMo8C,EAAiB39C,KAAK4F,MAAM+3C,eAMlC,GAJIA,EAAeQ,IAAI58C,EAAMiwC,YAC3BmM,EAAexvC,IAAI5M,EAAMiwC,UAAWjwC,GAGjCvB,KAAK4F,MAAMutC,QAAhB,CACA,IAAMt1B,EAAUgyB,cAAa,WAAb,cAAiB3b,MAAM4c,KAAK6M,EAAelL,YAC3DzyC,KAAKw+C,UAAUj9C,EAAOsc,M,uBAGxB,SAAA2gC,UAAUj9C,EAAOsc,GACf,IAAMjY,EAAQ5F,KAAK4F,MACb64C,EAAS74C,EAAM6sC,OAAO,GACtBiM,EAAU7gC,EAAQ2yB,MAAQiO,EAC5BE,EAAc,EACd5/C,KAAK+0C,IAAI4K,GAAW,MAAKC,GAAe5/C,KAAKo3C,KAAKuI,IACtD94C,EAAM6sC,OAAS,CAAC50B,EAAQyyB,SAAUzyB,EAAQ2yB,MAAQ,IAAMmO,GACxD/4C,EAAM+qC,OAAS9yB,EAAQ8yB,OACvB/qC,EAAMk4C,MAAQa,EACd/4C,EAAM4tC,UAAY,CAAC5tC,EAAM6sC,OAAO,GAAK7sC,EAAM8sC,QAAQ,GAAK,EAAG9sC,EAAM6sC,OAAO,GAAK7sC,EAAM8sC,QAAQ,IAC3F1yC,KAAK00C,QAAQnzC,GACbvB,KAAK+2C,S,sBAGP,SAAA6H,SAASr9C,GAAO,WACdvB,KAAKwyC,KAAKwH,YAAYz4C,GACjBvB,KAAK4F,MAAMutC,SAEZnzC,KAAK4F,MAAMi4C,UAAUgB,MAAK,SAAA94C,GAAE,OAAK,EAAKysC,KAAK5B,SAASuN,IAAIp4C,QAC1D/F,KAAK4F,MAAMutC,SAAU,EACrBnzC,KAAK00C,QAAQnzC,GACbvB,KAAK+2C,U,wBAIT,SAAA+H,WAAWv9C,GACT,IAAMqE,EAAQ5F,KAAK4F,MACnB5F,KAAKwyC,KAAKwH,YAAYz4C,GAEtB,IACEA,EAAM0J,OAAO+vC,sBAAsBz5C,EAAMiwC,WACzC,MAAOyJ,IAELr1C,EAAM+3C,eAAeQ,IAAI58C,EAAMiwC,YACjC5rC,EAAM+3C,eAAeoB,OAAOx9C,EAAMiwC,WAG/B5rC,EAAMutC,SAEPvtC,EAAM+3C,eAAe5I,KAAO,IAC9BnvC,EAAMutC,SAAU,EAChBnzC,KAAK00C,QAAQnzC,GACbvB,KAAK+2C,U,0BAIT,SAAAiI,aAAaz9C,GACPA,EAAMszC,YAAYtzC,EAAMqzC,iBAC5B,IAAMhvC,EAAQ5F,KAAK4F,MACfA,EAAMutC,UACVnzC,KAAK2Q,MAAMpP,GACXqE,EAAM6sC,OAAS,CAAClxC,EAAM09C,MAAO19C,EAAM29C,UACnCt5C,EAAM+qC,OAAS,CAACpvC,EAAM0uC,QAAS1uC,EAAM4uC,SACrCnwC,KAAK00C,QAAQnzC,GACbvB,KAAK+2C,U,yBAGP,SAAAoI,YAAY59C,GAEV,GADIA,EAAMszC,YAAYtzC,EAAMqzC,iBACvB50C,KAAK4F,MAAMutC,QAAhB,CACA,IAAMvtC,EAAQ5F,KAAK4F,MACnBA,EAAM6sC,OAAS,CAAClxC,EAAM09C,MAAO19C,EAAM29C,UACnCt5C,EAAM+qC,OAAS,CAACpvC,EAAM0uC,QAAS1uC,EAAM4uC,SACrC,IAAMiP,EAAoBx5C,EAAM4tC,UAChC5tC,EAAM4tC,UAAY,CAACjyC,EAAM09C,MAAQ,EAAG19C,EAAM29C,UAC1Ct5C,EAAM8tC,OAASE,KAAEC,IAAIjuC,EAAM4tC,UAAW4L,GACtCp/C,KAAK00C,QAAQnzC,GACbvB,KAAK+2C,U,wBAGP,SAAAsI,WAAW99C,GACJvB,KAAK4F,MAAMutC,UAChBnzC,KAAK4F,MAAMutC,SAAU,EACrBnzC,KAAK00C,QAAQnzC,GACbvB,KAAK+2C,U,mBAGP,SAAAuI,MAAM/9C,GACCA,EAAMi0C,UACNx1C,KAAK4F,MAAMutC,QAAqCnzC,KAAKu/C,YAAYh+C,GAA7CvB,KAAKw/C,WAAWj+C,GACzCvB,KAAKq3C,aAAaE,IAAI,WAAYv3C,KAAKy/C,SAASjG,KAAKx5C,U,wBAGvD,SAAAw/C,WAAWj+C,GACTvB,KAAK2Q,MAAMpP,GACXvB,KAAKu/C,YAAYh+C,K,yBAGnB,SAAAg+C,YAAYh+C,GACK,OAAQA,GAGjBA,EAAMszC,YACRtzC,EAAMqzC,iBAQV,IAAMhvC,EAAQ5F,KAAK4F,MACnBA,EAAM8tC,OAAS,EAAE/B,YAAYpwC,GAAO,GA9Od,GA8OuCqE,EAAMpH,OAAO,GAAI,GAC9Eo1C,KAAEgC,MAAMhwC,EAAM4tC,UAAW5tC,EAAM8tC,QAC/B1zC,KAAK4F,MAAM+qC,OAAS,CAACpvC,EAAM0uC,QAAS1uC,EAAM4uC,SAC1CnwC,KAAK00C,QAAQnzC,GACbvB,KAAK+2C,S,sBAGP,SAAA0I,WACOz/C,KAAK4F,MAAMutC,UAChBnzC,KAAK4F,MAAMutC,SAAU,EACrBnzC,KAAK00C,UACL10C,KAAK+2C,U,kBAGP,SAAAyC,KAAKmD,GACH,IAAM7zC,EAAS9I,KAAK4iB,OAAO9Z,OAErBA,GACJ6zC,EAAa7zC,EAAQ,QAAS9I,KAAK8I,EAAS,SAAS0wC,KAAKx5C,OAC1D28C,EAAa7zC,EAAQ,SAAU9I,KAAK8I,EAAS,QAAQ0wC,KAAKx5C,OAC1D28C,EAAa7zC,EAAQ,MAAO9I,KAAK8I,EAAS,OAAO0wC,KAAKx5C,OACtD28C,EAAa7zC,EAAQ,SAAU9I,KAAK8I,EAAS,OAAO0wC,KAAKx5C,QAEzD28C,EAAa,QAAS,GAAI38C,KAAKs/C,MAAM9F,KAAKx5C,MAAO,CAC/Cu8C,SAAS,Q,aArQShK,IA4QpBmN,GAAsBrR,eAAeA,eAAe,GAAIwJ,IAAuB,GAAI,CACvF4F,SADuF,kBAC9ExF,EAAIF,EAD0E,GAKpF,QAHDrJ,QAGC,gBADG,GACH,GAFCG,aAED,SACD,OAAOkO,GAAQlO,OAASA,GAG1B/lC,OATuF,gBAShFmvC,EAAIF,EAAIn1B,GAEb,GADqBA,EAAOgwB,OACX3nC,SAAW8xC,GAAQlO,OAASkO,GAAQjO,QAAS,MAAO,UACrE,GAAI9uC,KAAKy9C,SAAU,MAAO,QAE1B,GAAIV,GAAQG,YAAa,CACvB,GAAIH,GAAQrO,QAAS,MAAO,UAC5B,GAAIqO,GAAQlO,MAAO,MAAO,UAI9B0H,OApBuF,gBAoBhF0B,EAAIF,EApB4E,GAuBpF,QAFD4H,mBAEC,MAFa,GAEb,MADDC,oBACC,MADa,GACb,EACKC,GAAe,SAAfA,aAAej6C,GACnB,IAAMk6C,EAAI1N,cAAchB,KAAKuO,EAAa/5C,GAAQ,CAChD3G,KAAM+0C,IACNh1C,IAAKg1C,MAEP,MAAO,CAAC8L,EAAE7gD,IAAK6gD,EAAE9gD,MAGb+gD,GAAe,SAAfA,aAAen6C,GACnB,IAAMo6C,EAAI5N,cAAchB,KAAKwO,GAAah6C,GAAQ,CAChD3G,KAAM+0C,IACNh1C,IAAKg1C,MAEP,MAAO,CAACgM,EAAE/gD,IAAK+gD,EAAEhhD,MAGnB,MAA2B,oBAAhB2gD,GAAqD,oBAAhBC,GAAmC,CAACC,KAAgBE,MAC7F,SAAAn6C,GAAK,MAAI,CAACi6C,GAAaj6C,GAAQm6C,GAAan6C,MAGrDstC,UA5CuF,mBA4C7E5qC,EAAOyvC,EAAIn1B,GACnB5iB,KAAK03C,cAAgC,SAAhB90B,EAAOqxB,KAC5B,IAAMf,UAAYU,KAAEkE,SAASxvC,EAAOtI,KAAK03C,cAAgB,CAAC,GAAK,GAAK,GACpE,OAAOxE,aAKL+M,G,sEACJ,sBAAqB,+DAANpvB,EAAM,yBAANA,EAAM,uBACnB,+BAASA,IAET0c,gBAAgB,eAAM,SAAU,UAHb,E,kDAMrB,SAAA2S,KAAK3+C,GACCvB,KAAK4iB,OAAOu9B,WAAmC,UAAtB5+C,EAAM6+C,cAC9BpgD,KAAK4F,MAAMutC,QAAoCnzC,KAAKqgD,WAAW9+C,GAA3CvB,KAAKsgD,UAAU/+C,GACxCvB,KAAKq3C,aAAaE,IAAI,UAAWv3C,KAAKugD,QAAQ/G,KAAKx5C,U,uBAGrD,SAAAsgD,UAAU/+C,GACRvB,KAAK2Q,MAAMpP,GACX,IAAMqE,EAAQ5F,KAAK4F,MACnBA,EAAM6sC,OAASf,cAAcnwC,GAC7BvB,KAAK00C,QAAQnzC,GACbqE,EAAM8sC,QAAU9sC,EAAM6sC,OACtBzyC,KAAK+2C,S,wBAGP,SAAAsJ,WAAW9+C,GACT,GAAKvB,KAAK4F,MAAMutC,QAAhB,CACA,IAAMV,EAASf,cAAcnwC,GACvBqE,EAAQ5F,KAAK4F,MACnBA,EAAM8tC,OAASE,KAAEC,IAAIpB,EAAQ7sC,EAAM6sC,QACnCmB,KAAEgC,MAAMhwC,EAAM4tC,UAAW5tC,EAAM8tC,QAC/B9tC,EAAM6sC,OAASA,EACfzyC,KAAK00C,QAAQnzC,GACbvB,KAAK+2C,U,qBAGP,SAAAwJ,QAAQh/C,GACDvB,KAAK4F,MAAMutC,UAChBnzC,KAAK4F,MAAMutC,SAAU,EACrBnzC,KAAK00C,QAAQnzC,GACbvB,KAAK+2C,U,kBAGP,SAAAyC,KAAKmD,GACHA,EAAa,UAAW,SAAU38C,KAAKkgD,KAAK1G,KAAKx5C,OACjD28C,EAAa,UAAW,QAAS38C,KAAKugD,QAAQ/G,KAAKx5C,W,YA1C9Bs3C,IA+CnBkJ,GAAqBnS,eAAeA,eAAe,GAAI2J,IAA4B,GAAI,CAC3FmI,UAAW,yBAAC73C,IAAD,gEAAkBA,KAGzBm4C,G,0EACJ,wBAAqB,iEAAN5vB,EAAM,yBAANA,EAAM,uBACnB,+BAASA,IAET0c,gBAAgB,eAAM,SAAU,aAHb,E,sDAMrB,SAAAmT,OAAOn/C,GACAvB,KAAK4F,MAAMutC,SAASnzC,KAAK2Q,MAAMpP,GACpCvB,KAAK2gD,aAAap/C,GAClBvB,KAAKq3C,aAAaE,IAAI,YAAav3C,KAAK4gD,UAAUpH,KAAKx5C,S,0BAGzD,SAAA2gD,aAAap/C,GACPA,EAAMszC,YAAYtzC,EAAMqzC,iBAC5B,IAAMhvC,EAAQ5F,KAAK4F,MACb6sC,EAvuCV,SAASoO,aAAat/C,GACpB,IAAIu/C,EAAMC,EAEV,EAKIx/C,EAAM2vC,cAJR8P,EADF,EACEA,QACAC,EAFF,EAEEA,QACAC,GAHF,EAGEA,WACAC,GAJF,EAIEA,UAEF,MAAO,CAA4E,QAA1EL,EAAmB,OAAZE,QAAgC,IAAZA,EAAqBA,EAAUE,UAAiC,IAATJ,EAAkBA,EAAO,EAA8E,QAA1EC,EAAoB,OAAZE,QAAgC,IAAZA,EAAqBA,EAAUE,UAAiC,IAAVJ,EAAmBA,EAAQ,GA8tCpNF,CAAat/C,GAC5BqE,EAAM8tC,OAASE,KAAEC,IAAIpB,EAAQ7sC,EAAM6sC,QACnCmB,KAAEgC,MAAMhwC,EAAM4tC,UAAW5tC,EAAM8tC,QAC/B9tC,EAAM6sC,OAASA,EACfzyC,KAAK00C,QAAQnzC,GACbvB,KAAK+2C,S,uBAGP,SAAA6J,YACO5gD,KAAK4F,MAAMutC,UAChBnzC,KAAK4F,MAAMutC,SAAU,EACrBnzC,KAAK00C,UACL10C,KAAK+2C,U,kBAGP,SAAAyC,KAAKmD,GACHA,EAAa,SAAU,GAAI38C,KAAK0gD,OAAOlH,KAAKx5C,W,cAhCrBs3C,IAqCrB8J,GAAuBpJ,GAEvBqJ,G,wEACJ,uBAAqB,gEAANxwB,EAAM,yBAANA,EAAM,uBACnB,+BAASA,IAET0c,gBAAgB,eAAM,SAAU,YAHb,E,oDAMrB,SAAA+R,MAAM/9C,GACCvB,KAAK4F,MAAMutC,SAASnzC,KAAK2Q,MAAMpP,GACpCvB,KAAKu/C,YAAYh+C,GACjBvB,KAAKq3C,aAAaE,IAAI,WAAYv3C,KAAKy/C,SAASjG,KAAKx5C,S,yBAGvD,SAAAu/C,YAAYh+C,GACV,IAAMqE,EAAQ5F,KAAK4F,MACnBA,EAAM8tC,OAAS/B,YAAYpwC,GAC3BqyC,KAAEgC,MAAM51C,KAAK4F,MAAM4tC,UAAW5tC,EAAM8tC,QACpC1zC,KAAK00C,QAAQnzC,GACbvB,KAAK+2C,S,sBAGP,SAAA0I,WACOz/C,KAAK4F,MAAMutC,UAChBnzC,KAAK4F,MAAMutC,SAAU,EACrBnzC,KAAK00C,UACL10C,KAAK+2C,U,kBAGP,SAAAyC,KAAKmD,GACHA,EAAa,QAAS,GAAI38C,KAAKs/C,MAAM9F,KAAKx5C,W,aA7BpBs3C,IAkCpBgK,GAAsBtJ,GAEtBuJ,G,wEACJ,uBAAqB,gEAAN1wB,EAAM,yBAANA,EAAM,uBACnB,+BAASA,IAET0c,gBAAgB,eAAM,SAAU,YAHb,E,oDAMrB,SAAAiU,MAAMjgD,GACAvB,KAAK4iB,OAAOu9B,WAAmC,UAAtB5+C,EAAM6+C,cACnCpgD,KAAK2Q,MAAMpP,GACXvB,KAAK4F,MAAM6sC,OAASf,cAAcnwC,GAClCvB,KAAK00C,QAAQnzC,GACbvB,KAAK+2C,U,mBAGP,SAAAtkB,MAAMlxB,GACJ,IAAIvB,KAAK4iB,OAAOu9B,WAAmC,UAAtB5+C,EAAM6+C,YAAnC,CACA,IAAMx6C,EAAQ5F,KAAK4F,MACnB,GAAKA,EAAMutC,QAAX,CACAvtC,EAAMutC,SAAU,EAChB,IAAMV,EAASf,cAAcnwC,GAC7BqE,EAAM4tC,UAAY5tC,EAAM8tC,OAASE,KAAEC,IAAIpB,EAAQ7sC,EAAM6sC,QACrD7sC,EAAM6sC,OAASA,EACfzyC,KAAK00C,QAAQnzC,GACbqE,EAAM2uC,MAAQ3uC,EAAM0uC,SACpBt0C,KAAK+2C,W,kBAGP,SAAAyC,KAAKmD,GACHA,EAAa,UAAW,QAAS38C,KAAKwhD,MAAMhI,KAAKx5C,OACjD28C,EAAa,UAAW,QAAS38C,KAAKyyB,MAAM+mB,KAAKx5C,W,aA9B3Bs3C,IAmCpBmK,GAAsBpT,eAAeA,eAAe,GAAI2J,IAA4B,GAAI,CAC5FmI,UAAW,yBAAC73C,IAAD,gEAAkBA,KAGzBo5C,GAAY,IAAI9D,IAChB+D,GAAoB,IAAI/D,IAC9B,SAASgE,eAAezS,GACtBuS,GAAUvzC,IAAIghC,EAAOlzB,IAAKkzB,EAAO0S,QACjCF,GAAkBxzC,IAAIghC,EAAOlzB,IAAKkzB,EAAO2S,UAE3C,IAAMC,GAAa,CACjB9lC,IAAK,OACL4lC,OAAQ9I,GACR+I,SAAUvE,IAENyE,GAAc,CAClB/lC,IAAK,QACL4lC,OAAQN,GACRO,SAAUL,IAENQ,GAAa,CACjBhmC,IAAK,OACL4lC,OAAQ5B,GACR6B,SAAUtB,IAEN0B,GAAc,CAClBjmC,IAAK,QACL4lC,OAAQnE,GACRoE,SAAUpC,IAENyC,GAAe,CACnBlmC,IAAK,SACL4lC,OAAQpB,GACRqB,SAAUV,IAENgB,GAAc,CAClBnmC,IAAK,QACL4lC,OAAQR,GACRS,SAAUR,K,6BC5gDZ,SAASe,WAeP,OAdAA,SAAW5nC,OAAO63B,QAAU,SAAUrnC,GACpC,IAAK,IAAIvM,EAAI,EAAGA,EAAI4vC,UAAUlxC,OAAQsB,IAAK,CACzC,IAAI4D,EAASgsC,UAAU5vC,GAEvB,IAAK,IAAIud,KAAO3Z,EACVmY,OAAO6nC,UAAUzf,eAAeuO,KAAK9uC,EAAQ2Z,KAC/ChR,EAAOgR,GAAO3Z,EAAO2Z,IAK3B,OAAOhR,GAGFo3C,SAASjU,MAAMpuC,KAAMsuC,WAG9B,SAASiU,8BAA8BjgD,EAAQkgD,GAC7C,GAAc,MAAVlgD,EAAgB,MAAO,GAC3B,IAEI2Z,EAAKvd,EAFLuM,EAAS,GACTw3C,EAAahoC,OAAOC,KAAKpY,GAG7B,IAAK5D,EAAI,EAAGA,EAAI+jD,EAAWrlD,OAAQsB,IACjCud,EAAMwmC,EAAW/jD,GACb8jD,EAAShwC,QAAQyJ,IAAQ,IAC7BhR,EAAOgR,GAAO3Z,EAAO2Z,IAGvB,OAAOhR,EA9BT,wG,0ECGaoR,EAAb,sDACkB,EAAAqmC,QAAkB,4BAClB,EAAApmC,aAAuB,iBACvB,EAAAqmC,YAAsB,eACtB,EAAAn/B,oBAA8B,kBAC9B,EAAAo/B,KAAe,OACf,EAAAC,UAAoB,cACpB,EAAAC,gBAA0B,aAC1B,EAAAC,iBAA2B,e,6BCX7C,yuBAEIC,EAAqB,qBACrBC,EAAY,WAEZC,GAAiB,QACjBC,GAAgB,OAChBC,GAAmB,UACnBC,GAAkB,SAElBC,GAAe,UAEfC,IAAqB,EACrBC,GAAiCC,wBAAcF,IAC/CG,GAAmCD,wBAAc,IACjDE,GAA+BF,wBAAc,IAC7CG,GAAoCH,wBAAc,IAClDI,GAAiCJ,wBAAc,IAC/CK,GAA+BL,wBAAc,IAC7CM,GAAmCN,wBAAc,IACjDO,GAAoBvpC,OAAOwpC,OAAO,CACpCC,MAAO,QACPC,IAAK,SACLC,MAAO,IACPC,KAAM,OACNC,IAAK,MACLC,KAAM,YACNC,MAAO,aACPC,GAAI,UACJC,KAAM,cAEJC,GAAqClqC,OAAOwpC,OAAO,CACrDW,MAAO,cACPC,IAAK,YACLC,MAAO,cACPC,SAAU,iBACVC,SAAU,iBACVC,MAAO,cACPC,KAAM,eAEJC,GAAkC1qC,OAAOwpC,OAAO,CAClDmB,KAAM,eACNC,MAAO,kBAELC,GAA2B7qC,OAAOwpC,OAAO,CAC3CsB,MAAO,QACPC,OAAQ,SACRC,KAAM,OACNC,OAAQ,WAENC,GAA8BlrC,OAAOwpC,OAAO,CAC9C2B,QAAS,UACTX,MAAO,QACPC,KAAM,SAEJW,GAA4BprC,OAAOwpC,OAAO,CAC5C6B,SAAU,UACVC,QAAS,OACTC,QAAS,UACTC,OAAQ,Y,6BC3DV,8fAEIC,EAAa,SAASA,WAAWtgD,GACnC,QAASA,GAAsB,MAAbA,EAAM,IAEtBugD,EAAiBC,2BAA2B,SAAUC,GACxD,OAAOA,KAOLC,IALS7rC,OAAOg4B,OAKH,SAAS6T,WAAWC,EAAGC,EAAGC,GAKzC,YAJa,IAATA,IACFA,EAAO,MAGF1nD,KAAK+0C,IAAIyS,EAAIC,GAAKC,IAEvBC,GAAgB,SAASA,cAAcC,EAAY5pD,GACrD,SAAU4pD,IAAcA,EAAW5pD,MAAyB,IAAf4pD,GAE3CC,GAAW,SAASA,SAASzU,EAAI0U,GACnC,MAAqB,oBAAP1U,EAAoBA,EAAG0U,GAAO1U,GAE1C2U,GAAU,SAASA,QAAQC,GAC7B,OAAOA,GAAaA,EAAS,aAE3BC,GAAa,SAASA,WAAWD,EAAWhqD,GAC9C,OAAOA,EAAO0d,OAAOgzB,eAAesZ,EAAW,cAAe,CAC5Dz+C,MAAOvL,IACJgqD,GAEHE,GAAW,SAASA,SAASC,GAC/B,OAAO,WACL,OAAOF,GAAWE,EAAI9Y,WAAM,EAAQE,WAAYwY,GAAQxY,UAAUlxC,QAAU,OAAIJ,EAAYsxC,UAAU,OAGtG6Y,GAAe,SAASA,aAAaC,GACvC,OAAO,SAAUC,GACf,OAAOL,GAAWK,EAAkBP,GAAQM,MAG5CE,GAAqB,SAASA,mBAAmBvU,EAAUtP,GAC7D,IAAKA,EAAO,OAAOsP,EAqBnB,IApBA,IAAIrsC,EAAS,GAET6gD,EAAQ,SAASA,MAAMC,EAAKC,GAC9B,IAAIC,EAAcD,EAAcD,GAC5BtQ,GAAUnE,EAAS2U,GACnBC,GAAclkB,EAAMikB,GACpBE,QAAkB,EAGpBA,GADyB,oBAAhBD,GACS,SAASC,gBAAgBjpC,GACzCgpC,GAAYhpC,GACZu4B,GAAQv4B,IAGQu4B,GAGpBxwC,EAAOghD,GAAeE,IAGfJ,EAAM,EAAGC,EAAgBhtC,OAAOC,KAAKq4B,GAAWyU,EAAMC,EAAcrqD,OAAQoqD,IACnFD,EAAMC,EAAKC,GAGb,OAAO/gD,GAELmhD,GAAe,SAASA,aAAaC,GACvC,GAA0B,kBAAfA,EAAyB,MAAO,CACzCxP,IAAK,EACLD,MAAO,EACPE,OAAQ,EACRH,KAAM,GAER,IAAI2P,EAAUD,EAAW3qD,OAAOyX,MAAM,MAAO,GAAG2X,IAAI7C,YAChD4uB,EAAO0P,MAAMD,EAAQ,IAAmB,EAAbA,EAAQ,GACnC1P,EAAS2P,MAAMD,EAAQ,IAAmBzP,EAAbyP,EAAQ,GACzC,MAAO,CACLzP,IAAKA,EACLD,MAAOA,EACPE,OAASyP,MAAMD,EAAQ,IAAmBzP,EAAbyP,EAAQ,GACrC3P,KAAO4P,MAAMD,EAAQ,IAAmB1P,EAAb0P,EAAQ,KAGnCE,GAAoB,SAASA,kBAAkBC,GACjD,KAAOA,GAAQA,IAASjT,SAASpiB,MAAM,CACrC,IAAIs1B,EAAoBC,iBAAiBF,GACrCG,EAAWF,EAAkBE,SAC7BC,EAAYH,EAAkBG,UAC9BC,EAAYJ,EAAkBI,UAElC,GAAI,6BAA6BC,KAAKH,EAAWE,EAAYD,GAAY,OAAOJ,EAChFA,EAAOA,EAAKO,WAGd,OAAOjkD,QAELkkD,GAAgB,SAASA,cAAcx+C,EAAOy+C,EAAYT,KAM9D,SAASU,YAAYD,EAAYE,GAC/B,MAAO,CACL,gBAAiBF,QAAc3rD,EAC/B8rD,SAAUH,OAAa3rD,EAAY6rD,EAAa,GAAK,K,yIC5G7CE,E,+BAAZ,SAAYA,GACR,iBACA,qBACA,qBACA,iBACA,6BACA,2BACA,6BACA,mBACA,mBACA,oBAVJ,CAAYA,MAAc,KAiBnB,IAAejiD,GAAtB,4JASW,iCACH,OAAOkiD,GAAsB//C,0BAVrC,2BAyBW,uBAAqBggD,EAA0BrhD,EAAuBE,EAAkByD,GAC3F,OAAO,IAAIy9C,GAAsBC,EAAkBrhD,EAAeE,EAAUyD,KA1BpF,8BAwCW,0BAAwB09C,EAA0BrhD,EAAuBE,GAC5E,OAAO,IAAIkhD,GAAsBC,EAAkBrhD,EAAeE,OAzC1E,qBA0DakhD,GAAb,0FAWI,iCAA+I,MAA5H9hD,EAA4H,uDAApG,KAAOU,EAA6F,uDAArE,GAAIE,EAAiE,uDAA9C,EAAGyD,GAA2C,uDAAlBw9C,EAAeh9C,IAAG,0CAC3I,gBAwJMxN,UAAY,SAACH,EAAgBI,EAAgBC,GACnD,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAIrB,OAAQsB,IAC5BN,EAAKO,SAASH,EAASE,EAAGD,EAAIG,WAAWF,KAxJ7C,IAAIwqD,IAAuB,EAE3B,OAAQ39C,IACJ,KAAKw9C,EAAeh9C,IAChB,EAAKuB,UAAY,EACjB,MACJ,KAAKy7C,EAAe38C,KAChB,EAAKkB,UAAY,EACjB,MACJ,KAAKy7C,EAAe/8C,MAChB,EAAKsB,UAAY,EACjB,MACJ,QACI47C,IAAc,EAQtB,GANA,EAAKthD,cAAgBA,EACrB,EAAKV,cAAgBA,EACrB,EAAKY,SAAWA,EAChB,EAAKX,eAAiB,EAAKD,cAAgB,EAAKY,UAAY,EAAKF,cAAgB,GACjF,EAAKuhD,WAAa,EAAKrhD,SAAW/I,KAAKC,IAAI,EAAK4I,cAAe,GAE3DshD,GAAa,CACb,EAAKE,WAAa,IAAIjrD,YAAY,IAGlC,IAAMC,GAAO,IAAIC,SAAS,EAAK+qD,YAG/B,EAAK7qD,UAAUH,GAAM,EAAG,QAExBA,GAAKirD,UAAU,EAAG,GAAG,GAErB,EAAK9qD,UAAUH,GAAM,EAAG,YAExBA,GAAKirD,UAAU,GAAI,IAAI,GAEvBjrD,GAAKkrD,UAAU,GAAI,EAAKh8C,WAAW,GAEnClP,GAAKkrD,UAAU,GAAI,EAAKxhD,UAAU,GAElC1J,GAAKirD,UAAU,GAAI,EAAKniD,eAAe,GAEvC9I,GAAKirD,UAAU,GAAI,EAAKliD,gBAAgB,GAExC/I,GAAKkrD,UAAU,GAAI,EAAKxhD,UAAY,EAAKF,cAAgB,IAAI,GAE7DxJ,GAAKkrD,UAAU,GAAI,EAAK1hD,eAAe,GAEvC,EAAKrJ,UAAUH,GAAM,GAAI,QAEzBA,GAAKirD,UAAU,GAAI,GAAG,GArDiH,SAXnJ,8DA8GW,SAAA9iD,WA9GX,kBAgKI,eACI,OAAOvG,KAAKopD,cAjKpB,oCA2EW,iCACH,OAAO,IAAIJ,wBA5EnB,6BAsFW,yBAAuBzoD,GAE1B,IAAM6N,EAAgB5J,OAAe4J,cAC7B5J,OAAe6J,qBAChB,EAGP,GAAMD,EACF,YAAmBpR,IAAfuD,GAA4BkE,UAAUK,aAAaykD,0BAA0BhpD,WACtE,IAAI6N,EAAa,CAAE7N,eAEnB,IAAI6N,EAGf,MAAM,IAAInR,MAAM,+EApG5B,uBAA2C6J,K,gpBCvDrB0iD,GAAtB,WAMI,kEANJ,0EAsBW,4BACH,OAAOC,GAAsB9mC,aAvBrC,qBAuCsB8mC,GAAtB,wQASW,kBACH,OAAO,IAAIC,OAVnB,uBAAoDF,IAqCvCE,GAAb,mGAUI,gGACI,gBACKtkD,OAAS,eACd,EAAKukD,WAAa,IAAI,KAH1B,EAVJ,iEA8BI,eACI,OAAO3pD,KAAKqN,YA/BpB,IAoBI,aAAkB9B,QACCvO,IAAXuO,GAAmC,OAAXA,IACxBvL,KAAKqN,WAAa,KAAsBu8C,0BAE5C5pD,KAAKqN,WAAa9B,IAxB1B,oBAwCI,eACI,OAAOvL,KAAK2pD,WAAWhoD,WAzC/B,gBAkDW,SAAAoE,KACH,OAAO/F,KAAKoF,SAnDpB,kBA8DiB,SAAAkB,KAAKujD,G,0JACRC,EAAqB,IAAI74C,UAAU44C,GACrCE,EAAqB,OAEM/sD,IAA3BgD,KAAKgqD,kB,sBACDhqD,KAAKgqD,kBAAkB5sD,OAASysD,EAAWx+C,Y,uBAC3Cy+C,EAAQ37C,IAAInO,KAAKgqD,kBAAkBlgD,MAAM,EAAG+/C,EAAWx+C,aACvDrL,KAAKgqD,kBAAoBhqD,KAAKgqD,kBAAkBlgD,MAAM+/C,EAAWx+C,Y,kBAC1D/D,QAAQ/B,QAAQskD,EAAWx+C,a,OAEtCy+C,EAAQ37C,IAAInO,KAAKgqD,mBACjBD,EAAa/pD,KAAKgqD,kBAAkB5sD,OACpC4C,KAAKgqD,uBAAoBhtD,E,aAItB+sD,EAAaF,EAAWx+C,aAAerL,KAAK2pD,WAAWM,Y,iBACjB,O,UAAMjqD,KAAK2pD,WAAWrjD,O,gBACjDtJ,KADRwO,E,SACsBA,EAAM1J,M,iBAC1BooD,O,EACA1+C,EAAMtN,OAAOmN,WAAaw+C,EAAWx+C,WAAa0+C,GAClDG,EAAY1+C,EAAMtN,OAAO4L,MAAM,EAAG+/C,EAAWx+C,WAAa0+C,GAC1D/pD,KAAKgqD,kBAAoB,IAAI/4C,UAAUzF,EAAMtN,OAAO4L,MAAM+/C,EAAWx+C,WAAa0+C,KAElFG,EAAY1+C,EAAMtN,OAEtB4rD,EAAQ37C,IAAI,IAAI8C,UAAUi5C,GAAYH,GACtCA,GAAcG,EAAU7+C,W,wBAExB,O,UAAMrL,KAAK2pD,WAAWvjD,Y,yDAGvB2jD,G,yDA9Ff,mBAwGW,SAAAl9C,MAAMg9C,GACT,KAAU3sD,uBAAuB8C,KAAK2pD,WAAY,kCAClD3pD,KAAK2pD,WAAW9nD,iBAAiB,CAC7B3D,OAAQ2rD,EACR/nD,OAAO,EACPC,aAAcC,KAAKC,UA7G/B,mBAuHW,SAAAsE,QACHvG,KAAK2pD,WAAWpjD,YAxHxB,2BAA+CkjD,IAgIzBU,GAAtB,2FAKI,8FALJ,oEAiBW,gBAAc9D,GACjB,OAAO,IAAI+D,GAA0B/D,OAlB7C,uBAAoDmD,IAoCvCY,GAAb,mGAWI,mCAAmB/D,GAAuC,2DACtD,gBACKjhD,OAAS,eACd,EAAKilD,aAAehE,EAHkC,EAX9D,iEAkBI,aAAkB96C,MAlBtB,mBAoBW,SAAAsB,MAAM3O,GACH8B,KAAKqqD,aAAax9C,OACpB7M,KAAKqqD,aAAax9C,MAAM3O,KAtBpC,mBA0BW,SAAAqI,QACGvG,KAAKqqD,aAAa9jD,OACpBvG,KAAKqqD,aAAa9jD,UA5B9B,gBAgCW,SAAAR,KACH,OAAO/F,KAAKoF,WAjCpB,2BAA+C+kD,K,+GC5PzBtmC,GAAtB,8JAmBc,SAAAQ,mBACNzB,EACAM,EACAtP,GAEA5T,KAAKsqD,gBAAgB,KAAWp0C,2CAC5B,KAAoBq0C,mBACpB3nC,EACAM,EACAtP,GAEJ5T,KAAKsqD,gBAAgB,KAAWl0C,iDAC5B,KAAoBo0C,0BACpB5nC,EACAM,EACAtP,GAEJ5T,KAAKsqD,gBAAgB,KAAWv0C,sCAC5B,KAAoB00C,UACpB7nC,EACAM,EACAtP,GAEJ5T,KAAKsqD,gBAAgB,KAAWI,gDAC5B,KAAoBC,wBACpB/nC,EACAM,EACAtP,GAEJ5T,KAAKsqD,gBAAgB,KAAWM,4CAC5B,KAAoBC,oBACpBjoC,EACAM,EACAtP,GAEJ5T,KAAKsqD,gBAAgB,KAAWQ,mDAC5B,KAAoBC,4BACpBnoC,EACAM,EACAtP,GAEJ,IAAMo3C,EAA+Ct1C,KAAKC,MAAMiN,EAAOE,WAAWlR,YAAY,gCAA+B,OAE7H6I,OAAOC,KAAKswC,GAAmBznD,SAAQ,SAAC+E,EAAe2iD,EAAa3tD,GAChE4lB,EAAY5a,GAAS0iD,EAAkB1iD,QA/DnD,6BAmEc,SAAAgiD,gBACNY,EACAC,EACAvoC,EACAM,EACAtP,GAEA,IAAMtL,EAAgBsa,EAAOE,WAAWlR,YAAYs5C,OAAQluD,IAExDsL,GAAWsL,IAAgD,IAApCA,EAASw3C,OAAOD,KACvCjoC,EAAYioC,GAAiB7iD,EAAM+iD,wBA7E/C,4BAEW,uBAAqB54C,GACxB,GAAMA,EAAQ,CACV,GAAIA,EAAOgK,cAAc6uC,WAAW,SAChC,MAAO,YAEX,GAAI74C,EAAOgK,cAAc6uC,WAAW,SAChC,MAAO,YAGf,MAAO,qBAXf,0B,gMCTe,SAAS,oBAAWC,EAAQ16B,EAAM26B,GAc/C,OAZE,oBADE,OAAAC,GAAA,KACWC,QAAQC,UAER,SAASC,WAAWL,EAAQ16B,EAAM26B,GAC7C,IAAIjF,EAAI,CAAC,MACTA,EAAEv5C,KAAKohC,MAAMmY,EAAG11B,GAChB,IACIhqB,EAAW,IADGglD,SAASrS,KAAKpL,MAAMmd,EAAQhF,IAG9C,OADIiF,GAAO,OAAAM,GAAA,GAAejlD,EAAU2kD,EAAMlJ,WACnCz7C,GAIJ,oBAAWunC,MAAM,KAAME,WCZjB,SAAS,gCAAiBkd,GACvC,IAAIO,EAAwB,oBAARnO,IAAqB,IAAIA,SAAQ5gD,EA8BrD,OA5BA,gCAAmB,SAASgvD,iBAAiBR,GAC3C,GAAc,OAAVA,ICRO,SAASS,kBAAkB9Z,GACxC,OAAgE,IAAzD0Z,SAASlgD,SAASylC,KAAKe,GAAI3/B,QAAQ,iBDOjB,CAAiBg5C,GAAQ,OAAOA,EAEvD,GAAqB,oBAAVA,EACT,MAAM,IAAIU,UAAU,sDAGtB,GAAsB,qBAAXH,EAAwB,CACjC,GAAIA,EAAO5N,IAAIqN,GAAQ,OAAOO,EAAO/4C,IAAIw4C,GAEzCO,EAAO59C,IAAIq9C,EAAOW,SAGpB,SAASA,UACP,OAAO,oBAAUX,EAAOld,UAAW,OAAA8d,GAAA,GAAepsD,MAAMqsD,aAW1D,OARAF,QAAQ7J,UAAY7nC,OAAOkI,OAAO6oC,EAAMlJ,UAAW,CACjD+J,YAAa,CACX/jD,MAAO6jD,QACPze,YAAY,EACZE,UAAU,EACVD,cAAc,KAGX,OAAAme,GAAA,GAAeK,QAASX,IAG1B,gCAAiBA,GEvBnB,IAAM,GAAb,kFASI,2BAAmBc,GAAoB,kDACnC,cAAMA,IACDvvD,KAAO,eACZ,EAAKuH,QAAUgoD,EAHoB,EAT3C,0DAAuCrvD,QAuB1B,GAAb,0FASI,+BAAmBmE,GAAa,sDAC5B,cAAMA,IACDrE,KAAO,mBACZ,EAAKuH,QAAUlD,EAHa,EATpC,8DAA2CnE,QAwB9B,GAAb,sFAUI,6BAAmBsvD,EAAoBnrD,GAAc,oDACjD,cAAMA,IACDrE,KAAOwvD,EAAa,iBACzB,EAAKjoD,QAAUlD,EAHkC,EAVzD,4DAAyCnE,S,gHC3DnCuvD,GAAcC,EAAQ,IACpBC,GAA+BF,GAA/BE,YAAaC,GAAkBH,GAAlBG,cACfC,GAAuBH,EAAQ,KAG/BI,GAAa,GAYbC,G,wGA6BJ,wCAAYC,GAAgD,MAAzBC,EAAyB,uDAAJ,GACtD,GAD0D,yCACpDD,aAAiCE,kBACrC,MAAM,IAAIf,UACR,yDAHsD,OAO1D,eAAMc,GAENH,GAAW,EAAKK,OAAhB,MAEA,EAAKC,uBAAyB1yC,OAAO2yC,KAAKL,GAW1C,EAAKM,wBAA0B5yC,OAAO2yC,KAAKL,GAE3C,EAAKO,eAAgB,EAErB,EAAKC,UAAW,EAMdC,GAAa,WACX,IAAMC,EAAoB,SAApBA,oBAGC,EAAKH,gBACR,EAAKA,eAAgB,EAEhB,EAAKI,mBACR,EAAKC,YAKX,EAAKR,uBAAuBS,iBAC1B,QACAH,GAEF,EAAKJ,wBAAwBO,iBAC3B,QACAH,GAGF,EAAKI,KAAKlB,IAAe,WACvB,EAAKQ,uBAAuBW,oBAC1B,QACAL,GAEF,EAAKJ,wBAAwBS,oBAC3B,QACAL,SA7DkD,E,+DA4E5D,SAAAM,UACE,OAAO/tD,KAAKmtD,uBAAuBa,O,uCAQrC,SAAAC,4BACE,OAAOjuD,KAAKqtD,0B,4BAQd,SAAAa,iBACE,OAAOluD,KAAKqtD,0B,0BAMd,SAAAc,eACE,OAAOnuD,KAAKqtD,wBAAwBW,O,yBAWtC,SAAAtlD,cACE,OAAO1I,KAAKmtD,uBAAuBzkD,gB,8BASrC,SAAA0lD,mBACE,IAAMC,EAAgBruD,KAAK0I,cAE3B,GAAI2lD,EACF,OAAOA,EAAcxqD,W,uCAYzB,SAAAyqD,4BACE,MAAO,CACLzqD,SAAU7D,KAAKouD,sB,6CAkBnB,SAAAG,gCAAgCC,GAO9B,IAAMC,EAAwBhC,EAAQ,KAEhCiC,EAAyB1uD,KAAKsuD,4BAEpC,OAAOG,EAAsB,GAAD,OACvBzuD,KAAK+tD,UADkB,SAE1BW,EACAF,K,mDAQJ,iBAAiBz5B,GAAjB,wEACE/0B,KAAKutD,SAAWx4B,EAEhB/0B,KAAK+2C,KAAK2V,IAHZ,sD,0FASA,SAAAiC,aACE,OAAO3uD,KAAKutD,W,6CAMd,sHACSvtD,KAAK4uD,YAAW,IADzB,uD,0GAOA,sHACS5uD,KAAK4uD,YAAW,IADzB,uD,gHASA,6FACE5uD,KAAK4uD,YAAY5uD,KAAKutD,UADxB,uD,8GASA,sHACSvtD,KAAK2tD,WADd,uD,2GAQA,4MACuB,WAEnBf,GAAqB,EAAKO,wBAC1BP,GAAqB,EAAKS,gCAEnBR,GAAW,EAAKK,WAN3B,uD,yGA7PA,uCACE,OAAOzyC,OAAOg4B,OAAOoa,M,0CASvB,sCAAoCgC,GAIlC,OAFE/B,+BAA+BgC,8BAEd9+B,QAAO,SAAA++B,GAAU,OAClCt0C,OAAOu0C,GAAGD,EAAW5B,uBAAwB0B,U,gCArBNrC,IA8Q7C1f,EAAOC,QAAU+f,GACjBhgB,EAAOC,QAAQ2f,YAAcA,GAC7B5f,EAAOC,QAAQ4f,cAAgBA,K,+DCjS/B,8CAEIsC,EAAS,SAASA,OAAOnO,GAC3B,IAAIoO,EAAQpO,EAAKoO,MACbC,EAAUrO,EAAKqO,QACfC,EAAYtO,EAAKsO,UACjBC,EAAYvO,EAAKuO,UACrB,OAAOC,mBAAQ,WAIb,IAHA,IAAIC,EAAeJ,EAAUD,EAAQ,KAAOC,EAAUD,EAClDM,EAAcD,EAET/H,GAAM,EAAGC,GAAgBhtC,OAAOC,KAAK00C,GAAa,IAAK5H,GAAMC,GAAcrqD,OAAQoqD,KAAO,CACjG,IAAIzqD,GAAO0qD,GAAcD,IACrBl/C,GAAQ8mD,EAAUryD,IAElBuL,KACFknD,GAAe,IAAMD,EAAe,KACpCC,IAAyB,IAAVlnD,GAAiBvL,GAAOA,GAAO,IAAMuL,IAIxD,IAAImnD,GAAyC,oBAAdJ,EAA2BA,EAAUD,GAAaC,EAOjF,MALiC,kBAAtBI,KACTA,GAAoBA,GAAkBtyD,UACfqyD,GAAe,IAAMC,IAGvCD,IACN,CAACN,EAAOC,EAASC,EAAWC,M,qCC7BzBK,EAAcjD,EAAQ,IAAtBiD,UACR,GAA+CjD,EAAQ,KAA/Cxf,GAAR,GAAQA,iBAAkBC,GAA1B,GAA0BA,iBAgE1B,SAASyiB,qBAAqB3B,GAA4B,IAAtB4B,EAAsB,uDAAJ,GACpD,GAAI5B,IAAS/gB,IAAoB+gB,IAAS9gB,GACxC,MAAM,IAAIgf,UAAU,sCAGtB,GAC6B,kBAApB0D,GACoB,mBAApBA,EAEP,MAAM,IAAI1D,UAAJ,kFACuE0D,EADvE,WAMR,GAA+B,mBAApBA,EACT,YACG5B,EAAO6B,QAAQD,IASpB,GAJwB,OAApBA,QAAgD5yD,IAApB4yD,IAC9BA,EAAkB,SAGU5yD,IAA1B4yD,EAAgB5B,GAAqB,CAEvC,IAAM8B,EAAsB,EAAH,GAAQF,GAEjCA,EAAkB,EAAH,GACZ5B,EAAO8B,aAE+B9yD,IAAhC4yD,EAAgB5B,GAAMA,KAG/B4B,EAAgB5B,GAAhB,KAA6B4B,EAAgB5B,GAAMA,KAIrD,OAAKvzC,OAAOC,KAAKk1C,EAAgB5B,IAAO5wD,OAIjCwyD,EAHE,GA3FX9iB,EAAOC,QAAU,SAASgjB,mBAGxB,IAFAC,EAEA,uDAFqB,GACrBJ,EACA,uDADkB,GAEZK,EAA0BN,qBAC9B1iB,GACA+iB,GAAsBA,EAAmBxqD,OAErC0qD,EAA0BP,qBAC9BziB,GACA8iB,GAAsBA,EAAmBvqD,OAGrC0qD,EAAuBR,qBAC3B1iB,GACA2iB,GAAmBA,EAAgBpqD,OAE/B4qD,GAAuBT,qBAC3BziB,GACA0iB,GAAmBA,EAAgBnqD,OAG/B4qD,GAAyBX,EAC7BO,EACAC,GAGII,GAAsBZ,EAC1BS,EACAC,IAGIG,GAASb,EAAUW,GAAwBC,IAEjD,OAAOC,K,8BCjDT,iFAKMC,EAA2B,SAA3BA,aACF,OAAO,eAGLC,EAAiC,SAAjCA,mBACF,OAAOD,IAAaj+B,QAAQ,IAAIm+B,OAAO,IAAK,KAAM,IAAIzhB,gB,0ECP7C9rB,EAAb,sEACkB,EAAAI,MAAgB,QAChB,EAAAotC,yBAAmC,MACnC,EAAAC,wBAAkC,eAClC,EAAArG,mBAA6B,aAC7B,EAAAsG,iBAA2B,aAC3B,EAAArG,0BAAoC,sBACpC,EAAAK,oBAA8B,sBAC9B,EAAAznC,OAAiB,SACjB,EAAAunC,wBAAkC,0BAClC,EAAAtnC,SAAmB,WACnB,EAAAonC,UAAoB,YACpB,EAAAnnC,yBAAmC,yBACnC,EAAAynC,4BAAsC,8BACtC,EAAA+F,kBAA4B,oBAC5B,EAAAC,UAAoB,a,gIClBtC,SAASC,MAAMjf,EAAG9yC,EAAKD,GACrB,OAAOD,KAAKC,IAAIC,EAAKF,KAAKE,IAAI8yC,EAAG/yC,IAEnC,IAAM40C,EAAI,CACRkE,SADQ,kBACC/F,EAAGM,GAEV,YADUr1C,IAAN+0C,IAAiBA,EAAIM,GAClBne,MAAMoU,QAAQyJ,GAAKA,EAAI,CAACA,EAAGA,IAGpCwF,IANQ,aAMJ0Z,EAAIC,GACN,MAAO,CAACD,EAAG,GAAKC,EAAG,GAAID,EAAG,GAAKC,EAAG,KAGpCrd,IAVQ,aAUJod,EAAIC,GACN,MAAO,CAACD,EAAG,GAAKC,EAAG,GAAID,EAAG,GAAKC,EAAG,KAGpCtb,MAdQ,eAcFqb,EAAIC,GACRD,EAAG,IAAMC,EAAG,GACZD,EAAG,IAAMC,EAAG,IAGdC,MAnBQ,eAmBFF,EAAIC,GACRD,EAAG,IAAMC,EAAG,GACZD,EAAG,IAAMC,EAAG,KAKhB,SAASta,WAAWtG,EAAUrE,EAAWmlB,GACvC,OAAkB,IAAdnlB,GAAmBltC,KAAK+0C,IAAI7H,KAAe+H,IAAiBj1C,KAAKsyD,IAAI/gB,EAAqB,EAAX8gB,GAC5E9gB,EAAWrE,EAAYmlB,GAAYnlB,EAAYmlB,EAAW9gB,GAGnE,SAASghB,wBAAwBC,EAAUtyD,EAAKD,GAAsB,IAAjBoyD,EAAiB,uDAAN,IAC9D,OAAiB,IAAbA,EAAuBJ,MAAMO,EAAUtyD,EAAKD,GAC5CuyD,EAAWtyD,GAAa23C,WAAW33C,EAAMsyD,EAAUvyD,EAAMC,EAAKmyD,GAAYnyD,EAC1EsyD,EAAWvyD,GAAa43C,WAAW2a,EAAWvyD,EAAKA,EAAMC,EAAKmyD,GAAYpyD,EACvEuyD,EAET,SAAS1a,kBAAkBN,EAA3B,KAAuD,uBAAnBib,EAAmB,KAAfC,GAAe,yBAATC,GAAS,MAALC,GAAK,MACrD,eAA6Bpb,EAA7B,2BAAQqb,GAAR,MAAYC,GAAZ,8BAAkBC,GAAlB,MAAsBC,GAAtB,MACA,MAAO,CAACT,wBAAwBE,EAAII,GAAIC,GAAIH,IAAKJ,wBAAwBG,GAAIK,GAAIC,GAAIJ,O,8BC1CvF,wDAGIK,EAAW,SAASA,SAASxkB,GAC/B,OAAOA,GAAsB,kBAARA,GAGnBykB,GAAc,SAASA,YAAYh2C,GACrC,MAAkB,MAAXA,EAAI,GAAaA,EAAInS,MAAM,GAAKmS,GAGrCi2C,GAAgB,SAASA,cAAcC,EAAQ/C,GACjD,OAAOE,mBAAQ,WACb,GAAsB,oBAAX6C,EAAuB,OAAOA,EAAO/C,GAChD,GAAK4C,EAASG,GAAd,CACA,IAAK/C,EAAW,OAAO+C,EAGvB,IAFA,IAAI5pB,EAAQ,GAEHif,EAAM,EAAGC,GAAgBhtC,OAAOC,KAAKy3C,GAAS3K,EAAMC,GAAcrqD,OAAQoqD,IAAO,CACxF,IAAI4K,GAAO3K,GAAcD,GACrBl/C,GAAQ6pD,EAAOC,IAEnB,GAAIJ,EAAS1pD,IAAQ,CACnB,IAAI+pD,GAAgBjD,EAAU6C,GAAYG,KAE1C,GAA6B,kBAAlBC,GACT,IAAK,IAAIC,GAAM,EAAGC,GAAgB93C,OAAOC,KAAKpS,IAAQgqD,GAAMC,GAAcn1D,OAAQk1D,KAAO,CACvF,IAAIE,GAAaD,GAAcD,IAC3BG,GAAcnqD,GAAMkqD,IAEpBR,EAASS,IACPR,GAAYO,MAAgBH,KAC9B9pB,EAAQ8Z,YAAS,GAAI9Z,EAAOkqB,KAG9BlqB,EAAMiqB,IAAcC,QAGfJ,KACT9pB,EAAQ8Z,YAAS,GAAI9Z,EAAOjgC,UAG9BigC,EAAM6pB,IAAQ9pD,GAIlB,OAAOigC,KACN,CAAC4pB,EAAQ/C,M,6BC/Cd,4FAGIsD,EAAiB,SAASA,eAAe31D,GAC3C,IAAI+jD,EAEJ,OAAOA,EAAO,IAAS/jD,EAAOA,EAAO,YAAc,aAAe41D,oBAAU,CAAC3jB,SAAQ4jB,SAAQ9R,EAAK/jD,EAAOA,EAAO,SAAW,UAAY41D,oBAAU,CAAC7kB,SAAQ8kB,SAAQ9R,GAEhK+R,GAA6BxQ,YAAS,CACxCgN,UAAWrgB,UACG0jB,EAAe,QAAsBA,EAAe,SAAU,CAC5EI,MAAOC,OACPC,QAASC,SACTC,QAASD,SACTE,MAAoBC,gBAAM,CAAC,QAAS,SAAU,QAC9Chf,UAAwBgf,gBAAM,CAAC,OAAQ,QAAS,MAAO,WACvD7B,SAAuB6B,gBAAM,CAAC,OAAQ,SAAU,YAChD/K,SAAuB+K,gBAAM,CAAC,OAAQ,UAAW,aA2B/CC,IAxBcvlB,SACAilB,OACAA,OACoBA,OAC5BA,OACCA,OACDA,OAEWE,SACHnlB,SACIkB,SAEoBA,SAAQikB,SAE9BA,SACCA,SACXF,OACC/jB,SACI4jB,OAGwB9kB,SAAQ8kB,OAC/BA,OAEO,CACrBI,QAAS,EACTE,QAAS,EACTC,MAAO,QACP/e,UAAW,SACXmd,SAAU,OACVlJ,SAAU,YAERiL,GAAoCjR,YAAS,GAAIgR,GAAkB,CACrEE,WAAY,OACZC,WAAY,UACZC,kBAAmB,IACnBC,iBAAkB,IAClBC,kBAAmB,O,gBCzDrB7mB,EAAOC,QAAU,CACf6mB,gCAAiCnH,EAAQ,KACzCoH,gCAAiCpH,EAAQ,KACzCqH,kCAAmCrH,EAAQ,KAC3CsH,4CAA6CtH,EAAQ,KACrDuH,qCAAsCvH,EAAQ,KAC9CwH,MAAOxH,EAAQ,KACfyH,kCAAmCzH,EAAQ,KAC3C0H,uCAAwC1H,EAAQ,O,iGCR1C2H,GAAW3H,EAAQ,IAAnB2H,OACFJ,GAAuCvH,EAAQ,KAGnD4H,GASEL,GATFK,UAEA3H,GAOEsH,GAPFtH,YAEAC,GAKEqH,GALFrH,cAEA2H,GAGEN,GAHFM,yBAEAC,GACEP,GADFO,2BAEIC,GAA6B/H,EAAQ,KACrCgI,GAAwChI,EAAQ,KAEhDiI,GAAoB,GAYpBZ,G,6GAiDJ,2CAAYa,GAAuC,MAArBC,EAAqB,uDAAJ,GAC7C,GADiD,4CAC3CD,aAA4BrjD,aAChC,MAAM,IAAI46C,UAAU,+CAGtB,IAAM2I,EAA0BJ,GAC9BE,EACAC,GAP+C,OAUjD,cAAMC,EAAyBD,GAE/BF,GAAkB,EAAKxH,OAAvB,MAIA,EAAKp8C,GAAGyjD,IAA4B,WAC7B,EAAKO,cAAc13D,QAAW,EAAKswD,mBACtC,EAAKC,aAKJ,EAAKmH,cAAc13D,QAAW,EAAKswD,mBACtC,EAAKC,UAxB0C,E,6FAgCnD,6HAAcoH,EAAd,+BAA+B,kBAAM,MAArC,yGACuB,2GACbA,IADa,qBAGZL,GAAkB,EAAKxH,OAHX,SAMb,EAAK8H,qBANQ,mDADvB,uD,yGA1EA,uCACE,OAAOR,GAA2B1F,gC,iCAMpC,+BACE,OAAOr0C,OAAOg4B,OAAOiiB,M,8CAYvB,0CAAwCO,GAA8B,IAAbjH,EAAa,uDAAN,KAG9D,IAAKiH,IAAoBA,EAAgBpxD,SAKvC,OAJAuwD,GAAOnmD,KACL,sGAGK,GAGT,IAAQpK,EAAaoxD,EAAbpxD,SAER,OAAOiwD,kCAAkCoB,sBAAsBllC,QAC7D,SAAAmlC,GAAO,OAAIA,EAAQC,kBAAkBpH,GAAMtuC,SAAS7b,U,mCAzCVmwD,IA6FhDlnB,EAAOC,QAAU+mB,GAEjBhnB,EAAOC,QAAQsnB,UAAYA,GAC3BvnB,EAAOC,QAAQ2f,YAAcA,GAC7B5f,EAAOC,QAAQ4f,cAAgBA,GAE/B7f,EAAOC,QAAQunB,yBAA2BA,GAC1CxnB,EAAOC,QAAQwnB,2BAA6BA,I,wpBC/FtBljD,GAAtB,WAMI,gEANJ,yEAiBW,0BAAwB9F,GAC3B,OAAO8pD,GAAqB1yC,OAAOpX,KAlB3C,8BAiCW,0BAAwB86C,EAAwC96C,GACnE,OAAO+pD,GAAqB3yC,OAAO0jC,EAAU96C,OAlCrD,oBAmDsB8pD,GAAtB,mQAWW,gBAAc9pD,GACjB,OAAO,IAAIgqD,GAAyBhqD,OAZ5C,sBAAmD8F,IAsCtCkkD,GAAb,iGAYI,kCAAmBhqD,GAA0B,0DACzC,gBA2HIpG,QAAU,SAAC5D,GACf,EAAKoF,WAAWxB,QAAQ5D,GACxB,KAAOsF,SAAS1B,QAAQ5D,IA3HpB,EAAK8L,gBADMrQ,IAAXuO,EACkB,KAAsBtC,wBAEtBsC,EAEtB,EAAK5E,WAAa,IAAI,KACtB,EAAKvB,OAAS,eACd,EAAKukD,WAAa,IAAI,KAAyB,EAAKt8C,WAAWlG,eAAiB,IATvC,EAZjD,gEA2BI,eACI,OAAOG,QAAQ/B,QAAQvF,KAAKqN,cA5BpC,mBAsCW,SAAAR,MAAMg9C,GACT7pD,KAAK2pD,WAAW9nD,iBAAiB,CAC7B3D,OAAQ2rD,EACR/nD,OAAO,EACPC,aAAcC,KAAKC,UA1C/B,mBAoDW,SAAAsE,QACHvG,KAAK2pD,WAAWpjD,UArDxB,gBAwDW,SAAAR,KACH,OAAO/F,KAAKoF,SAzDpB,gBA4DI,eAAe,WACX,OAAOpF,KAAKgG,OAAO,MAAMtD,MAAoB,SAAC8yD,GAC1C,IAAMxyD,EAAsB,GACxByyD,EAAaC,EAAO5kB,KAAK,IAmB7B,OAlBkB,SAAZ6kB,YACF,OAAOH,EAAUlvD,OAAO5D,MAAoB,SAACkzD,GACzC,OAAKA,GAAoBA,EAAiB9zD,MACN,qBAApB+zD,gBAAqD,qBAAVj1D,KAC5C0G,QAAQ/B,QAAQ,IAAI3E,KAAKoC,IAEzBsE,QAAQ/B,QAAQmwD,EAAO5kB,KAAK2kB,KAGjB,qBAAV70D,KACRoC,EAAKgK,KAAK4oD,EAAiB13D,QAE3Bu3D,EAAaC,EAAOI,OAAO,CAACL,EAAY,EAAKM,SAASH,EAAiB13D,UAEpEy3D,gBAIZA,QAlFnB,oBAsFW,SAAA3xD,SACHhE,KAAKmF,QAAQ,IAAI,KAA6BnF,KAAKoF,SACnDpF,KAAKmF,QAAQ,IAAI,KAAsBnF,KAAKoF,WAxFpD,oBA4FiB,SAAAY,OAAOC,G,0JAGhB,OAFAjG,KAAKmF,QAAQ,IAAI,KAA8BnF,KAAKoF,OAAQa,I,SAEtDjG,KAAKgE,S,cACLzB,EAASvC,KAAK2pD,WACpB3pD,KAAKmF,QAAQ,IAAI,KAA6BnF,KAAKoF,OAAQa,I,kBACpD,CACHE,OAAQ,yBAAW,wIACfnG,KAAKmF,QAAQ,IAAI,KAA6BnF,KAAKoF,OAAQa,IAD5C,kBAERjG,KAAKqG,WAFG,uDAInBN,GAAI,cACA,OAAOE,GAEXK,KAAM,gBACF,OAAO/D,EAAO+D,U,yDA3G9B,oBAgHW,SAAAH,OAAOF,GACVjG,KAAKmF,QAAQ,IAAI,KAA6BnF,KAAKoF,OAAQa,MAjHnE,qBAoHW,SAAAI,aApHX,kBAwHI,eACI,OAAOrG,KAAK2G,aAzHpB,sBA4HI,eACI,OAAOW,QAAQ/B,QAAQ,CACnBoC,cAAe3H,KAAKqN,WAAWzF,cAC/BC,aAAc7H,KAAKqN,WAAWvF,SAC9BC,aAAc,KAAaC,QAC3BC,aAAc,aACdC,MAAO,aACPC,WAAYnI,KAAKqN,WAAWnG,cAC5BrG,KAAM,KAAKm1D,WApIvB,sBA6IY,SAAAD,SAASE,GAGb,IAFA,IAAMC,EAAcR,EAAOS,MAAMF,EAAY5qD,YACvCjN,EAAmB,IAAIyS,WAAWolD,GAC/Bv3D,EAAI,EAAGA,EAAIw3D,EAAI94D,SAAUsB,EAC9Bw3D,EAAIx3D,GAAKN,EAAKM,GAElB,OAAOw3D,MAnJf,0BAA8Cb,IA2JxBC,GAAtB,yFAKI,4FALJ,mEAmBW,gBAAcjP,EAAwC96C,GACzD,OAAO,IAAI6qD,GAAyB/P,EAAU96C,OApBtD,sBAAmD8F,IAsCtC+kD,GAAb,iGAkBI,kCAAmB/P,EAAwC96C,GAA8B,0DACrF,gBAqHIpG,QAAU,SAAC5D,GACf,EAAKoF,WAAWxB,QAAQ5D,GACxB,KAAOsF,SAAS1B,QAAQ5D,IArHpB,EAAK8L,gBADLrQ,IAAcuO,EACI,KAAkBtC,wBAElBsC,EAEtB,EAAK5E,WAAa,IAAI,KACtB,EAAKvB,OAAS,eACd,EAAKilD,aAAehE,EACpB,EAAKz5C,cAAe,EACpB,EAAKypD,eAAiB,EAAKhpD,WAAWlG,eAAiB,GAX8B,EAlB7F,gEAmCI,eACI,OAAOG,QAAQ/B,QAAQvF,KAAKqN,cApCpC,mBA6CW,SAAA9G,QACHvG,KAAK4M,cAAe,EACpB5M,KAAKqqD,aAAa9jD,UA/C1B,gBAkDW,SAAAR,KACH,OAAO/F,KAAKoF,SAnDpB,gBAsDI,eACI,OAAOkC,QAAQjD,OAAO,qBAvD9B,oBA0DW,SAAAL,SACHhE,KAAKmF,QAAQ,IAAI,KAA6BnF,KAAKoF,SACnDpF,KAAKmF,QAAQ,IAAI,KAAsBnF,KAAKoF,WA5DpD,oBAgEiB,SAAAY,OAAOC,G,wJAGhB,OAFAjG,KAAKmF,QAAQ,IAAI,KAA8BnF,KAAKoF,OAAQa,I,SAEtDjG,KAAKgE,S,cACXhE,KAAKmF,QAAQ,IAAI,KAA6BnF,KAAKoF,OAAQa,I,kBACpD,CACHE,OAAQ,kBAGJ,OAFA,EAAKkkD,aAAa9jD,QAClB,EAAKpB,QAAQ,IAAI,KAA6B,EAAKC,OAAQa,IACpD,EAAKI,WAEhBN,GAAI,cACA,OAAOE,GAEXK,KAAM,gBAIF,IAHA,IACIgwD,EADAvM,EAAqB,EAGlBA,EAAa,EAAKsM,gBAAgB,CAGrC,IAAME,EAAwB,IAAIp4D,YAAY,EAAKk4D,eAAiBtM,GAC9DyM,EAAsB,EAAKnM,aAAa/jD,KAAKiwD,GAInD,QAAIv5D,IAAcs5D,EACdA,EAAeC,OAGY,IAAItlD,UAAUqlD,GACjCnoD,IAAI,IAAI8C,UAAUslD,GAAWxM,GAGzC,GAAI,IAAMyM,EACN,MAEJzM,GAAcyM,EAElB,OAAOlvD,QAAQ/B,QAAmC,CAC9CrH,OAAQo4D,EAAaxsD,MAAM,EAAGigD,GAC9BjoD,MAAO,EAAK8K,cAA+B,IAAfm9C,EAC5BhoD,aAAcC,KAAKC,W,yDA1GvC,oBAgHW,SAAAkE,OAAOF,GACVjG,KAAKmF,QAAQ,IAAI,KAA6BnF,KAAKoF,OAAQa,MAjHnE,qBAoHW,SAAAI,aApHX,kBAwHI,eACI,OAAOrG,KAAK2G,aAzHpB,sBA4HI,eACI,OAAOW,QAAQ/B,QAAQ,CACnBoC,cAAe3H,KAAKqN,WAAWzF,cAC/BC,aAAc7H,KAAKqN,WAAWvF,SAC9BC,aAAc,KAAaC,QAC3BC,aAAc,aACdC,MAAO,aACPC,WAAYnI,KAAKqN,WAAWnG,cAC5BrG,KAAM,KAAKm1D,aApIvB,0BAA8CV,M,0CC5T9C,IAAMmB,EAAwBhK,EAAQ,KAQhCiK,EAAyB,WAE7B,IAAMC,EAAiBF,IAQvB,OAAO,kBAAME,GAVgB,GAa/B7pB,EAAOC,QAAU2pB,G,cCZjB5pB,EAAOC,QAAU,SAAS0pB,wBACxB,IAAMroD,EAAe5J,OAAO4J,cAAgB5J,OAAO6J,mBAGnD,OAFiBD,EAAe,IAAIA,EAAiB,O,gBCXvD,IAAQi/B,EAA8Bof,EAAQ,KAAtCpf,0BASRP,EAAOC,QAAU,SAAS6pB,wBAAwBpI,GAChD,OAAOA,EAAoBx+B,QAAO,SAAAlnB,GAAM,OACtCA,EAAOklD,KAAKtuC,SAAS2tB,Q,gBCXzB,IAAMuf,EAAuBH,EAAQ,KASrC3f,EAAOC,QAAU,SAAS8pB,gBAAgBz2D,GACxCA,EAAYkD,YAAYC,SAAQ,SAAAC,GAC9BopD,EAAqBppD,GAErBpD,EAAY02D,YAAYtzD,Q,sGCPhBuzD,E,yBAAZ,SAAYA,GACR,qBACA,mBACA,yBACA,qBAJJ,CAAYA,MAAS,KAOd,IAAMC,GAAb,WAOI,uBAAYC,EAAmBC,GAAoB,gCAC/Cl3D,KAAKqnC,SAAW4vB,EAChBj3D,KAAKm3D,YAAc,eACnBn3D,KAAKo3D,eAAgB,IAAIp1D,MAAOq1D,cAChCr3D,KAAKs3D,cAAgBJ,EACrBl3D,KAAKu3D,aAAe,GAZ5B,kDAeI,eACI,OAAOv3D,KAAKqnC,WAhBpB,mBAmBI,eACI,OAAOrnC,KAAKm3D,cApBpB,qBAuBI,eACI,OAAOn3D,KAAKo3D,gBAxBpB,qBA2BI,eACI,OAAOp3D,KAAKs3D,gBA5BpB,oBA+BI,eACI,OAAOt3D,KAAKu3D,iBAhCpB,kB,6BCNA,IAAYpkD,EAPZ,kCAOA,SAAYA,GASR,iEASA,2EAQA,uEASA,2EAMA,yEASA,+EASA,uGASA,2FAMA,iGAOA,mFAQA,sFAQA,8EAQA,sFAQA,sFAOA,4EAQA,oFASA,4CAMA,sFAMA,gFAMA,8FAOA,8GAQA,oHAMA,sHAMA,4EAOA,wFAMA,gEAMA,wEAMA,wFAMA,0GAOA,kEAMA,0GAMA,kGAMA,gGAOA,sFAOA,gGAMA,4GAMA,gHAMA,4FAMA,kIAMA,gEAMA,0DAMA,oFAMA,oDAMA,oEAMA,4FAOA,sFAOA,4FAOA,4EAMA,oEAKA,kEAMA,kEAMA,oFAOA,oEASA,sFAOA,sFAOA,kFASA,oFAOA,oEAOA,wEAMA,wEA/ZJ,CAAYA,MAAU,M,yICDTqkD,GAAb,gGAQI,iCACI96C,EACAc,EACAyU,EACAwlC,GACA5kC,GACAtrB,GACAmwD,GACA3xD,IAAW,OAEX,GAFW,2CAENyX,EACD,MAAM,IAAI,KAAkB,QAGhC,IAAKyU,EACD,MAAM,IAAI,KAAkB,aAGhC,IAAM7V,GAAqC,GAY3C,GAXAA,GAAQ,KAAYwmC,MAAQplC,EAC5BpB,GAAQ,KAAYymC,WAAa5wB,EACjC7V,GAAQ,KAAY2mC,mBAAoB,IAAI/gD,MAAOq1D,cAC/CI,KACAr7C,GAAQ,KAAYumC,aAAe8U,IAGnClwD,KACA6U,GAAQ,KAAY0mC,iBAAmBv7C,IAGvCmwD,GACA,IAAK,IAAM/zC,MAAc+zC,GACjB/zC,KACAvH,GAAQuH,IAAc+zC,GAAkB/zC,KAzBzC,OAgCP,GADA5d,GACA,YAAM2W,EAAamW,GAAMzW,GAASrW,IAElC,YAAM2W,EAAamW,GAAMzW,KAGxBu7C,SAAWn6C,EAChB,GAAKoX,cAAgB3C,EACrB,GAAK2lC,gBAAkBH,GACvB,GAAKI,aAAetwD,GACpB,GAAKuwD,sBAAwBJ,GAzClB,gBAhBnB,4DA4DI,eACI,OAAO13D,KAAK23D,WA7DpB,qBAgEI,eACI,OAAO33D,KAAK40B,gBAjEpB,uBAoEI,eACI,OAAO50B,KAAK43D,kBArEpB,oBAwEI,eACI,OAAO53D,KAAK63D,eAzEpB,6BA4EI,eACI,OAAO73D,KAAK83D,0BA7EpB,yBAA6C,MAgF3B,GAAA1kC,sBAAwB,SAAC9uB,GACnC,IAAIkZ,EAAO,KACPyU,EAAY,KACZwlC,EAAc,KAEdlwD,EAAW,KACTmwD,EAA+C,GAErD,GAAIpzD,EAAQ8X,QACR,IAAK,IAAMuH,MAAcrf,EAAQ8X,QACzBuH,KACIA,GAAWlH,gBAAkB,KAAYmmC,KAAKnmC,cAC9Ce,EAAOlZ,EAAQ8X,QAAQuH,IAChBA,GAAWlH,gBAAkB,KAAYomC,UAAUpmC,cAC1DwV,EAAY3tB,EAAQ8X,QAAQuH,IACrBA,GAAWlH,gBAAkB,KAAYsmC,iBAAiBtmC,cAC9CnY,EAAQ8X,QAAQuH,IAC5BA,GAAWlH,gBAAkB,KAAYkmC,YAAYlmC,cAC5Dg7C,EAAcnzD,EAAQ8X,QAAQuH,IACvBA,GAAWlH,gBAAkB,KAAYqmC,gBAAgBrmC,cAChElV,EAAWjD,EAAQ8X,QAAQuH,IAE3B+zC,EAAkB/zC,IAAcrf,EAAQ8X,QAAQuH,KAMhE,OAAO,IAAI6zC,GACPlzD,EAAQoY,YACRc,EACAyU,EACAwlC,EACAnzD,EAAQuuB,KACRtrB,EACAmwD,EACApzD,EAAQyB,M,kIC7GPgyD,GAAb,4FAyDI,+BAAmBzqD,EACAxF,EACAZ,EACAC,EACAgiD,GACAvhD,GACAowD,GACAC,GACA1qD,IAAkB,uDACjC,eAAMrG,EAAeU,GAAeE,EAAUwF,IACzCA,UAAYA,EACjB,GAAKnG,eAAiBA,EACtB,GAAKgiD,WAAaA,GAClB,GAAK+O,qBAAuBF,GAC5B,GAAKG,4BAA8BF,GACnC,GAAKG,aAAe7qD,GAPa,GAjEzC,gEA8eI,eACI,OAAOvN,KAAKo4D,eA/epB,kBAwfI,eACI,GAAIp4D,KAAKuN,UACL,OAAOvN,KAAKopD,aA1fxB,0BAsgBW,SAAAr4C,aAAa9S,GACZ+B,KAAKo4D,cACQ,IAAI/5D,SAAS2B,KAAKopD,YAC1BC,UAAU,GAAIprD,GAAa,KAzgB5C,oCAmhBI,eACI,OAAO+B,KAAKm4D,+BAphBpB,8CA2EW,yCAAuCE,GAC1C,YAAoCr7D,IAAhCq7D,EACON,sBAAsBnO,yBAE1BmO,sBAAsBO,sCACzBP,sBAAsBQ,oCAAoCF,MAhFtE,mDAmFW,+CAA6CG,GAChD,OAAQA,GACJ,IAAK,2BACD,OAAO,IAAIT,sBACP,KAAe/rD,MACf,EACA,IACA,IACA,EACA,EACAwsD,EACAA,GACA,GACR,IAAK,+BACD,OAAO,IAAIT,sBACP,KAAeU,MACf,EACA,KACA,IACA,GACA,EACAD,EACA,iCACA,GACR,IAAK,gCACD,OAAO,IAAIT,sBACP,KAAeU,MACf,EACA,KACA,IACA,GACA,EACAD,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAIT,sBACP,KAAe9rD,IACf,EACA,KACA,KACA,EACA,GACAusD,EACAA,GACA,GACR,IAAK,mCACD,OAAO,IAAIT,sBACP,KAAe9rD,IACf,EACA,KACA,MACA,EACA,GACAusD,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAIT,sBACP,KAAe9rD,IACf,EACA,KACA,KACA,EACA,GACAusD,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAIT,sBACP,KAAe9rD,IACf,EACA,KACA,KACA,EACA,GACAusD,EACAA,GACA,GACR,IAAK,kCACD,OAAO,IAAIT,sBACP,KAAe9rD,IACf,EACA,KACA,MACA,EACA,GACAusD,EACAA,GACA,GACR,IAAK,mCACD,OAAO,IAAIT,sBACP,KAAe9rD,IACf,EACA,KACA,MACA,EACA,GACAusD,EACAA,GACA,GACR,IAAK,gCACD,OAAO,IAAIT,sBACP,KAAeW,UACf,EACA,KACA,KACA,EACA,GACAF,EACAA,GACA,GAER,IAAK,2BACD,OAAO,IAAIT,sBACP,KAAehsD,IACf,EACA,IACA,KACA,EACA,GACAysD,EACA,2BACA,GACR,IAAK,4BACD,OAAO,IAAIT,sBACP,KAAehsD,IACf,EACA,KACA,KACA,EACA,GACAysD,EACA,4BACA,GACR,IAAK,4BACD,OAAO,IAAIT,sBACP,KAAe/rD,MACf,EACA,IACA,IACA,EACA,EACAwsD,EACA,4BACA,GACR,IAAK,2BACD,OAAO,IAAIT,sBACP,KAAehsD,IACf,EACA,KACA,KACA,EACA,GACAysD,EACA,4BACA,GACR,IAAK,2BACD,OAAO,IAAIT,sBACP,KAAehsD,IACf,EACA,KACA,KACA,EACA,GACAysD,EACA,4BACA,GACR,IAAK,0BACD,OAAO,IAAIT,sBACP,KAAehsD,IACf,EACA,IACA,KACA,EACA,GACAysD,EACA,2BACA,GACR,IAAK,4BACD,OAAO,IAAIT,sBACP,KAAe7rD,SACf,EACA,KACA,KACA,EACA,GACAssD,EACAA,GACA,GACR,IAAK,4BACD,OAAO,IAAIT,sBACP,KAAe7rD,SACf,EACA,KACA,KACA,EACA,GACAssD,EACAA,GACA,GACR,IAAK,2BACD,OAAO,IAAIT,sBACP,KAAehsD,IACf,EACA,KACA,KACA,EACA,GACAysD,EACA,4BACA,GACR,IAAK,4BACD,OAAO,IAAIT,sBACP,KAAehsD,IACf,EACA,KACA,KACA,EACA,GACAysD,EACA,4BACA,GACR,IAAK,kCACD,OAAO,IAAIT,sBACP,KAAe9rD,IACf,EACA,KACA,MACA,EACA,GACAusD,EACAA,GACA,GACR,IAAK,mCACD,OAAO,IAAIT,sBACP,KAAe9rD,IACf,EACA,KACA,MACA,EACA,GACAusD,EACAA,GACA,GACR,IAAK,4BACD,OAAO,IAAIT,sBACP,KAAe7rD,SACf,EACA,KACA,KACA,EACA,GACAssD,EACAA,GACA,GACR,IAAK,6BACD,OAAO,IAAIT,sBACP,KAAe5rD,UACf,EACA,KACA,IACA,EACA,GACAqsD,EACAA,GACA,GACR,IAAK,6BACD,OAAO,IAAIT,sBACP,KAAe5rD,UACf,EACA,KACA,IACA,EACA,GACAqsD,EACAA,GACA,GACR,IAAK,oCACD,OAAO,IAAIT,sBACP,KAAe5rD,UACf,EACA,KACA,IACA,EACA,GACAqsD,EACAA,GACA,GACR,IAAK,qCACD,OAAO,IAAIT,sBACP,KAAeY,KACf,EACA,KACA,IACA,EACA,GACAH,EACAA,GACA,GACR,IAAK,qCACD,OAAO,IAAIT,sBACP,KAAeY,KACf,EACA,KACA,IACA,EACA,GACAH,EACAA,GACA,GACR,IAAK,qCACD,OAAO,IAAIT,sBACP,KAAeY,KACf,EACA,KACA,IACA,EACA,GACAH,EACAA,GACA,GACR,IAAK,8BACD,OAAO,IAAIT,sBACP,KAAe1rD,KACf,EACA,KACA,KACA,EACA,GACAmsD,EACAA,GACA,GACR,IAAK,8BACD,OAAO,IAAIT,sBACP,KAAe1rD,KACf,EACA,KACA,IACA,EACA,GACAmsD,EACAA,GACA,GACR,IAAK,gCACD,OAAO,IAAIT,sBACP,KAAeW,UACf,EACA,KACA,KACA,EACA,GACAF,EACAA,GACA,GACR,IAAK,0BACD,OAAO,IAAIT,sBACP,KAAe3rD,KACf,EACA,IACA,IACA,EACA,EACAosD,EACAA,GACA,GACR,IAAK,2BACD,OAAO,IAAIT,sBACP,KAAe3rD,KACf,EACA,IACA,IACA,EACA,EACAos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","file":"static/js/5.4af5264f.chunk.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// Make sure not to export internal modules.\r\n//\r\nexport * from \"./CognitiveSubscriptionKeyAuthentication\";\r\nexport * from \"./CognitiveTokenAuthentication\";\r\nexport * from \"./IAuthentication\";\r\nexport * from \"./IConnectionFactory\";\r\nexport * from \"./ISynthesisConnectionFactory\";\r\nexport * from \"./IntentConnectionFactory\";\r\nexport * from \"./RecognitionEvents\";\r\nexport * from \"./ServiceRecognizerBase\";\r\nexport * from \"./RecognizerConfig\";\r\nexport * from \"./SpeechServiceInterfaces\";\r\nexport * from \"./WebsocketMessageFormatter\";\r\nexport * from \"./SpeechConnectionFactory\";\r\nexport * from \"./TranscriberConnectionFactory\";\r\nexport * from \"./TranslationConnectionFactory\";\r\nexport * from \"./SpeechSynthesisConnectionFactory\";\r\nexport * from \"./EnumTranslation\";\r\nexport * from \"./ServiceMessages/Enums\";\r\nexport * from \"./ServiceMessages/TranslationSynthesisEnd\";\r\nexport * from \"./ServiceMessages/TranslationHypothesis\";\r\nexport * from \"./ServiceMessages/TranslationPhrase\";\r\nexport * from \"./TranslationServiceRecognizer\";\r\nexport * from \"./ServiceMessages/SpeechDetected\";\r\nexport * from \"./ServiceMessages/SpeechHypothesis\";\r\nexport * from \"./ServiceMessages/SpeechKeyword\";\r\nexport * from \"./SpeechServiceRecognizer\";\r\nexport * from \"./TranscriptionServiceRecognizer\";\r\nexport * from \"./ServiceMessages/DetailedSpeechPhrase\";\r\nexport * from \"./ServiceMessages/SimpleSpeechPhrase\";\r\nexport * from \"./AddedLmIntent\";\r\nexport * from \"./IntentServiceRecognizer\";\r\nexport * from \"./ServiceMessages/IntentResponse\";\r\nexport * from \"./RequestSession\";\r\nexport * from \"./SpeechContext\";\r\nexport * from \"./DynamicGrammarBuilder\";\r\nexport * from \"./DynamicGrammarInterfaces\";\r\nexport * from \"./DialogServiceAdapter\";\r\nexport * from \"./AgentConfig\";\r\nexport * from \"./Transcription/Exports\";\r\nexport * from \"./ServiceMessages/SynthesisAudioMetadata\";\r\nexport * from \"./SynthesisTurn\";\r\nexport * from \"./SynthesisAdapterBase\";\r\nexport * from \"./SynthesisRestAdapter\";\r\nexport * from \"./SynthesizerConfig\";\r\nexport * from \"./SynthesisContext\";\r\nexport * from \"./SpeakerRecognitionConfig\";\r\nexport * from \"./SpeakerIdMessageAdapter\";\r\n\r\nexport const OutputFormatPropertyName: string = \"OutputFormat\";\r\nexport const CancellationErrorCodePropertyName: string = \"CancellationErrorCode\";\r\nexport const ServicePropertiesPropertyName: string = \"ServiceProperties\";\r\nexport const ForceDictationPropertyName: string = \"ForceDictation\";\r\nexport const AutoDetectSourceLanguagesOpenRangeOptionName: string = \"OpenRange\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @class Contracts\r\n * @private\r\n */\r\nexport class Contracts {\r\n    public static throwIfNullOrUndefined(param: any, name: string): void {\r\n        if (param === undefined || param === null) {\r\n            throw new Error(\"throwIfNullOrUndefined:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNull(param: any, name: string): void {\r\n        if (param === null) {\r\n            throw new Error(\"throwIfNull:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfNullOrWhitespace(param: string, name: string): void {\r\n        Contracts.throwIfNullOrUndefined(param, name);\r\n\r\n        if ((\"\" + param).trim().length < 1) {\r\n            throw new Error(\"throwIfNullOrWhitespace:\" + name);\r\n        }\r\n    }\r\n\r\n    public static throwIfDisposed(isDisposed: boolean): void {\r\n        if (isDisposed) {\r\n            throw new Error(\"the object is already disposed\");\r\n        }\r\n    }\r\n\r\n    public static throwIfArrayEmptyOrWhitespace(array: string[], name: string): void {\r\n        Contracts.throwIfNullOrUndefined(array, name);\r\n\r\n        if (array.length === 0) {\r\n            throw new Error(\"throwIfArrayEmptyOrWhitespace:\" + name);\r\n        }\r\n\r\n        for (const item of array) {\r\n            Contracts.throwIfNullOrWhitespace(item, name);\r\n        }\r\n    }\r\n\r\n    public static throwIfFileDoesNotExist(param: any, name: string): void {\r\n        Contracts.throwIfNullOrWhitespace(param, name);\r\n\r\n        // TODO check for file existence.\r\n    }\r\n\r\n    public static throwIfNotUndefined(param: any, name: string): void {\r\n        if (param !== undefined) {\r\n            throw new Error(\"throwIfNotUndefined:\" + name);\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class RiffPcmEncoder {\r\n\r\n    private privActualSampleRate: number;\r\n    private privDesiredSampleRate: number;\r\n\r\n    public constructor(actualSampleRate: number, desiredSampleRate: number) {\r\n        this.privActualSampleRate = actualSampleRate;\r\n        this.privDesiredSampleRate = desiredSampleRate;\r\n    }\r\n\r\n    public encode = (\r\n        actualAudioFrame: Float32Array): ArrayBuffer => {\r\n\r\n        const audioFrame = this.downSampleAudioFrame(actualAudioFrame, this.privActualSampleRate, this.privDesiredSampleRate);\r\n\r\n        if (!audioFrame) {\r\n            return null;\r\n        }\r\n\r\n        const audioLength = audioFrame.length * 2;\r\n\r\n        const buffer = new ArrayBuffer(audioLength);\r\n        const view = new DataView(buffer);\r\n        this.floatTo16BitPCM(view, 0, audioFrame);\r\n\r\n        return buffer;\r\n    }\r\n\r\n    private setString = (view: DataView, offset: number, str: string): void => {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n\r\n    private floatTo16BitPCM = (view: DataView, offset: number, input: Float32Array): void => {\r\n        for (let i = 0; i < input.length; i++ , offset += 2) {\r\n            const s = Math.max(-1, Math.min(1, input[i]));\r\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n        }\r\n    }\r\n\r\n    private downSampleAudioFrame = (\r\n        srcFrame: Float32Array,\r\n        srcRate: number,\r\n        dstRate: number): Float32Array => {\r\n\r\n        if (!srcFrame) {\r\n            return null;\r\n        }\r\n\r\n        if (dstRate === srcRate || dstRate > srcRate) {\r\n            return srcFrame;\r\n        }\r\n\r\n        const ratio = srcRate / dstRate;\r\n        const dstLength = Math.round(srcFrame.length / ratio);\r\n        const dstFrame = new Float32Array(dstLength);\r\n        let srcOffset = 0;\r\n        let dstOffset = 0;\r\n        while (dstOffset < dstLength) {\r\n            const nextSrcOffset = Math.round((dstOffset + 1) * ratio);\r\n            let accum = 0;\r\n            let count = 0;\r\n            while (srcOffset < nextSrcOffset && srcOffset < srcFrame.length) {\r\n                accum += srcFrame[srcOffset++];\r\n                count++;\r\n            }\r\n            dstFrame[dstOffset++] = accum / count;\r\n        }\r\n\r\n        return dstFrame;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RiffPcmEncoder, Stream } from \"../common/Exports\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\nexport class PcmRecorder implements IRecorder {\r\n    private privMediaResources: IMediaResources;\r\n    private privSpeechProcessorScript: string; // speech-processor.js Url\r\n    private privStopInputOnRelease: boolean;\r\n\r\n    public constructor(stopInputOnRelease: boolean) {\r\n        this.privStopInputOnRelease = stopInputOnRelease;\r\n    }\r\n\r\n    public record = (context: AudioContext, mediaStream: MediaStream, outputStream: Stream<ArrayBuffer>): void => {\r\n        const desiredSampleRate = 16000;\r\n\r\n        const waveStreamEncoder = new RiffPcmEncoder(context.sampleRate, desiredSampleRate);\r\n        let needHeader: boolean = true;\r\n\r\n        const micInput = context.createMediaStreamSource(mediaStream);\r\n        if (!this.privSpeechProcessorScript) {\r\n            const workletScript = `class SP extends AudioWorkletProcessor {\r\n                constructor(options) {\r\n                  super(options);\r\n                }\r\n                process(inputs, outputs) {\r\n                  const input = inputs[0];\r\n                  const output = [];\r\n                  for (let channel = 0; channel < input.length; channel += 1) {\r\n                    output[channel] = input[channel];\r\n                  }\r\n                  this.port.postMessage(output[0]);\r\n                  return true;\r\n                }\r\n              }\r\n              registerProcessor('speech-processor', SP);`; // tslint:disable-line:max-line-length\r\n            const blob = new Blob([workletScript], { type: \"application/javascript; charset=utf-8\" });\r\n            this.privSpeechProcessorScript = URL.createObjectURL(blob);\r\n        }\r\n\r\n        const attachScriptProcessor = () => {\r\n            const scriptNode = (() => {\r\n                let bufferSize = 0;\r\n                try {\r\n                    return context.createScriptProcessor(bufferSize, 1, 1);\r\n                } catch (error) {\r\n                    // Webkit (<= version 31) requires a valid bufferSize.\r\n                    bufferSize = 2048;\r\n                    let audioSampleRate = context.sampleRate;\r\n                    while (bufferSize < 16384 && audioSampleRate >= (2 * desiredSampleRate)) {\r\n                        bufferSize <<= 1;\r\n                        audioSampleRate >>= 1;\r\n                    }\r\n                    return context.createScriptProcessor(bufferSize, 1, 1);\r\n                }\r\n            })();\r\n            scriptNode.onaudioprocess = (event: AudioProcessingEvent) => {\r\n                const inputFrame = event.inputBuffer.getChannelData(0);\r\n\r\n                if (outputStream && !outputStream.isClosed) {\r\n                    const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                    if (!!waveFrame) {\r\n                        outputStream.writeStreamChunk({\r\n                            buffer: waveFrame,\r\n                            isEnd: false,\r\n                            timeReceived: Date.now(),\r\n                        });\r\n                        needHeader = false;\r\n                    }\r\n                }\r\n            };\r\n            micInput.connect(scriptNode);\r\n            scriptNode.connect(context.destination);\r\n            this.privMediaResources = {\r\n                scriptProcessorNode: scriptNode,\r\n                source: micInput,\r\n                stream: mediaStream,\r\n            };\r\n        };\r\n\r\n        // https://webaudio.github.io/web-audio-api/#audioworklet\r\n        // Using AudioWorklet to improve audio quality and avoid audio glitches due to blocking the UI thread\r\n\r\n        if (!!this.privSpeechProcessorScript && !!context.audioWorklet) {\r\n            context.audioWorklet\r\n                .addModule(this.privSpeechProcessorScript)\r\n                .then(() => {\r\n                    const workletNode = new AudioWorkletNode(context, \"speech-processor\");\r\n                    workletNode.port.onmessage = (ev: MessageEvent) => {\r\n                        const inputFrame: Float32Array = ev.data as Float32Array;\r\n\r\n                        if (outputStream && !outputStream.isClosed) {\r\n                            const waveFrame = waveStreamEncoder.encode(inputFrame);\r\n                            if (!!waveFrame) {\r\n                                outputStream.writeStreamChunk({\r\n                                    buffer: waveFrame,\r\n                                    isEnd: false,\r\n                                    timeReceived: Date.now(),\r\n                                });\r\n                                needHeader = false;\r\n                            }\r\n                        }\r\n                    };\r\n                    micInput.connect(workletNode);\r\n                    workletNode.connect(context.destination);\r\n                    this.privMediaResources = {\r\n                        scriptProcessorNode: workletNode,\r\n                        source: micInput,\r\n                        stream: mediaStream,\r\n                    };\r\n                })\r\n                .catch(() => {\r\n                    attachScriptProcessor();\r\n                });\r\n        } else {\r\n            try {\r\n                attachScriptProcessor();\r\n            } catch (err) {\r\n                throw new Error(`Unable to start audio worklet node for PCMRecorder: ${err}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    public releaseMediaResources = (context: AudioContext): void => {\r\n        if (this.privMediaResources) {\r\n            if (this.privMediaResources.scriptProcessorNode) {\r\n                this.privMediaResources.scriptProcessorNode.disconnect(context.destination);\r\n                this.privMediaResources.scriptProcessorNode = null;\r\n            }\r\n            if (this.privMediaResources.source) {\r\n                this.privMediaResources.source.disconnect();\r\n                if (this.privStopInputOnRelease) {\r\n                    this.privMediaResources.stream.getTracks().forEach((track: any) => track.stop());\r\n                }\r\n                this.privMediaResources.source = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public setWorkletUrl(url: string): void {\r\n        this.privSpeechProcessorScript = url;\r\n    }\r\n}\r\n\r\ninterface IMediaResources {\r\n    source: MediaStreamAudioSourceNode;\r\n    scriptProcessorNode: ScriptProcessorNode | AudioWorkletNode;\r\n    stream: MediaStream;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports\";\r\nimport {\r\n    AudioStreamFormat,\r\n    AudioStreamFormatImpl,\r\n} from \"../sdk/Audio/AudioStreamFormat\";\r\nimport { IRecorder } from \"./IRecorder\";\r\n\r\n// Extending the default definition with browser specific definitions for backward compatibility\r\ninterface INavigator extends Navigator {\r\n    webkitGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    mozGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n    msGetUserMedia?: (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback) => void;\r\n}\r\n\r\nexport const AudioWorkletSourceURLPropertyName = \"MICROPHONE-WorkletSourceUrl\";\r\n\r\nexport class MicAudioSource implements IAudioSource {\r\n\r\n    private static readonly AUDIOFORMAT: AudioStreamFormatImpl = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privInitializeDeferral: Deferred<void>;\r\n\r\n    private privMediaStream: MediaStream;\r\n\r\n    private privContext: AudioContext;\r\n\r\n    private privMicrophoneLabel: string;\r\n\r\n    private privOutputChunkSize: number;\r\n\r\n    private privIsClosing: boolean;\r\n\r\n    public constructor(\r\n        private readonly privRecorder: IRecorder,\r\n        private readonly deviceId?: string,\r\n        audioSourceId?: string,\r\n        mediaStream?: MediaStream\r\n        ) {\r\n\r\n        this.privOutputChunkSize = MicAudioSource.AUDIOFORMAT.avgBytesPerSec / 10;\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privMediaStream = mediaStream || null;\r\n        this.privIsClosing = false;\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(MicAudioSource.AUDIOFORMAT);\r\n    }\r\n\r\n    public get blob(): Promise<Blob> {\r\n        return Promise.reject(\"Not implemented for Mic input\");\r\n    }\r\n\r\n    public turnOn = (): Promise<void> => {\r\n        if (this.privInitializeDeferral) {\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        this.privInitializeDeferral = new Deferred<void>();\r\n\r\n        try {\r\n            this.createAudioContext();\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error as Error;\r\n                this.privInitializeDeferral.reject(typedError.name + \": \" + typedError.message);\r\n            } else {\r\n                this.privInitializeDeferral.reject(error);\r\n            }\r\n            return this.privInitializeDeferral.promise;\r\n        }\r\n\r\n        const nav = window.navigator as INavigator;\r\n\r\n        let getUserMedia = (\r\n            nav.getUserMedia ||\r\n            nav.webkitGetUserMedia ||\r\n            nav.mozGetUserMedia ||\r\n            nav.msGetUserMedia\r\n        );\r\n\r\n        if (!!nav.mediaDevices) {\r\n            getUserMedia = (constraints: MediaStreamConstraints, successCallback: NavigatorUserMediaSuccessCallback, errorCallback: NavigatorUserMediaErrorCallback): void => {\r\n                nav.mediaDevices\r\n                    .getUserMedia(constraints)\r\n                    .then(successCallback)\r\n                    .catch(errorCallback);\r\n            };\r\n        }\r\n\r\n        if (!getUserMedia) {\r\n            const errorMsg = \"Browser does not support getUserMedia.\";\r\n            this.privInitializeDeferral.reject(errorMsg);\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\")); // mic initialized error - no streamid at this point\r\n        } else {\r\n            const next = () => {\r\n                this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n                if (this.privMediaStream && this.privMediaStream.active) {\r\n                    this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                    this.privInitializeDeferral.resolve();\r\n                } else {\r\n                    getUserMedia(\r\n                        { audio: this.deviceId ? { deviceId: this.deviceId } : true, video: false },\r\n                        (mediaStream: MediaStream) => {\r\n                            this.privMediaStream = mediaStream;\r\n                            this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n                            this.privInitializeDeferral.resolve();\r\n                        }, (error: MediaStreamError) => {\r\n                            const errorMsg = `Error occurred during microphone initialization: ${error}`;\r\n                            this.privInitializeDeferral.reject(errorMsg);\r\n                            this.onEvent(new AudioSourceErrorEvent(this.privId, errorMsg));\r\n                        });\r\n                }\r\n            };\r\n\r\n            if (this.privContext.state === \"suspended\") {\r\n                // NOTE: On iOS, the Web Audio API requires sounds to be triggered from an explicit user action.\r\n                // https://github.com/WebAudio/web-audio-api/issues/790\r\n                this.privContext.resume()\r\n                    .then(next)\r\n                    .catch((reason: any) => {\r\n                        this.privInitializeDeferral.reject(`Failed to initialize audio context: ${reason}`);\r\n                    });\r\n            } else {\r\n                next();\r\n            }\r\n        }\r\n\r\n        return this.privInitializeDeferral.promise;\r\n    }\r\n\r\n    public id = (): string => {\r\n        return this.privId;\r\n    }\r\n\r\n    public attach = (audioNodeId: string): Promise<IAudioStreamNode> => {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        return this.listen(audioNodeId).then<IAudioStreamNode>(\r\n            (stream: Stream<ArrayBuffer>) => {\r\n                this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n                return {\r\n                    detach: async () => {\r\n                        stream.readEnded();\r\n                        delete this.privStreams[audioNodeId];\r\n                        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                        return this.turnOff();\r\n                    },\r\n                    id: () => {\r\n                        return audioNodeId;\r\n                    },\r\n                    read: () => {\r\n                        return stream.read();\r\n                    },\r\n                };\r\n            });\r\n    }\r\n\r\n    public detach = (audioNodeId: string): void => {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public async turnOff(): Promise<void> {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        if (this.privInitializeDeferral) {\r\n            // Correctly handle when browser forces mic off before turnOn() completes\r\n            await this.privInitializeDeferral;\r\n            this.privInitializeDeferral = null;\r\n        }\r\n\r\n        await this.destroyAudioContext();\r\n\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.getMicrophoneLabel().then((label: string) => {\r\n            return {\r\n                bitspersample: MicAudioSource.AUDIOFORMAT.bitsPerSample,\r\n                channelcount: MicAudioSource.AUDIOFORMAT.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: label,\r\n                samplerate: MicAudioSource.AUDIOFORMAT.samplesPerSec,\r\n                type: type.Microphones,\r\n            };\r\n        });\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        if (name === AudioWorkletSourceURLPropertyName) {\r\n            this.privRecorder.setWorkletUrl(value);\r\n        } else {\r\n            throw new Error(\"Property '\" + name + \"' is not supported on Microphone.\");\r\n        }\r\n    }\r\n\r\n    private getMicrophoneLabel(): Promise<string> {\r\n        const defaultMicrophoneName: string = \"microphone\";\r\n\r\n        // If we did this already, return the value.\r\n        if (this.privMicrophoneLabel !== undefined) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        // If the stream isn't currently running, we can't query devices because security.\r\n        if (this.privMediaStream === undefined || !this.privMediaStream.active) {\r\n            return Promise.resolve(defaultMicrophoneName);\r\n        }\r\n\r\n        // Setup a default\r\n        this.privMicrophoneLabel = defaultMicrophoneName;\r\n\r\n        // Get the id of the device running the audio track.\r\n        const microphoneDeviceId: string = this.privMediaStream.getTracks()[0].getSettings().deviceId;\r\n\r\n        // If the browser doesn't support getting the device ID, set a default and return.\r\n        if (undefined === microphoneDeviceId) {\r\n            return Promise.resolve(this.privMicrophoneLabel);\r\n        }\r\n\r\n        const deferred: Deferred<string> = new Deferred<string>();\r\n\r\n        // Enumerate the media devices.\r\n        navigator.mediaDevices.enumerateDevices().then((devices: MediaDeviceInfo[]) => {\r\n            for (const device of devices) {\r\n                if (device.deviceId === microphoneDeviceId) {\r\n                    // Found the device\r\n                    this.privMicrophoneLabel = device.label;\r\n                    break;\r\n                }\r\n            }\r\n            deferred.resolve(this.privMicrophoneLabel);\r\n        }, () => deferred.resolve(this.privMicrophoneLabel));\r\n\r\n        return deferred.promise;\r\n    }\r\n\r\n    private listen = async (audioNodeId: string): Promise<Stream<ArrayBuffer>> => {\r\n        await this.turnOn();\r\n        const stream = new ChunkedArrayBufferStream(this.privOutputChunkSize, audioNodeId);\r\n        this.privStreams[audioNodeId] = stream;\r\n        try {\r\n            this.privRecorder.record(this.privContext, this.privMediaStream, stream);\r\n        } catch (error) {\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, error));\r\n            throw error;\r\n        }\r\n        const result: Stream<ArrayBuffer> = stream;\r\n        return result;\r\n    }\r\n\r\n    private onEvent = (event: AudioSourceEvent): void => {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private createAudioContext = (): void => {\r\n        if (!!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privContext = AudioStreamFormatImpl.getAudioContext(MicAudioSource.AUDIOFORMAT.samplesPerSec);\r\n    }\r\n\r\n    private async destroyAudioContext(): Promise<void> {\r\n        if (!this.privContext) {\r\n            return;\r\n        }\r\n\r\n        this.privRecorder.releaseMediaResources(this.privContext);\r\n\r\n        // This pattern brought to you by a bug in the TypeScript compiler where it\r\n        // confuses the (\"close\" in this.privContext) with this.privContext always being null as the alternate.\r\n        // https://github.com/Microsoft/TypeScript/issues/11498\r\n        let hasClose: boolean = false;\r\n        if (\"close\" in this.privContext) {\r\n            hasClose = true;\r\n        }\r\n\r\n        if (hasClose) {\r\n            if (!this.privIsClosing) {\r\n                // The audio context close may take enough time that the close is called twice\r\n                this.privIsClosing = true;\r\n                await this.privContext.close();\r\n                this.privContext = null;\r\n                this.privIsClosing = false;\r\n            }\r\n        } else if (null !== this.privContext && this.privContext.state === \"running\") {\r\n            // Suspend actually takes a callback, but analogous to the\r\n            // resume method, it'll be only fired if suspend is called\r\n            // in a direct response to a user action. The later is not always\r\n            // the case, as TurnOff is also called, when we receive an\r\n            // end-of-speech message from the service. So, doing a best effort\r\n            // fire-and-forget here.\r\n            await this.privContext.suspend();\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might not be recognized.\r\n * @class NoMatchReason\r\n */\r\nexport enum NoMatchReason {\r\n\r\n    /**\r\n     * Indicates that speech was detected, but not recognized.\r\n     * @member NoMatchReason.NotRecognized\r\n     */\r\n    NotRecognized,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only silence,\r\n     * and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialSilenceTimeout\r\n     */\r\n    InitialSilenceTimeout,\r\n\r\n    /**\r\n     * Indicates that the start of the audio stream contained only noise,\r\n     * and the service timed out waiting for speech.\r\n     * @member NoMatchReason.InitialBabbleTimeout\r\n     */\r\n    InitialBabbleTimeout,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceOffEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ChunkedArrayBufferStream,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    IStringDictionary,\r\n    Stream,\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormat, AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\n\r\nexport class FileAudioSource implements IAudioSource {\r\n\r\n    private privAudioFormatPromise: Promise<AudioStreamFormatImpl>;\r\n\r\n    private privStreams: IStringDictionary<Stream<ArrayBuffer>> = {};\r\n\r\n    private privId: string;\r\n\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n\r\n    private privSource: Blob | Buffer;\r\n\r\n    private privFilename: string;\r\n\r\n    private privHeaderEnd: number = 44;\r\n\r\n    public constructor(file: File | Buffer, filename?: string, audioSourceId?: string) {\r\n        this.privId = audioSourceId ? audioSourceId : createNoDashGuid();\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privSource = file;\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && this.privSource instanceof Blob) {\r\n            this.privFilename = (file as File).name;\r\n        } else {\r\n            this.privFilename = filename || \"unknown.wav\";\r\n        }\r\n\r\n        // Read the header.\r\n        this.privAudioFormatPromise = this.readHeader();\r\n    }\r\n\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privAudioFormatPromise;\r\n    }\r\n\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return Promise.resolve(this.privSource);\r\n    }\r\n\r\n    public turnOn = (): Promise<void> => {\r\n        if (this.privFilename.lastIndexOf(\".wav\") !== this.privFilename.length - 4) {\r\n            const errorMsg = this.privFilename + \" is not supported. Only WAVE files are allowed at the moment.\";\r\n            this.onEvent(new AudioSourceErrorEvent(errorMsg, \"\"));\r\n            return Promise.reject(errorMsg);\r\n        }\r\n\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public id = (): string => {\r\n        return this.privId;\r\n    }\r\n\r\n    public attach = async (audioNodeId: string): Promise<IAudioStreamNode> => {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        const stream: Stream<ArrayBuffer> = await this.upload(audioNodeId);\r\n\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return Promise.resolve({\r\n            detach: async (): Promise<void> => {\r\n                stream.readEnded();\r\n                delete this.privStreams[audioNodeId];\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                await this.turnOff();\r\n            },\r\n            id: () => {\r\n                return audioNodeId;\r\n            },\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => {\r\n                return stream.read();\r\n            },\r\n        });\r\n    }\r\n\r\n    public detach = (audioNodeId: string): void => {\r\n        if (audioNodeId && this.privStreams[audioNodeId]) {\r\n            this.privStreams[audioNodeId].close();\r\n            delete this.privStreams[audioNodeId];\r\n            this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n        }\r\n    }\r\n\r\n    public turnOff = (): Promise<void> => {\r\n        for (const streamId in this.privStreams) {\r\n            if (streamId) {\r\n                const stream = this.privStreams[streamId];\r\n                if (stream && !stream.isClosed) {\r\n                    stream.close();\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onEvent(new AudioSourceOffEvent(this.privId)); // no stream now\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privAudioFormatPromise.then<ISpeechConfigAudioDevice>((result: AudioStreamFormatImpl) => {\r\n            return Promise.resolve({\r\n                bitspersample: result.bitsPerSample,\r\n                channelcount: result.channels,\r\n                connectivity: connectivity.Unknown,\r\n                manufacturer: \"Speech SDK\",\r\n                model: \"File\",\r\n                samplerate: result.samplesPerSec,\r\n                type: type.File,\r\n            });\r\n        });\r\n    }\r\n\r\n    private readHeader(): Promise<AudioStreamFormatImpl> {\r\n        // Read the wave header.\r\n        const maxHeaderSize: number = 512;\r\n        const header: Blob | Buffer = this.privSource.slice(0, maxHeaderSize);\r\n\r\n        const headerResult: Deferred<AudioStreamFormatImpl> = new Deferred<AudioStreamFormatImpl>();\r\n\r\n        const processHeader = (header: ArrayBuffer): void => {\r\n            const view: DataView = new DataView(header);\r\n\r\n            const getWord = (index: number): string => {\r\n                return String.fromCharCode(view.getUint8(index), view.getUint8(index + 1), view.getUint8(index + 2), view.getUint8(index + 3));\r\n            };\r\n\r\n            // RIFF 4 bytes.\r\n            if (\"RIFF\" !== getWord(0)) {\r\n                headerResult.reject(\"Invalid WAV header in file, RIFF was not found\");\r\n                return;\r\n            }\r\n\r\n            // length, 4 bytes\r\n            // RIFF Type & fmt 8 bytes\r\n            if (\"WAVE\" !== getWord(8) || \"fmt \" !== getWord(12)) {\r\n                headerResult.reject(\"Invalid WAV header in file, WAVEfmt was not found\");\r\n                return;\r\n            }\r\n\r\n            const formatSize: number = view.getInt32(16, true);\r\n            const channelCount: number = view.getUint16(22, true);\r\n            const sampleRate: number = view.getUint32(24, true);\r\n            const bitsPerSample: number = view.getUint16(34, true);\r\n            // Confirm if header is 44 bytes long.\r\n            let pos: number = 36 + Math.max(formatSize - 16, 0);\r\n            for (; getWord(pos) !== \"data\"; pos += 2) {\r\n                if (pos > maxHeaderSize - 8) {\r\n                    headerResult.reject(\"Invalid WAV header in file, data block was not found\");\r\n                    return;\r\n                }\r\n            }\r\n            this.privHeaderEnd = pos + 8;\r\n            headerResult.resolve(AudioStreamFormat.getWaveFormatPCM(sampleRate, bitsPerSample, channelCount) as AudioStreamFormatImpl);\r\n        };\r\n\r\n        if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && header instanceof Blob) {\r\n            const reader: FileReader = new FileReader();\r\n\r\n            reader.onload = (event: Event) => {\r\n                const header: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                processHeader(header);\r\n            };\r\n\r\n            reader.readAsArrayBuffer(header);\r\n        } else {\r\n            const h: Buffer = header as Buffer;\r\n            processHeader(h.buffer.slice(h.byteOffset, h.byteOffset + h.byteLength));\r\n        }\r\n        return headerResult.promise;\r\n    }\r\n\r\n    private async upload(audioNodeId: string): Promise<Stream<ArrayBuffer>> {\r\n        const onerror = (error: string) => {\r\n            const errorMsg = `Error occurred while processing '${this.privFilename}'. ${error}`;\r\n            this.onEvent(new AudioStreamNodeErrorEvent(this.privId, audioNodeId, errorMsg));\r\n            throw new Error(errorMsg);\r\n        };\r\n\r\n        try {\r\n            await this.turnOn();\r\n\r\n            const format: AudioStreamFormatImpl = await this.privAudioFormatPromise;\r\n            const stream = new ChunkedArrayBufferStream(format.avgBytesPerSec / 10, audioNodeId);\r\n\r\n            this.privStreams[audioNodeId] = stream;\r\n            const chunk: Blob | Buffer = this.privSource.slice(this.privHeaderEnd);\r\n\r\n            const processFile = (buff: ArrayBuffer): void => {\r\n                if (stream.isClosed) {\r\n                    return; // output stream was closed (somebody called TurnOff). We're done here.\r\n                }\r\n\r\n                stream.writeStreamChunk({\r\n                    buffer: buff,\r\n                    isEnd: false,\r\n                    timeReceived: Date.now(),\r\n                });\r\n                stream.close();\r\n            };\r\n\r\n            if (typeof window !== \"undefined\" && typeof Blob !== \"undefined\" && chunk instanceof Blob) {\r\n                const reader: FileReader = new FileReader();\r\n                reader.onerror = (ev: ProgressEvent<FileReader>) => { onerror(ev.toString()); };\r\n\r\n                reader.onload = (event: Event) => {\r\n                    const fileBuffer: ArrayBuffer = (event.target as FileReader).result as ArrayBuffer;\r\n                    processFile(fileBuffer);\r\n                };\r\n\r\n                reader.readAsArrayBuffer(chunk);\r\n            } else {\r\n                const c: Buffer = chunk as Buffer;\r\n                processFile(c.buffer.slice(c.byteOffset, c.byteOffset + c.byteLength));\r\n            }\r\n\r\n            return stream;\r\n        } catch (e) {\r\n            onerror(e);\r\n        }\r\n    }\r\n\r\n    private onEvent = (event: AudioSourceEvent): void => {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n /**\r\n  * An abstract base class that defines callback methods (read() and close()) for\r\n  * custom audio input streams).\r\n  * @class PullAudioInputStreamCallback\r\n  */\r\nexport abstract class PullAudioInputStreamCallback {\r\n\r\n    /**\r\n     * Reads data from audio input stream into the data buffer. The maximal number of bytes\r\n     * to be read is determined by the size of dataBuffer.\r\n     * @member PullAudioInputStreamCallback.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array to store the read data.\r\n     * @returns {number} the number of bytes have been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): number;\r\n\r\n    /**\r\n     * Closes the audio input stream.\r\n     * @member PullAudioInputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SynthesisAdapterBase } from \"../../common.speech/Exports\";\r\nimport {\r\n    BackgroundEvent,\r\n    createNoDashGuid,\r\n    Events,\r\n    IAudioDestination,\r\n    INumberDictionary\r\n} from \"../../common/Exports\";\r\nimport { AudioStreamFormat, IPlayer } from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\nimport { PullAudioOutputStreamImpl } from \"./AudioOutputStream\";\r\nimport { AudioFormatTag } from \"./AudioStreamFormat\";\r\n\r\nconst MediaDurationPlaceholderSeconds = 60 * 30;\r\n\r\nconst AudioFormatToMimeType: INumberDictionary<string> = {\r\n    [AudioFormatTag.PCM]: \"audio/wav\",\r\n    [AudioFormatTag.MuLaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.MP3]: \"audio/mpeg\",\r\n    [AudioFormatTag.OGG_OPUS]: \"audio/ogg\",\r\n    [AudioFormatTag.WEBM_OPUS]: \"audio/webm; codecs=opus\",\r\n    [AudioFormatTag.ALaw]: \"audio/x-wav\",\r\n    [AudioFormatTag.FLAC]: \"audio/flac\",\r\n};\r\n\r\n/**\r\n * Represents the speaker playback audio destination, which only works in browser.\r\n * Note: the SDK will try to use <a href=\"https://www.w3.org/TR/media-source/\">Media Source Extensions</a> to play audio.\r\n * Mp3 format has better supports on Microsoft Edge, Chrome and Safari (desktop), so, it's better to specify mp3 format for playback.\r\n * @class SpeakerAudioDestination\r\n * Updated in version 1.17.0\r\n */\r\nexport class SpeakerAudioDestination implements IAudioDestination, IPlayer {\r\n    private readonly privId: string;\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privAudio: HTMLAudioElement;\r\n    private privMediaSource: MediaSource;\r\n    private privSourceBuffer: SourceBuffer;\r\n    private privPlaybackStarted: boolean = false;\r\n    private privAudioBuffer: ArrayBuffer[];\r\n    private privAppendingToBuffer: boolean = false;\r\n    private privMediaSourceOpened: boolean = false;\r\n    private privIsClosed: boolean;\r\n    private privIsPaused: boolean;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privBytesReceived: number = 0;\r\n\r\n    public constructor(audioDestinationId?: string) {\r\n        this.privId = audioDestinationId ? audioDestinationId : createNoDashGuid();\r\n        this.privIsPaused = false;\r\n        this.privIsClosed = false;\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privAudioBuffer !== undefined) {\r\n            this.privAudioBuffer.push(buffer);\r\n            this.updateSourceBuffer().then(() => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined) {\r\n            this.privAudioOutputStream.write(buffer);\r\n            this.privBytesReceived += buffer.byteLength;\r\n        }\r\n    }\r\n\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privIsClosed = true;\r\n        if (this.privSourceBuffer !== undefined) {\r\n            this.handleSourceBufferUpdateEnd().then(() => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } else if (this.privAudioOutputStream !== undefined) {\r\n            if ((this.privFormat.formatTag === AudioFormatTag.PCM || this.privFormat.formatTag === AudioFormatTag.MuLaw\r\n                || this.privFormat.formatTag === AudioFormatTag.ALaw) && this.privFormat.hasHeader === false) {\r\n                // tslint:disable-next-line:no-console\r\n                console.warn(`Play back is not supported for raw PCM, mulaw or alaw format without header.`);\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            } else {\r\n                let receivedAudio = new ArrayBuffer(this.privBytesReceived);\r\n                this.privAudioOutputStream.read(receivedAudio).then((_: number): void => {\r\n                    receivedAudio = SynthesisAdapterBase.addHeader(receivedAudio, this.privFormat);\r\n                    const audioBlob = new Blob([receivedAudio], { type: AudioFormatToMimeType[this.privFormat.formatTag] });\r\n                    this.privAudio.src = window.URL.createObjectURL(audioBlob);\r\n                    this.notifyPlayback().then(() => {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    }, (error: string): void => {\r\n                        if (!!err) {\r\n                            err(error);\r\n                        }\r\n                    });\r\n                }, (error: string): void => {\r\n                    if (!!err) {\r\n                        err(error);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            // unsupported format, call onAudioEnd directly.\r\n            if (!!this.onAudioEnd) {\r\n                this.onAudioEnd(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    set format(format: AudioStreamFormat) {\r\n        if (typeof (AudioContext) !== \"undefined\" || typeof ((window as any).webkitAudioContext) !== \"undefined\") {\r\n            this.privFormat = format as AudioOutputFormatImpl;\r\n            const mimeType: string = AudioFormatToMimeType[this.privFormat.formatTag];\r\n            if (mimeType === undefined) {\r\n                // tslint:disable-next-line:no-console\r\n                console.warn(\r\n                    `Unknown mimeType for format ${AudioFormatTag[this.privFormat.formatTag]}; playback is not supported.`);\r\n\r\n            } else if (typeof (MediaSource) !== \"undefined\" && MediaSource.isTypeSupported(mimeType)) {\r\n                this.privAudio = new Audio();\r\n                this.privAudioBuffer = [];\r\n                this.privMediaSource = new MediaSource();\r\n                this.privAudio.src = URL.createObjectURL(this.privMediaSource);\r\n                this.privAudio.load();\r\n                this.privMediaSource.onsourceopen = (event: Event): void => {\r\n                    this.privMediaSourceOpened = true;\r\n                    this.privMediaSource.duration = MediaDurationPlaceholderSeconds;\r\n                    this.privSourceBuffer = this.privMediaSource.addSourceBuffer(mimeType);\r\n                    this.privSourceBuffer.onupdate = (_: Event) => {\r\n                        this.updateSourceBuffer().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdateend = (_: Event) => {\r\n                        this.handleSourceBufferUpdateEnd().catch((reason: string): void => {\r\n                            Events.instance.onEvent(new BackgroundEvent(reason));\r\n                        });\r\n                    };\r\n                    this.privSourceBuffer.onupdatestart = (_: Event) => {\r\n                        this.privAppendingToBuffer = false;\r\n                    };\r\n                };\r\n                this.updateSourceBuffer().catch((reason: string): void => {\r\n                    Events.instance.onEvent(new BackgroundEvent(reason));\r\n                });\r\n\r\n            } else {\r\n                // tslint:disable-next-line:no-console\r\n                console.warn(\r\n                    `Format ${AudioFormatTag[this.privFormat.formatTag]} could not be played by MSE, streaming playback is not enabled.`);\r\n                this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n                this.privAudioOutputStream.format = this.privFormat;\r\n                this.privAudio = new Audio();\r\n            }\r\n        }\r\n    }\r\n\r\n    public get volume(): number {\r\n        return this.privAudio.volume;\r\n    }\r\n\r\n    public set volume(volume: number) {\r\n        this.privAudio.volume = volume;\r\n    }\r\n\r\n    public mute(): void {\r\n        this.privAudio.muted = true;\r\n    }\r\n\r\n    public unmute(): void {\r\n        this.privAudio.muted = false;\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsClosed;\r\n    }\r\n\r\n    public get currentTime(): number {\r\n        if (this.privAudio !== undefined) {\r\n            return this.privAudio.currentTime;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.pause();\r\n            this.privIsPaused = true;\r\n        }\r\n    }\r\n\r\n    public resume(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privIsPaused && this.privAudio !== undefined) {\r\n            this.privAudio.play().then(() => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string): void => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.privIsPaused = false;\r\n        }\r\n    }\r\n\r\n    public onAudioStart: (sender: IPlayer) => void;\r\n\r\n    public onAudioEnd: (sender: IPlayer) => void;\r\n\r\n    public get internalAudio(): HTMLAudioElement {\r\n        return this.privAudio;\r\n    }\r\n\r\n    private async updateSourceBuffer(): Promise<void> {\r\n        if (this.privAudioBuffer !== undefined && (this.privAudioBuffer.length > 0) && this.sourceBufferAvailable()) {\r\n            this.privAppendingToBuffer = true;\r\n            const binary = this.privAudioBuffer.shift();\r\n            try {\r\n                this.privSourceBuffer.appendBuffer(binary);\r\n            } catch (error) {\r\n                this.privAudioBuffer.unshift(binary);\r\n                // tslint:disable-next-line:no-console\r\n                console.log(\r\n                    \"buffer filled, pausing addition of binaries until space is made\");\r\n                return;\r\n            }\r\n            await this.notifyPlayback();\r\n        } else if (this.canEndStream()) {\r\n            await this.handleSourceBufferUpdateEnd();\r\n        }\r\n    }\r\n\r\n    private async handleSourceBufferUpdateEnd(): Promise<void> {\r\n        if (this.canEndStream() && this.sourceBufferAvailable()) {\r\n            this.privMediaSource.endOfStream();\r\n            await this.notifyPlayback();\r\n        }\r\n    }\r\n\r\n    private async notifyPlayback(): Promise<void> {\r\n        if (!this.privPlaybackStarted && this.privAudio !== undefined) {\r\n            this.privPlaybackStarted = true;\r\n            if (!!this.onAudioStart) {\r\n                this.onAudioStart(this);\r\n            }\r\n            this.privAudio.onended = (): void => {\r\n                if (!!this.onAudioEnd) {\r\n                    this.onAudioEnd(this);\r\n                }\r\n            };\r\n            if (!this.privIsPaused) {\r\n                await this.privAudio.play();\r\n            }\r\n        }\r\n    }\r\n\r\n    private canEndStream(): boolean {\r\n        return (this.isClosed && this.privSourceBuffer !== undefined && (this.privAudioBuffer.length === 0)\r\n            && this.privMediaSourceOpened && !this.privAppendingToBuffer && this.privMediaSource.readyState === \"open\");\r\n    }\r\n\r\n    private sourceBufferAvailable(): boolean {\r\n        return (this.privSourceBuffer !== undefined && !this.privSourceBuffer.updating);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n/**\r\n * An abstract base class that defines callback methods (write() and close()) for\r\n * custom audio output streams).\r\n * @class PushAudioOutputStreamCallback\r\n */\r\nexport abstract class PushAudioOutputStreamCallback {\r\n\r\n    /**\r\n     * Writes audio data into the data buffer.\r\n     * @member PushAudioOutputStreamCallback.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The byte array that stores the audio data to write.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the audio output stream.\r\n     * @member PushAudioOutputStreamCallback.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"fs\";\r\nimport { IAudioDestination } from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport { AudioStreamFormat } from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\n\r\nexport class AudioFileWriter implements IAudioDestination {\r\n    private privAudioFormat: AudioOutputFormatImpl;\r\n    private privFd: number;\r\n    private privId: string;\r\n    private privWriteStream: fs.WriteStream;\r\n\r\n    public constructor(filename: fs.PathLike) {\r\n        Contracts.throwIfNullOrUndefined(fs.openSync, \"\\nFile System access not available, please use Push or PullAudioOutputStream\");\r\n        this.privFd = fs.openSync(filename, \"w\");\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        Contracts.throwIfNotUndefined(this.privAudioFormat, \"format is already set\");\r\n        this.privAudioFormat = format as AudioOutputFormatImpl;\r\n        let headerOffset: number = 0;\r\n        if (this.privAudioFormat.hasHeader) {\r\n            headerOffset = this.privAudioFormat.header.byteLength;\r\n        }\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream = fs.createWriteStream(\"\", {fd: this.privFd, start: headerOffset, autoClose: false});\r\n        }\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privAudioFormat, \"must set format before writing.\");\r\n        if (this.privWriteStream !== undefined) {\r\n            this.privWriteStream.write(new Uint8Array(buffer.slice(0)));\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (this.privFd !== undefined) {\r\n            this.privWriteStream.on(\"finish\", () => {\r\n                if (this.privAudioFormat.hasHeader) {\r\n                    this.privAudioFormat.updateHeader(this.privWriteStream.bytesWritten);\r\n                    fs.writeSync(this.privFd,\r\n                        new Int8Array(this.privAudioFormat.header),\r\n                        0,\r\n                        this.privAudioFormat.header.byteLength,\r\n                        0);\r\n                }\r\n                fs.closeSync(this.privFd);\r\n                this.privFd = undefined;\r\n            });\r\n            this.privWriteStream.end();\r\n        }\r\n    }\r\n\r\n    public id = (): string => {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { PathLike } from \"fs\";\r\nimport {\r\n    FileAudioSource,\r\n    MicAudioSource,\r\n    PcmRecorder,\r\n} from \"../../common.browser/Exports\";\r\nimport { ISpeechConfigAudioDevice } from \"../../common.speech/Exports\";\r\nimport {\r\n    AudioSourceEvent,\r\n    Deferred,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IAudioSource,\r\n    IAudioStreamNode\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioInputStream,\r\n    AudioOutputStream,\r\n    AudioStreamFormat,\r\n    IPlayer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    PullAudioInputStreamCallback,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeakerAudioDestination\r\n} from \"../Exports\";\r\nimport { AudioFileWriter } from \"./AudioFileWriter\";\r\nimport { PullAudioInputStreamImpl, PushAudioInputStreamImpl } from \"./AudioInputStream\";\r\nimport { PullAudioOutputStreamImpl, PushAudioOutputStreamImpl } from \"./AudioOutputStream\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * Represents audio input configuration used for specifying what type of input to use (microphone, file, stream).\r\n * @class AudioConfig\r\n * Updated in version 1.11.0\r\n */\r\nexport abstract class AudioConfig {\r\n    /**\r\n     * Creates an AudioConfig object representing the default microphone on the system.\r\n     * @member AudioConfig.fromDefaultMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromDefaultMicrophoneInput(): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a microphone with the specified device ID.\r\n     * @member AudioConfig.fromMicrophoneInput\r\n     * @function\r\n     * @public\r\n     * @param {string | undefined} deviceId - Specifies the device ID of the microphone to be used.\r\n     *        Default microphone is used the value is omitted.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromMicrophoneInput(deviceId?: string): AudioConfig {\r\n        const pcmRecorder = new PcmRecorder(true);\r\n        return new AudioConfigImpl(new MicAudioSource(pcmRecorder, deviceId));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified file.\r\n     * @member AudioConfig.fromWavFileInput\r\n     * @function\r\n     * @public\r\n     * @param {File} fileName - Specifies the audio input file. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromWavFileInput(file: File | Buffer, name: string = \"unnamedBuffer.wav\"): AudioConfig {\r\n        return new AudioConfigImpl(new FileAudioSource(file, name));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the specified stream.\r\n     * @member AudioConfig.fromStreamInput\r\n     * @function\r\n     * @public\r\n     * @param {AudioInputStream | PullAudioInputStreamCallback | MediaStream} audioStream - Specifies the custom audio input\r\n     *        stream. Currently, only WAV / PCM is supported.\r\n     * @returns {AudioConfig} The audio input configuration being created.\r\n     */\r\n    public static fromStreamInput(audioStream: AudioInputStream | PullAudioInputStreamCallback\r\n        | MediaStream): AudioConfig {\r\n        if (audioStream instanceof PullAudioInputStreamCallback) {\r\n            return new AudioConfigImpl(new PullAudioInputStreamImpl(audioStream as PullAudioInputStreamCallback));\r\n        }\r\n\r\n        if (audioStream instanceof AudioInputStream) {\r\n            return new AudioConfigImpl(audioStream as PushAudioInputStreamImpl);\r\n        }\r\n        if (typeof MediaStream !== \"undefined\" && audioStream instanceof MediaStream) {\r\n            const pcmRecorder = new PcmRecorder(false);\r\n            return new AudioConfigImpl(new MicAudioSource(pcmRecorder, null, null, audioStream));\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the default speaker.\r\n     * @member AudioConfig.fromDefaultSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromDefaultSpeakerOutput(): AudioConfig {\r\n        return new AudioOutputConfigImpl(new SpeakerAudioDestination());\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing the custom IPlayer object.\r\n     * You can use the IPlayer object to control pause, resume, etc.\r\n     * @member AudioConfig.fromSpeakerOutput\r\n     * @function\r\n     * @public\r\n     * @param {IPlayer} player - the IPlayer object for playback.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.12.0\r\n     */\r\n    public static fromSpeakerOutput(player?: IPlayer): AudioConfig {\r\n        if (player === undefined) {\r\n            return AudioConfig.fromDefaultSpeakerOutput();\r\n        }\r\n        if (player instanceof SpeakerAudioDestination) {\r\n            return new AudioOutputConfigImpl(player as SpeakerAudioDestination);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified output audio file\r\n     * @member AudioConfig.fromAudioFileOutput\r\n     * @function\r\n     * @public\r\n     * @param {PathLike} filename - the filename of the output audio file\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromAudioFileOutput(filename: PathLike): AudioConfig {\r\n        return new AudioOutputConfigImpl(new AudioFileWriter(filename));\r\n    }\r\n\r\n    /**\r\n     * Creates an AudioConfig object representing a specified audio output stream\r\n     * @member AudioConfig.fromStreamOutput\r\n     * @function\r\n     * @public\r\n     * @param {AudioOutputStream | PushAudioOutputStreamCallback} audioStream - Specifies the custom audio output\r\n     *        stream.\r\n     * @returns {AudioConfig} The audio output configuration being created.\r\n     * Added in version 1.11.0\r\n     */\r\n    public static fromStreamOutput(audioStream: AudioOutputStream | PushAudioOutputStreamCallback): AudioConfig {\r\n        if (audioStream instanceof PushAudioOutputStreamCallback) {\r\n            return new AudioOutputConfigImpl(new PushAudioOutputStreamImpl(audioStream as PushAudioOutputStreamCallback));\r\n        }\r\n\r\n        if (audioStream instanceof PushAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PushAudioOutputStreamImpl);\r\n        }\r\n\r\n        if (audioStream instanceof PullAudioOutputStream) {\r\n            return new AudioOutputConfigImpl(audioStream as PullAudioOutputStreamImpl);\r\n        }\r\n\r\n        throw new Error(\"Not Supported Type\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class AudioConfigImpl\r\n */\r\nexport class AudioConfigImpl extends AudioConfig implements IAudioSource {\r\n    private privSource: IAudioSource;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioSource} source - An audio source.\r\n     */\r\n    public constructor(source: IAudioSource) {\r\n        super();\r\n        this.privSource = source;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return this.privSource.format;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        this.privSource.turnOff().then(() => {\r\n            if (!!cb) {\r\n                cb();\r\n            }\r\n        }, (error: string) => {\r\n            if (!!err) {\r\n                err(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.id\r\n     * @function\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privSource.id();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.blob\r\n     * @function\r\n     * @public\r\n     */\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return this.privSource.blob;\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOn\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOn(): Promise<void> {\r\n        return this.privSource.turnOn();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.attach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     * @returns {Promise<IAudioStreamNode>} A promise.\r\n     */\r\n    public attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        return this.privSource.attach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.detach\r\n     * @function\r\n     * @public\r\n     * @param {string} audioNodeId - The audio node id.\r\n     */\r\n    public detach(audioNodeId: string): void {\r\n        return this.privSource.detach(audioNodeId);\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.turnOff\r\n     * @function\r\n     * @public\r\n     * @returns {Promise<void>} A promise.\r\n     */\r\n    public turnOff(): Promise<void> {\r\n        return this.privSource.turnOff();\r\n    }\r\n\r\n    /**\r\n     * @member AudioConfigImpl.prototype.events\r\n     * @function\r\n     * @public\r\n     * @returns {EventSource<AudioSourceEvent>} An event source for audio events.\r\n     */\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privSource.events;\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        if (undefined !== this.privSource.setProperty) {\r\n            this.privSource.setProperty(name, value);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n        }\r\n\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        if (undefined !== this.privSource.getProperty) {\r\n            return this.privSource.getProperty(name, def);\r\n        } else {\r\n            throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return this.privSource.deviceInfo;\r\n    }\r\n}\r\n\r\nexport class AudioOutputConfigImpl extends AudioConfig implements IAudioDestination {\r\n    private privDestination: IAudioDestination;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {IAudioDestination} destination - An audio destination.\r\n     */\r\n    public constructor(destination: IAudioDestination) {\r\n        super();\r\n        this.privDestination = destination;\r\n    }\r\n\r\n    public set format(format: AudioStreamFormat) {\r\n        this.privDestination.format = format;\r\n    }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        this.privDestination.write(buffer);\r\n    }\r\n\r\n    public close(): void {\r\n        this.privDestination.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privDestination.id();\r\n    }\r\n\r\n    public setProperty(name: string, value: string): void {\r\n        throw new Error(\"This AudioConfig instance does not support setting properties.\");\r\n    }\r\n\r\n    public getProperty(name: string, def?: string): string {\r\n        throw new Error(\"This AudioConfig instance does not support getting properties.\");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\n\r\n/**\r\n * Represents a keyword recognition model for recognizing when\r\n * the user says a keyword to initiate further speech recognition.\r\n * @class KeywordRecognitionModel\r\n */\r\nexport class KeywordRecognitionModel {\r\n    private privDisposed: boolean = false;\r\n\r\n    /**\r\n     * Create and initializes a new instance.\r\n     * @constructor\r\n     */\r\n    private constructor() {\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromFile\r\n     * @function\r\n     * @public\r\n     * @param {string} fileName - A string that represents file name for the keyword recognition model.\r\n     *        Note, the file can point to a zip file in which case the model\r\n     *        will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromFile(fileName: string): KeywordRecognitionModel {\r\n        Contracts.throwIfFileDoesNotExist(fileName, \"fileName\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Creates a keyword recognition model using the specified filename.\r\n     * @member KeywordRecognitionModel.fromStream\r\n     * @function\r\n     * @public\r\n     * @param {string} file - A File that represents file for the keyword recognition model.\r\n     *        Note, the file can point to a zip file in which case the model will be extracted from the zip.\r\n     * @returns {KeywordRecognitionModel} The keyword recognition model being created.\r\n     */\r\n    public static fromStream(file: File): KeywordRecognitionModel {\r\n        Contracts.throwIfNull(file, \"file\");\r\n\r\n        throw new Error(\"Not yet implemented.\");\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member KeywordRecognitionModel.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\n\r\n/**\r\n * Language understanding model\r\n * @class LanguageUnderstandingModel\r\n */\r\nexport class LanguageUnderstandingModel {\r\n    /**\r\n     * Creates and initializes a new instance\r\n     * @constructor\r\n     */\r\n    protected constructor() {\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the specified endpoint.\r\n     * @member LanguageUnderstandingModel.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} uri - A String that represents the endpoint of the language understanding model.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromEndpoint(uri: URL): LanguageUnderstandingModel {\r\n        Contracts.throwIfNull(uri, \"uri\");\r\n        Contracts.throwIfNullOrWhitespace(uri.hostname, \"uri\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        // Need to extract the app ID from the URL.\r\n        // URL is in the format: https://<region>.api.cognitive.microsoft.com/luis/v2.0/apps/<Guid>?subscription-key=<key>&timezoneOffset=-360\r\n\r\n        // Start tearing the string apart.\r\n\r\n        // region can be extracted from the host name.\r\n        const firstDot: number = uri.host.indexOf(\".\");\r\n        if (-1 === firstDot) {\r\n            throw new Error(\"Could not determine region from endpoint\");\r\n        }\r\n        langModelImp.region = uri.host.substr(0, firstDot);\r\n\r\n        // Now the app ID.\r\n\r\n        const lastSegment: number = uri.pathname.lastIndexOf(\"/\") + 1;\r\n        if (-1 === lastSegment) {\r\n            throw new Error(\"Could not determine appId from endpoint\");\r\n        }\r\n\r\n        langModelImp.appId = uri.pathname.substr(lastSegment);\r\n\r\n        // And finally the key.\r\n        langModelImp.subscriptionKey = uri.searchParams.get(\"subscription-key\");\r\n        if (undefined === langModelImp.subscriptionKey) {\r\n            throw new Error(\"Could not determine subscription key from endpoint\");\r\n        }\r\n\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates an language understanding model using the application id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromAppId\r\n     * @function\r\n     * @public\r\n     * @param {string} appId - A String that represents the application id of Language Understanding service.\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromAppId(appId: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        return langModelImp;\r\n    }\r\n\r\n    /**\r\n     * Creates a language understanding model using hostname, subscription key and application\r\n     * id of Language Understanding service.\r\n     * @member LanguageUnderstandingModel.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - A String that represents the subscription key of\r\n     *        Language Understanding service.\r\n     * @param {string} appId - A String that represents the application id of Language\r\n     *        Understanding service.\r\n     * @param {LanguageUnderstandingModel} region - A String that represents the region\r\n     *        of the Language Understanding service (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {LanguageUnderstandingModel} The language understanding model being created.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, appId: string, region: string): LanguageUnderstandingModel {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(appId, \"appId\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const langModelImp: LanguageUnderstandingModelImpl = new LanguageUnderstandingModelImpl();\r\n        langModelImp.appId = appId;\r\n        langModelImp.region = region;\r\n        langModelImp.subscriptionKey = subscriptionKey;\r\n        return langModelImp;\r\n    }\r\n}\r\n\r\n/**\r\n * @private\r\n * @class LanguageUnderstandingModelImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class LanguageUnderstandingModelImpl extends LanguageUnderstandingModel {\r\n    public appId: string;\r\n    public region: string;\r\n    public subscriptionKey: string;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports\";\r\nimport { IStringDictionary } from \"../common/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SpeechConfig, SpeechSynthesisOutputFormat,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Speech translation configuration.\r\n * @class SpeechTranslationConfig\r\n */\r\nexport abstract class SpeechTranslationConfig extends SpeechConfig {\r\n\r\n    /**\r\n     * Creates an instance of recognizer config.\r\n     */\r\n    protected constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing a subscription key and service region.\r\n     * @member SpeechTranslationConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Static instance of SpeechTranslationConfig returned by passing authorization token and service region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     *       expires, the caller needs to refresh it by setting the property authorizationToken with a new\r\n     *       valid token. Otherwise, all the recognizers created by this SpeechTranslationConfig instance\r\n     *       will encounter errors during recognition.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply\r\n     * to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechTranslationConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechTranslationConfig} The speech translation config.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech translation config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or paramters.\r\n     * Note: The query properties specified in the endpoint URL are not changed, even if they are\r\n     *       set by any other APIs. For example, if language is defined in the uri as query parameter\r\n     *       \"language=de-DE\", and also set by the speechRecognitionLanguage property, the language\r\n     *       setting in uri takes precedence, and the effective language is \"de-DE\".\r\n     * Only the properties that are not specified in the endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     *       fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     *       use the authorization token.\r\n     * @member SpeechTranslationConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @returns {SpeechTranslationConfig} A speech config instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey: string): SpeechTranslationConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n        Contracts.throwIfNull(subscriptionKey, \"subscriptionKey\");\r\n\r\n        const ret: SpeechTranslationConfigImpl = new SpeechTranslationConfigImpl();\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n        ret.properties.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechTranslationConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Gets/Sets the speech recognition language.\r\n     * @member SpeechTranslationConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract addTargetLanguage(value: string): void;\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfig.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public abstract get targetLanguages(): string[];\r\n\r\n    /**\r\n     * Gets the selected voice name.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} The voice name.\r\n     */\r\n    public abstract get voiceName(): string;\r\n\r\n    /**\r\n     * Gets/Sets voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfig.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public abstract set voiceName(value: string);\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member SpeechTranslationConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} value - The value.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class SpeechTranslationConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechTranslationConfigImpl extends SpeechTranslationConfig {\r\n\r\n    private privSpeechProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechProperties = new PropertyCollection();\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * If this is set, subscription key is ignored.\r\n     * User needs to make sure the provided authorization token is valid and not expired.\r\n     * @member SpeechTranslationConfigImpl.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member SpeechTranslationConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @return {string} The speechRecognitionLanguage.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * @member SpeechTranslationConfigImpl.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     */\r\n    public get subscriptionKey(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        return (OutputFormat as any)[this.privSpeechProperties.getProperty(OutputFormatPropertyName, undefined)];\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the output format\r\n     * @member SpeechTranslationConfigImpl.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    /**\r\n     * Gets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public get endpointId(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the endpoint id.\r\n     * @member SpeechTranslationConfigImpl.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     */\r\n    public set endpointId(value: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    /**\r\n     * Add a (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.addTargetLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public addTargetLanguage(value: string): void {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        const languages: string[] = this.targetLanguages;\r\n        languages.push(value);\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n    }\r\n\r\n    /**\r\n     * Gets the (text) target language to translate into.\r\n     * @member SpeechTranslationConfigImpl.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language such as de-DE\r\n     */\r\n    public get targetLanguages(): string[] {\r\n\r\n        if (this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n        } else {\r\n            return [];\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the voice name.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     */\r\n    public get voiceName(): string {\r\n        return this.getProperty(PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the voice of the translated language, enable voice synthesis output.\r\n     * @member SpeechTranslationConfigImpl.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The name of the voice.\r\n     */\r\n    public set voiceName(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_TranslationVoice, value);\r\n    }\r\n\r\n    /**\r\n     * Provides the region.\r\n     * @member SpeechTranslationConfigImpl.prototype.region\r\n     * @function\r\n     * @public\r\n     * @returns {string} The region.\r\n     */\r\n    public get region(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);\r\n    }\r\n\r\n    /**\r\n     * Gets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} def - The default value of the property in case it is not set.\r\n     * @returns {string} The value of the property.\r\n     */\r\n    public getProperty(name: string, def?: string): string {\r\n        return this.privSpeechProperties.getProperty(name, def);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets an arbitrary property value.\r\n     * @member SpeechTranslationConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property.\r\n     * @param {string} value - The value of the property.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechProperties.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member SpeechTranslationConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechProperties;\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechTranslationConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privSpeechProperties.getProperty(ServicePropertiesPropertyName, \"{}\"));\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privSpeechProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privSpeechProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        return (SpeechSynthesisOutputFormat as any)[this.privSpeechProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privSpeechProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OS,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports\";\r\nimport {\r\n    Contracts\r\n} from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    Connection,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines the base class Recognizer which mainly contains common event handlers.\r\n * @class Recognizer\r\n */\r\nexport abstract class Recognizer {\r\n    private privDisposed: boolean;\r\n    protected audioConfig: AudioConfig;\r\n    protected privReco: ServiceRecognizerBase;\r\n    protected privProperties: PropertyCollection;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    /**\r\n     * Creates and initializes an instance of a Recognizer\r\n     * @constructor\r\n     * @param {AudioConfig} audioInput - An optional audio input stream associated with the recognizer\r\n     */\r\n    protected constructor(audioConfig: AudioConfig, properties: PropertyCollection, connectionFactory: IConnectionFactory) {\r\n        this.audioConfig = (audioConfig !== undefined) ? audioConfig : AudioConfig.fromDefaultMicrophoneInput();\r\n        this.privDisposed = false;\r\n        this.privProperties = properties.clone();\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.implCommonRecognizerSetup();\r\n    }\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member Recognizer.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member Recognizer.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech started events.\r\n     * @member Recognizer.prototype.speechStartDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechStartDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for speech stopped events.\r\n     * @member Recognizer.prototype.speechEndDetected\r\n     * @function\r\n     * @public\r\n     */\r\n    public speechEndDetected: (sender: Recognizer, event: RecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member Recognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Internal data member to support fromRecognizer* pattern methods on other classes.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privReco;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member Recognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposed = true;\r\n\r\n        if (disposing) {\r\n            if (this.privReco) {\r\n                await this.privReco.audioSource.turnOff();\r\n                await this.privReco.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method returns the current state of the telemetry setting.\r\n     * @member Recognizer.prototype.telemetryEnabled\r\n     * @function\r\n     * @public\r\n     * @returns true if the telemetry is enabled, false otherwise.\r\n     */\r\n    public static get telemetryEnabled(): boolean {\r\n        return ServiceRecognizerBase.telemetryDataEnabled;\r\n    }\r\n\r\n    /**\r\n     * This method globally enables or disables telemetry.\r\n     * @member Recognizer.prototype.enableTelemetry\r\n     * @function\r\n     * @public\r\n     * @param enabled - Global setting for telemetry collection.\r\n     * If set to true, telemetry information like microphone errors,\r\n     * recognition errors are collected and sent to Microsoft.\r\n     * If set to false, no telemetry is sent to Microsoft.\r\n     */\r\n    /* tslint:disable:member-ordering */\r\n    public static enableTelemetry(enabled: boolean): void {\r\n        ServiceRecognizerBase.telemetryDataEnabled = enabled;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    protected abstract createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig;\r\n\r\n    // Creates the correct service recognizer for the type\r\n    protected abstract createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase;\r\n\r\n    // Does the generic recognizer setup that is common across all recognizer types.\r\n    protected implCommonRecognizerSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig = this.createRecognizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        this.privReco = this.createServiceRecognizer(\r\n            Recognizer.getAuthFromProperties(this.privProperties),\r\n            this.privConnectionFactory,\r\n            this.audioConfig,\r\n            recognizerConfig);\r\n    }\r\n\r\n    protected async recognizeOnceAsyncImpl(recognitionMode: RecognitionMode): Promise<SpeechRecognitionResult> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, ret.resolve, ret.reject);\r\n        const result: SpeechRecognitionResult = await ret.promise;\r\n        await this.implRecognizerStop();\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n    protected async startContinuousRecognitionAsyncImpl(recognitionMode: RecognitionMode): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        await this.implRecognizerStop();\r\n        await this.privReco.recognize(recognitionMode, undefined, undefined);\r\n    }\r\n\r\n    protected async stopContinuousRecognitionAsyncImpl(): Promise<void> {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n        await this.implRecognizerStop();\r\n    }\r\n\r\n    protected async implRecognizerStop(): Promise<void> {\r\n        if (this.privReco) {\r\n            await this.privReco.stopRecognizing();\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected static getAuthFromProperties(properties: PropertyCollection): IAuthentication {\r\n        const subscriptionKey = properties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = properties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        return authentication;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    OutputFormatPropertyName,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechConnectionFactory,\r\n    SpeechServiceConfig,\r\n    SpeechServiceRecognizer,\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    AutoDetectSourceLanguageConfig,\r\n    KeywordRecognitionModel,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Performs speech recognition from microphone, file, or other audio input streams, and gets transcribed text as result.\r\n * @class SpeechRecognizer\r\n */\r\nexport class SpeechRecognizer extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechConfigImpl.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechConfigImpl.properties, new SpeechConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * SpeechRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this recognizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the recognizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechRecognizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        const recognizer = new SpeechRecognizer(speechConfig, audioConfig);\r\n        return recognizer;\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member SpeechRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member SpeechRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: Recognizer, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the endpoint id of a customized speech model that is used for speech recognition.\r\n     * @member SpeechRecognizer.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the endpoint id of a customized speech model that is used for speech recognition.\r\n     */\r\n    public get endpointId(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_EndpointId, \"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member SpeechRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the output format of recognition.\r\n     * @member SpeechRecognizer.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} The output format of recognition.\r\n     */\r\n    public get outputFormat(): OutputFormat {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        if (this.properties.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]) === OutputFormat[OutputFormat.Simple]) {\r\n            return OutputFormat.Simple;\r\n        } else {\r\n            return OutputFormat.Detailed;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechRecognizer.\r\n     * @member SpeechRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     *       so it is suitable only for single shot recognition\r\n     *       like command or query. For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member SpeechRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the SpeechRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member SpeechRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * @member SpeechRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until\r\n     * stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the\r\n     *      Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model The keyword recognition model that\r\n     *        specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the\r\n     *       Speech Devices SDK. This functionality is currently not included in the SDK itself.\r\n     * @member SpeechRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member SpeechRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member SpeechRecognizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(\r\n            speechConfig,\r\n            this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new SpeechServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AddedLmIntent,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    IntentConnectionFactory,\r\n    IntentServiceRecognizer,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    KeywordRecognitionModel,\r\n    LanguageUnderstandingModel,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SpeechConfig,\r\n} from \"./Exports\";\r\nimport { LanguageUnderstandingModelImpl } from \"./LanguageUnderstandingModel\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Intent recognizer.\r\n * @class\r\n */\r\nexport class IntentRecognizer extends Recognizer {\r\n    private privDisposedIntentRecognizer: boolean;\r\n    private privAddedIntents: string[][];\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent; };\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n\r\n    /**\r\n     * Initializes an instance of the IntentRecognizer.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - The set of configuration properties.\r\n     * @param {AudioConfig} audioConfig - An optional audio input config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, \"speechConfig\");\r\n        const configImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new IntentConnectionFactory());\r\n        this.privAddedIntents = [];\r\n        this.privAddedLmIntents = {};\r\n\r\n        this.privDisposedIntentRecognizer = false;\r\n        this.privProperties = configImpl.properties;\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage), PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member IntentRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: IntentRecognizer, event: IntentRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member IntentRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: IntentRecognizer, event: IntentRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member IntentRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} the spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key for the Intent recognizer.\r\n     * @member IntentRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this IntentRecognizer.\r\n     * @member IntentRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their\r\n     *          values defined for this IntentRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts intent recognition, and stops after the first utterance is recognized.\r\n     * The task returns the recognition text and intent as result.\r\n     * Note: RecognizeOnceAsync() returns when the first utterance has been recognized,\r\n     *       so it is suitable only for single shot recognition like command or query.\r\n     *       For long-running recognition, use StartContinuousRecognitionAsync() instead.\r\n     * @member IntentRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the recognition has finished with an IntentRecognitionResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: IntentRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Interactive), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * @member IntentRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (Object.keys(this.privAddedLmIntents).length !== 0 || undefined !== this.privUmbrellaIntent) {\r\n            const context: IIntentContext = this.buildSpeechContext();\r\n\r\n            this.privReco.speechContext.setSection(\"intent\", context.Intent);\r\n            this.privReco.dynamicGrammar.addReferenceGrammar(context.ReferenceGrammars);\r\n\r\n            const intentReco: IntentServiceRecognizer = this.privReco as IntentServiceRecognizer;\r\n            intentReco.setIntents(this.privAddedLmIntents, this.privUmbrellaIntent);\r\n        }\r\n\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous intent recognition.\r\n     * @member IntentRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts speech recognition with keyword spotting, until stopKeywordRecognitionAsync() is called.\r\n     * User must subscribe to events to receive recognition results.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     *       This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.startKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param {KeywordRecognitionModel} model - The keyword recognition model that specifies the keyword to be recognized.\r\n     * @param cb - Callback invoked once the recognition has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startKeywordRecognitionAsync(model: KeywordRecognitionModel, cb?: () => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        if (!!err) {\r\n            err(\"Not yet implemented.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops continuous speech recognition.\r\n     * Note: Key word spotting functionality is only available on the Speech Devices SDK.\r\n     *       This functionality is currently not included in the SDK itself.\r\n     * @member IntentRecognizer.prototype.stopKeywordRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the recognition has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopKeywordRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        if (!!cb) {\r\n            cb();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a phrase that should be recognized as intent.\r\n     * @member IntentRecognizer.prototype.addIntent\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent to be recognized.\r\n     * @param {string} phrase - A String that specifies the phrase representing the intent.\r\n     */\r\n    public addIntent(simplePhrase: string, intentId?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNullOrWhitespace(simplePhrase, \"simplePhrase\");\r\n\r\n        this.privAddedIntents.push([intentId, simplePhrase]);\r\n    }\r\n\r\n    /**\r\n     * Adds an intent from Language Understanding service for recognition.\r\n     * @member IntentRecognizer.prototype.addIntentWithLanguageModel\r\n     * @function\r\n     * @public\r\n     * @param {string} intentId - A String that represents the identifier of the intent\r\n     *        to be recognized. Ignored if intentName is empty.\r\n     * @param {string} model - The intent model from Language Understanding service.\r\n     * @param {string} intentName - The intent name defined in the intent model. If it\r\n     *        is empty, all intent names defined in the model will be added.\r\n     */\r\n    public addIntentWithLanguageModel(intentId: string, model: LanguageUnderstandingModel, intentName?: string): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n        Contracts.throwIfNullOrWhitespace(intentId, \"intentId\");\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privAddedLmIntents[intentId] = new AddedLmIntent(modelImpl, intentName);\r\n    }\r\n\r\n    /**\r\n     * @summary Adds all intents from the specified Language Understanding Model.\r\n     * @member IntentRecognizer.prototype.addAllIntents\r\n     * @function\r\n     * @public\r\n     * @function\r\n     * @public\r\n     * @param {LanguageUnderstandingModel} model - The language understanding model containing the intents.\r\n     * @param {string} intentId - A custom id String to be returned in the IntentRecognitionResult's getIntentId() method.\r\n     */\r\n    public addAllIntents(model: LanguageUnderstandingModel, intentId?: string): void {\r\n        Contracts.throwIfNull(model, \"model\");\r\n\r\n        const modelImpl: LanguageUnderstandingModelImpl = model as LanguageUnderstandingModelImpl;\r\n        Contracts.throwIfNullOrWhitespace(modelImpl.appId, \"model.appId\");\r\n\r\n        this.privUmbrellaIntent = new AddedLmIntent(modelImpl, intentId);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member IntentRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedIntentRecognizer);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(authentication: IAuthentication, connectionFactory: IConnectionFactory, audioConfig: AudioConfig, recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const audioImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new IntentServiceRecognizer(authentication, connectionFactory, audioImpl, recognizerConfig, this);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedIntentRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedIntentRecognizer = true;\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    private buildSpeechContext(): IIntentContext {\r\n        let appId: string;\r\n        let region: string;\r\n        let subscriptionKey: string;\r\n        const refGrammers: string[] = [];\r\n\r\n        if (undefined !== this.privUmbrellaIntent) {\r\n            appId = this.privUmbrellaIntent.modelImpl.appId;\r\n            region = this.privUmbrellaIntent.modelImpl.region;\r\n            subscriptionKey = this.privUmbrellaIntent.modelImpl.subscriptionKey;\r\n        }\r\n\r\n        // Build the reference grammer array.\r\n        for (const intentId of Object.keys(this.privAddedLmIntents)) {\r\n            const addedLmIntent: AddedLmIntent = this.privAddedLmIntents[intentId];\r\n\r\n            // validate all the same model, region, and key...\r\n            if (appId === undefined) {\r\n                appId = addedLmIntent.modelImpl.appId;\r\n            } else {\r\n                if (appId !== addedLmIntent.modelImpl.appId) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model\");\r\n                }\r\n            }\r\n\r\n            if (region === undefined) {\r\n                region = addedLmIntent.modelImpl.region;\r\n            } else {\r\n                if (region !== addedLmIntent.modelImpl.region) {\r\n                    throw new Error(\"Intents must all be from the same LUIS model in a single region\");\r\n                }\r\n            }\r\n\r\n            if (subscriptionKey === undefined) {\r\n                subscriptionKey = addedLmIntent.modelImpl.subscriptionKey;\r\n            } else {\r\n                if (subscriptionKey !== addedLmIntent.modelImpl.subscriptionKey) {\r\n                    throw new Error(\"Intents must all use the same subscription key\");\r\n                }\r\n            }\r\n\r\n            const grammer: string = \"luis/\" + appId + \"-PRODUCTION#\" + intentId;\r\n            refGrammers.push(grammer);\r\n        }\r\n\r\n        return {\r\n            Intent: {\r\n                id: appId,\r\n                key: (subscriptionKey === undefined) ? this.privProperties.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key]) : subscriptionKey,\r\n                provider: \"LUIS\",\r\n            },\r\n            ReferenceGrammars: (undefined === this.privUmbrellaIntent) ? refGrammers : [\"luis/\" + appId + \"-PRODUCTION\"],\r\n        };\r\n    }\r\n}\r\n\r\ninterface IIntentContext {\r\n    Intent: {\r\n        id: string,\r\n        key: string,\r\n        provider: string,\r\n    };\r\n    ReferenceGrammars: string[];\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { HeaderNames } from \"../common.speech/HeaderNames\";\r\nimport {\r\n    ConnectionMessage as IntConnectionMessage,\r\n    MessageType\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyCollection\r\n} from \"./PropertyCollection\";\r\nimport { PropertyId } from \"./PropertyId\";\r\n\r\n/**\r\n * ConnectionMessage represents implementation specific messages sent to and received from\r\n * the speech service. These messages are provided for debugging purposes and should not\r\n * be used for production use cases with the Azure Cognitive Services Speech Service.\r\n * Messages sent to and received from the Speech Service are subject to change without\r\n * notice. This includes message contents, headers, payloads, ordering, etc.\r\n * Added in version 1.11.0.\r\n */\r\nexport abstract class ConnectionMessage {\r\n    /**\r\n     * The message path.\r\n     */\r\n    public abstract get path(): string;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public abstract get isTextMessage(): boolean;\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public abstract get isBinaryMessage(): boolean;\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public abstract get TextMessage(): string;\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public abstract get binaryMessage(): ArrayBuffer;\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public abstract get properties(): PropertyCollection;\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public abstract toString(): string;\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConnectionMessageImpl {\r\n\r\n    private privConnectionMessage: IntConnectionMessage;\r\n    private privProperties: PropertyCollection;\r\n\r\n    constructor(message: IntConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n        this.privProperties = new PropertyCollection();\r\n        if (!!this.privConnectionMessage.headers[HeaderNames.ConnectionId]) {\r\n            this.privProperties.setProperty(PropertyId.Speech_SessionId, this.privConnectionMessage.headers[HeaderNames.ConnectionId]);\r\n        }\r\n\r\n        Object.keys(this.privConnectionMessage.headers).forEach((header: string, index: number, array: string[]): void => {\r\n            this.privProperties.setProperty(header, this.privConnectionMessage.headers[header]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The message path.\r\n     */\r\n    public get path(): string {\r\n        return this.privConnectionMessage.headers[Object.keys(this.privConnectionMessage.headers).find((key: string) => key.toLowerCase() === \"path\".toLowerCase())];\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a text message.\r\n     * See also IsBinaryMessage().\r\n     */\r\n    public get isTextMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Text;\r\n    }\r\n\r\n    /**\r\n     * Checks to see if the ConnectionMessage is a binary message.\r\n     * See also GetBinaryMessage().\r\n     */\r\n    public get isBinaryMessage(): boolean {\r\n        return this.privConnectionMessage.messageType === MessageType.Binary;\r\n    }\r\n\r\n    /**\r\n     * Gets the text message payload. Typically the text message content-type is\r\n     * application/json. To determine other content-types use\r\n     * Properties.GetProperty(\"Content-Type\").\r\n     */\r\n    public get TextMessage(): string {\r\n        return this.privConnectionMessage.textBody;\r\n    }\r\n\r\n    /**\r\n     * Gets the binary message payload.\r\n     */\r\n    public get binaryMessage(): ArrayBuffer {\r\n        return this.privConnectionMessage.binaryBody;\r\n    }\r\n\r\n    /**\r\n     * A collection of properties and their values defined for this <see cref=\"ConnectionMessage\"/>.\r\n     * Message headers can be accessed via this collection (e.g. \"Content-Type\").\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message.\r\n     */\r\n    public toString(): string {\r\n        return \"\";\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { SessionEventArgs } from \"./Exports\";\r\n\r\n/**\r\n * Defines payload for connection events like Connected/Disconnected.\r\n * Added in version 1.2.0\r\n */\r\nexport class ConnectionEventArgs extends SessionEventArgs {\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    SessionEventArgs\r\n} from \"./Exports\";\r\n\r\nexport class ConnectionMessageEventArgs {\r\n\r\n    private privConnectionMessage: ConnectionMessage;\r\n\r\n    constructor(message: ConnectionMessage) {\r\n        this.privConnectionMessage = message;\r\n    }\r\n\r\n    /**\r\n     * Gets the <see cref=\"ConnectionMessage\"/> associated with this <see cref=\"ConnectionMessageEventArgs\"/>.\r\n     */\r\n    public get message(): ConnectionMessage {\r\n        return this.privConnectionMessage;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that represents the connection message event.\r\n     */\r\n    public toString(): string {\r\n        return \"Message: \" + this.privConnectionMessage.toString();\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport { SessionEventArgs } from \"./Exports\";\r\n\r\n/**\r\n * Defines payload for any Service message event\r\n * Added in version 1.9.0\r\n */\r\n\r\nexport class ServiceEventArgs extends SessionEventArgs {\r\n    private privJsonResult: string;\r\n    private privEventName: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} json - json payload of the USP message.\r\n     */\r\n    public constructor(json: string,  name: string, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privJsonResult = json;\r\n        this.privEventName = name;\r\n    }\r\n\r\n    public get jsonString(): string {\r\n        return this.privJsonResult;\r\n    }\r\n\r\n    public get eventName(): string {\r\n        return this.privEventName;\r\n    }\r\n}\r\n","//\r\n// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE.md file in the project root for full license information.\r\n//\r\n\r\nimport {\r\n    ServiceRecognizerBase,\r\n    SynthesisAdapterBase,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    ConnectionEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    IDetachable,\r\n    marshalPromiseToCallbacks,\r\n    ServiceEvent,\r\n} from \"../common/Exports\";\r\nimport {\r\n    ConnectionMessageImpl\r\n} from \"./ConnectionMessage\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConnectionMessageEventArgs,\r\n    Recognizer,\r\n    ServiceEventArgs,\r\n    SpeechSynthesizer,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Connection is a proxy class for managing connection to the speech service of the specified Recognizer.\r\n * By default, a Recognizer autonomously manages connection to service when needed.\r\n * The Connection class provides additional methods for users to explicitly open or close a connection and\r\n * to subscribe to connection status changes.\r\n * The use of Connection is optional, and mainly for scenarios where fine tuning of application\r\n * behavior based on connection status is needed. Users can optionally call Open() to manually set up a connection\r\n * in advance before starting recognition on the Recognizer associated with this Connection.\r\n * If the Recognizer needs to connect or disconnect to service, it will\r\n * setup or shutdown the connection independently. In this case the Connection will be notified by change of connection\r\n * status via Connected/Disconnected events.\r\n * Added in version 1.2.1.\r\n */\r\nexport class Connection {\r\n    private privInternalData: ServiceRecognizerBase | SynthesisAdapterBase;\r\n    private privEventListener: IDetachable;\r\n    private privServiceEventListener: IDetachable;\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified recognizer.\r\n     * @param recognizer The recognizer associated with the connection.\r\n     * @return The Connection instance of the recognizer.\r\n     */\r\n    public static fromRecognizer(recognizer: Recognizer): Connection {\r\n        const recoBase: ServiceRecognizerBase = recognizer.internalData as ServiceRecognizerBase;\r\n\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = recoBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Gets the Connection instance from the specified synthesizer.\r\n     * @param synthesizer The synthesizer associated with the connection.\r\n     * @return The Connection instance of the synthesizer.\r\n     */\r\n    public static fromSynthesizer(synthesizer: SpeechSynthesizer): Connection {\r\n        const synthBase: SynthesisAdapterBase = synthesizer.internalData as SynthesisAdapterBase;\r\n\r\n        const ret: Connection = new Connection();\r\n\r\n        ret.privInternalData = synthBase;\r\n        ret.setupEvents();\r\n        return ret;\r\n    }\r\n\r\n    /**\r\n     * Starts to set up connection to the service.\r\n     * Users can optionally call openConnection() to manually set up a connection in advance before starting recognition on the\r\n     * Recognizer associated with this Connection. After starting recognition, calling Open() will have no effect\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     */\r\n    public openConnection(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privInternalData.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call closeConnection() to manually shutdown the connection of the associated Recognizer.\r\n     *\r\n     * If closeConnection() is called during recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public closeConnection(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            throw new Error(\"Disconnecting a synthesizer's connection is currently not supported\");\r\n        } else {\r\n            marshalPromiseToCallbacks((this.privInternalData as ServiceRecognizerBase).disconnect(), cb, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Appends a parameter in a message to service.\r\n     * Added in version 1.12.1.\r\n     * @param path The path of the network message.\r\n     * @param propertyName Name of the property\r\n     * @param propertyValue Value of the property. This is a json string.\r\n     */\r\n    public setMessageProperty(path: string, propertyName: string, propertyValue: string | object): void {\r\n        Contracts.throwIfNullOrWhitespace(propertyName, \"propertyName\");\r\n\r\n        if (this.privInternalData instanceof ServiceRecognizerBase) {\r\n            if (path.toLowerCase() !== \"speech.context\") {\r\n                throw new Error(\"Only speech.context message property sets are currently supported for recognizer\");\r\n            } else {\r\n                (this.privInternalData as ServiceRecognizerBase).speechContext.setSection(propertyName, propertyValue);\r\n            }\r\n        } else if (this.privInternalData instanceof SynthesisAdapterBase) {\r\n            if (path.toLowerCase() !== \"synthesis.context\") {\r\n                throw new Error(\"Only synthesis.context message property sets are currently supported for synthesizer\");\r\n            } else {\r\n                (this.privInternalData as SynthesisAdapterBase).synthesisContext.setSection(propertyName, propertyValue);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends a message to the speech service.\r\n     * Added in version 1.13.0.\r\n     * @param path The WebSocket path of the message\r\n     * @param payload The payload of the message. This is a json string or a ArrayBuffer.\r\n     * @param success A callback to indicate success.\r\n     * @param error A callback to indicate an error.\r\n     */\r\n    public sendMessageAsync(path: string, payload: string | ArrayBuffer, success?: () => void, error?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privInternalData.sendNetworkMessage(path, payload), success, error);\r\n    }\r\n\r\n    /**\r\n     * Any message from service that is not being processed by any other top level recognizers.\r\n     *\r\n     * Will be removed in 2.0.\r\n     */\r\n    public receivedServiceMessage: (args: ServiceEventArgs) => void;\r\n\r\n    /**\r\n     * Any message received from the Speech Service.\r\n     */\r\n    public messageReceived: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * Any message sent to the Speech Service.\r\n     */\r\n    public messageSent: (args: ConnectionMessageEventArgs) => void;\r\n\r\n    /**\r\n     * The Connected event to indicate that the recognizer is connected to service.\r\n     */\r\n    public connected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * The Disconnected event to indicate that the recognizer is disconnected from service.\r\n     */\r\n    public disconnected: (args: ConnectionEventArgs) => void;\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     */\r\n    public close(): void {\r\n        /* tslint:disable:no-empty */\r\n    }\r\n\r\n    private setupEvents(): void {\r\n        this.privEventListener = this.privInternalData.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                if (!!this.connected) {\r\n                    this.connected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                if (!!this.disconnected) {\r\n                    this.disconnected(new ConnectionEventArgs(connectionEvent.connectionId));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageSentEvent\") {\r\n                if (!!this.messageSent) {\r\n                    this.messageSent(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageSentEvent).message)));\r\n                }\r\n            } else if (connectionEvent.name === \"ConnectionMessageReceivedEvent\") {\r\n                if (!!this.messageReceived) {\r\n                    this.messageReceived(new ConnectionMessageEventArgs(new ConnectionMessageImpl((connectionEvent as ConnectionMessageReceivedEvent).message)));\r\n                }\r\n            }\r\n        });\r\n\r\n        this.privServiceEventListener = this.privInternalData.serviceEvents.attach((e: ServiceEvent): void => {\r\n            if (!!this.receivedServiceMessage) {\r\n                this.receivedServiceMessage(new ServiceEventArgs(e.jsonString, e.name));\r\n            }\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranslationConnectionFactory,\r\n    TranslationServiceRecognizer,\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Connection } from \"./Connection\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationSynthesisEventArgs,\r\n} from \"./Exports\";\r\nimport { SpeechTranslationConfig, SpeechTranslationConfigImpl } from \"./SpeechTranslationConfig\";\r\n\r\n/**\r\n * Translation recognizer\r\n * @class TranslationRecognizer\r\n */\r\nexport class TranslationRecognizer extends Recognizer {\r\n    private privDisposedTranslationRecognizer: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the TranslationRecognizer.\r\n     * @constructor\r\n     * @param {SpeechTranslationConfig} speechConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n\r\n        super(audioConfig, configImpl.properties, new TranslationConnectionFactory());\r\n\r\n        this.privDisposedTranslationRecognizer = false;\r\n\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            Contracts.throwIfNullOrWhitespace(\r\n                this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice),\r\n                PropertyId[PropertyId.SpeechServiceConnection_TranslationVoice]);\r\n        }\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n            PropertyId[PropertyId.SpeechServiceConnection_TranslationToLanguages]);\r\n\r\n        Contracts.throwIfNullOrWhitespace(this.properties.getProperty(\r\n            PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member TranslationRecognizer.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: TranslationRecognizer, event: TranslationRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member TranslationRecognizer.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: TranslationRecognizer, event: TranslationRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event synthesizing signals that a translation synthesis result is received.\r\n     * @member TranslationRecognizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: TranslationRecognizer, event: TranslationSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the language name that was set when the recognizer was created.\r\n     * @member TranslationRecognizer.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Gets the language name that was set when the recognizer was created.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * Gets target languages for translation that were set when the recognizer was created.\r\n     * The language is specified in BCP-47 format. The translation will provide translated text for each of language.\r\n     * @member TranslationRecognizer.prototype.targetLanguages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} Gets target languages for translation that were set when the recognizer was created.\r\n     */\r\n    public get targetLanguages(): string[] {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n    }\r\n\r\n    /**\r\n     * Gets the name of output voice.\r\n     * @member TranslationRecognizer.prototype.voiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} the name of output voice.\r\n     */\r\n    public get voiceName(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member TranslationRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - Authorization token.\r\n     */\r\n    public set authorizationToken(value: string) {\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this TranslationRecognizer.\r\n     * @member TranslationRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this TranslationRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, and stops after the first utterance is recognized.\r\n     * The task returns the translation text as result.\r\n     * Note: recognizeOnceAsync returns when the first utterance has been recognized, so it is suitableonly\r\n     *       for single shot recognition like command or query. For long-running recognition,\r\n     *       use startContinuousRecognitionAsync() instead.\r\n     * @member TranslationRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the translation has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public recognizeOnceAsync(cb?: (e: TranslationRecognitionResult) => void, err?: (e: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.recognizeOnceAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and translation, until stopContinuousRecognitionAsync() is called.\r\n     * User must subscribe to events to receive translation results.\r\n     * @member TranslationRecognizer.prototype.startContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stops continuous recognition and translation.\r\n     * @member TranslationRecognizer.prototype.stopContinuousRecognitionAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the translation has stopped.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * dynamically remove a language from list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.removeTargetLanguage\r\n     * @function\r\n     * @param lang - language to be removed\r\n     * @public\r\n     */\r\n    public removeTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be removed\");\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            const languages: string[] = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            const index: number = languages.indexOf(lang);\r\n            if (index > -1) {\r\n                languages.splice(index, 1);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n                this.updateLanguages(languages);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * dynamically add a language to list of target language\r\n     * (can be used while recognition is ongoing)\r\n     * @member TranslationRecognizer.prototype.addTargetLanguage\r\n     * @function\r\n     * @param lang - language to be added\r\n     * @public\r\n     */\r\n    public addTargetLanguage(lang: string): void {\r\n        Contracts.throwIfNullOrUndefined(lang, \"language to be added\");\r\n        let languages: string[] = [];\r\n        if (this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, undefined) !== undefined) {\r\n            languages = this.properties.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages).split(\",\");\r\n            if (!languages.includes(lang)) {\r\n                languages.push(lang);\r\n                this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, languages.join(\",\"));\r\n            }\r\n        } else {\r\n            this.properties.setProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages, lang);\r\n            languages = [lang];\r\n        }\r\n        this.updateLanguages(languages);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member TranslationRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedTranslationRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * handles ConnectionEstablishedEvent for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onConnection\r\n     * @function\r\n     * @public\r\n     */\r\n    /* tslint:disable:no-empty */\r\n    public onConnection(): void { }\r\n\r\n    /**\r\n     * handles disconnection events for conversation translation scenarios.\r\n     * @member TranslationRecognizer.prototype.onDisconnection\r\n     * @function\r\n     * @public\r\n     */\r\n    /* tslint:disable:no-empty */\r\n    public async onDisconnection(): Promise<void> { }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedTranslationRecognizer) {\r\n            return;\r\n        }\r\n\r\n        this.privDisposedTranslationRecognizer = true;\r\n\r\n        if (disposing) {\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new TranslationServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n\r\n    private updateLanguages(languages: string[]): void {\r\n        const conn: Connection = Connection.fromRecognizer(this);\r\n        if (!!conn) {\r\n            conn.setMessageProperty(\"speech.context\", \"translationcontext\", {to: languages});\r\n            conn.sendMessageAsync(\"event\", JSON.stringify({\r\n                id: \"translation\",\r\n                name: \"updateLanguage\",\r\n                to: languages\r\n                }));\r\n        }\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionStatus, SimpleSpeechPhrase } from \"../../src/common.speech/Exports\";\r\nimport { IntentRecognitionResult, NoMatchReason, SpeechRecognitionResult, TranslationRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Contains detailed information for NoMatch recognition results.\r\n * @class NoMatchDetails\r\n */\r\nexport class NoMatchDetails {\r\n    private privReason: NoMatchReason;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {NoMatchReason} reason - The no-match reason.\r\n     */\r\n    private constructor(reason: NoMatchReason) {\r\n        this.privReason = reason;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of NoMatchDetails object for the NoMatch SpeechRecognitionResults.\r\n     * @member NoMatchDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult}\r\n     *        result - The recognition result that was not recognized.\r\n     * @returns {NoMatchDetails} The no match details object being created.\r\n     */\r\n    public static fromResult(result: SpeechRecognitionResult | IntentRecognitionResult | TranslationRecognitionResult): NoMatchDetails {\r\n        const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json);\r\n\r\n        let reason: NoMatchReason = NoMatchReason.NotRecognized;\r\n\r\n        switch (simpleSpeech.RecognitionStatus) {\r\n            case RecognitionStatus.BabbleTimeout:\r\n                reason = NoMatchReason.InitialBabbleTimeout;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n                reason = NoMatchReason.InitialSilenceTimeout;\r\n                break;\r\n            default:\r\n                reason = NoMatchReason.NotRecognized;\r\n                break;\r\n        }\r\n\r\n        return new NoMatchDetails(reason);\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member NoMatchDetails.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {NoMatchReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): NoMatchReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetailsBase\r\n */\r\nexport class CancellationDetailsBase {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - The error details, if provided.\r\n     */\r\n    protected constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationDetailsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member CancellationDetailsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get ErrorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCodePropertyName, EnumTranslation, SimpleSpeechPhrase } from \"../common.speech/Exports\";\r\nimport { CancellationDetailsBase } from \"./CancellationDetailsBase\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    RecognitionResult,\r\n    SpeechSynthesisResult\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Contains detailed information about why a result was canceled.\r\n * @class CancellationDetails\r\n */\r\nexport class CancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of CancellationDetails object for the canceled RecognitionResult.\r\n     * @member CancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult | SpeechSynthesisResult} result - The result that was canceled.\r\n     * @returns {CancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: RecognitionResult | SpeechSynthesisResult): CancellationDetails {\r\n        let reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (result instanceof RecognitionResult && !!result.json) {\r\n            const simpleSpeech: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(result.json);\r\n            reason = EnumTranslation.implTranslateCancelResult(simpleSpeech.RecognitionStatus);\r\n        }\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])];\r\n        }\r\n\r\n        return new CancellationDetails(reason, result.errorDetails || EnumTranslation.implTranslateErrorDetails(errorCode), errorCode);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    DynamicGrammarBuilder,\r\n    ServiceRecognizerBase,\r\n} from \"../common.speech/Exports\";\r\nimport { Recognizer } from \"./Exports\";\r\n\r\n/**\r\n * Allows additions of new phrases to improve speech recognition.\r\n *\r\n * Phrases added to the recognizer are effective at the start of the next recognition, or the next time the SpeechSDK must reconnect\r\n * to the speech service.\r\n */\r\nexport class PhraseListGrammar {\r\n    private privGrammerBuilder: DynamicGrammarBuilder;\r\n\r\n    private constructor(recogBase: ServiceRecognizerBase) {\r\n        this.privGrammerBuilder = recogBase.dynamicGrammar;\r\n    }\r\n\r\n    /**\r\n     * Creates a PhraseListGrammar from a given speech recognizer. Will accept any recognizer that derives from @class Recognizer.\r\n     * @param recognizer The recognizer to add phrase lists to.\r\n     */\r\n    public static fromRecognizer(recognizer: Recognizer): PhraseListGrammar {\r\n        const recoBase: ServiceRecognizerBase = recognizer.internalData as ServiceRecognizerBase;\r\n\r\n        return new PhraseListGrammar(recoBase);\r\n    }\r\n\r\n    /**\r\n     * Adds a single phrase to the current recognizer.\r\n     * @param phrase Phrase to add.\r\n     */\r\n    public addPhrase(phrase: string): void {\r\n        this.privGrammerBuilder.addPhrase(phrase);\r\n    }\r\n\r\n    /**\r\n     * Adds multiple phrases to the current recognizer.\r\n     * @param phrases Array of phrases to add.\r\n     */\r\n    public addPhrases(phrases: string[]): void {\r\n        this.privGrammerBuilder.addPhrase(phrases);\r\n    }\r\n\r\n    /**\r\n     * Clears all phrases added to the current recognizer.\r\n     */\r\n    public clear(): void {\r\n        this.privGrammerBuilder.clearPhrases();\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a Bot Framework backend.\r\n * @class BotFrameworkConfig\r\n */\r\nexport class BotFrameworkConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of BotFrameworkConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance with the provided subscription information.\r\n     * @member BotFrameworkConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     *        resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromSubscription(subscription: string, region: string, botId?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates a bot framework configuration instance for the specified authorization token and region.\r\n     * Note: The caller must ensure that an authorization token is valid. Before an authorization token expires, the\r\n     *       caller must refresh it by setting the authorizationToken property on the corresponding\r\n     *       DialogServiceConnector instance created with this config. The contents of configuration objects are copied\r\n     *       when connectors are created, so setting authorizationToken on a DialogServiceConnector will not update the\r\n     *       original configuration's authorization token. Create a new configuration instance or set the\r\n     *       SpeechServiceAuthorization_Token property to update an existing instance if it will be used to create\r\n     *       further DialogServiceConnectors.\r\n     * @member BotFrameworkConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param authorizationToken The authorization token associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     *        resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromAuthorizationToken(\r\n        authorizationToken: string, region: string, botId?: string\r\n    ): BotFrameworkConfig {\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n\r\n        if (botId) {\r\n            botFrameworkConfig.setProperty(PropertyId.Conversation_ApplicationId, botId);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-default service host. The standard resource path will be\r\n     * assumed. For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL) and then set the AuthorizationToken\r\n     *       property on the created BotFrameworkConfig instance.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL | string} host - If a URL is provided, the fully-qualified host with protocol (e.g.\r\n     *        wss://your.host.com:1234) will be used. If a string is provided, it will be embedded in\r\n     *        wss://{host}.convai.speech.azure.us.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     *        token must be set.\r\n     * @param botId Optional. Identifier for using a specific bot within an Azure resource group. Equivalent to the\r\n     *        resource name.\r\n     * @returns {BotFrameworkConfig} A new bot framework configuration instance.\r\n     */\r\n    public static fromHost(\r\n        host: URL | string,\r\n        subscriptionKey?: string,\r\n        botId?: string): BotFrameworkConfig {\r\n\r\n        Contracts.throwIfNullOrUndefined(host, \"host\");\r\n        const resolvedHost: URL = host instanceof URL ? host : new URL(`wss://${host}.convai.speech.azure.us`);\r\n        Contracts.throwIfNullOrUndefined(resolvedHost, \"resolvedHost\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Host, resolvedHost.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of a BotFrameworkConfig.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     *       fromEndpoint method, and then set authorizationToken=\"token\" on the created BotFrameworkConfig instance to\r\n     *       use the authorization token.\r\n     * Note: Added in version 1.15.0.\r\n     * @member BotFrameworkConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization\r\n     *        token must be set.\r\n     * @returns {BotFrameworkConfig} - A new bot framework configuration instance using the provided endpoint.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): BotFrameworkConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const botFrameworkConfig: BotFrameworkConfig = new DialogServiceConfigImpl();\r\n        botFrameworkConfig.setProperty(\r\n            PropertyId.Conversation_DialogType,\r\n            DialogServiceConfig.DialogTypes.BotFramework);\r\n        botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.toString());\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            botFrameworkConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n\r\n        return botFrameworkConfig;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Class that defines configurations for the dialog service connector object for using a CustomCommands backend.\r\n * @class CustomCommandsConfig\r\n */\r\nexport class CustomCommandsConfig extends DialogServiceConfigImpl {\r\n\r\n    /**\r\n     * Creates an instance of CustomCommandsConfig.\r\n     */\r\n    public constructor() {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified subscription and region.\r\n     * @member CustomCommandsConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param subscription Subscription key associated with the bot\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new bot framework config.\r\n     */\r\n    public static fromSubscription(applicationId: string, subscription: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(subscription, \"subscription\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Key, subscription);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the bot framework config with the specified Speech Commands application id, authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * As configuration values are copied when creating a new recognizer, the new token value will not apply to recognizers that have already been created.\r\n     * For recognizers that have been created before, you need to set authorization token of the corresponding recognizer\r\n     * to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member CustomCommandsConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param applicationId Speech Commands application id.\r\n     * @param authorizationToken The authorization token associated with the application.\r\n     * @param region The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {CustomCommandsConfig} A new speech commands config.\r\n     */\r\n    public static fromAuthorizationToken(applicationId: string, authorizationToken: string, region: string): CustomCommandsConfig {\r\n        Contracts.throwIfNullOrWhitespace(applicationId, \"applicationId\");\r\n        Contracts.throwIfNullOrWhitespace(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const customCommandsConfig: CustomCommandsConfig = new DialogServiceConfigImpl();\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_DialogType, DialogServiceConfig.DialogTypes.CustomCommands);\r\n        customCommandsConfig.setProperty(PropertyId.Conversation_ApplicationId, applicationId);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceAuthorization_Token, authorizationToken);\r\n        customCommandsConfig.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        return customCommandsConfig;\r\n    }\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    public set applicationId(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.setProperty(PropertyId.Conversation_ApplicationId, value);\r\n    }\r\n\r\n    /**\r\n     * Gets the corresponding backend application identifier.\r\n     * @member CustomCommandsConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to get.\r\n     */\r\n    public get applicationId(): string {\r\n        return this.getProperty(PropertyId.Conversation_ApplicationId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport { OutputFormatPropertyName } from \"../common.speech/Exports\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\r\nimport { DialogServiceConfig, OutputFormat, PropertyId } from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { AuthInfo, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport class DialogConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private static Constants: any = class {\r\n        private static ApiKey: string = \"api\";\r\n        private static BaseUrl: string = \"convai.speech\";\r\n    };\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        const applicationId: string = config.parameters.getProperty(PropertyId.Conversation_ApplicationId, \"\");\r\n        const dialogType: string = config.parameters.getProperty(PropertyId.Conversation_DialogType);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-US\");\r\n        const requestTurnStatus: string = config.parameters.getProperty(PropertyId.Conversation_Request_Bot_Status_Messages, \"true\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[HeaderNames.ConnectionId] = connectionId;\r\n        queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        queryParams[QueryParameterNames.Language] = language;\r\n        queryParams[QueryParameterNames.RequestBotStatusMessages] = requestTurnStatus;\r\n        if (applicationId) {\r\n            queryParams[QueryParameterNames.BotId] = applicationId;\r\n            if (dialogType === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                queryParams[HeaderNames.CustomCommandsAppId] = applicationId;\r\n            }\r\n        }\r\n\r\n        const resourceInfix: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"commands/\"\r\n            : \"\";\r\n        const version: string =\r\n            dialogType === DialogServiceConfig.DialogTypes.CustomCommands ? \"v1\"\r\n            : dialogType === DialogServiceConfig.DialogTypes.BotFramework ? \"v3\"\r\n            : \"v0\";\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (authInfo.token != null && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n\r\n        // The URL used for connection is chosen in a priority order of specification:\r\n        //  1. If a custom endpoint is provided, that URL is used verbatim.\r\n        //  2. If a custom host is provided (e.g. \"wss://my.custom.endpoint.com:1123\"), a URL is constructed from it.\r\n        //  3. If no custom connection details are provided, a URL is constructed from default values.\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, \"\");\r\n        if (!endpoint) {\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(\r\n                PropertyId.SpeechServiceConnection_Host,\r\n                `wss://${region}.${DialogConnectionFactory.Constants.BaseUrl}${hostSuffix}`);\r\n            const standardizedHost: string = host.endsWith(\"/\") ? host : host + \"/\";\r\n            endpoint = `${standardizedHost}${resourceInfix}${DialogConnectionFactory.Constants.ApiKey}/${version}`;\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines channels used to pass property settings to service.\r\n * Added in version 1.7.0.\r\n */\r\nexport enum ServicePropertyChannel {\r\n    /**\r\n     * Uses URI query parameter to pass property settings to service.\r\n     */\r\n    UriQueryParameter = 0.\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { DialogConnectionFactory } from \"../common.speech/DialogConnectorFactory\";\r\nimport {\r\n    DialogServiceAdapter,\r\n    IAgentConfig,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    Deferred,\r\n    marshalPromiseToCallbacks\r\n} from \"../common/Exports\";\r\nimport { ActivityReceivedEventArgs } from \"./ActivityReceivedEventArgs\";\r\nimport { AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport { DialogServiceConfig, DialogServiceConfigImpl } from \"./DialogServiceConfig\";\r\nimport {\r\n    AudioConfig,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult\r\n} from \"./Exports\";\r\nimport { PropertyId } from \"./PropertyId\";\r\nimport { TurnStatusReceivedEventArgs } from \"./TurnStatusReceivedEventArgs\";\r\n\r\n/**\r\n * Dialog Service Connector\r\n * @class DialogServiceConnector\r\n */\r\nexport class DialogServiceConnector extends Recognizer {\r\n    private privIsDisposed: boolean;\r\n    private isTurnComplete: boolean;\r\n\r\n    /**\r\n     * Initializes an instance of the DialogServiceConnector.\r\n     * @constructor\r\n     * @param {DialogServiceConfig} dialogConfig - Set of properties to configure this recognizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio config associated with the recognizer\r\n     */\r\n    public constructor(dialogConfig: DialogServiceConfig, audioConfig?: AudioConfig) {\r\n        const dialogServiceConfigImpl = dialogConfig as DialogServiceConfigImpl;\r\n        Contracts.throwIfNull(dialogConfig, \"dialogConfig\");\r\n\r\n        super(audioConfig, dialogServiceConfigImpl.properties, new DialogConnectionFactory());\r\n\r\n        this.isTurnComplete = true;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = dialogServiceConfigImpl.properties.clone();\r\n\r\n        const agentConfig = this.buildAgentConfig();\r\n        this.privReco.agentConfig.set(agentConfig);\r\n    }\r\n\r\n    /**\r\n     * The event recognizing signals that an intermediate recognition result is received.\r\n     * @member DialogServiceConnector.prototype.recognizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognizing: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event recognized signals that a final recognition result is received.\r\n     * @member DialogServiceConfig.prototype.recognized\r\n     * @function\r\n     * @public\r\n     */\r\n    public recognized: (sender: DialogServiceConnector, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during recognition.\r\n     * @member DialogServiceConnector.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: DialogServiceConnector, event: SpeechRecognitionCanceledEventArgs) => void;\r\n\r\n    /**\r\n     * The event activityReceived signals that an activity has been received.\r\n     * @member DialogServiceConnector.prototype.activityReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public activityReceived: (sender: DialogServiceConnector, event: ActivityReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * The event turnStatusReceived signals that a turn status message has been received. These messages are\r\n     * associated with both an interaction and a conversation. They are used to notify the client in the event\r\n     * of an interaction failure with the dialog backend, e.g. in the event of a network issue, timeout, crash,\r\n     * or other problem.\r\n     * @member DialogServiceConnector.prototype.turnStatusReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public turnStatusReceived: (sender: DialogServiceConnector, event: TurnStatusReceivedEventArgs) => void;\r\n\r\n    /**\r\n     * Starts a connection to the service.\r\n     * Users can optionally call connect() to manually set up a connection in advance, before starting interactions.\r\n     *\r\n     * Note: On return, the connection might not be ready yet. Please subscribe to the Connected event to\r\n     * be notified when the connection is established.\r\n     * @member DialogServiceConnector.prototype.connect\r\n     * @function\r\n     * @public\r\n     */\r\n    public connect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.connect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Closes the connection the service.\r\n     * Users can optionally call disconnect() to manually shutdown the connection of the associated DialogServiceConnector.\r\n     *\r\n     * If disconnect() is called during a recognition, recognition will fail and cancel with an error.\r\n     */\r\n    public disconnect(cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks(this.privReco.disconnect(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Sets the authorization token used to communicate with the service.\r\n     * @member DialogServiceConnector.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this DialogServiceConnector.\r\n     * @member DialogServiceConnector.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this DialogServiceConnector.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /** Gets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be empty\r\n     */\r\n    public get speechActivityTemplate(): string {\r\n        return this.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n    }\r\n\r\n    /** Sets the template for the activity generated by service from speech.\r\n     * Properties from the template will be stamped on the generated activity.\r\n     * It can be null or empty.\r\n     * Note: it has to be a valid Json object.\r\n     */\r\n    public set speechActivityTemplate(speechActivityTemplate: string) {\r\n        this.properties.setProperty(PropertyId.Conversation_Speech_Activity_Template, speechActivityTemplate);\r\n    }\r\n\r\n    /**\r\n     * Starts recognition and stops after the first utterance is recognized.\r\n     * @member DialogServiceConnector.prototype.listenOnceAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback that received the result when the reco has completed.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public listenOnceAsync(cb?: (e: SpeechRecognitionResult) => void, err?: (e: string) => void): void {\r\n        if (this.isTurnComplete) {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            const callbackHolder = async (): Promise<SpeechRecognitionResult> => {\r\n                await this.privReco.connect();\r\n                await this.implRecognizerStop();\r\n                this.isTurnComplete = false;\r\n\r\n                const ret: Deferred<SpeechRecognitionResult> = new Deferred<SpeechRecognitionResult>();\r\n                await this.privReco.recognize(RecognitionMode.Conversation, ret.resolve, ret.reject);\r\n\r\n                const e: SpeechRecognitionResult = await ret.promise;\r\n                await this.implRecognizerStop();\r\n\r\n                return e;\r\n            };\r\n\r\n            const retPromise: Promise<SpeechRecognitionResult> = callbackHolder();\r\n\r\n            retPromise.catch(() => {\r\n                // Destroy the recognizer.\r\n                /* tslint:disable:no-empty */ // We've done all we can here.\r\n                this.dispose(true).catch(() => { });\r\n            });\r\n\r\n            marshalPromiseToCallbacks(retPromise.finally((): void => {\r\n                this.isTurnComplete = true;\r\n            }), cb, err);\r\n        }\r\n    }\r\n\r\n    public sendActivityAsync(activity: string, cb?: () => void, errCb?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((this.privReco as DialogServiceAdapter).sendMessage(activity), cb, errCb);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member DialogServiceConnector.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privIsDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privIsDisposed = true;\r\n            await this.implRecognizerStop();\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new DialogServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private buildAgentConfig(): IAgentConfig {\r\n        const communicationType = this.properties.getProperty(\"Conversation_Communication_Type\", \"Default\");\r\n\r\n        return {\r\n            botInfo: {\r\n                commType: communicationType,\r\n                commandsCulture: undefined,\r\n                connectionId: this.properties.getProperty(PropertyId.Conversation_Agent_Connection_Id),\r\n                conversationId: this.properties.getProperty(PropertyId.Conversation_Conversation_Id, undefined),\r\n                fromId: this.properties.getProperty(PropertyId.Conversation_From_Id, undefined),\r\n                ttsAudioFormat: this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)\r\n            },\r\n            version: 0.2\r\n        };\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n} from \"./Exports\";\r\n\r\nexport enum SpeakerRecognitionResultType {\r\n    Verify,\r\n    Identify\r\n}\r\n/**\r\n * Output format\r\n * @class SpeakerRecognitionResult\r\n */\r\nexport class SpeakerRecognitionResult {\r\n    private privReason: ResultReason;\r\n    private privProperties: PropertyCollection;\r\n    private privProfileId: string;\r\n    private privScore: number;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(resultType: SpeakerRecognitionResultType, data: string, profileId: string, resultReason: ResultReason = ResultReason.RecognizedSpeaker) {\r\n        this.privProperties = new PropertyCollection();\r\n        this.privReason = resultReason;\r\n        if (this.privReason !== ResultReason.Canceled) {\r\n            if (resultType === SpeakerRecognitionResultType.Identify) {\r\n                const json: { identifiedProfile: { profileId: string, score: number } } = JSON.parse(data);\r\n                Contracts.throwIfNullOrUndefined(json, \"JSON\");\r\n                this.privProfileId = json.identifiedProfile.profileId;\r\n                this.privScore = json.identifiedProfile.score;\r\n            } else {\r\n                const json: { recognitionResult: string, score: number } = JSON.parse(data);\r\n                Contracts.throwIfNullOrUndefined(json, \"JSON\");\r\n                this.privScore = json.score;\r\n                if (json.recognitionResult.toLowerCase() !== \"accept\") {\r\n                    this.privReason = ResultReason.NoMatch;\r\n                }\r\n                if (profileId !== undefined && profileId !== \"\") {\r\n                    this.privProfileId = profileId;\r\n                }\r\n            }\r\n        } else {\r\n            const json: { statusText: string } = JSON.parse(data);\r\n            Contracts.throwIfNullOrUndefined(json, \"JSON\");\r\n            this.privErrorDetails = json.statusText;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\r\n        }\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_JsonResult, data);\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get profileId(): string {\r\n        return this.privProfileId;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    public get score(): number {\r\n        return this.privScore;\r\n    }\r\n}\r\n\r\n/**\r\n * @class SpeakerRecognitionCancellationDetails\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeakerRecognitionCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of SpeakerRecognitionCancellationDetails object for the canceled SpeakerRecognitionResult\r\n     * @member SpeakerRecognitionCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeakerRecognitionResult} result - The result that was canceled.\r\n     * @returns {SpeakerRecognitionCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: SpeakerRecognitionResult): SpeakerRecognitionCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])];\r\n        }\r\n\r\n        return new SpeakerRecognitionCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"../../common/Error\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Promise\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\ntype AudioDataTypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array;\r\n/**\r\n * Base audio player class\r\n * TODO: Plays only PCM for now.\r\n * @class\r\n */\r\nexport class BaseAudioPlayer {\r\n\r\n    private audioContext: AudioContext = null;\r\n    private gainNode: GainNode = null;\r\n    private audioFormat: AudioStreamFormatImpl;\r\n    private autoUpdateBufferTimer: any = 0;\r\n    private samples: Float32Array;\r\n    private startTime: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} audioFormat audio stream format recognized by the player.\r\n     */\r\n    public constructor(audioFormat?: AudioStreamFormat) {\r\n        if (audioFormat === undefined) {\r\n            audioFormat = AudioStreamFormat.getDefaultInputFormat();\r\n        }\r\n        this.init(audioFormat);\r\n    }\r\n\r\n    /**\r\n     * play Audio sample\r\n     * @param newAudioData audio data to be played.\r\n     */\r\n    public playAudioSample(newAudioData: ArrayBuffer, cb?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n                this.ensureInitializedContext();\r\n                const audioData = this.formatAudioData(newAudioData);\r\n                const newSamplesData = new Float32Array(this.samples.length + audioData.length);\r\n                newSamplesData.set(this.samples, 0);\r\n                newSamplesData.set(audioData, this.samples.length);\r\n                this.samples = newSamplesData;\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * stops audio and clears the buffers\r\n     */\r\n    public stopAudio(cb?: () => void, err?: (error: string) => void): void {\r\n        if (this.audioContext !== null) {\r\n            this.samples = new Float32Array();\r\n            clearInterval(this.autoUpdateBufferTimer);\r\n            this.audioContext.close().then(() => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string) => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n            this.audioContext = null;\r\n        }\r\n    }\r\n\r\n    private init(audioFormat: AudioStreamFormat): void {\r\n        this.audioFormat = audioFormat as AudioStreamFormatImpl;\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private ensureInitializedContext(): void {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n            const timerPeriod = 200;\r\n            this.autoUpdateBufferTimer = setInterval(() => {\r\n                this.updateAudioBuffer();\r\n            }, timerPeriod);\r\n        }\r\n    }\r\n\r\n    private createAudioContext(): void {\r\n        // new ((window as any).AudioContext || (window as any).webkitAudioContext)();\r\n        this.audioContext = AudioStreamFormatImpl.getAudioContext();\r\n\r\n        // TODO: Various examples shows this gain node, it does not seem to be needed unless we plan\r\n        // to control the volume, not likely\r\n        this.gainNode = this.audioContext.createGain();\r\n        this.gainNode.gain.value = 1;\r\n        this.gainNode.connect(this.audioContext.destination);\r\n        this.startTime = this.audioContext.currentTime;\r\n    }\r\n\r\n    private formatAudioData(audioData: ArrayBuffer): Float32Array {\r\n        switch (this.audioFormat.bitsPerSample) {\r\n            case 8:\r\n                return this.formatArrayBuffer(new Int8Array(audioData), 128);\r\n            case 16:\r\n                return this.formatArrayBuffer(new Int16Array(audioData), 32768);\r\n            case 32:\r\n                return this.formatArrayBuffer(new Int32Array(audioData), 2147483648);\r\n            default:\r\n                throw new InvalidOperationError(\"Only WAVE_FORMAT_PCM (8/16/32 bps) format supported at this time\");\r\n        }\r\n    }\r\n\r\n    private formatArrayBuffer(audioData: AudioDataTypedArray, maxValue: number): Float32Array {\r\n        const float32Data = new Float32Array(audioData.length);\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            float32Data[i] = audioData[i] / maxValue;\r\n        }\r\n        return float32Data;\r\n    }\r\n\r\n    private updateAudioBuffer(): void {\r\n        if (this.samples.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const channelCount = this.audioFormat.channels;\r\n        const bufferSource = this.audioContext.createBufferSource();\r\n        const frameCount = this.samples.length / channelCount;\r\n        const audioBuffer = this.audioContext.createBuffer(channelCount, frameCount, this.audioFormat.samplesPerSec);\r\n\r\n        // TODO: Should we do the conversion in the pushAudioSample instead?\r\n        for (let channel = 0; channel < channelCount; channel++) {\r\n            // Fill in individual channel data\r\n            let channelOffset = channel;\r\n            const audioData = audioBuffer.getChannelData(channel);\r\n            for (let i = 0; i < this.samples.length; i++, channelOffset += channelCount) {\r\n                audioData[i] = this.samples[channelOffset];\r\n            }\r\n        }\r\n\r\n        if (this.startTime < this.audioContext.currentTime) {\r\n            this.startTime = this.audioContext.currentTime;\r\n        }\r\n\r\n        bufferSource.buffer = audioBuffer;\r\n        bufferSource.connect(this.gainNode);\r\n        bufferSource.start(this.startTime);\r\n\r\n        // Make sure we play the next sample after the current one.\r\n        this.startTime += audioBuffer.duration;\r\n\r\n        // Clear the samples for the next pushed data.\r\n        this.samples = new Float32Array();\r\n    }\r\n\r\n    private async playAudio(audioData: ArrayBuffer): Promise<void> {\r\n        if (this.audioContext === null) {\r\n            this.createAudioContext();\r\n        }\r\n        const source: AudioBufferSourceNode = this.audioContext.createBufferSource();\r\n        const destination: AudioDestinationNode = this.audioContext.destination;\r\n        await this.audioContext.decodeAudioData(audioData, (newBuffer: AudioBuffer): void => {\r\n            source.buffer = newBuffer;\r\n            source.connect(destination);\r\n            source.start(0);\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { VoiceProfileType } from \"./Exports\";\r\n\r\n/**\r\n * Defines Voice Profile class for Speaker Recognition\r\n * @class VoiceProfile\r\n */\r\nexport class VoiceProfile {\r\n    private privId: string;\r\n    private privProfileType: VoiceProfileType;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} profileId - profileId of this Voice Profile.\r\n     * @param {VoiceProfileType} profileType - profileType of this Voice Profile.\r\n     */\r\n    constructor(profileId: string, profileType: VoiceProfileType) {\r\n        this.privId = profileId;\r\n        this.privProfileType = profileType;\r\n    }\r\n\r\n    /**\r\n     * profileId of this Voice Profile instance\r\n     * @member VoiceProfile.prototype.profileId\r\n     * @function\r\n     * @public\r\n     * @returns {string} profileId of this Voice Profile instance.\r\n     */\r\n    public get profileId(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * profileType of this Voice Profile instance\r\n     * @member VoiceProfile.prototype.profileType\r\n     * @function\r\n     * @public\r\n     * @returns {VoiceProfileType} profile type of this Voice Profile instance.\r\n     */\r\n    public get profileType(): VoiceProfileType {\r\n        return this.privProfileType;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    ResultReason,\r\n} from \"./Exports\";\r\n\r\nexport interface EnrollmentResultDetails {\r\n    profileId: string;\r\n    enrollmentsCount: number;\r\n    enrollmentsLengthInSec: number;\r\n    enrollmentsSpeechLengthInSec: number;\r\n    remainingEnrollmentsCount: number;\r\n    remainingEnrollmentsSpeechLengthInSec: number;\r\n    audioLengthInSec: number;\r\n    audioSpeechLengthInSec: number;\r\n    enrollmentStatus: string;\r\n}\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileEnrollmentResult\r\n */\r\nexport class VoiceProfileEnrollmentResult {\r\n    private privReason: ResultReason;\r\n    private privDetails: EnrollmentResultDetails;\r\n    private privProperties: PropertyCollection;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(reason: ResultReason, json: string, statusText: string) {\r\n        this.privReason = reason;\r\n        this.privProperties = new PropertyCollection();\r\n        if (this.privReason !== ResultReason.Canceled) {\r\n            if (!!json) {\r\n                this.privDetails = JSON.parse(json);\r\n                if (this.privDetails.enrollmentStatus.toLowerCase() === \"enrolling\") {\r\n                    this.privReason = ResultReason.EnrollingVoiceProfile;\r\n                }\r\n            }\r\n        } else {\r\n            this.privErrorDetails = statusText;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\r\n        }\r\n    }\r\n\r\n    public static FromIdentificationProfileList(json: { value: any[] }): VoiceProfileEnrollmentResult[] {\r\n        const results: VoiceProfileEnrollmentResult[] = [];\r\n        for (const item of json.value) {\r\n            const reason: ResultReason = item.enrollmentStatus.toLowerCase() === \"enrolling\" ?\r\n                ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === \"enrolled\" ?\r\n                ResultReason.EnrolledVoiceProfile : ResultReason.Canceled;\r\n            const result = new VoiceProfileEnrollmentResult(reason, null, null);\r\n            result.privDetails = this.getIdentificationDetails(item);\r\n            results.push(result);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    public static FromVerificationProfileList(json: { value: any[] }): VoiceProfileEnrollmentResult[] {\r\n        const results: VoiceProfileEnrollmentResult[] = [];\r\n        for (const item of json.value) {\r\n            const reason: ResultReason = item.enrollmentStatus.toLowerCase() === \"enrolling\" ?\r\n                ResultReason.EnrollingVoiceProfile : item.enrollmentStatus.toLowerCase() === \"enrolled\" ?\r\n                ResultReason.EnrolledVoiceProfile : ResultReason.Canceled;\r\n            const result = new VoiceProfileEnrollmentResult(reason, null, null);\r\n            result.privDetails = this.getVerificationDetails(item);\r\n            results.push(result);\r\n        }\r\n        return results;\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get enrollmentsCount(): number {\r\n        return this.privDetails.enrollmentsCount;\r\n    }\r\n\r\n    public get enrollmentsLengthInSec(): number {\r\n        return this.privDetails.enrollmentsLengthInSec;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get enrollmentResultDetails(): EnrollmentResultDetails {\r\n        return this.privDetails;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    private static getIdentificationDetails(json: any): any {\r\n        return {\r\n            audioLengthInSec: json.audioLengthInSec ? parseFloat(json.audioLengthInSec) : 0,\r\n            audioSpeechLengthInSec: json.audioSpeechLengthInSec ? parseFloat(json.audioSpeechLengthInSec) : 0,\r\n            enrollmentStatus: json.enrollmentStatus,\r\n            enrollmentsCount: json.enrollmentsCount || 0,\r\n            enrollmentsLengthInSec: json.enrollmentsLengthInSec ? parseFloat(json.enrollmentsLengthInSec) : 0,\r\n            enrollmentsSpeechLengthInSec: json.enrollmentsSpeechLengthInSec ? parseFloat(json.enrollmentsSpeechLengthInSec) : 0,\r\n            profileId: json.profileId || json.identificationProfileId,\r\n            remainingEnrollmentsSpeechLengthInSec: json.remainingEnrollmentsSpeechLengthInSec ? parseFloat(json.remainingEnrollmentsSpeechLengthInSec) : 0\r\n        };\r\n    }\r\n\r\n    private static getVerificationDetails(json: any): any {\r\n        return {\r\n            audioLengthInSec: json.audioLengthInSec ? parseFloat(json.audioLengthInSec) : 0,\r\n            audioSpeechLengthInSec: json.audioSpeechLengthInSec ? parseFloat(json.audioSpeechLengthInSec) : 0,\r\n            enrollmentStatus: json.enrollmentStatus,\r\n            enrollmentsCount: json.enrollmentsCount,\r\n            enrollmentsLengthInSec: json.enrollmentsLengthInSec ? parseFloat(json.enrollmentsLengthInSec) : 0,\r\n            enrollmentsSpeechLengthInSec: json.enrollmentsSpeechLengthInSec ? parseFloat(json.enrollmentsSpeechLengthInSec) : 0,\r\n            profileId: json.profileId || json.verificationProfileId,\r\n            remainingEnrollmentsCount: json.remainingEnrollments || json.remainingEnrollmentsCount,\r\n            remainingEnrollmentsSpeechLengthInSec: json.remainingEnrollmentsSpeechLengthInSec ? parseFloat(json.remainingEnrollmentsSpeechLengthInSec) : 0\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * @class VoiceProfileEnrollmentCancellationDetails\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class VoiceProfileEnrollmentCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of VoiceProfileEnrollmentCancellationDetails object for the canceled VoiceProfileEnrollmentResult.\r\n     * @member VoiceProfileEnrollmentCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileEnrollmentResult} result - The result that was canceled.\r\n     * @returns {VoiceProfileEnrollmentCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: VoiceProfileEnrollmentResult): VoiceProfileEnrollmentCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])];\r\n        }\r\n\r\n        return new VoiceProfileEnrollmentCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCodePropertyName } from \"../common.speech/Exports\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    CancellationDetailsBase,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    ResultReason,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileResult\r\n */\r\nexport class VoiceProfileResult {\r\n    private privReason: ResultReason;\r\n    private privProperties: PropertyCollection;\r\n    private privErrorDetails: string;\r\n\r\n    public constructor(reason: ResultReason, statusText: string) {\r\n        this.privReason = reason;\r\n        this.privProperties = new PropertyCollection();\r\n        if (reason === ResultReason.Canceled) {\r\n            Contracts.throwIfNullOrUndefined(statusText, \"statusText\");\r\n            this.privErrorDetails = statusText;\r\n            this.privProperties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.ServiceError]);\r\n        }\r\n    }\r\n\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n\r\n/**\r\n * @class VoiceProfileCancellationDetails\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class VoiceProfileCancellationDetails extends CancellationDetailsBase {\r\n\r\n    private constructor(reason: CancellationReason, errorDetails: string, errorCode: CancellationErrorCode) {\r\n        super(reason, errorDetails, errorCode);\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of VoiceProfileCancellationDetails object for the canceled VoiceProfileResult.\r\n     * @member VoiceProfileCancellationDetails.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {VoiceProfileResult} result - The result that was canceled.\r\n     * @returns {VoiceProfileCancellationDetails} The cancellation details object being created.\r\n     */\r\n    public static fromResult(result: VoiceProfileResult): VoiceProfileCancellationDetails {\r\n        const reason = CancellationReason.Error;\r\n        let errorCode: CancellationErrorCode = CancellationErrorCode.NoError;\r\n\r\n        if (!!result.properties) {\r\n            errorCode = (CancellationErrorCode as any)[result.properties.getProperty(CancellationErrorCodePropertyName, CancellationErrorCode[CancellationErrorCode.NoError])];\r\n        }\r\n\r\n        return new VoiceProfileCancellationDetails(reason, result.errorDetails, errorCode);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    ResultReason,\r\n    VoiceProfileResult\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfilePhraseResult\r\n */\r\nexport class VoiceProfilePhraseResult extends VoiceProfileResult {\r\n    private privPhrases: string[] = [];\r\n\r\n    public constructor(reason: ResultReason, statusText: string, json: any) {\r\n        super(reason, statusText);\r\n        Contracts.throwIfNullOrUndefined(json, \"phrase result JSON\");\r\n        if (!!json.value && !!json.value[0]) {\r\n            for (const item of json.value) {\r\n                this.privPhrases.push(item.passPhrase || item.activationPhrase);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get phrases(): string[] {\r\n        return this.privPhrases;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRestResponse,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    Context,\r\n    OS,\r\n    SpeakerIdMessageAdapter,\r\n    SpeakerRecognitionConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    VoiceProfile,\r\n    VoiceProfileEnrollmentResult,\r\n    VoiceProfilePhraseResult,\r\n    VoiceProfileResult,\r\n    VoiceProfileType,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines VoiceProfileClient class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class VoiceProfileClient\r\n */\r\nexport class VoiceProfileClient {\r\n    protected privProperties: PropertyCollection;\r\n    private privAdapter: SpeakerIdMessageAdapter;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member VoiceProfileClient.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this VoiceProfileClient.\r\n     * @member VoiceProfileClient.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this VoiceProfileClient.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * VoiceProfileClient constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.implClientSetup();\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.createProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Type of Voice Profile to be created\r\n     *        specifies the keyword to be recognized.\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     * @return {Promise<VoiceProfile>} - Promise of a VoiceProfile.\r\n     */\r\n    public async createProfileAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfile> {\r\n        const result: IRestResponse = await this.privAdapter.createProfile(profileType, lang);\r\n        if (!result.ok) {\r\n            throw new Error(`createProfileAsync failed with code: ${result.status}, message: ${result.statusText}`);\r\n        }\r\n        const response: { profileId: string } = result.json;\r\n        const profile = new VoiceProfile(response.profileId, profileType);\r\n        return profile;\r\n    }\r\n    /**\r\n     * Get current information of a voice profile\r\n     * @member VoiceProfileClient.prototype.retrieveEnrollmentResultAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to retrieve info for\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async retrieveEnrollmentResultAsync(profile: VoiceProfile): Promise<VoiceProfileEnrollmentResult> {\r\n        const result: IRestResponse = await this.privAdapter.getProfileStatus(profile);\r\n        return new VoiceProfileEnrollmentResult(\r\n            result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled,\r\n            result.data,\r\n            result.statusText,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get all voice profiles on account with given voice profile type\r\n     * @member VoiceProfileClient.prototype.getAllProfilesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType profile type (identification/verification) for which to list profiles\r\n     * @return {Promise<VoiceProfileEnrollmentResult[]>} - Promise of an array of VoiceProfileEnrollmentResults.\r\n     */\r\n    public async getAllProfilesAsync(profileType: VoiceProfileType): Promise<VoiceProfileEnrollmentResult[]> {\r\n        const result: IRestResponse = await this.privAdapter.getProfiles(profileType);\r\n        if (profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            return VoiceProfileEnrollmentResult.FromIdentificationProfileList(result.json);\r\n        }\r\n        return VoiceProfileEnrollmentResult.FromVerificationProfileList(result.json);\r\n    }\r\n\r\n    /**\r\n     * Get valid authorization phrases for voice profile enrollment\r\n     * @member VoiceProfileClient.prototype.getAuthorizationPhrasesAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfileType} profileType Profile Type to get activation phrases for\r\n     * @param {string} lang Language string (locale) for Voice Profile\r\n     */\r\n    public async getActivationPhrasesAsync(profileType: VoiceProfileType, lang: string): Promise<VoiceProfilePhraseResult> {\r\n        const result: IRestResponse = await this.privAdapter.getPhrases(profileType, lang);\r\n        return new VoiceProfilePhraseResult(\r\n            result.ok ? ResultReason.EnrollingVoiceProfile : ResultReason.Canceled,\r\n            result.statusText,\r\n            result.json\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Create a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.enrollProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to create enrollment for\r\n     * @param {AudioConfig} audioConfig source info from which to create enrollment\r\n     * @return {Promise<VoiceProfileEnrollmentResult>} - Promise of a VoiceProfileEnrollmentResult.\r\n     */\r\n    public async enrollProfileAsync(profile: VoiceProfile, audioConfig: AudioConfig): Promise<VoiceProfileEnrollmentResult> {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNullOrUndefined(configImpl, \"audioConfig\");\r\n\r\n        const result: IRestResponse = await this.privAdapter.createEnrollment(profile, configImpl);\r\n        return new VoiceProfileEnrollmentResult(\r\n            result.ok ? ResultReason.EnrolledVoiceProfile : ResultReason.Canceled,\r\n            result.data,\r\n            result.statusText,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Delete a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.deleteProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be deleted\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async deleteProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        const result: IRestResponse = await this.privAdapter.deleteProfile(profile);\r\n        return this.getResult(result, ResultReason.DeletedVoiceProfile);\r\n    }\r\n\r\n    /**\r\n     * Remove all enrollments for a speaker recognition voice profile\r\n     * @member VoiceProfileClient.prototype.resetProfileAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {VoiceProfile} profile Voice Profile to be reset\r\n     * @return {Promise<VoiceProfileResult>} - Promise of a VoiceProfileResult.\r\n     */\r\n    public async resetProfileAsync(profile: VoiceProfile): Promise<VoiceProfileResult> {\r\n        const result: IRestResponse = await this.privAdapter.resetProfile(profile);\r\n        return this.getResult(result, ResultReason.ResetVoiceProfile);\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member VoiceProfileClient.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    // Does class setup, swiped from Recognizer.\r\n    protected implClientSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig =\r\n            new SpeakerRecognitionConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion)),\r\n                this.privProperties);\r\n\r\n        this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\r\n    }\r\n\r\n    private getResult(result: IRestResponse, successReason: ResultReason, cb?: (response: VoiceProfileResult) => void): VoiceProfileResult {\r\n        const response: VoiceProfileResult =\r\n            new VoiceProfileResult(\r\n                result.ok ? successReason : ResultReason.Canceled,\r\n                result.statusText\r\n            );\r\n        return (response);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines SpeakerIdentificationModel class for Speaker Recognition\r\n * Model contains a set of profiles against which to identify speaker(s)\r\n * @class SpeakerIdentificationModel\r\n */\r\nexport class SpeakerIdentificationModel {\r\n    private privVoiceProfiles: VoiceProfile[] = [];\r\n\r\n    private constructor(profiles: VoiceProfile[]) {\r\n        Contracts.throwIfNullOrUndefined(profiles, \"VoiceProfiles\");\r\n        if (profiles.length === 0) {\r\n            throw new Error(\"Empty Voice Profiles array\");\r\n        }\r\n        profiles.forEach((profile: VoiceProfile) => {\r\n            if (profile.profileType !== VoiceProfileType.TextIndependentIdentification) {\r\n                throw new Error(\"Identification model can only be created from Identification profile: \" + profile.profileId);\r\n            }\r\n            this.privVoiceProfiles.push(profile);\r\n        });\r\n    }\r\n    public static fromProfiles(profiles: VoiceProfile[]): SpeakerIdentificationModel {\r\n        return new SpeakerIdentificationModel(profiles);\r\n    }\r\n\r\n    public get voiceProfileIds(): string {\r\n        return this.privVoiceProfiles.map((profile: VoiceProfile) => profile.profileId).join(\",\");\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines SpeakerVerificationModel class for Speaker Recognition\r\n * Model contains a profile against which to verify a speaker\r\n * @class SpeakerVerificationModel\r\n */\r\nexport class SpeakerVerificationModel {\r\n    private privVoiceProfile: VoiceProfile;\r\n\r\n    private constructor(profile: VoiceProfile) {\r\n        Contracts.throwIfNullOrUndefined(profile, \"VoiceProfile\");\r\n        if (profile.profileType === VoiceProfileType.TextIndependentIdentification) {\r\n            throw new Error(\"Verification model cannot be created from Identification profile\");\r\n        }\r\n        this.privVoiceProfile = profile;\r\n    }\r\n\r\n    public static fromProfile(profile: VoiceProfile): SpeakerVerificationModel {\r\n        return new SpeakerVerificationModel(profile);\r\n    }\r\n\r\n    public get voiceProfile(): VoiceProfile {\r\n        return this.privVoiceProfile;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRestResponse,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    Context,\r\n    OS,\r\n    SpeakerIdMessageAdapter,\r\n    SpeakerRecognitionConfig,\r\n} from \"../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../common/Exports\";\r\nimport { AudioConfig, AudioConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeakerIdentificationModel,\r\n    SpeakerRecognitionResult,\r\n    SpeakerRecognitionResultType,\r\n    SpeakerVerificationModel,\r\n} from \"./Exports\";\r\nimport { SpeechConfig, SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines SpeakerRecognizer class for Speaker Recognition\r\n * Handles operations from user for Voice Profile operations (e.g. createProfile, deleteProfile)\r\n * @class SpeakerRecognizer\r\n */\r\nexport class SpeakerRecognizer {\r\n    protected privProperties: PropertyCollection;\r\n    private privAdapter: SpeakerIdMessageAdapter;\r\n    private privAudioConfigImpl: AudioConfigImpl;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeakerRecognizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeakerRecognizer.\r\n     * @member SpeakerRecognizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeakerRecognizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * SpeakerRecognizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this recognizer (authentication key, region, &c)\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        this.privAudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        Contracts.throwIfNull(this.privAudioConfigImpl, \"audioConfig\");\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.implSRSetup();\r\n    }\r\n\r\n    /**\r\n     * Get recognition result for model using given audio\r\n     * @member SpeakerRecognizer.prototype.recognizeOnceAsync\r\n     * @function\r\n     * @public\r\n     * @async\r\n     * @param {SpeakerIdentificationModel} model Model containing Voice Profiles to be identified\r\n     * @param cb - Callback invoked once result is returned.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public async recognizeOnceAsync(model: SpeakerIdentificationModel | SpeakerVerificationModel): Promise<SpeakerRecognitionResult> {\r\n\r\n        if (model instanceof SpeakerIdentificationModel) {\r\n            const responsePromise: Promise<IRestResponse> = this.privAdapter.identifySpeaker(model, this.privAudioConfigImpl);\r\n            return this.getResult(responsePromise, SpeakerRecognitionResultType.Identify, undefined);\r\n        } else if (model instanceof SpeakerVerificationModel) {\r\n            const responsePromise: Promise<IRestResponse> = this.privAdapter.verifySpeaker(model, this.privAudioConfigImpl);\r\n            return this.getResult(responsePromise, SpeakerRecognitionResultType.Verify, model.voiceProfile.profileId);\r\n        } else {\r\n            throw new Error(\"SpeakerRecognizer.recognizeOnce: Unexpected model type\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Included for compatibility\r\n     * @member SpeakerRecognizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n\r\n    // Does class setup, swiped from Recognizer.\r\n    private implSRSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const recognizerConfig =\r\n            new SpeakerRecognitionConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion)),\r\n                this.privProperties);\r\n\r\n        this.privAdapter = new SpeakerIdMessageAdapter(recognizerConfig);\r\n    }\r\n\r\n    private async getResult(responsePromise: Promise<IRestResponse>, resultType: SpeakerRecognitionResultType, profileId?: string): Promise<SpeakerRecognitionResult> {\r\n        const response: IRestResponse = await responsePromise;\r\n        return new SpeakerRecognitionResult(\r\n            resultType,\r\n            response.data,\r\n            profileId,\r\n            response.ok ? ResultReason.RecognizedSpeaker : ResultReason.Canceled,\r\n        );\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AutoDetectSourceLanguagesOpenRangeOptionName } from \"../common.speech/Exports\";\r\nimport {Contracts} from \"./Contracts\";\r\nimport {\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SourceLanguageConfig,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Language auto detect configuration.\r\n * @class AutoDetectSourceLanguageConfig\r\n * Added in version 1.13.0.\r\n */\r\nexport class AutoDetectSourceLanguageConfig {\r\n    private privProperties: PropertyCollection;\r\n\r\n    private constructor() {\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromOpenRange\r\n     * @function\r\n     * @public\r\n     * Only [[SpeechSynthesizer]] supports source language auto detection from open range,\r\n     * for [[Recognizer]], please use AutoDetectSourceLanguageConfig with specific source languages.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with open range.\r\n     */\r\n    public static fromOpenRange(): AutoDetectSourceLanguageConfig {\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, AutoDetectSourceLanguagesOpenRangeOptionName);\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromLanguages\r\n     * @function\r\n     * @public\r\n     * @param {string[]} languages Comma-separated string of languages (eg. \"en-US,fr-FR\") to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given languages.\r\n     */\r\n    public static fromLanguages(languages: string[]): AutoDetectSourceLanguageConfig {\r\n        Contracts.throwIfArrayEmptyOrWhitespace(languages, \"languages\");\r\n        const config = new AutoDetectSourceLanguageConfig();\r\n        config.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, languages.join());\r\n        return config;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.fromSourceLanguageConfigs\r\n     * @function\r\n     * @public\r\n     * @param {SourceLanguageConfig[]} configs SourceLanguageConfigs to populate properties of config.\r\n     * @return {AutoDetectSourceLanguageConfig} Instance of AutoDetectSourceLanguageConfig\r\n     * @summary Creates an instance of the AutoDetectSourceLanguageConfig with given SourceLanguageConfigs.\r\n     */\r\n    public static fromSourceLanguageConfigs(configs: SourceLanguageConfig[]): AutoDetectSourceLanguageConfig {\r\n        if (configs.length < 1) {\r\n            throw new Error(\"Expected non-empty SourceLanguageConfig array.\");\r\n        }\r\n        const autoConfig = new AutoDetectSourceLanguageConfig();\r\n        const langs: string[] = [];\r\n        configs.forEach((config: SourceLanguageConfig) => {\r\n            langs.push(config.language);\r\n            if (config.endpointId !== undefined && config.endpointId !== \"\") {\r\n                const customProperty = config.language + PropertyId.SpeechServiceConnection_EndpointId.toString();\r\n                autoConfig.properties.setProperty(customProperty, config.endpointId);\r\n            }\r\n        });\r\n        autoConfig.properties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, langs.join());\r\n\r\n        return autoConfig;\r\n    }\r\n\r\n    /**\r\n     * @member AutoDetectSourceLanguageConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets an auto detected language config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    SpeechRecognitionResult,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Output format\r\n * @class AutoDetectSourceLanguageResult\r\n */\r\nexport class AutoDetectSourceLanguageResult {\r\n\r\n    private privLanguage: string;\r\n    private privLanguageDetectionConfidence: string;\r\n\r\n    private constructor(language: string, languageDetectionConfidence: string) {\r\n        Contracts.throwIfNullOrUndefined(language, \"language\");\r\n        Contracts.throwIfNullOrUndefined(languageDetectionConfidence, \"languageDetectionConfidence\");\r\n        this.privLanguage = language;\r\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of AutoDetectSourceLanguageResult object from a SpeechRecognitionResult instance.\r\n     * @member AutoDetectSourceLanguageResult.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {SpeechRecognitionResult} result - The recognition result.\r\n     * @returns {AutoDetectSourceLanguageResult} AutoDetectSourceLanguageResult object being created.\r\n     */\r\n    public static fromResult(result: SpeechRecognitionResult): AutoDetectSourceLanguageResult {\r\n        return new AutoDetectSourceLanguageResult(result.language, result.languageDetectionConfidence);\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get languageDetectionConfidence(): string {\r\n        return this.privLanguageDetectionConfidence;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\n\r\n/**\r\n * Source Language configuration.\r\n * @class SourceLanguageConfig\r\n */\r\nexport class SourceLanguageConfig {\r\n    private privLanguage: string;\r\n    private privEndpointId: string;\r\n\r\n    private constructor(language: string, endpointId?: string) {\r\n        Contracts.throwIfNullOrUndefined(language, \"language\");\r\n        this.privLanguage = language;\r\n        this.privEndpointId = endpointId;\r\n    }\r\n\r\n    /**\r\n     * @member SourceLanguageConfig.fromLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} language language (eg. \"en-US\") value of config.\r\n     * @param {string?} endpointId endpointId of model bound to given language of config.\r\n     * @return {SourceLanguageConfig} Instance of SourceLanguageConfig\r\n     * @summary Creates an instance of the SourceLanguageConfig with the given language and optional endpointId.\r\n     * Added in version 1.13.0.\r\n     */\r\n    public static fromLanguage(language: string, endpointId?: string): SourceLanguageConfig {\r\n        return new SourceLanguageConfig(language, endpointId);\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privEndpointId;\r\n    }\r\n}\r\n","\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    RestConfigBase\r\n} from \"../../common.browser/RestConfigBase\";\r\n\r\nexport class ConversationConnectionConfig extends RestConfigBase {\r\n\r\n    private static readonly privHost: string = \"dev.microsofttranslator.com\";\r\n    private static readonly privRestPath: string = \"/capito/room\";\r\n    private static readonly privApiVersion: string = \"2.0\";\r\n    private static readonly privDefaultLanguageCode: string = \"en-US\";\r\n    private static readonly privClientAppId: string = \"FC539C22-1767-4F1F-84BC-B4D811114F15\";\r\n    private static readonly privWebSocketPath: string = \"/capito/translate\";\r\n    private static readonly privSpeechHost: string = \"{region}.s2s.speech.microsoft.com\";\r\n    private static readonly privSpeechPath: string = \"/speech/translation/cognitiveservices/v1\";\r\n    private static readonly privTranscriptionEventKeys: string[] = [\"iCalUid\", \"callId\", \"organizer\", \"FLAC\", \"MTUri\", \"DifferentiateGuestSpeakers\", \"audiorecording\", \"Threadid\", \"OrganizerMri\", \"OrganizerTenantId\", \"UserToken\"];\r\n\r\n    public static get host(): string {\r\n        return ConversationConnectionConfig.privHost;\r\n    }\r\n\r\n    public static get apiVersion(): string {\r\n        return ConversationConnectionConfig.privApiVersion;\r\n    }\r\n\r\n    public static get clientAppId(): string {\r\n        return ConversationConnectionConfig.privClientAppId;\r\n    }\r\n\r\n    public static get defaultLanguageCode(): string {\r\n        return ConversationConnectionConfig.privDefaultLanguageCode;\r\n    }\r\n\r\n    public static get restPath(): string {\r\n        return ConversationConnectionConfig.privRestPath;\r\n    }\r\n\r\n    public static get webSocketPath(): string {\r\n        return ConversationConnectionConfig.privWebSocketPath;\r\n    }\r\n\r\n    public static get speechHost(): string {\r\n        return ConversationConnectionConfig.privSpeechHost;\r\n    }\r\n\r\n    public static get speechPath(): string {\r\n        return ConversationConnectionConfig.privSpeechPath;\r\n    }\r\n\r\n    public static get transcriptionEventKeys(): string[] {\r\n        return ConversationConnectionConfig.privTranscriptionEventKeys;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    SessionEventArgs,\r\n    VoiceSignature,\r\n    } from \"../../sdk/Exports\";\r\n// import { ConversationClient } from \"./ConversationConnection\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs } from \"./ConversationTranslatorEventArgs\";\r\n\r\n/**\r\n * Internal conversation data\r\n */\r\nexport interface IInternalConversation {\r\n    // the token to use for connecting to the Speech Service\r\n    cognitiveSpeechAuthToken: string;\r\n    // the region to use for connecting to the Speech Service\r\n    cognitiveSpeechRegion: string;\r\n    // the unique id of the user who started or joined the Conversation\r\n    participantId: string;\r\n    // a descriptive name for the Conversation\r\n    name: string;\r\n    // a descriptive name for the Conversation\r\n    description: string;\r\n    // the speech model ID for custom speech\r\n    speechModel: string;\r\n    // represents the level of speech supported in the Conversation (0: everyone can speak, 2: only host can speak, 3: no-one can speak)\r\n    modalities: number;\r\n    // ?\r\n    isApproved: boolean;\r\n    // the mute flag has been set at conversation level and only the host can speak\r\n    isMuted: boolean;\r\n    // the 5 character conversation Id\r\n    roomId: string;\r\n    // the hex color string to represent a user. If there are many users this hex color may be reused (?).\r\n    avatar: string;\r\n    // the token to use when calling the websocket\r\n    token: string;\r\n    // used for tracking the session and help with troubleshooting problems in the logs\r\n    correlationId: string;\r\n    // extracted from the headers\r\n    requestId: string;\r\n}\r\n\r\n/**\r\n * The user who is participating in the conversation.\r\n */\r\nexport interface IInternalParticipant {\r\n    avatar?: string;\r\n    displayName?: string;\r\n    id?: string;\r\n    isHost?: boolean;\r\n    isMuted?: boolean;\r\n    isUsingTts?: boolean;\r\n    preferredLanguage?: string;\r\n    voice?: string;\r\n}\r\n\r\n/** Users participating in the conversation */\r\nexport class InternalParticipants {\r\n\r\n    constructor(public participants: IInternalParticipant[] = [], public meId?: string) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Add or update a participant\r\n     * @param value\r\n     */\r\n    public addOrUpdateParticipant(value: IInternalParticipant): IInternalParticipant {\r\n        if (value === undefined) {\r\n            return;\r\n        }\r\n\r\n        const exists: number = this.getParticipantIndex(value.id);\r\n        if (exists > -1) {\r\n            this.participants.splice(exists, 1, value);\r\n        } else {\r\n            this.participants.push(value);\r\n        }\r\n\r\n        // ensure it was added ok\r\n        return this.getParticipant(value.id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant's position in the participants list.\r\n     * @param id\r\n     */\r\n    public getParticipantIndex(id: string): number {\r\n        return this.participants.findIndex((p: IInternalParticipant) => p.id === id);\r\n    }\r\n\r\n    /**\r\n     * Find the participant by id.\r\n     * @param id\r\n     */\r\n    public getParticipant(id: string): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant) => p.id === id);\r\n    }\r\n\r\n    /***\r\n     * Remove a participant from the participants list.\r\n     */\r\n    public deleteParticipant(id: string): void {\r\n        this.participants = this.participants.filter((p: IInternalParticipant) => p.id !== id);\r\n    }\r\n\r\n    /***\r\n     * Helper to return the conversation host.\r\n     */\r\n    public get host(): IInternalParticipant {\r\n        return this.participants.find((p: IInternalParticipant) => p.isHost === true );\r\n    }\r\n\r\n    /**\r\n     * Helper to return the current user.\r\n     */\r\n    public get me(): IInternalParticipant {\r\n        return this.getParticipant(this.meId);\r\n    }\r\n}\r\n\r\n/**\r\n * Recognizer for handling Conversation Translator websocket messages\r\n */\r\nexport interface ConversationRecognizer {\r\n    isDisposed(): boolean;\r\n    sendRequest: (command: string, cb?: () => void, err?: (e: string) => void) => void;\r\n    cancelSpeech?: () => Promise<void>;\r\n    close?: () => Promise<void>;\r\n    conversationExpiration?: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    connected?: (e: ConnectionEventArgs) => void;\r\n    disconnected?: (e: ConnectionEventArgs) => void;\r\n    canceled?: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    connectionOpened?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    connectionClosed?: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    participantsListReceived?: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    translationReceived?: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    lockRoomCommandReceived?: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    muteAllCommandReceived?: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    participantJoinCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    participantLeaveCommandReceived?: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    participantUpdateCommandReceived?: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    connect?: (token: string, cb?: () => void, err?: (e: string) => void) => void;\r\n}\r\n\r\n/**\r\n * Error message returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseErrorMessage {\r\n    code: string;\r\n    message: string;\r\n}\r\n\r\n/**\r\n * Error returned from the Conversation Translator websocket\r\n */\r\nexport interface IConversationResponseError {\r\n    error: IConversationResponseErrorMessage;\r\n}\r\n\r\n/**\r\n * Base message command\r\n */\r\nexport interface IClientMessage {\r\n    type: any;\r\n}\r\n\r\n/**\r\n * Command message\r\n */\r\nexport interface ICommandMessage extends IClientMessage {\r\n    command?: string;\r\n}\r\n\r\n/**\r\n * Text message command\r\n */\r\nexport interface IInstantMessageCommand extends ICommandMessage {\r\n    roomId: string;\r\n    nickname?: string;\r\n    participantId: string;\r\n    text: string;\r\n}\r\n\r\n/**\r\n * Lock command\r\n */\r\nexport interface ILockConversationCommand extends ICommandMessage {\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId: string; // host - incoming ws\r\n    roomid: string;\r\n    value: boolean;\r\n}\r\n\r\n/**\r\n * Mute all command\r\n */\r\nexport interface IMuteAllCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;  // incoming ws\r\n    participantId: string; // host\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Mute participant command\r\n */\r\nexport interface IMuteCommand extends ICommandMessage {\r\n    roomid: string;\r\n    nickname?: string;\r\n    participantId: string; // participant\r\n    value: boolean;\r\n    id?: string; // incoming ws\r\n}\r\n\r\n/**\r\n * Remove participant command\r\n */\r\nexport interface IEjectParticipantCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string; // participant\r\n}\r\n\r\n/**\r\n * Change nickname command\r\n */\r\nexport interface IChangeNicknameCommand extends ICommandMessage {\r\n    roomid: string;\r\n    participantId: string;\r\n    nickname: string;\r\n    value: string;\r\n}\r\n\r\n/**\r\n * List of command message types\r\n */\r\nexport const ConversationTranslatorMessageTypes = {\r\n    command: \"command\",\r\n    final: \"final\",\r\n    info: \"info\",\r\n    instantMessage: \"instant_message\",\r\n    keepAlive: \"keep_alive\",\r\n    partial: \"partial\",\r\n    participantCommand: \"participant_command\",\r\n    translatedMessage: \"translated_message\"\r\n};\r\n\r\n/**\r\n * List of command types\r\n */\r\nexport const ConversationTranslatorCommandTypes = {\r\n    changeNickname: \"ChangeNickname\",\r\n    disconnectSession: \"DisconnectSession\",\r\n    ejectParticipant: \"EjectParticipant\",\r\n    instant_message: \"instant_message\",\r\n    joinSession: \"JoinSession\",\r\n    leaveSession: \"LeaveSession\",\r\n    participantList: \"ParticipantList\",\r\n    roomExpirationWarning: \"RoomExpirationWarning\",\r\n    setLockState: \"SetLockState\",\r\n    setMute: \"SetMute\",\r\n    setMuteAll: \"SetMuteAll\",\r\n    setProfanityFiltering: \"SetProfanityFiltering\",\r\n    setTranslateToLanguages: \"SetTranslateToLanguages\",\r\n    setUseTTS: \"SetUseTTS\"\r\n};\r\n\r\n/**\r\n * HTTP response helper\r\n */\r\nexport interface IResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: <T>() => T;\r\n    headers: string;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nexport enum ParticipantChangedReason {\r\n    /** Participant has joined the conversation. */\r\n    JoinedConversation,\r\n\r\n    /** Participant has left the conversation. This could be voluntary, or involuntary\r\n     *  (e.g. they are experiencing networking issues).\r\n     */\r\n    LeftConversation,\r\n\r\n    /** The participants' state has changed (e.g. they became muted, changed their nickname). */\r\n    Updated\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IRequestOptions,\r\n    IRestParams,\r\n    IRestResponse,\r\n    RestMessageAdapter,\r\n    RestRequestType\r\n} from \"../../common.browser/Exports\";\r\nimport { IErrorMessages, IStringDictionary } from \"../../common/Exports\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { PropertyCollection, PropertyId } from \"../../sdk/Exports\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\r\nimport { IConversationResponseError, IInternalConversation, IResponse } from \"./ConversationTranslatorInterfaces\";\r\n\r\nexport class ConversationManager {\r\n\r\n    private privRequestParams: IRestParams;\r\n    private privErrors: IErrorMessages;\r\n    private privHost: string;\r\n    private privApiVersion: string;\r\n    private privRestPath: string;\r\n    private privRestAdapter: RestMessageAdapter;\r\n\r\n    public constructor() {\r\n        //\r\n        this.privRequestParams = ConversationConnectionConfig.configParams;\r\n        this.privErrors = ConversationConnectionConfig.restErrors;\r\n        this.privHost = ConversationConnectionConfig.host;\r\n        this.privApiVersion = ConversationConnectionConfig.apiVersion;\r\n        this.privRestPath = ConversationConnectionConfig.restPath;\r\n        this.privRestAdapter = new RestMessageAdapter({});\r\n    }\r\n\r\n    /**\r\n     * Make a POST request to the Conversation Manager service endpoint to create or join a conversation.\r\n     * @param args\r\n     * @param conversationCode\r\n     * @param callback\r\n     * @param errorCallback\r\n     */\r\n    public createOrJoin(args: PropertyCollection, conversationCode: string, cb?: any, err?: any): void {\r\n\r\n        try {\r\n\r\n            Contracts.throwIfNullOrUndefined(args, \"args\");\r\n\r\n            const languageCode: string = args.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, ConversationConnectionConfig.defaultLanguageCode);\r\n            const nickname: string = args.getProperty(PropertyId.ConversationTranslator_Name, \"conversation_host\");\r\n            const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n            const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n            const subscriptionKey: string = args.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n            const subscriptionRegion: string = args.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n            const authToken: string = args.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n\r\n            Contracts.throwIfNullOrWhitespace(languageCode, \"languageCode\");\r\n            Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n            Contracts.throwIfNullOrWhitespace(endpointHost, \"endpointHost\");\r\n\r\n            const queryParams: IStringDictionary<string> = {};\r\n            queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n            queryParams[this.privRequestParams.languageCode] = languageCode;\r\n            queryParams[this.privRequestParams.nickname] = nickname;\r\n\r\n            const headers: IStringDictionary<string> = {};\r\n            if (correlationId) {\r\n                headers[this.privRequestParams.correlationId] = correlationId;\r\n            }\r\n            headers[this.privRequestParams.clientAppId] = ConversationConnectionConfig.clientAppId;\r\n\r\n            if (conversationCode !== undefined) {\r\n                queryParams[this.privRequestParams.roomId] = conversationCode;\r\n            } else {\r\n                Contracts.throwIfNullOrUndefined(subscriptionRegion, this.privErrors.authInvalidSubscriptionRegion);\r\n                headers[this.privRequestParams.subscriptionRegion] = subscriptionRegion;\r\n                if (subscriptionKey) {\r\n                    headers[this.privRequestParams.subscriptionKey] = subscriptionKey;\r\n                } else if (authToken) {\r\n                    headers[this.privRequestParams.authorization] = `Bearer ${authToken}`;\r\n                } else {\r\n                    Contracts.throwIfNullOrUndefined(subscriptionKey, this.privErrors.authInvalidSubscriptionKey);\r\n                }\r\n            }\r\n\r\n            const config: IRequestOptions = {};\r\n            config.headers = headers;\r\n            this.privRestAdapter.options = config;\r\n\r\n            const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n            // TODO: support a proxy and certificate validation\r\n            this.privRestAdapter.request(RestRequestType.Post, endpoint, queryParams, null).then((response: IRestResponse) => {\r\n\r\n                const requestId: string = RestMessageAdapter.extractHeaderValue(this.privRequestParams.requestId, response.headers);\r\n\r\n                if (!response.ok) {\r\n                    if (!!err) {\r\n                        // get the error\r\n                        let errorMessage: string = this.privErrors.invalidCreateJoinConversationResponse.replace(\"{status}\", response.status.toString());\r\n                        let errMessageRaw: IConversationResponseError;\r\n                        try {\r\n                            errMessageRaw = JSON.parse(response.data) as IConversationResponseError;\r\n                            errorMessage += ` [${errMessageRaw.error.code}: ${errMessageRaw.error.message}]`;\r\n                        } catch (e) {\r\n                            errorMessage += ` [${response.data}]`;\r\n                        }\r\n                        if (requestId) {\r\n                            errorMessage += ` ${requestId}`;\r\n                        }\r\n\r\n                        err(errorMessage);\r\n                    }\r\n                    return;\r\n                }\r\n                const conversation: IInternalConversation = JSON.parse(response.data) as IInternalConversation;\r\n                if (conversation) {\r\n                    conversation.requestId = requestId;\r\n                }\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(conversation);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                    }\r\n                    cb = undefined;\r\n                }\r\n            /* tslint:disable:no-empty */\r\n            }).catch( (e: any) => {});\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Make a DELETE request to the Conversation Manager service endpoint to leave the conversation.\r\n     * @param args\r\n     * @param sessionToken\r\n     * @param callback\r\n     */\r\n    public leave(args: PropertyCollection, sessionToken: string): Promise<void> {\r\n        return new Promise<void>((resolve: () => void, reject: (reason: string) => void): void => {\r\n            try {\r\n\r\n                Contracts.throwIfNullOrUndefined(args, this.privErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n                Contracts.throwIfNullOrWhitespace(sessionToken, this.privErrors.invalidArgs.replace(\"{arg}\", \"token\"));\r\n\r\n                const endpointHost: string = args.getProperty(PropertyId.ConversationTranslator_Host, this.privHost);\r\n                const correlationId: string = args.getProperty(PropertyId.ConversationTranslator_CorrelationId);\r\n\r\n                const queryParams: IStringDictionary<string> = {};\r\n                queryParams[this.privRequestParams.apiVersion] = this.privApiVersion;\r\n                queryParams[this.privRequestParams.sessionToken] = sessionToken;\r\n\r\n                const headers: IStringDictionary<string> = {};\r\n                if (correlationId) {\r\n                    headers[this.privRequestParams.correlationId] = correlationId;\r\n                }\r\n\r\n                const config: IRequestOptions = {};\r\n                config.headers = headers;\r\n                this.privRestAdapter.options = config;\r\n\r\n                const endpoint: string = `https://${endpointHost}${this.privRestPath}`;\r\n\r\n                // TODO: support a proxy and certificate validation\r\n                this.privRestAdapter.request(RestRequestType.Delete, endpoint, queryParams, null).then((response: IRestResponse) => {\r\n\r\n                    if (!response.ok) {\r\n                        // ignore errors on delete\r\n                    }\r\n\r\n                    resolve();\r\n                /* tslint:disable:no-empty */\r\n                }).catch( (e: any) => {});\r\n\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    reject(typedError.name + \": \" + typedError.message);\r\n\r\n                } else {\r\n                    reject(error);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionMessage, IStringDictionary, MessageType } from \"../../common/Exports\";\r\n\r\nexport class ConversationConnectionMessage extends ConnectionMessage {\r\n    private privConversationMessageType: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n            super(messageType, body, headers, id);\r\n            const json = JSON.parse(this.textBody);\r\n            if (json.type !== undefined) {\r\n                this.privConversationMessageType = json.type;\r\n            }\r\n    }\r\n\r\n    public get conversationMessageType(): string {\r\n        return this.privConversationMessageType;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../../common/Exports\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage\";\r\n\r\n/**\r\n * Based off WebsocketMessageFormatter. The messages for Conversation Translator have some variations from the Speech messages.\r\n */\r\nexport class ConversationWebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    /**\r\n     * Format incoming messages: text (speech partial/final, IM) or binary (tts)\r\n     */\r\n    public toConnectionMessage = (message: RawWebsocketMessage): Promise<ConversationConnectionMessage> => {\r\n        const deferral = new Deferred<ConversationConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const incomingMessage: ConversationConnectionMessage = new ConversationConnectionMessage(message.messageType, message.textContent, {}, message.id);\r\n                deferral.resolve(incomingMessage);\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                deferral.resolve(new ConversationConnectionMessage(message.messageType, message.binaryContent, undefined, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    /**\r\n     * Format outgoing messages: text (commands or IM)\r\n     */\r\n    public fromConnectionMessage = (message: ConnectionMessage): Promise<RawWebsocketMessage> => {\r\n\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${message.textBody ? message.textBody : \"\"}`;\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ProxyInfo, WebsocketConnection } from \"../../common.browser/Exports\";\r\nimport { createGuid, IConnection, IStringDictionary } from \"../../common/Exports\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { PropertyId } from \"../../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"../ConnectionFactoryBase\";\r\nimport { AuthInfo, RecognizerConfig } from \"../Exports\";\r\nimport { ConversationConnectionConfig } from \"./ConversationConnectionConfig\";\r\nimport { ConversationWebsocketMessageFormatter } from \"./ConversationWebsocketMessageFormatter\";\r\n\r\n/**\r\n * Create a connection to the Conversation Translator websocket for sending instant messages and commands, and for receiving translated messages.\r\n * The conversation must already have been started or joined.\r\n */\r\nexport class ConversationConnectionFactory extends ConnectionFactoryBase  {\r\n\r\n    public create(config: RecognizerConfig, authInfo: AuthInfo, connectionId?: string): IConnection {\r\n\r\n        const endpointHost: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Host, ConversationConnectionConfig.host);\r\n        const correlationId: string = config.parameters.getProperty(PropertyId.ConversationTranslator_CorrelationId, createGuid());\r\n\r\n        const endpoint: string = `wss://${endpointHost}${ConversationConnectionConfig.webSocketPath}`;\r\n        const token: string = config.parameters.getProperty(PropertyId.ConversationTranslator_Token, undefined);\r\n        Contracts.throwIfNullOrUndefined(token, \"token\");\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n        queryParams[ConversationConnectionConfig.configParams.apiVersion] = ConversationConnectionConfig.apiVersion;\r\n        queryParams[ConversationConnectionConfig.configParams.token] = token;\r\n        queryParams[ConversationConnectionConfig.configParams.correlationId] = correlationId;\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, {}, new ConversationWebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { CancellationEventArgsBase } from \"../CancellationEventArgsBase\";\r\n\r\nexport class ConversationTranslationCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { SessionEventArgs } from \"../Exports\";\r\n\r\nexport class ConversationExpirationEventArgs extends SessionEventArgs {\r\n    private privExpirationTime: number;\r\n\r\n    constructor(expirationTime: number, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privExpirationTime = expirationTime;\r\n    }\r\n\r\n    /** How much longer until the conversation expires (in minutes). */\r\n    get expirationTime(): number {\r\n        return this.privExpirationTime;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { PropertyCollection } from \"../PropertyCollection\";\r\nimport { ResultReason } from \"../ResultReason\";\r\nimport { TranslationRecognitionResult } from \"../TranslationRecognitionResult\";\r\nimport { Translations } from \"../Translations\";\r\n\r\nexport class ConversationTranslationResult extends TranslationRecognitionResult {\r\n    private privId: string;\r\n    private privOrigLang: string;\r\n\r\n    public constructor(participantId: string,\r\n                       translations: Translations,\r\n                       originalLanguage?: string,\r\n                       resultId?: string,\r\n                       reason?: ResultReason,\r\n                       text?: string,\r\n                       duration?: number,\r\n                       offset?: number,\r\n                       errorDetails?: string,\r\n                       json?: string,\r\n                       properties?: PropertyCollection) {\r\n        super(translations, resultId, reason, text, duration, offset, errorDetails, json, properties);\r\n        this.privId = participantId;\r\n        this.privOrigLang = originalLanguage;\r\n    }\r\n\r\n    /**\r\n     * The unique identifier for the participant this result is for.\r\n     */\r\n    public get participantId(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * The original language this result was in.\r\n     */\r\n    public get originalLang(): string {\r\n        return this.privOrigLang;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IDetachable,\r\n} from \"../../common/Exports\";\r\n\r\n/**\r\n * Placeholder class for the Conversation Request Session. Based off RequestSession.\r\n * TODO: define what telemetry is required.\r\n */\r\nexport class ConversationRequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privRequestCompletionDeferral: Deferred<void>;\r\n    private privSessionId: string;\r\n\r\n    constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privRequestCompletionDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get completionPromise(): Promise<void> {\r\n        return this.privRequestCompletionDeferral.promise;\r\n    }\r\n\r\n    public onPreConnectionStart = (authFetchEventId: string, connectionId: string): void => {\r\n        this.privSessionId = connectionId;\r\n    }\r\n\r\n    public onAuthCompleted = (isError: boolean, error?: string): void => {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted = (statusCode: number, reason?: string): void => {\r\n        if (statusCode === 200) {\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceTurnEndResponse = (continuousRecognition: boolean): void => {\r\n        if (!continuousRecognition) {\r\n            this.onComplete();\r\n        } else {\r\n            this.privRequestId = createNoDashGuid();\r\n        }\r\n    }\r\n\r\n    public async dispose(error?: string): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete = (): void => {\r\n        //\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { SessionEventArgs } from \"../../sdk/Exports\";\r\nimport { IInternalParticipant } from \"./ConversationTranslatorInterfaces\";\r\n\r\nexport class MuteAllEventArgs extends SessionEventArgs {\r\n    private privIsMuted: boolean;\r\n\r\n    public constructor(isMuted: boolean, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privIsMuted = isMuted;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class LockRoomEventArgs extends SessionEventArgs {\r\n    private privIsLocked: boolean;\r\n\r\n    public constructor(isLocked: boolean, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privIsLocked = isLocked;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsLocked;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class ParticipantEventArgs extends SessionEventArgs {\r\n    private privParticipant: IInternalParticipant;\r\n\r\n    public constructor(participant: IInternalParticipant, sessionId?: string) {\r\n        super(sessionId);\r\n        this.privParticipant = participant;\r\n    }\r\n\r\n    public get participant(): IInternalParticipant {\r\n        return this.privParticipant;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class ParticipantAttributeEventArgs extends SessionEventArgs {\r\n    private privValue: boolean | number | string | string[];\r\n    private privKey: string;\r\n    private privParticipantId: string;\r\n\r\n    public constructor(participantId: string, key: string, value: boolean | number | string |  string[], sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privKey = key;\r\n        this.privValue = value;\r\n        this.privParticipantId = participantId;\r\n    }\r\n\r\n    public get value(): boolean | number | string |  string[] {\r\n        return this.privValue;\r\n    }\r\n\r\n    public get key(): string {\r\n        return this.privKey;\r\n    }\r\n    public get id(): string {\r\n        return this.privParticipantId;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class ParticipantsListEventArgs extends SessionEventArgs {\r\n\r\n    private privRoomId: string;\r\n    private privSessionToken: string;\r\n    private privTranslateTo: string[];\r\n    private privProfanityFilter: string;\r\n    private privRoomProfanityFilter: string;\r\n    private privIsRoomLocked: boolean;\r\n    private privIsMuteAll: boolean;\r\n    private privParticipants: IInternalParticipant[];\r\n\r\n    public constructor(conversationId: string, token: string, translateTo: string[], profanityFilter: string,\r\n                       roomProfanityFilter: string, isRoomLocked: boolean, isMuteAll: boolean, participants: IInternalParticipant[], sessionId?: string) {\r\n        super(sessionId);\r\n        this.privRoomId = conversationId;\r\n        this.privSessionToken = token;\r\n        this.privTranslateTo = translateTo;\r\n        this.privProfanityFilter = profanityFilter;\r\n        this.privRoomProfanityFilter = roomProfanityFilter;\r\n        this.privIsRoomLocked = isRoomLocked;\r\n        this.privIsRoomLocked = isMuteAll;\r\n        this.privParticipants = participants;\r\n    }\r\n    public get sessionToken(): string {\r\n        return this.privSessionToken;\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privRoomId;\r\n    }\r\n\r\n    public get translateTo(): string[] {\r\n        return this.privTranslateTo;\r\n    }\r\n\r\n    public get profanityFilter(): string {\r\n        return this.privProfanityFilter;\r\n    }\r\n\r\n    public get roomProfanityFilter(): string {\r\n        return this.privRoomProfanityFilter;\r\n    }\r\n\r\n    public get isRoomLocked(): boolean {\r\n        return this.privIsRoomLocked;\r\n    }\r\n\r\n    public get isMuteAll(): boolean {\r\n        return this.privIsMuteAll;\r\n    }\r\n\r\n    public get participants(): IInternalParticipant[] {\r\n        return this.privParticipants;\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class ConversationReceivedTranslationEventArgs {\r\n    private privPayload: any;\r\n    private privCommand: string;\r\n    private privSessionId: string;\r\n\r\n    public constructor(command: string, payload: any,  sessionId?: string) {\r\n        this.privPayload = payload;\r\n        this.privCommand = command;\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    public get payload(): any {\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get command(): string {\r\n        return this.privCommand;\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the payload for incoming websocket commands\r\n */\r\nexport interface ICommandResponsePayload {\r\n    type: string;\r\n    command?: string;\r\n    id?: string; // incoming ws\r\n    nickname?: string; // incoming ws\r\n    participantId?: string;\r\n    roomid?: string;\r\n    value: boolean | number | string;\r\n    token?: string;\r\n}\r\n\r\nexport class CommandResponsePayload implements ICommandResponsePayload {\r\n    private privCommandResponse: ICommandResponsePayload;\r\n\r\n    public constructor(json: string) {\r\n        this.privCommandResponse = JSON.parse(json);\r\n    }\r\n\r\n    public static fromJSON(json: string): CommandResponsePayload {\r\n        return new CommandResponsePayload(json);\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privCommandResponse.type;\r\n    }\r\n    public get command(): string {\r\n        return this.privCommandResponse.command;\r\n    }\r\n    public get id(): string {\r\n        return this.privCommandResponse.id;\r\n    }\r\n    public get nickname(): string {\r\n        return this.privCommandResponse.nickname;\r\n    }\r\n    public get participantId(): string {\r\n        return this.privCommandResponse.participantId;\r\n    }\r\n    public get roomid(): string {\r\n        return this.privCommandResponse.roomid;\r\n    }\r\n    public get value(): boolean | number | string {\r\n        return this.privCommandResponse.value;\r\n    }\r\n    public get token(): string {\r\n        return this.privCommandResponse.token;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the payload for incoming list of participants\r\n */\r\nexport interface IParticipantsListPayloadResponse {\r\n    roomid: string;\r\n    id: string;\r\n    command: string;\r\n    participants: IParticipantPayloadResponse[];\r\n    token: string;\r\n    translateTo: string[];\r\n    profanityFilter: string;\r\n    roomProfanityFilter: string;\r\n    roomLocked: boolean;\r\n    muteAll: boolean;\r\n    type: string;\r\n}\r\n\r\n/**\r\n * Defines the payload for incoming participant\r\n */\r\nexport interface IParticipantPayloadResponse {\r\n    nickname: string;\r\n    locale: string;\r\n    usetts: boolean;\r\n    ismuted: boolean;\r\n    ishost: boolean;\r\n    participantId: string;\r\n    avatar?: string;\r\n}\r\n\r\nexport class ParticipantsListPayloadResponse implements IParticipantsListPayloadResponse {\r\n    private privParticipantsPayloadResponse: IParticipantsListPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privParticipantsPayloadResponse = JSON.parse(json);\r\n    }\r\n\r\n    public static fromJSON(json: string): ParticipantsListPayloadResponse {\r\n        return new ParticipantsListPayloadResponse(json);\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privParticipantsPayloadResponse.roomid;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privParticipantsPayloadResponse.id;\r\n    }\r\n\r\n    public get command(): string {\r\n        return this.privParticipantsPayloadResponse.command;\r\n    }\r\n\r\n    public get participants(): IParticipantPayloadResponse[] {\r\n        return this.privParticipantsPayloadResponse.participants;\r\n    }\r\n\r\n    public get token(): string {\r\n        return this.privParticipantsPayloadResponse.token;\r\n    }\r\n\r\n    public get translateTo(): string[] {\r\n        return this.privParticipantsPayloadResponse.translateTo;\r\n    }\r\n\r\n    public get profanityFilter(): string {\r\n        return this.privParticipantsPayloadResponse.profanityFilter;\r\n    }\r\n\r\n    public get roomProfanityFilter(): string {\r\n        return this.privParticipantsPayloadResponse.roomProfanityFilter;\r\n    }\r\n\r\n    public get roomLocked(): boolean {\r\n        return this.privParticipantsPayloadResponse.roomLocked;\r\n    }\r\n\r\n    public get muteAll(): boolean {\r\n        return this.privParticipantsPayloadResponse.muteAll;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privParticipantsPayloadResponse.type;\r\n    }\r\n\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class ParticipantPayloadResponse implements IParticipantPayloadResponse {\r\n\r\n    private privParticipantPayloadResponse: IParticipantPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privParticipantPayloadResponse = JSON.parse(json);\r\n    }\r\n\r\n    public static fromJSON(json: string): ParticipantPayloadResponse {\r\n        return new ParticipantPayloadResponse(json);\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privParticipantPayloadResponse.nickname;\r\n    }\r\n\r\n    public get locale(): string {\r\n        return this.privParticipantPayloadResponse.locale;\r\n    }\r\n\r\n    public get usetts(): boolean {\r\n        return this.privParticipantPayloadResponse.usetts;\r\n    }\r\n\r\n    public get ismuted(): boolean {\r\n        return this.privParticipantPayloadResponse.ismuted;\r\n    }\r\n\r\n    public get ishost(): boolean {\r\n        return this.privParticipantPayloadResponse.ishost;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privParticipantPayloadResponse.participantId;\r\n    }\r\n\r\n    public get avatar(): string {\r\n        return this.privParticipantPayloadResponse.avatar;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the payload for incoming translation messages\r\n */\r\nexport interface ITranslationResponsePayload {\r\n    lang: string;\r\n    translation: string;\r\n}\r\n\r\nexport interface ITranslationCommandMessage {\r\n    translations: ITranslationResponsePayload[];\r\n    id: string;\r\n    language: string;\r\n    nickname: string;\r\n    participantId: string;\r\n    roomid: string;\r\n    timestamp: string;\r\n    type: string;\r\n}\r\n\r\nexport interface ISpeechResponsePayload extends ITranslationCommandMessage {\r\n    recognition: string;\r\n    isFinal: boolean;\r\n}\r\n\r\nexport interface ITextResponsePayload extends ITranslationCommandMessage {\r\n    originalText: string;\r\n}\r\n\r\nexport class SpeechResponsePayload implements ISpeechResponsePayload {\r\n\r\n    private privSpeechResponse: ISpeechResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechResponse = JSON.parse(json);\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechResponsePayload {\r\n        return new SpeechResponsePayload(json);\r\n    }\r\n\r\n    public get recognition(): string {\r\n        return this.privSpeechResponse.recognition;\r\n    }\r\n\r\n    public get translations(): ITranslationResponsePayload[] {\r\n        return this.privSpeechResponse.translations;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privSpeechResponse.id;\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privSpeechResponse.language;\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privSpeechResponse.nickname;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privSpeechResponse.participantId;\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privSpeechResponse.roomid;\r\n    }\r\n\r\n    public get timestamp(): string {\r\n        return this.privSpeechResponse.timestamp;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privSpeechResponse.type;\r\n    }\r\n\r\n    public get isFinal(): boolean {\r\n        return this.privSpeechResponse.type === \"final\";\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class TextResponsePayload implements ITextResponsePayload {\r\n\r\n    private privTextResponse: ITextResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privTextResponse = JSON.parse(json);\r\n    }\r\n\r\n    public static fromJSON(json: string): TextResponsePayload {\r\n        return new TextResponsePayload(json);\r\n    }\r\n\r\n    public get originalText(): string {\r\n        return this.privTextResponse.originalText;\r\n    }\r\n\r\n    public get translations(): ITranslationResponsePayload[] {\r\n        return this.privTextResponse.translations;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privTextResponse.id;\r\n    }\r\n\r\n    public get language(): string {\r\n        return this.privTextResponse.language;\r\n    }\r\n\r\n    public get nickname(): string {\r\n        return this.privTextResponse.nickname;\r\n    }\r\n\r\n    public get participantId(): string {\r\n        return this.privTextResponse.participantId;\r\n    }\r\n\r\n    public get roomid(): string {\r\n        return this.privTextResponse.roomid;\r\n    }\r\n\r\n    public get timestamp(): string {\r\n        return this.privTextResponse.timestamp;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privTextResponse.type;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType,\r\n} from \"../../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationExpirationEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationResult,\r\n    Translations\r\n} from \"../../sdk/Exports\";\r\nimport {\r\n    CognitiveTokenAuthentication,\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase\r\n} from \"../Exports\";\r\nimport { ConversationConnectionMessage } from \"./ConversationConnectionMessage\";\r\nimport { ConversationRequestSession } from \"./ConversationRequestSession\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs\";\r\nimport {\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalParticipant\r\n} from \"./ConversationTranslatorInterfaces\";\r\nimport { ConversationTranslatorRecognizer } from \"./ConversationTranslatorRecognizer\";\r\nimport {\r\n    CommandResponsePayload,\r\n    IParticipantPayloadResponse,\r\n    IParticipantsListPayloadResponse,\r\n    ITranslationResponsePayload,\r\n    ParticipantPayloadResponse,\r\n    ParticipantsListPayloadResponse,\r\n    SpeechResponsePayload,\r\n    TextResponsePayload\r\n} from \"./ServiceMessages/Exports\";\r\n\r\n/***\r\n * The service adapter handles sending and receiving messages to the Conversation Translator websocket.\r\n */\r\nexport class ConversationServiceAdapter extends ServiceRecognizerBase {\r\n    private privConversationServiceConnector: ConversationTranslatorRecognizer;\r\n    private privConversationConnectionFactory: IConnectionFactory;\r\n    private privConversationAuthFetchEventId: string;\r\n    private privConversationAuthentication: IAuthentication;\r\n    private privConversationRequestSession: ConversationRequestSession;\r\n    private privConnectionConfigPromise: Promise<IConnection>;\r\n    private privConnectionLoop: Promise<void>;\r\n    private terminateMessageLoop: boolean;\r\n    private privLastPartialUtteranceId: string = \"\";\r\n    private privConversationIsDisposed: boolean;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        conversationServiceConnector: ConversationTranslatorRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, conversationServiceConnector);\r\n\r\n        this.privConversationServiceConnector = conversationServiceConnector;\r\n        this.privConversationAuthentication = authentication;\r\n        this.receiveMessageOverride = this.receiveConversationMessageOverride;\r\n        this.recognizeOverride = this.noOp;\r\n        this.postConnectImplOverride = this.conversationConnectImpl;\r\n        this.configConnectionOverride = this.configConnection;\r\n        this.disconnectOverride = this.privDisconnect;\r\n        this.privConversationRequestSession = new ConversationRequestSession(createNoDashGuid());\r\n        this.privConversationConnectionFactory = connectionFactory;\r\n        this.privConversationIsDisposed = false;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return super.isDisposed() || this.privConversationIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privConversationIsDisposed = true;\r\n        if (this.privConnectionConfigPromise) {\r\n            const connection: IConnection = await this.privConnectionConfigPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n        await super.dispose(reason);\r\n    }\r\n\r\n    public async sendMessage(message: string): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new ConversationConnectionMessage(\r\n            MessageType.Text,\r\n            message));\r\n    }\r\n\r\n    public async sendMessageAsync(message: string): Promise<void> {\r\n        const sink: Deferred<void> = new Deferred<void>();\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n\r\n        await connection.send(new ConversationConnectionMessage(MessageType.Text, message));\r\n    }\r\n\r\n    protected privDisconnect(): Promise<void> {\r\n        if (this.terminateMessageLoop) {\r\n            return;\r\n        }\r\n        this.cancelRecognition(this.privConversationRequestSession.sessionId,\r\n            this.privConversationRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        this.terminateMessageLoop = true;\r\n        return Promise.resolve();\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(\r\n        connectionMessage: ConnectionMessage,\r\n        successCallback?: (e: any) => void,\r\n        errorCallBack?: (e: string) => void): Promise<boolean> {\r\n        return true;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        this.terminateMessageLoop = true;\r\n\r\n        const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n            cancellationReason,\r\n            error,\r\n            errorCode,\r\n            undefined,\r\n            sessionId);\r\n\r\n        try {\r\n            if (!!this.privConversationServiceConnector.canceled) {\r\n                this.privConversationServiceConnector.canceled(this.privConversationServiceConnector, cancelEvent);\r\n            }\r\n        } catch {\r\n            // continue on error\r\n        }\r\n    }\r\n\r\n    protected noOp = (): any => {\r\n        // operation not supported\r\n    }\r\n\r\n    /**\r\n     * Establishes a websocket connection to the end point.\r\n     */\r\n    protected async conversationConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return connection;\r\n    }\r\n\r\n    /**\r\n     * Process incoming websocket messages\r\n     */\r\n    private async receiveConversationMessageOverride(): Promise<void> {\r\n        if (this.isDisposed() || this.terminateMessageLoop) {\r\n            return Promise.resolve();\r\n        }\r\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\r\n\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConversationConnectionMessage = await connection.read() as ConversationConnectionMessage;\r\n            if (this.isDisposed() || this.terminateMessageLoop) {\r\n                // We're done.\r\n                communicationCustodian.resolve();\r\n                return Promise.resolve();\r\n            }\r\n\r\n            if (!message) {\r\n                return this.receiveConversationMessageOverride();\r\n            }\r\n\r\n            const sessionId: string = this.privConversationRequestSession.sessionId;\r\n            let sendFinal: boolean = false;\r\n\r\n            try {\r\n                switch (message.conversationMessageType.toLowerCase()) {\r\n                    case \"info\":\r\n                    case \"participant_command\":\r\n                    case \"command\":\r\n                        const commandPayload: CommandResponsePayload = CommandResponsePayload.fromJSON(message.textBody);\r\n                        switch (commandPayload.command.toLowerCase()) {\r\n\r\n                            /**\r\n                             * 'ParticpantList' is the first message sent to the user after the websocket connection has opened.\r\n                             * The consuming client must wait for this message to arrive\r\n                             * before starting to send their own data.\r\n                             */\r\n                            case \"participantlist\":\r\n\r\n                                const participantsPayload: IParticipantsListPayloadResponse = ParticipantsListPayloadResponse.fromJSON(message.textBody);\r\n\r\n                                const participantsResult: IInternalParticipant[] = participantsPayload.participants.map((p: IParticipantPayloadResponse) => {\r\n                                    const participant: IInternalParticipant = {\r\n                                        avatar: p.avatar,\r\n                                        displayName: p.nickname,\r\n                                        id: p.participantId,\r\n                                        isHost: p.ishost,\r\n                                        isMuted: p.ismuted,\r\n                                        isUsingTts: p.usetts,\r\n                                        preferredLanguage: p.locale\r\n                                    };\r\n                                    return participant;\r\n                                });\r\n\r\n                                if (!!this.privConversationServiceConnector.participantsListReceived) {\r\n                                    this.privConversationServiceConnector.participantsListReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantsListEventArgs(participantsPayload.roomid, participantsPayload.token,\r\n                                            participantsPayload.translateTo, participantsPayload.profanityFilter,\r\n                                            participantsPayload.roomProfanityFilter, participantsPayload.roomLocked,\r\n                                            participantsPayload.muteAll, participantsResult, sessionId));\r\n                                }\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetTranslateToLanguages' represents the list of languages being used in the Conversation by all users(?).\r\n                             * This is sent at the start of the Conversation\r\n                             */\r\n                            case \"settranslatetolanguages\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setTranslateToLanguages,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetProfanityFiltering' lets the client set the level of profanity filtering.\r\n                             * If sent by the participant the setting will effect only their own profanity level.\r\n                             * If sent by the host, the setting will effect all participants including the host.\r\n                             * Note: the profanity filters differ from Speech Service (?): 'marked', 'raw', 'removed', 'tagged'\r\n                             */\r\n                            case \"setprofanityfiltering\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setProfanityFiltering,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetMute' is sent if the participant has been muted by the host.\r\n                             * Check the 'participantId' to determine if the current user has been muted.\r\n                             */\r\n                            case \"setmute\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setMute,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetMuteAll' is sent if the Conversation has been muted by the host.\r\n                             */\r\n                            case \"setmuteall\":\r\n\r\n                                if (!!this.privConversationServiceConnector.muteAllCommandReceived) {\r\n                                    this.privConversationServiceConnector.muteAllCommandReceived(this.privConversationServiceConnector,\r\n                                        new MuteAllEventArgs(commandPayload.value as boolean, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'RoomExpirationWarning' is sent towards the end of the Conversation session to give a timeout warning.\r\n                             */\r\n                            case \"roomexpirationwarning\":\r\n\r\n                                if (!!this.privConversationServiceConnector.conversationExpiration) {\r\n                                    this.privConversationServiceConnector.conversationExpiration(this.privConversationServiceConnector,\r\n                                        new ConversationExpirationEventArgs(commandPayload.value as number, this.privConversationRequestSession.sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetUseTts' is sent as a confirmation if the user requests TTS to be turned on or off.\r\n                             */\r\n                            case \"setusetts\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.setUseTTS,\r\n                                            commandPayload.value, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'SetLockState' is set if the host has locked or unlocked the Conversation.\r\n                             */\r\n                            case \"setlockstate\":\r\n\r\n                                if (!!this.privConversationServiceConnector.lockRoomCommandReceived) {\r\n                                    this.privConversationServiceConnector.lockRoomCommandReceived(this.privConversationServiceConnector,\r\n                                        new LockRoomEventArgs(commandPayload.value as boolean, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'ChangeNickname' is received if a user changes their display name.\r\n                             * Any cached particpiants list should be updated to reflect the display name.\r\n                             */\r\n                            case \"changenickname\":\r\n\r\n                                if (!!this.privConversationServiceConnector.participantUpdateCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantUpdateCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantAttributeEventArgs(commandPayload.participantId,\r\n                                            ConversationTranslatorCommandTypes.changeNickname,\r\n                                            commandPayload.nickname, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'JoinSession' is sent when a user joins the Conversation.\r\n                             */\r\n                            case \"joinsession\":\r\n\r\n                                const joinParticipantPayload: ParticipantPayloadResponse = ParticipantPayloadResponse.fromJSON(message.textBody);\r\n\r\n                                const joiningParticipant: IInternalParticipant = {\r\n                                    avatar: joinParticipantPayload.avatar,\r\n                                    displayName: joinParticipantPayload.nickname,\r\n                                    id: joinParticipantPayload.participantId,\r\n                                    isHost: joinParticipantPayload.ishost,\r\n                                    isMuted: joinParticipantPayload.ismuted,\r\n                                    isUsingTts: joinParticipantPayload.usetts,\r\n                                    preferredLanguage: joinParticipantPayload.locale,\r\n                                };\r\n\r\n                                if (!!this.privConversationServiceConnector.participantJoinCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantJoinCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantEventArgs(\r\n                                            joiningParticipant,\r\n                                            sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'LeaveSession' is sent when a user leaves the Conversation'.\r\n                             */\r\n                            case \"leavesession\":\r\n\r\n                                const leavingParticipant: IInternalParticipant = {\r\n                                    id: commandPayload.participantId\r\n                                };\r\n\r\n                                if (!!this.privConversationServiceConnector.participantLeaveCommandReceived) {\r\n                                    this.privConversationServiceConnector.participantLeaveCommandReceived(this.privConversationServiceConnector,\r\n                                        new ParticipantEventArgs(leavingParticipant, sessionId));\r\n                                }\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * 'DisconnectSession' is sent when a user is disconnected from the session (e.g. network problem).\r\n                             * Check the 'ParticipantId' to check whether the message is for the current user.\r\n                             */\r\n                            case \"disconnectsession\":\r\n\r\n                                const disconnectParticipant: IInternalParticipant = {\r\n                                    id: commandPayload.participantId\r\n                                };\r\n\r\n                                break;\r\n\r\n                            case \"token\":\r\n                                const token = new CognitiveTokenAuthentication(\r\n                                    (authFetchEventId: string): Promise<string> => {\r\n                                        const authorizationToken = commandPayload.token;\r\n                                        return Promise.resolve(authorizationToken);\r\n                                    },\r\n                                    (authFetchEventId: string): Promise<string> => {\r\n                                        const authorizationToken = commandPayload.token;\r\n                                        return Promise.resolve(authorizationToken);\r\n                                    });\r\n                                this.authentication = token;\r\n\r\n                                break;\r\n\r\n                            /**\r\n                             * Message not recognized.\r\n                             */\r\n                            default:\r\n                                break;\r\n                        }\r\n                        break;\r\n\r\n                    /**\r\n                     * 'partial' (or 'hypothesis') represents a unfinalized speech message.\r\n                     */\r\n                    case \"partial\":\r\n\r\n                    /**\r\n                     * 'final' (or 'phrase') represents a finalized speech message.\r\n                     */\r\n                    case \"final\":\r\n\r\n                        const speechPayload: SpeechResponsePayload = SpeechResponsePayload.fromJSON(message.textBody);\r\n\r\n                        const speechResult: ConversationTranslationResult = new ConversationTranslationResult(speechPayload.participantId,\r\n                            this.getTranslations(speechPayload.translations),\r\n                            speechPayload.language,\r\n                            undefined,\r\n                            undefined,\r\n                            speechPayload.recognition,\r\n                            undefined,\r\n                            undefined,\r\n                            message.textBody,\r\n                            undefined);\r\n\r\n                        if (speechPayload.isFinal) {\r\n                            // check the length, sometimes empty finals are returned\r\n                            if (speechResult.text !== undefined && speechResult.text.length > 0) {\r\n                                sendFinal = true;\r\n                            } else if (speechPayload.id === this.privLastPartialUtteranceId) {\r\n                                // send final as normal. We had a non-empty partial for this same utterance\r\n                                // so sending the empty final is important\r\n                                sendFinal = true;\r\n                            } else {\r\n                                // suppress unneeded final\r\n                            }\r\n\r\n                            if (sendFinal) {\r\n                                if (!!this.privConversationServiceConnector.translationReceived) {\r\n                                    this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                        new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.final, speechResult, sessionId));\r\n                                }\r\n                            }\r\n                        } else if (speechResult.text !== undefined) {\r\n                            this.privLastPartialUtteranceId = speechPayload.id;\r\n                            if (!!this.privConversationServiceConnector.translationReceived) {\r\n                                this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                    new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.partial, speechResult, sessionId));\r\n                            }\r\n                        }\r\n\r\n                        break;\r\n\r\n                    /**\r\n                     * \"translated_message\" is a text message or instant message (IM).\r\n                     */\r\n                    case \"translated_message\":\r\n\r\n                        const textPayload: TextResponsePayload = TextResponsePayload.fromJSON(message.textBody);\r\n\r\n                        const textResult: ConversationTranslationResult = new ConversationTranslationResult(textPayload.participantId,\r\n                            this.getTranslations(textPayload.translations),\r\n                            textPayload.language,\r\n                            undefined,\r\n                            undefined,\r\n                            textPayload.originalText,\r\n                            undefined,\r\n                            undefined,\r\n                            undefined,\r\n                            message.textBody,\r\n                            undefined);\r\n\r\n                        if (!!this.privConversationServiceConnector.translationReceived) {\r\n                            this.privConversationServiceConnector.translationReceived(this.privConversationServiceConnector,\r\n                                new ConversationReceivedTranslationEventArgs(ConversationTranslatorMessageTypes.instantMessage, textResult, sessionId));\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        // ignore any unsupported message types\r\n                        break;\r\n                }\r\n            } catch (e) {\r\n                // continue\r\n            }\r\n            return this.receiveConversationMessageOverride();\r\n        } catch (e) {\r\n            this.terminateMessageLoop = true;\r\n        }\r\n\r\n        return communicationCustodian.promise;\r\n    }\r\n\r\n    private async startMessageLoop(): Promise<void> {\r\n        if (this.isDisposed()) {\r\n            return Promise.resolve();\r\n        }\r\n        this.terminateMessageLoop = false;\r\n\r\n        const messageRetrievalPromise = this.receiveConversationMessageOverride();\r\n\r\n        try {\r\n            const r = await messageRetrievalPromise;\r\n            return r;\r\n        } catch (error) {\r\n            this.cancelRecognition(this.privRequestSession ? this.privRequestSession.sessionId : \"\", this.privRequestSession ? this.privRequestSession.requestId : \"\", CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint\r\n    private configConnection(): Promise<IConnection> {\r\n        if (this.isDisposed()) {\r\n            return Promise.resolve<IConnection>(undefined);\r\n        }\r\n        if (this.privConnectionConfigPromise) {\r\n            return this.privConnectionConfigPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigPromise = null;\r\n                    return this.configConnection();\r\n                }\r\n                return this.privConnectionConfigPromise;\r\n            }, (error: string): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigPromise = null;\r\n                return this.configConnection();\r\n            });\r\n        }\r\n        if (this.terminateMessageLoop) {\r\n            return Promise.resolve<IConnection>(undefined);\r\n        }\r\n\r\n        this.privConnectionConfigPromise = this.connectImpl().then((connection: IConnection): any => {\r\n            return connection;\r\n        });\r\n\r\n        return this.privConnectionConfigPromise;\r\n    }\r\n\r\n    private getTranslations(serviceResultTranslations: ITranslationResponsePayload[]): Translations {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResultTranslations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResultTranslations) {\r\n                translations.set(translation.lang, translation.translation);\r\n            }\r\n        }\r\n\r\n        return translations;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    BackgroundEvent,\r\n    Events,\r\n    Timeout\r\n} from \"../../common/Exports\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    Connection,\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    PropertyCollection,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig\r\n} from \"../../sdk/Exports\";\r\nimport { SpeechTranslationConfigImpl } from \"../../sdk/SpeechTranslationConfig\";\r\nimport { ConversationImpl } from \"../../sdk/Transcription/Conversation\";\r\nimport { Callback, IConversation } from \"../../sdk/Transcription/IConversation\";\r\nimport { ConversationConnectionFactory } from \"./ConversationConnectionFactory\";\r\nimport { ConversationServiceAdapter } from \"./ConversationServiceAdapter\";\r\nimport {\r\n    ConversationReceivedTranslationEventArgs,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs\r\n} from \"./ConversationTranslatorEventArgs\";\r\nimport {\r\n    ConversationRecognizer,\r\n    ConversationTranslatorMessageTypes\r\n} from \"./ConversationTranslatorInterfaces\";\r\n\r\nexport class ConversationRecognizerFactory {\r\n    public static fromConfig(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig): ConversationRecognizer {\r\n        return new ConversationTranslatorRecognizer(conversation, speechConfig, audioConfig);\r\n    }\r\n}\r\n\r\n/**\r\n * Sends messages to the Conversation Translator websocket and listens for incoming events containing websocket messages.\r\n * Based off the recognizers in the SDK folder.\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConversationTranslatorRecognizer extends Recognizer implements ConversationRecognizer {\r\n\r\n    private privIsDisposed: boolean;\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privConnection: Connection;\r\n    private privConversation: ConversationImpl;\r\n    private privTimeoutToken: any;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number;\r\n    private privClearTimeout: (id: number) => void;\r\n\r\n    public constructor(conversation: IConversation, speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const serviceConfigImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(serviceConfigImpl, \"speechConfig\");\r\n        const conversationImpl = conversation as ConversationImpl;\r\n        Contracts.throwIfNull(conversationImpl, \"conversationImpl\");\r\n\r\n        super(audioConfig, serviceConfigImpl.properties, new ConversationConnectionFactory());\r\n\r\n        this.privConversation = conversationImpl;\r\n        this.privIsDisposed = false;\r\n        this.privProperties = serviceConfigImpl.properties.clone();\r\n        this.privConnection = Connection.fromRecognizer(this);\r\n        this.privSetTimeout = (typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") ? Timeout.setTimeout : setTimeout;\r\n        this.privClearTimeout = (typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") ? Timeout.clearTimeout : clearTimeout;\r\n    }\r\n\r\n    public canceled: (sender: ConversationRecognizer, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: ConversationRecognizer, event: ConversationExpirationEventArgs) => void;\r\n    public lockRoomCommandReceived: (sender: ConversationRecognizer, event: LockRoomEventArgs) => void;\r\n    public muteAllCommandReceived: (sender: ConversationRecognizer, event: MuteAllEventArgs) => void;\r\n    public participantJoinCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantLeaveCommandReceived: (sender: ConversationRecognizer, event: ParticipantEventArgs) => void;\r\n    public participantUpdateCommandReceived: (sender: ConversationRecognizer, event: ParticipantAttributeEventArgs) => void;\r\n    public connectionOpened: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public connectionClosed: (sender: ConversationRecognizer, event: SessionEventArgs) => void;\r\n    public translationReceived: (sender: ConversationRecognizer, event: ConversationReceivedTranslationEventArgs) => void;\r\n    public participantsListReceived: (sender: ConversationRecognizer, event: ParticipantsListEventArgs) => void;\r\n    public participantsChanged: (sender: ConversationRecognizer, event: ConversationParticipantsChangedEventArgs) => void;\r\n\r\n    public set connected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.connected = cb;\r\n    }\r\n\r\n    public set disconnected(cb: (e: ConnectionEventArgs) => void) {\r\n        this.privConnection.disconnected = cb;\r\n    }\r\n\r\n    /**\r\n     * Return the speech language used by the recognizer\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Return the properties for the recognizer\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    /**\r\n     * Connect to the recognizer\r\n     * @param token\r\n     */\r\n    public connect(token: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n            this.privReco.conversationTranslatorToken = token;\r\n            this.resetConversationTimeout();\r\n            this.privReco.connectAsync(cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnect from the recognizer\r\n     */\r\n    public disconnect(cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (this.privTimeoutToken !== undefined) {\r\n               this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privReco.disconnect().then(() => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }, (error: string) => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send the mute all participants command to the websocket\r\n     * @param conversationId\r\n     * @param participantId\r\n     * @param isMuted\r\n     */\r\n    public sendRequest(command: string, cb?: () => void, err?: (e: string) => void): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            this.sendMessage(command, cb, err);\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the recognizer.\r\n            this.dispose(true).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Close and dispose the recognizer\r\n     */\r\n    public async close(): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            this.privConnection?.closeConnection();\r\n            this.privConnection?.close();\r\n            this.privConnection = undefined;\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose the recognizer\r\n     * @param disposing\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n        if (disposing) {\r\n            if (this.privTimeoutToken !== undefined) {\r\n                this.privClearTimeout(this.privTimeoutToken);\r\n            }\r\n            this.privIsDisposed = true;\r\n            if (!!this.privConnection) {\r\n                this.privConnection.closeConnection();\r\n                this.privConnection.close();\r\n                this.privConnection = undefined;\r\n            }\r\n            await super.dispose(disposing);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the config for the recognizer\r\n     * @param speechConfig\r\n     */\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(speechConfig, this.privProperties);\r\n    }\r\n\r\n    /**\r\n     * Create the service recognizer.\r\n     * The audio source is redundnant here but is required by the implementation.\r\n     * @param authentication\r\n     * @param connectionFactory\r\n     * @param audioConfig\r\n     * @param recognizerConfig\r\n     */\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n\r\n        const audioSource: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n\r\n        return new ConversationServiceAdapter(authentication, connectionFactory, audioSource, recognizerConfig, this);\r\n    }\r\n\r\n    private sendMessage(msg: string, cb?: Callback, err?: Callback): void {\r\n        const withAsync = this.privReco as ConversationServiceAdapter;\r\n        function PromiseToEmptyCallback<T>(promise: Promise<T>, cb?: Callback, err?: Callback): void {\r\n            if (!!promise) {\r\n                promise.then((result: T): void => {\r\n                    try {\r\n                        if (!!cb) {\r\n                            cb();\r\n                        }\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(`'Unhandled error on promise callback: ${e}'`);\r\n                        }\r\n                    }\r\n                }, (reason: any) => {\r\n                    try {\r\n                        if (!!err) {\r\n                            err(reason);\r\n                        }\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                    }\r\n                });\r\n            } else {\r\n                if (!!err) {\r\n                    err(\"Null promise\");\r\n                }\r\n            }\r\n        }\r\n\r\n        PromiseToEmptyCallback(withAsync.sendMessageAsync(msg), cb, err);\r\n        this.resetConversationTimeout();\r\n    }\r\n\r\n    private resetConversationTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            this.privClearTimeout(this.privTimeoutToken);\r\n        }\r\n\r\n        this.privTimeoutToken = this.privSetTimeout((): void => {\r\n            this.sendRequest(this.privConversation.getKeepAlive());\r\n        }, 60000);\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { SessionEventArgs } from \"../Exports\";\r\nimport { ParticipantChangedReason } from \"./Exports\";\r\nimport { IParticipant } from \"./IParticipant\";\r\n\r\nexport class ConversationParticipantsChangedEventArgs extends SessionEventArgs {\r\n    private privReason: ParticipantChangedReason;\r\n    private privParticipant: IParticipant[];\r\n\r\n    public constructor(reason: ParticipantChangedReason, participants: IParticipant[], sessionId?: string) {\r\n        super(sessionId);\r\n        this.privReason = reason;\r\n        this.privParticipant = participants;\r\n    }\r\n\r\n    public get reason(): ParticipantChangedReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get participants(): IParticipant[] {\r\n        return this.privParticipant;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { RecognitionEventArgs } from \"../Exports\";\r\nimport { ConversationTranslationResult } from \"./Exports\";\r\n\r\nexport class ConversationTranslationEventArgs extends RecognitionEventArgs {\r\n    private privResult: ConversationTranslationResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ConversationTranslationResult} result - The translation recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: ConversationTranslationResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @returns {ConversationTranslationResult} the recognition result.\r\n     */\r\n    public get result(): ConversationTranslationResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { ConversationConnectionConfig } from \"../../common.speech/Exports\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SessionEventArgs,\r\n    SpeechTranslationConfig,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognizer\r\n} from \"../Exports\";\r\nimport { ConversationImpl } from \"./Conversation\";\r\nimport {\r\n    ConversationCommon,\r\n    ConversationExpirationEventArgs,\r\n    ConversationHandler,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    IConversationTranslator,\r\n    Participant,\r\n} from \"./Exports\";\r\nimport { Callback, IConversation } from \"./IConversation\";\r\n\r\nexport enum SpeechState {\r\n    Inactive, Connecting, Connected\r\n}\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\n// child class of TranslationRecognizer meant only for use with ConversationTranslator\r\nclass ConversationTranslationRecognizer extends TranslationRecognizer {\r\n    private privTranslator: ConversationTranslator;\r\n    private privSpeechState: SpeechState;\r\n    public constructor(speechConfig: SpeechTranslationConfig, audioConfig?: AudioConfig, translator?: ConversationTranslator) {\r\n        super(speechConfig, audioConfig);\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        if (!!translator) {\r\n            this.privTranslator = translator;\r\n            this.sessionStarted = () => {\r\n                this.privSpeechState = SpeechState.Connected;\r\n            };\r\n\r\n            this.sessionStopped = () => {\r\n                this.privSpeechState = SpeechState.Inactive;\r\n            };\r\n\r\n            this.recognized = async (tr: TranslationRecognizer, e: TranslationRecognitionEventArgs) => {\r\n                // TODO: add support for getting recognitions from here if own speech\r\n\r\n                // if there is an error connecting to the conversation service from the speech service the error will be returned in the ErrorDetails field.\r\n                if (e.result?.errorDetails) {\r\n                    await this.cancelSpeech();\r\n                    // TODO: format the error message contained in 'errorDetails'\r\n                    this.fireCancelEvent(e.result.errorDetails);\r\n                }\r\n            };\r\n\r\n            this.canceled = async (r: TranslationRecognizer, e: TranslationRecognitionCanceledEventArgs) => {\r\n                if (this.privSpeechState !== SpeechState.Inactive) {\r\n                    try {\r\n                        await this.cancelSpeech();\r\n                    } catch (error) {\r\n                        this.privSpeechState = SpeechState.Inactive;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n    public get state(): SpeechState {\r\n        return this.privSpeechState;\r\n    }\r\n\r\n    public set state(newState: SpeechState) {\r\n        this.privSpeechState = newState;\r\n    }\r\n\r\n    public onConnection(): void {\r\n        this.privSpeechState = SpeechState.Connected;\r\n    }\r\n\r\n    public async onDisconnection(): Promise<void> {\r\n        this.privSpeechState = SpeechState.Inactive;\r\n        await this.cancelSpeech();\r\n    }\r\n\r\n    /**\r\n     * Fire a cancel event\r\n     * @param error\r\n     */\r\n    private fireCancelEvent(error: any): void {\r\n        try {\r\n            if (!!this.privTranslator.canceled) {\r\n                const cancelEvent: ConversationTranslationCanceledEventArgs = new ConversationTranslationCanceledEventArgs(\r\n                    error?.reason ?? CancellationReason.Error,\r\n                    error?.errorDetails ?? error,\r\n                    error?.errorCode ?? CancellationErrorCode.RuntimeError,\r\n                    undefined,\r\n                    error?.sessionId);\r\n\r\n                this.privTranslator.canceled(this.privTranslator, cancelEvent);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.stopContinuousRecognitionAsync();\r\n            await this.privReco?.disconnect();\r\n            this.privSpeechState = SpeechState.Inactive;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/***\r\n * Join, leave or connect to a conversation.\r\n */\r\nexport class ConversationTranslator extends ConversationCommon implements IConversationTranslator, IDisposable {\r\n\r\n    private privSpeechRecognitionLanguage: string;\r\n    private privProperties: PropertyCollection;\r\n    private privIsDisposed: boolean = false;\r\n    private privCTRecognizer: ConversationTranslationRecognizer;\r\n    private privIsSpeaking: boolean = false;\r\n    private privConversation: ConversationImpl;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privPlaceholderKey: string = \"abcdefghijklmnopqrstuvwxyz012345\";\r\n    private privPlaceholderRegion: string = \"westus\";\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        super(audioConfig);\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechRecognitionLanguage;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.privConversation?.participants;\r\n    }\r\n\r\n    public canceled: (sender: ConversationHandler, event: ConversationTranslationCanceledEventArgs) => void;\r\n    public conversationExpiration: (sender: IConversationTranslator, event: ConversationExpirationEventArgs) => void;\r\n    public participantsChanged: (sender: IConversationTranslator, event: ConversationParticipantsChangedEventArgs) => void;\r\n    public sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n    public textMessageReceived: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribed: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n    public transcribing: (sender: IConversationTranslator, event: ConversationTranslationEventArgs) => void;\r\n\r\n    /**\r\n     * Join a conversation. If this is the host, pass in the previously created Conversation object.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversation: IConversation, nickname: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void;\r\n    public joinConversationAsync(conversation: any, nickname: string, param1?: string | Callback, param2?: Callback, param3?: Callback): void {\r\n\r\n        try {\r\n\r\n            if (typeof conversation === \"string\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                if (!!this.privConversation) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedStart), param3);\r\n                }\r\n\r\n                let lang: string = param1 as string;\r\n                if (lang === undefined || lang === null || lang === \"\") { lang = ConversationConnectionConfig.defaultLanguageCode; }\r\n\r\n                // create a placeholder config\r\n                this.privSpeechTranslationConfig = SpeechTranslationConfig.fromSubscription(\r\n                    this.privPlaceholderKey,\r\n                    this.privPlaceholderRegion);\r\n                this.privSpeechTranslationConfig.setProfanity(ProfanityOption.Masked);\r\n                this.privSpeechTranslationConfig.addTargetLanguage(lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], lang);\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], nickname);\r\n\r\n                const endpoint: string = this.privProperties.getProperty(PropertyId.ConversationTranslator_Host);\r\n                if (endpoint) {\r\n                    this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Host], endpoint);\r\n                }\r\n                const speechEndpointHost: string = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Host);\r\n                if (speechEndpointHost) {\r\n                    this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Host], speechEndpointHost);\r\n                }\r\n\r\n                // join the conversation\r\n                this.privConversation = new ConversationImpl(this.privSpeechTranslationConfig);\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                this.privConversation.joinConversationAsync(\r\n                    conversation,\r\n                    nickname,\r\n                    lang,\r\n                    ((result: string) => {\r\n\r\n                        if (!result) {\r\n                            this.handleError(new Error(this.privErrors.permissionDeniedConnect), param3);\r\n                        }\r\n\r\n                        this.privSpeechTranslationConfig.authorizationToken = result;\r\n\r\n                        // connect to the ws\r\n                        this.privConversation.startConversationAsync(\r\n                            (() => {\r\n                                this.handleCallback(param2, param3);\r\n                            }),\r\n                            ((error: any) => {\r\n                                this.handleError(error, param3);\r\n                            }));\r\n\r\n                    }),\r\n                    ((error: any) => {\r\n                        this.handleError(error, param3);\r\n                    }));\r\n\r\n            } else if (typeof conversation === \"object\") {\r\n\r\n                Contracts.throwIfNullOrUndefined(conversation, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversation id\"));\r\n                Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n\r\n                // save the nickname\r\n                this.privProperties.setProperty(PropertyId.ConversationTranslator_Name, nickname);\r\n                // ref the conversation object\r\n                this.privConversation = conversation as ConversationImpl;\r\n                // ref the conversation translator object\r\n                this.privConversation.conversationTranslator = this;\r\n\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedConnect);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                this.privSpeechTranslationConfig = conversation.config;\r\n\r\n                this.handleCallback(param1 as Callback, param2);\r\n            } else {\r\n                this.handleError(\r\n                    new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"invalid conversation type\")),\r\n                    param2);\r\n            }\r\n\r\n        } catch (error) {\r\n            this.handleError(error, typeof param1 === \"string\" ? param3 : param2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Leave the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\r\n\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n\r\n            // stop the speech websocket\r\n            await this.cancelSpeech();\r\n            // stop the websocket\r\n            await this.privConversation.endConversationImplAsync();\r\n            // https delete request\r\n            await this.privConversation.deleteConversationImplAsync();\r\n            this.dispose();\r\n\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n\r\n        try {\r\n            Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", message));\r\n\r\n            this.privConversation?.sendTextMessageAsync(message, cb, err);\r\n        } catch (error) {\r\n\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                Contracts.throwIfNullOrUndefined(this.privConversation, this.privErrors.permissionDeniedSend);\r\n                Contracts.throwIfNullOrUndefined(this.privConversation.room.token, this.privErrors.permissionDeniedConnect);\r\n\r\n                if (this.privCTRecognizer === undefined) {\r\n                    await this.connectTranslatorRecognizer();\r\n                }\r\n                Contracts.throwIfNullOrUndefined(this.privCTRecognizer, this.privErrors.permissionDeniedSend);\r\n\r\n                if (!this.canSpeak) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n                }\r\n\r\n                await this.startContinuousRecognition();\r\n\r\n                this.privIsSpeaking = true;\r\n            } catch (error) {\r\n                this.privIsSpeaking = false;\r\n                await this.cancelSpeech();\r\n                throw error;\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Stop speaking\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            try {\r\n                if (!this.privIsSpeaking) {\r\n                    // stop speech\r\n                    await this.cancelSpeech();\r\n                    return;\r\n                }\r\n\r\n                // stop the recognition but leave the websocket open\r\n                this.privIsSpeaking = false;\r\n                await new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n                    this.privCTRecognizer?.stopContinuousRecognitionAsync(resolve, reject);\r\n                });\r\n\r\n            } catch (error) {\r\n                await this.cancelSpeech();\r\n            }\r\n        })(), cb, err);\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string, success?: () => void, err?: (error: string) => void): void {\r\n        marshalPromiseToCallbacks((async (): Promise<void> => {\r\n            if (this.isDisposed && !this.privIsSpeaking) {\r\n                return;\r\n            }\r\n            await this.cancelSpeech();\r\n            this.privIsDisposed = true;\r\n            this.privSpeechTranslationConfig?.close();\r\n            this.privSpeechRecognitionLanguage = undefined;\r\n            this.privProperties = undefined;\r\n            this.privAudioConfig = undefined;\r\n            this.privSpeechTranslationConfig = undefined;\r\n            this.privConversation?.dispose();\r\n            this.privConversation = undefined;\r\n        })(), success, err);\r\n    }\r\n\r\n    /**\r\n     * Cancel the speech websocket\r\n     */\r\n    private async cancelSpeech(): Promise<void> {\r\n        try {\r\n            this.privIsSpeaking = false;\r\n            await this.privCTRecognizer?.onDisconnection();\r\n            this.privCTRecognizer = undefined;\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Connect to the speech translation recognizer.\r\n     * Currently there is no language validation performed before sending the SpeechLanguage code to the service.\r\n     * If it's an invalid language the raw error will be: 'Error during WebSocket handshake: Unexpected response code: 400'\r\n     * e.g. pass in 'fr' instead of 'fr-FR', or a text-only language 'cy'\r\n     */\r\n    private async connectTranslatorRecognizer(): Promise<void> {\r\n        try {\r\n\r\n            if (this.privAudioConfig === undefined) {\r\n                this.privAudioConfig = AudioConfig.fromDefaultMicrophoneInput();\r\n            }\r\n\r\n            // clear the temp subscription key if it's a participant joining\r\n            if (this.privSpeechTranslationConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_Key])\r\n                === this.privPlaceholderKey) {\r\n                this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Key], \"\");\r\n            }\r\n\r\n            // TODO\r\n            const token: string = encodeURIComponent(this.privConversation.room.token);\r\n\r\n            let endpointHost: string = this.privSpeechTranslationConfig.getProperty(\r\n                PropertyId[PropertyId.SpeechServiceConnection_Host], ConversationConnectionConfig.speechHost);\r\n            endpointHost = endpointHost.replace(\"{region}\", this.privConversation.room.cognitiveSpeechRegion);\r\n\r\n            const url: string = `wss://${endpointHost}${ConversationConnectionConfig.speechPath}?${ConversationConnectionConfig.configParams.token}=${token}`;\r\n\r\n            this.privSpeechTranslationConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_Endpoint], url);\r\n\r\n            this.privCTRecognizer = new ConversationTranslationRecognizer(this.privSpeechTranslationConfig, this.privAudioConfig, this);\r\n        } catch (error) {\r\n            await this.cancelSpeech();\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the start speaking request\r\n     */\r\n    private startContinuousRecognition(): Promise<void> {\r\n        return new Promise((resolve: () => void, reject: (error: string) => void): void => {\r\n            this.privCTRecognizer.startContinuousRecognitionAsync(resolve, reject);\r\n        });\r\n    }\r\n\r\n    private get canSpeak(): boolean {\r\n\r\n        // is there a Conversation websocket available and has the Recognizer been set up\r\n        if (!this.privConversation.isConnected || !this.privCTRecognizer) {\r\n            return false;\r\n        }\r\n\r\n        // is the user already speaking\r\n        if (this.privIsSpeaking || this.privCTRecognizer.state === SpeechState.Connected || this.privCTRecognizer.state === SpeechState.Connecting) {\r\n            return false;\r\n        }\r\n\r\n        // is the user muted\r\n        if (this.privConversation.isMutedByHost) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport { PropertyCollection } from \"../Exports\";\r\n\r\n/**\r\n * Represents a user in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IUser {\r\n    /** Gets the user's ID */\r\n    readonly userId: string;\r\n}\r\n\r\nexport class User implements IUser {\r\n    private privUserId: string;\r\n\r\n    constructor(userId: string) {\r\n        this.privUserId = userId;\r\n    }\r\n\r\n    public get userId(): string {\r\n        return this.privUserId;\r\n    }\r\n}\r\n\r\nexport interface VoiceSignature {\r\n    Version: number;\r\n    Tag: string;\r\n    Data: string;\r\n}\r\n\r\nexport interface TranscriptionParticipant {\r\n    /** The unique identifier for the participant. */\r\n    readonly id: string;\r\n    /** The participant's preferred spoken language. */\r\n    readonly preferredLanguage: string;\r\n    /** The participant's voice signature */\r\n    readonly voice: string;\r\n}\r\n\r\n/**\r\n * Represents a participant in a conversation.\r\n * Added in version 1.4.0\r\n */\r\nexport interface IParticipant extends TranscriptionParticipant {\r\n    /** Gets the colour of the user's avatar as an HTML hex string (e.g. FF0000 for red). */\r\n    readonly avatar: string;\r\n    /**\r\n     * The participant's display name. Please note that there may be more than one participant\r\n     * with the same name. You can use <see cref=\"Id\"/> property to tell them apart.\r\n     */\r\n    readonly displayName: string;\r\n    /** Gets whether or not this participant is the host. */\r\n    readonly isHost: boolean;\r\n    /** Gets whether or not this participant is muted. */\r\n    readonly isMuted: boolean;\r\n    /** Gets whether or not the participant is using Text To Speech (TTS). */\r\n    readonly isUsingTts: boolean;\r\n    /** Contains properties of the participant. */\r\n    readonly properties: PropertyCollection;\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nexport class Participant implements IParticipant {\r\n    private privAvatar: string;\r\n    private privDisplayName: string;\r\n    private privId: string;\r\n    private privIsHost: boolean;\r\n    private privIsMuted: boolean;\r\n    private privIsUsingTts: boolean;\r\n    private privPreferredLanguage: string;\r\n    private privVoice: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    constructor(id: string, avatar: string, displayName: string, isHost: boolean, isMuted: boolean, isUsingTts: boolean, preferredLanguage: string, voice?: string) {\r\n        this.privId = id;\r\n        this.privAvatar = avatar;\r\n        this.privDisplayName = displayName;\r\n        this.privIsHost = isHost;\r\n        this.privIsMuted = isMuted;\r\n        this.privIsUsingTts = isUsingTts;\r\n        this.privPreferredLanguage = preferredLanguage;\r\n        this.privVoice = voice;\r\n        this.privProperties = new PropertyCollection();\r\n    }\r\n\r\n    public static From(id: string, language: string, voice: string): IParticipant {\r\n        return new Participant(id, \"\", id, false, false, false, language, voice);\r\n    }\r\n\r\n    public get avatar(): string {\r\n        return this.privAvatar;\r\n    }\r\n\r\n    public get displayName(): string {\r\n        return this.privDisplayName;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get preferredLanguage(): string {\r\n        return this.privPreferredLanguage;\r\n    }\r\n\r\n    public get isHost(): boolean {\r\n        return this.privIsHost;\r\n    }\r\n\r\n    public get isMuted(): boolean {\r\n        return this.privIsMuted;\r\n    }\r\n\r\n    public get isUsingTts(): boolean {\r\n        return this.privIsUsingTts;\r\n    }\r\n\r\n    public get voice(): string {\r\n        return this.privVoice;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// Multi-device Conversation is a Preview feature.\r\n\r\nimport {\r\n    ConversationConnectionConfig,\r\n    ConversationManager,\r\n    ConversationReceivedTranslationEventArgs,\r\n    ConversationRecognizer,\r\n    ConversationRecognizerFactory,\r\n    ConversationTranslatorCommandTypes,\r\n    ConversationTranslatorMessageTypes,\r\n    IInternalConversation,\r\n    IInternalParticipant,\r\n    InternalParticipants,\r\n    LockRoomEventArgs,\r\n    MuteAllEventArgs,\r\n    ParticipantAttributeEventArgs,\r\n    ParticipantEventArgs,\r\n    ParticipantsListEventArgs,\r\n    TranscriberRecognizer\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    IDisposable,\r\n    IErrorMessages,\r\n    marshalPromiseToCallbacks\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    Connection,\r\n    ConnectionEventArgs,\r\n    ConversationExpirationEventArgs,\r\n    ConversationParticipantsChangedEventArgs,\r\n    ConversationTranslationCanceledEventArgs,\r\n    ConversationTranslationEventArgs,\r\n    ConversationTranslator,\r\n    Participant,\r\n    ParticipantChangedReason,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports\";\r\nimport { SpeechTranslationConfigImpl } from \"../SpeechTranslationConfig\";\r\nimport { Callback, ConversationInfo, IConversation } from \"./IConversation\";\r\nimport { IParticipant, IUser, TranscriptionParticipant } from \"./IParticipant\";\r\n\r\nexport abstract class Conversation implements IConversation {\r\n\r\n    public abstract get authorizationToken(): string;\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    public abstract get config(): SpeechTranslationConfig;\r\n\r\n    public abstract get conversationId(): string;\r\n    public abstract get conversationInfo(): ConversationInfo;\r\n    public abstract get properties(): PropertyCollection;\r\n    public abstract get speechRecognitionLanguage(): string;\r\n    public abstract get participants(): Participant[];\r\n    public abstract get isConnected(): boolean;\r\n\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Create a conversation\r\n     * @param speechConfig\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public static createConversationAsync(speechConfig: SpeechTranslationConfig, arg2?: string | Callback, arg3?: Callback, arg4?: Callback): Conversation {\r\n        Contracts.throwIfNullOrUndefined(speechConfig, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"config\"));\r\n        Contracts.throwIfNullOrUndefined(speechConfig.region, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Region\"));\r\n        if (!speechConfig.subscriptionKey && !speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceAuthorization_Token])) {\r\n            Contracts.throwIfNullOrUndefined(speechConfig.subscriptionKey, ConversationConnectionConfig.restErrors.invalidArgs.replace(\"{arg}\", \"SpeechServiceConnection_Key\"));\r\n        }\r\n        let conversationImpl: ConversationImpl;\r\n        let cb: Callback;\r\n        let err: Callback;\r\n        if (typeof arg2 === \"string\") {\r\n            conversationImpl = new ConversationImpl(speechConfig, arg2);\r\n            cb = arg3;\r\n            err = arg4;\r\n        } else {\r\n            conversationImpl = new ConversationImpl(speechConfig);\r\n            cb = arg2;\r\n            err = arg3;\r\n        }\r\n        conversationImpl.createConversationAsync(\r\n            (() => {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            }),\r\n            (error: any) => {\r\n                if (!!err) {\r\n                    err(error);\r\n                }\r\n            });\r\n        return conversationImpl;\r\n\r\n    }\r\n\r\n    /** Start a conversation. */\r\n    public abstract startConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Delete a conversation. After this no one will be able to join the conversation. */\r\n    public abstract deleteConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** End a conversation. */\r\n    public abstract endConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Lock a conversation. This will prevent new participants from joining. */\r\n    public abstract lockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Add Participant to Conversation. */\r\n    public abstract addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute all other participants in the conversation. After this no other participants will\r\n     * have their speech recognitions broadcast, nor be able to send text messages.\r\n     */\r\n    public abstract muteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Mute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Remove a participant from a conversation using the user id, Participant or User object\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unlocks a conversation. */\r\n    public abstract unlockConversationAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /** Unmute all other participants in the conversation. */\r\n    public abstract unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void;\r\n\r\n    /**\r\n     * Unmute a participant.\r\n     * @param userId A user identifier\r\n     */\r\n    public abstract unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void;\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConversationImpl extends Conversation implements IDisposable {\r\n\r\n    private privConfig: SpeechTranslationConfig;\r\n    private privProperties: PropertyCollection;\r\n    private privLanguage: string;\r\n    private privToken: string;\r\n    private privIsDisposed: boolean = false;\r\n    private privRoom: IInternalConversation;\r\n    private privManager: ConversationManager;\r\n    private privConversationRecognizer: ConversationRecognizer;\r\n    private privIsConnected: boolean = false;\r\n    private privParticipants: InternalParticipants;\r\n    private privIsReady: boolean;\r\n    private privConversationTranslator: ConversationTranslator;\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n    private privErrors: IErrorMessages = ConversationConnectionConfig.restErrors;\r\n    private privConversationId: string = \"\";\r\n    private readonly privTextMessageMaxLength: number;\r\n\r\n    public set conversationTranslator(conversationTranslator: ConversationTranslator) {\r\n        this.privConversationTranslator = conversationTranslator;\r\n    }\r\n\r\n    // get the internal data about a conversation\r\n    public get room(): IInternalConversation {\r\n        return this.privRoom;\r\n    }\r\n\r\n    // get the wrapper for connecting to the websockets\r\n    public get connection(): ConversationRecognizer {\r\n        return this.privConversationRecognizer; // this.privConnection;\r\n    }\r\n\r\n    // get / set the speech auth token\r\n    public get authorizationToken(): string {\r\n        return this.privToken;\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"authorizationToken\");\r\n        this.privToken = value;\r\n    }\r\n\r\n    // get the config\r\n    public get config(): SpeechTranslationConfig {\r\n        return this.privConfig;\r\n    }\r\n\r\n    // get the conversation Id\r\n    public get conversationId(): string {\r\n        return this.privRoom ? this.privRoom.roomId : this.privConversationId;\r\n    }\r\n\r\n    // get the properties\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    // get the speech language\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    public get isMutedByHost(): boolean {\r\n        return this.privParticipants.me?.isHost ? false : this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    public get isConnected(): boolean {\r\n        return this.privIsConnected && this.privIsReady;\r\n    }\r\n\r\n    public get participants(): Participant[] {\r\n        return this.toParticipants(true);\r\n    }\r\n\r\n    public get me(): Participant {\r\n        return this.toParticipant(this.privParticipants.me);\r\n    }\r\n\r\n    public get host(): Participant {\r\n        return this.toParticipant(this.privParticipants.host);\r\n    }\r\n\r\n    /**\r\n     * Create a conversation impl\r\n     * @param speechConfig\r\n     * @param {string} id - optional conversationId\r\n     */\r\n    public constructor(speechConfig: SpeechTranslationConfig, id?: string) {\r\n        super();\r\n        this.privProperties = new PropertyCollection();\r\n        this.privManager = new ConversationManager();\r\n\r\n        // check the speech language\r\n        const language: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n        if (!language) {\r\n            speechConfig.setProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage], ConversationConnectionConfig.defaultLanguageCode);\r\n        }\r\n        this.privLanguage = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        if (!id) {\r\n            // check the target language(s)\r\n            if (speechConfig.targetLanguages.length === 0) {\r\n                speechConfig.addTargetLanguage(this.privLanguage);\r\n            }\r\n\r\n            // check the profanity setting: speech and conversationTranslator should be in sync\r\n            const profanity: string = speechConfig.getProperty(PropertyId[PropertyId.SpeechServiceResponse_ProfanityOption]);\r\n            if (!profanity) {\r\n                speechConfig.setProfanity(ProfanityOption.Masked);\r\n            }\r\n            // check the nickname: it should pass this regex: ^\\w+([\\s-][\\w\\(\\)]+)*$\"\r\n            // TODO: specify the regex required. Nicknames must be unique or get the duplicate nickname error\r\n            // TODO: check what the max length is and if a truncation is required or if the service handles it without an error\r\n            let hostNickname: string = speechConfig.getProperty(PropertyId[PropertyId.ConversationTranslator_Name]);\r\n            if (hostNickname === undefined || hostNickname === null || hostNickname.length <= 1 || hostNickname.length > 50) {\r\n                hostNickname = \"Host\";\r\n            }\r\n            speechConfig.setProperty(PropertyId[PropertyId.ConversationTranslator_Name], hostNickname);\r\n\r\n        } else {\r\n            this.privConversationId = id;\r\n        }\r\n\r\n        // save the speech config for future usage\r\n        this.privConfig = speechConfig;\r\n\r\n        // save the config properties\r\n        const configImpl = speechConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(configImpl, \"speechConfig\");\r\n        this.privProperties = configImpl.properties.clone();\r\n        this.privIsConnected = false;\r\n        this.privParticipants = new InternalParticipants();\r\n        this.privIsReady = false;\r\n        this.privTextMessageMaxLength = 1000;\r\n    }\r\n\r\n    /**\r\n     * Create a new conversation as Host\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public createConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            this.privManager.createOrJoin(this.privProperties, undefined,\r\n                ((room: IInternalConversation) => {\r\n                    if (!room) {\r\n                        this.handleError(new Error(this.privErrors.permissionDeniedConnect), err);\r\n                    }\r\n                    this.privRoom = room;\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts a new conversation as host.\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public startConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // check if there is already a recognizer\r\n            if (!!this.privConversationRecognizer) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedStart), err);\r\n            }\r\n            // check if there is conversation data available\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedConnect);\r\n            // connect to the conversation websocket\r\n            this.privParticipants.meId = this.privRoom.participantId;\r\n            this.privConversationRecognizer = ConversationRecognizerFactory.fromConfig(this, this.privConfig);\r\n\r\n            // Because ConversationTranslator manually sets up and manages the connection, Conversation\r\n            // has to forward serviceRecognizer connection events that usually get passed automatically\r\n            this.privConversationRecognizer.connected = this.onConnected;\r\n            this.privConversationRecognizer.disconnected = this.onDisconnected;\r\n            this.privConversationRecognizer.canceled = this.onCanceled;\r\n\r\n            this.privConversationRecognizer.participantUpdateCommandReceived = this.onParticipantUpdateCommandReceived;\r\n            this.privConversationRecognizer.lockRoomCommandReceived = this.onLockRoomCommandReceived;\r\n            this.privConversationRecognizer.muteAllCommandReceived = this.onMuteAllCommandReceived;\r\n            this.privConversationRecognizer.participantJoinCommandReceived = this.onParticipantJoinCommandReceived;\r\n            this.privConversationRecognizer.participantLeaveCommandReceived = this.onParticipantLeaveCommandReceived;\r\n            this.privConversationRecognizer.translationReceived = this.onTranslationReceived;\r\n            this.privConversationRecognizer.participantsListReceived = this.onParticipantsListReceived;\r\n            this.privConversationRecognizer.conversationExpiration = this.onConversationExpiration;\r\n\r\n            this.privConversationRecognizer.connect(this.privRoom.token,\r\n                (() => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param { IParticipant } participant - participant to add\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public addParticipantAsync(participant: IParticipant, cb?: Callback, err?: Callback): void {\r\n        Contracts.throwIfNullOrUndefined(participant, \"Participant\");\r\n        marshalPromiseToCallbacks(this.addParticipantImplAsync(participant), cb, err);\r\n    }\r\n\r\n    /**\r\n     * Join a conversation as a participant.\r\n     * @param conversation\r\n     * @param nickname\r\n     * @param lang\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public joinConversationAsync(conversationId: string, nickname: string, lang: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            // TODO\r\n            // if (!!this.privConversationRecognizer) {\r\n            //     throw new Error(this.privErrors.permissionDeniedStart);\r\n            // }\r\n            Contracts.throwIfNullOrWhitespace(conversationId, this.privErrors.invalidArgs.replace(\"{arg}\", \"conversationId\"));\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrWhitespace(lang, this.privErrors.invalidArgs.replace(\"{arg}\", \"language\"));\r\n            // join the conversation\r\n            this.privManager.createOrJoin(this.privProperties, conversationId,\r\n                ((room: IInternalConversation) => {\r\n                    Contracts.throwIfNullOrUndefined(room, this.privErrors.permissionDeniedConnect);\r\n                    this.privRoom = room;\r\n                    this.privConfig.authorizationToken = room.cognitiveSpeechAuthToken;\r\n                    // join callback\r\n                    if (!!cb) {\r\n                        cb(room.cognitiveSpeechAuthToken);\r\n                    }\r\n                }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public deleteConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.deleteConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public async deleteConversationImplAsync(): Promise<void> {\r\n            Contracts.throwIfNullOrUndefined(this.privProperties, this.privErrors.permissionDeniedConnect);\r\n            Contracts.throwIfNullOrWhitespace(this.privRoom.token, this.privErrors.permissionDeniedConnect);\r\n            await this.privManager.leave(this.privProperties, this.privRoom.token);\r\n\r\n            this.dispose();\r\n    }\r\n\r\n    /**\r\n     * Issues a request to close the client websockets\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public endConversationAsync(cb?: Callback, err?: Callback): void {\r\n        marshalPromiseToCallbacks(this.endConversationImplAsync(), cb, err);\r\n    }\r\n\r\n    public endConversationImplAsync(): Promise<void> {\r\n        return this.close(true);\r\n    }\r\n\r\n    /**\r\n     * Issues a request to lock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public lockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"lock\")), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getLockCommand(true),\r\n                (() => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privConversationRecognizer, this.privErrors.permissionDeniedSend);\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the user's permissions\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getMuteAllCommand(true),\r\n                (() => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to mute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public muteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getMuteCommand(userId, true), (() => {\r\n                this.handleCallback(cb, err);\r\n            }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to remove a participant from the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public removeParticipantAsync(userId: string | IParticipant | IUser, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            if (!!this.privTranscriberRecognizer && userId.hasOwnProperty(\"id\")) {\r\n                // Assume this is a transcription participant\r\n                marshalPromiseToCallbacks(this.removeParticipantImplAsync(userId as IParticipant), cb, err);\r\n            } else {\r\n                Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n                Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n                if (!this.canSendAsHost) {\r\n                    this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"remove\")), err);\r\n                }\r\n                let participantId: string = \"\";\r\n                if (typeof userId === \"string\") {\r\n                    participantId = userId as string;\r\n                } else if (userId.hasOwnProperty(\"id\")) {\r\n                    const participant: IParticipant = userId as IParticipant;\r\n                    participantId = participant.id;\r\n                } else if (userId.hasOwnProperty(\"userId\")) {\r\n                    const user: IUser = userId as IUser;\r\n                    participantId = user.userId;\r\n                }\r\n                Contracts.throwIfNullOrWhitespace(participantId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n                // check the participant exists\r\n                const index: number = this.participants.findIndex((p: Participant) => p.id === participantId);\r\n                if (index === -1) {\r\n                    this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n                }\r\n                this.privConversationRecognizer?.sendRequest(this.getEjectCommand(participantId), (() => {\r\n                    this.handleCallback(cb, err);\r\n                }),\r\n                    ((error: any) => {\r\n                        this.handleError(error, err);\r\n                    }));\r\n            }\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unlock the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unlockConversationAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unlock\")), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getLockCommand(false), (() => {\r\n                this.handleCallback(cb, err);\r\n            }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute all participants in the conversation\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteAllParticipantsAsync(cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSendAsHost) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedConversation.replace(\"{command}\", \"unmute all\")), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getMuteAllCommand(false), (() => {\r\n                this.handleCallback(cb, err);\r\n            }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Issues a request to unmute a participant in the conversation\r\n     * @param userId\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public unmuteParticipantAsync(userId: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(userId, this.privErrors.invalidArgs.replace(\"{arg}\", \"userId\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            // check the connection is open (host + participant can perform the mute command)\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // if not host, check the participant is not muting another participant\r\n            if (!this.me.isHost && this.me.id !== userId) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedParticipant.replace(\"{command}\", \"mute\")), err);\r\n            }\r\n            // check the user exists\r\n            const exists: number = this.privParticipants.getParticipantIndex(userId);\r\n            if (exists === -1) {\r\n                this.handleError(new Error(this.privErrors.invalidParticipantRequest), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getMuteCommand(userId, false), (() => {\r\n                this.handleCallback(cb, err);\r\n            }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send a text message\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public sendTextMessageAsync(message: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(message, this.privErrors.invalidArgs.replace(\"{arg}\", \"message\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            // TODO: is a max length check required?\r\n            if (message.length > this.privTextMessageMaxLength) {\r\n                this.handleError(new Error(this.privErrors.invalidArgs.replace(\"{arg}\", \"message length\")), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getMessageCommand(message), (() => {\r\n                this.handleCallback(cb, err);\r\n            }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change nickname\r\n     * @param message\r\n     * @param cb\r\n     * @param err\r\n     */\r\n    public changeNicknameAsync(nickname: string, cb?: Callback, err?: Callback): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privIsDisposed);\r\n            Contracts.throwIfDisposed(this.privConversationRecognizer.isDisposed());\r\n            Contracts.throwIfNullOrWhitespace(nickname, this.privErrors.invalidArgs.replace(\"{arg}\", \"nickname\"));\r\n            Contracts.throwIfNullOrUndefined(this.privRoom, this.privErrors.permissionDeniedSend);\r\n            if (!this.canSend) {\r\n                this.handleError(new Error(this.privErrors.permissionDeniedSend), err);\r\n            }\r\n            this.privConversationRecognizer?.sendRequest(this.getChangeNicknameCommand(nickname), (() => {\r\n                this.handleCallback(cb, err);\r\n            }),\r\n                ((error: any) => {\r\n                    this.handleError(error, err);\r\n                }));\r\n        } catch (error) {\r\n            this.handleError(error, err);\r\n        }\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose(reason?: string): void {\r\n        if (this.isDisposed) {\r\n            return;\r\n        }\r\n        this.privIsDisposed = true;\r\n        this.config?.close();\r\n        this.privConfig = undefined;\r\n        this.privLanguage = undefined;\r\n        this.privProperties = undefined;\r\n        this.privRoom = undefined;\r\n        this.privToken = undefined;\r\n        this.privManager = undefined;\r\n        this.privIsConnected = false;\r\n        this.privIsReady = false;\r\n        this.privParticipants = undefined;\r\n    }\r\n\r\n    public get transcriberRecognizer(): TranscriberRecognizer {\r\n        return this.privTranscriberRecognizer;\r\n    }\r\n\r\n    public async connectTranscriberRecognizer(recognizer: TranscriberRecognizer): Promise<void> {\r\n        if (!!this.privTranscriberRecognizer) {\r\n            await this.privTranscriberRecognizer.close();\r\n        }\r\n        this.privTranscriberRecognizer = recognizer;\r\n        this.privTranscriberRecognizer.conversation = this;\r\n    }\r\n\r\n    public get conversationInfo(): ConversationInfo {\r\n        const convId: string = this.conversationId;\r\n        const p: TranscriptionParticipant[] = this.participants.map((part: Participant) => {\r\n            return {\r\n                id: part.id,\r\n                preferredLanguage: part.preferredLanguage,\r\n                voice: part.voice\r\n            };\r\n        });\r\n        const props: { [id: string]: string } = {};\r\n        for (const key of ConversationConnectionConfig.transcriptionEventKeys) {\r\n            const val: string = this.properties.getProperty(key, \"\");\r\n            if (val !== \"\") {\r\n                props[key] = val;\r\n            }\r\n        }\r\n        const info: ConversationInfo = { id: convId, participants: p, conversationProperties: props };\r\n        return info;\r\n    }\r\n\r\n    public getKeepAlive(): string {\r\n        const nickname: string = (!!this.me) ? this.me.displayName : \"default_nickname\";\r\n        return JSON.stringify({\r\n            // tslint:disable-next-line: object-literal-shorthand\r\n            id: \"0\",\r\n            nickname,\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.keepAlive\r\n        });\r\n    }\r\n\r\n    /** websocket callbacks */\r\n    private onConnected = (e: ConnectionEventArgs): void => {\r\n        this.privIsConnected = true;\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStarted) {\r\n                this.privConversationTranslator.sessionStarted(this.privConversationTranslator, e);\r\n            }\r\n            if (!!this.privTranscriberRecognizer?.conversationStarted) {\r\n                this.privTranscriberRecognizer.conversationStarted(this.privTranscriberRecognizer, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onDisconnected = async (e: ConnectionEventArgs): Promise<void> => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.sessionStopped) {\r\n                this.privConversationTranslator.sessionStopped(this.privConversationTranslator, e);\r\n            }\r\n            if (!!this.privTranscriberRecognizer?.conversationStopped) {\r\n                this.privTranscriberRecognizer.conversationStopped(this.privTranscriberRecognizer, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        } finally {\r\n            await this.close(false);\r\n        }\r\n    }\r\n\r\n    private onCanceled = async (r: ConversationRecognizer, e: ConversationTranslationCanceledEventArgs): Promise<void> => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.canceled) {\r\n                this.privConversationTranslator.canceled(this.privConversationTranslator, e);\r\n            }\r\n            if (!!this.privTranscriberRecognizer?.conversationCanceled) {\r\n                this.privTranscriberRecognizer.conversationCanceled(this.privTranscriberRecognizer, e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onParticipantUpdateCommandReceived = (r: ConversationRecognizer, e: ParticipantAttributeEventArgs): void => {\r\n        try {\r\n            const updatedParticipant: any = this.privParticipants.getParticipant(e.id);\r\n            if (updatedParticipant !== undefined) {\r\n\r\n                switch (e.key) {\r\n                    case ConversationTranslatorCommandTypes.changeNickname:\r\n                        updatedParticipant.displayName = e.value;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setUseTTS:\r\n                        updatedParticipant.useTts = e.value;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setProfanityFiltering:\r\n                        updatedParticipant.profanity = e.value;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setMute:\r\n                        updatedParticipant.isMuted = e.value;\r\n                        break;\r\n                    case ConversationTranslatorCommandTypes.setTranslateToLanguages:\r\n                        updatedParticipant.translateToLanguages = e.value;\r\n                        break;\r\n                }\r\n                this.privParticipants.addOrUpdateParticipant(updatedParticipant);\r\n\r\n                if (!!this.privConversationTranslator?.participantsChanged) {\r\n                    this.privConversationTranslator?.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                            [this.toParticipant(updatedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onLockRoomCommandReceived = (r: ConversationRecognizer, e: LockRoomEventArgs): void => {\r\n        // TODO\r\n    }\r\n\r\n    private onMuteAllCommandReceived = (r: ConversationRecognizer, e: MuteAllEventArgs): void => {\r\n        try {\r\n            this.privParticipants.participants.forEach((p: IInternalParticipant) => p.isMuted = (p.isHost ? false : e.isMuted));\r\n            if (!!this.privConversationTranslator?.participantsChanged) {\r\n                this.privConversationTranslator?.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.Updated,\r\n                        this.toParticipants(false), e.sessionId));\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onParticipantJoinCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(e.participant);\r\n            if (newParticipant !== undefined) {\r\n                if (!!this.privConversationTranslator?.participantsChanged) {\r\n                    this.privConversationTranslator?.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation,\r\n                            [this.toParticipant(newParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onParticipantLeaveCommandReceived = (r: ConversationRecognizer, e: ParticipantEventArgs): void => {\r\n        try {\r\n            const ejectedParticipant: IInternalParticipant = this.privParticipants.getParticipant(e.participant.id);\r\n            if (ejectedParticipant !== undefined) {\r\n                // remove the participant from the internal participants list\r\n                this.privParticipants.deleteParticipant(e.participant.id);\r\n                if (!!this.privConversationTranslator?.participantsChanged) {\r\n                    // notify subscribers that the participant has left the conversation\r\n                    this.privConversationTranslator?.participantsChanged(\r\n                        this.privConversationTranslator,\r\n                        new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.LeftConversation,\r\n                            [this.toParticipant(ejectedParticipant)], e.sessionId));\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onTranslationReceived = (r: ConversationRecognizer, e: ConversationReceivedTranslationEventArgs): void => {\r\n        try {\r\n            switch (e.command) {\r\n                case ConversationTranslatorMessageTypes.final:\r\n                    if (!!this.privConversationTranslator?.transcribed) {\r\n                        this.privConversationTranslator?.transcribed(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.partial:\r\n                    if (!!this.privConversationTranslator?.transcribing) {\r\n                        this.privConversationTranslator?.transcribing(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n                case ConversationTranslatorMessageTypes.instantMessage:\r\n                    if (!!this.privConversationTranslator?.textMessageReceived) {\r\n                        this.privConversationTranslator?.textMessageReceived(\r\n                            this.privConversationTranslator,\r\n                            new ConversationTranslationEventArgs(e.payload, undefined, e.sessionId));\r\n                    }\r\n                    break;\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onParticipantsListReceived = (r: ConversationRecognizer, e: ParticipantsListEventArgs): void => {\r\n        try {\r\n            // check if the session token needs to be updated\r\n            if (e.sessionToken !== undefined && e.sessionToken !== null) {\r\n                this.privRoom.token = e.sessionToken;\r\n            }\r\n            // save the participants\r\n            this.privParticipants.participants = [...e.participants];\r\n            // enable the conversation\r\n            if (this.privParticipants.me !== undefined) {\r\n                this.privIsReady = true;\r\n            }\r\n            if (!!this.privConversationTranslator?.participantsChanged) {\r\n                this.privConversationTranslator?.participantsChanged(\r\n                    this.privConversationTranslator,\r\n                    new ConversationParticipantsChangedEventArgs(ParticipantChangedReason.JoinedConversation, this.toParticipants(true), e.sessionId));\r\n            }\r\n            // if this is the host, update the nickname if needed\r\n            if (this.me.isHost) {\r\n                const nickname: string = this.privConversationTranslator?.properties.getProperty(PropertyId.ConversationTranslator_Name);\r\n                if (nickname !== undefined && nickname.length > 0 && nickname !== this.me.displayName) {\r\n                    // issue a change nickname request\r\n                    this.changeNicknameAsync(nickname);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private onConversationExpiration = (r: ConversationRecognizer, e: ConversationExpirationEventArgs): void => {\r\n        try {\r\n            if (!!this.privConversationTranslator?.conversationExpiration) {\r\n                this.privConversationTranslator?.conversationExpiration(\r\n                    this.privConversationTranslator,\r\n                    e);\r\n            }\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    private addParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        const newParticipant: IInternalParticipant = this.privParticipants.addOrUpdateParticipant(participant);\r\n        if (newParticipant !== undefined) {\r\n            if (!!this.privTranscriberRecognizer) {\r\n                const conversationInfo = this.conversationInfo;\r\n                conversationInfo.participants = [participant];\r\n                return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"join\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeParticipantImplAsync(participant: IParticipant): Promise<void> {\r\n        this.privParticipants.deleteParticipant(participant.id);\r\n        const conversationInfo = this.conversationInfo;\r\n        conversationInfo.participants = [participant];\r\n        return this.privTranscriberRecognizer.pushConversationEvent(conversationInfo, \"leave\");\r\n    }\r\n\r\n    private async close(dispose: boolean): Promise<void> {\r\n        try {\r\n            this.privIsConnected = false;\r\n            await this.privConversationRecognizer?.close();\r\n            this.privConversationRecognizer = undefined;\r\n            this.privConversationTranslator?.dispose();\r\n        } catch (e) {\r\n            // ignore error\r\n            throw e;\r\n        }\r\n        if (dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n\r\n    /** Helpers */\r\n    private get canSend(): boolean {\r\n        return this.privIsConnected && !this.privParticipants.me?.isMuted;\r\n    }\r\n\r\n    private get canSendAsHost(): boolean {\r\n        return this.privIsConnected && this.privParticipants.me?.isHost;\r\n    }\r\n\r\n    private handleCallback(cb: any, err: any): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    private handleError(error: any, err: any): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error as Error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Participant Helpers */\r\n    private toParticipants(includeHost: boolean): Participant[] {\r\n\r\n        const participants: Participant[] = this.privParticipants.participants.map((p: IInternalParticipant) => {\r\n            return this.toParticipant(p);\r\n        });\r\n        if (!includeHost) {\r\n            return participants.filter((p: Participant) => p.isHost === false);\r\n        } else {\r\n            return participants;\r\n        }\r\n    }\r\n\r\n    private toParticipant(p: IInternalParticipant): Participant {\r\n        return new Participant(p.id, p.avatar, p.displayName, p.isHost, p.isMuted, p.isUsingTts, p.preferredLanguage, p.voice);\r\n    }\r\n\r\n    private getMuteAllCommand(isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMuteAll,\r\n            // tslint:disable-next-line: object-literal-shorthand\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getMuteCommand(participantId: string, isMuted: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setMute,\r\n            // tslint:disable-next-line: object-literal-shorthand\r\n            participantId: participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isMuted\r\n        });\r\n    }\r\n\r\n    private getLockCommand(isLocked: boolean): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.setLockState,\r\n            // tslint:disable-next-line: object-literal-shorthand\r\n            participantId: this.privRoom.participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: isLocked\r\n        });\r\n    }\r\n\r\n    private getEjectCommand(participantId: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.ejectParticipant,\r\n            // tslint:disable-next-line: object-literal-shorthand\r\n            participantId: participantId,\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n        });\r\n    }\r\n\r\n    private getChangeNicknameCommand(nickname: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(nickname, \"nickname\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n\r\n        return JSON.stringify({\r\n            command: ConversationTranslatorCommandTypes.changeNickname,\r\n            nickname,\r\n            // tslint:disable-next-line: object-literal-shorthand\r\n            participantId: this.privRoom.participantId, // the id of the host\r\n            roomid: this.privRoom.roomId,\r\n            type: ConversationTranslatorMessageTypes.participantCommand,\r\n            value: nickname\r\n        });\r\n    }\r\n\r\n    private getMessageCommand(message: string): string {\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.roomId, \"conversationId\");\r\n        Contracts.throwIfNullOrWhitespace(this.privRoom.participantId, \"participantId\");\r\n        Contracts.throwIfNullOrWhitespace(message, \"message\");\r\n\r\n        return JSON.stringify({\r\n            // tslint:disable-next-line: object-literal-shorthand\r\n            participantId: this.privRoom.participantId,\r\n            roomId: this.privRoom.roomId,\r\n            text: message,\r\n            type: ConversationTranslatorMessageTypes.instantMessage\r\n        });\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    AudioConfig,\r\n    SpeechTranslationConfig,\r\n} from \"../Exports\";\r\nimport { Callback, IConversation } from \"./IConversation\";\r\n\r\nexport class ConversationCommon {\r\n\r\n    protected privAudioConfig: AudioConfig;\r\n    protected privSpeechTranslationConfig: SpeechTranslationConfig;\r\n\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n    }\r\n\r\n    protected handleCallback(cb: Callback, err: Callback): void {\r\n        if (!!cb) {\r\n            try {\r\n                cb();\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n            cb = undefined;\r\n        }\r\n    }\r\n\r\n    protected handleError(error: any, err: Callback): void {\r\n        if (!!err) {\r\n            if (error instanceof Error) {\r\n                const typedError: Error = error as Error;\r\n                err(typedError.name + \": \" + typedError.message);\r\n\r\n            } else {\r\n                err(error);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n *  Defines the gender of synthesis voices.\r\n *  Added in version 1.20.0.\r\n */\r\nexport enum SynthesisVoiceGender {\r\n\r\n    /** Gender unknown */\r\n    Unknown,\r\n\r\n    /** Female voice */\r\n    Female,\r\n\r\n    /** Male voice */\r\n    Male\r\n}\r\n\r\nexport enum SynthesisVoiceType {\r\n    OnlineNeural = 1,\r\n    OnlineStandard = 2,\r\n    OfflineNeural = 3,\r\n    OfflineStandard = 4,\r\n}\r\n\r\n/**\r\n * Information about Speech Synthesis voice\r\n * Added in version 1.20.0.\r\n * @class VoiceInfo\r\n */\r\nexport class VoiceInfo {\r\n    private privName: string;\r\n    private privLocale: string;\r\n    private privShortName: string;\r\n    private privLocalName: string;\r\n    private privGender: SynthesisVoiceGender;\r\n    private privVoiceType: SynthesisVoiceType;\r\n    private privStyleList: string[] = [];\r\n    private privVoicePath: string = \"\";\r\n\r\n    public constructor(json: { Name: string, LocalName: string, ShortName: string, Gender: string, VoiceType: string, Locale: string, StyleList: any }) {\r\n        if (!!json) {\r\n            this.privName = json.Name;\r\n            this.privLocale = json.Locale;\r\n            this.privShortName = json.ShortName;\r\n            this.privLocalName = json.LocalName;\r\n            this.privVoiceType = json.VoiceType.endsWith(\"Standard\") ? SynthesisVoiceType.OnlineStandard : SynthesisVoiceType.OnlineNeural;\r\n            this.privGender = json.Gender === \"Male\" ? SynthesisVoiceGender.Male : json.Gender === \"Female\" ? SynthesisVoiceGender.Female : SynthesisVoiceGender.Unknown;\r\n            if (!!json.StyleList && Array.isArray(json.StyleList)) {\r\n                for (const style of json.StyleList) {\r\n                    this.privStyleList.push(style);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public get name(): string {\r\n        return this.privName;\r\n    }\r\n\r\n    public get locale(): string {\r\n        return this.privLocale;\r\n    }\r\n\r\n    public get shortName(): string {\r\n        return this.privShortName;\r\n    }\r\n\r\n    public get localName(): string {\r\n        return this.privLocalName;\r\n    }\r\n\r\n    public get gender(): SynthesisVoiceGender {\r\n        return this.privGender;\r\n    }\r\n\r\n    public get voiceType(): SynthesisVoiceType {\r\n        return this.privVoiceType;\r\n    }\r\n\r\n    public get styleList(): string[] {\r\n        return this.privStyleList;\r\n    }\r\n\r\n    public get voicePath(): string {\r\n        return this.privVoicePath;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\r\nimport { AudioConfigImpl } from \"../../sdk/Audio/AudioConfig\";\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    Conversation,\r\n    ConversationInfo,\r\n    ConversationTranscriber,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechTranslationConfig,\r\n    SpeechTranslationConfigImpl,\r\n} from \"../../sdk/Exports\";\r\nimport {\r\n    IAuthentication,\r\n    IConnectionFactory,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    ServiceRecognizerBase,\r\n    SpeechServiceConfig,\r\n    TranscriberConnectionFactory,\r\n    TranscriptionServiceRecognizer,\r\n} from \"../Exports\";\r\n\r\nexport class TranscriberRecognizer extends Recognizer {\r\n    private privDisposedRecognizer: boolean;\r\n    private privConversation: Conversation;\r\n\r\n    /**\r\n     * TranscriberRecognizer constructor.\r\n     * @constructor\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(speechTranslationConfig: SpeechTranslationConfig, audioConfig?: AudioConfig) {\r\n        const speechTranslationConfigImpl: SpeechTranslationConfigImpl = speechTranslationConfig as SpeechTranslationConfigImpl;\r\n        Contracts.throwIfNull(speechTranslationConfigImpl, \"speechTranslationConfig\");\r\n\r\n        Contracts.throwIfNullOrWhitespace(\r\n            speechTranslationConfigImpl.speechRecognitionLanguage,\r\n            PropertyId[PropertyId.SpeechServiceConnection_RecoLanguage]);\r\n\r\n        super(audioConfig, speechTranslationConfigImpl.properties, new TranscriberConnectionFactory());\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    public recognizing: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public recognized: (sender: Recognizer, event: SpeechRecognitionEventArgs) => void;\r\n\r\n    public canceled: (sender: Recognizer, event: CancellationEventArgs) => void;\r\n\r\n    public conversationCanceled: (sender: Recognizer, event: CancellationEventArgs) => void;\r\n\r\n    public conversationStarted: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    public conversationStopped: (sender: Recognizer, event: SessionEventArgs) => void;\r\n\r\n    public getConversationInfo(): ConversationInfo {\r\n        Contracts.throwIfNullOrUndefined(this.privConversation, \"Conversation\");\r\n        return this.privConversation.conversationInfo;\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    public set conversation(c: Conversation) {\r\n        Contracts.throwIfNullOrUndefined(c, \"Conversation\");\r\n        this.privConversation = c;\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public startContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.startContinuousRecognitionAsyncImpl(RecognitionMode.Conversation), cb, err);\r\n    }\r\n\r\n    public stopContinuousRecognitionAsync(cb?: () => void, err?: (e: string) => void): void {\r\n        marshalPromiseToCallbacks(this.stopContinuousRecognitionAsyncImpl(), cb, err);\r\n    }\r\n\r\n    public async close(): Promise<void> {\r\n        if (!this.privDisposedRecognizer) {\r\n            await this.dispose(true);\r\n        }\r\n    }\r\n\r\n    // Push async join/leave conversation message via serviceRecognizer\r\n    public async pushConversationEvent(conversationInfo: ConversationInfo, command: string): Promise<void> {\r\n        const reco = (this.privReco) as TranscriptionServiceRecognizer;\r\n        Contracts.throwIfNullOrUndefined(reco, \"serviceRecognizer\");\r\n        await reco.sendSpeechEventAsync(conversationInfo, command);\r\n    }\r\n\r\n    public connectCallbacks(transcriber: ConversationTranscriber): void {\r\n        this.canceled = (s: any, e: CancellationEventArgs): void => {\r\n            if (!!transcriber.canceled) {\r\n                transcriber.canceled(transcriber, e);\r\n            }\r\n        };\r\n        this.conversationCanceled = (s: any, e: CancellationEventArgs): void => {\r\n            if (!!transcriber.conversationCanceled) {\r\n                transcriber.conversationCanceled(transcriber, e);\r\n            }\r\n        };\r\n        this.recognizing = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribing) {\r\n                transcriber.transcribing(transcriber, e);\r\n            }\r\n        };\r\n        this.recognized = (s: any, e: SpeechRecognitionEventArgs): void => {\r\n            if (!!transcriber.transcribed) {\r\n                transcriber.transcribed(transcriber, e);\r\n            }\r\n        };\r\n        this.conversationStarted = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.conversationStarted) {\r\n                transcriber.conversationStarted(transcriber, e);\r\n            }\r\n        };\r\n        this.conversationStopped = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.conversationStopped) {\r\n                transcriber.conversationStopped(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStarted = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStarted) {\r\n                transcriber.sessionStarted(transcriber, e);\r\n            }\r\n        };\r\n        this.sessionStopped = (s: any, e: SessionEventArgs): void => {\r\n            if (!!transcriber.sessionStopped) {\r\n                transcriber.sessionStopped(transcriber, e);\r\n            }\r\n        };\r\n    }\r\n\r\n    public disconnectCallbacks(): void {\r\n        this.canceled = undefined;\r\n        this.recognizing = undefined;\r\n        this.recognized = undefined;\r\n        this.sessionStarted = undefined;\r\n        this.sessionStopped = undefined;\r\n        this.conversationCanceled = undefined;\r\n        this.conversationStarted = undefined;\r\n        this.conversationStopped = undefined;\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member ConversationTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n            await this.implRecognizerStop();\r\n        }\r\n\r\n        await super.dispose(disposing);\r\n    }\r\n\r\n    protected createRecognizerConfig(speechConfig: SpeechServiceConfig): RecognizerConfig {\r\n        return new RecognizerConfig(\r\n            speechConfig,\r\n            this.properties);\r\n    }\r\n\r\n    protected createServiceRecognizer(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        recognizerConfig: RecognizerConfig): ServiceRecognizerBase {\r\n        const configImpl: AudioConfigImpl = audioConfig as AudioConfigImpl;\r\n        return new TranscriptionServiceRecognizer(authentication, connectionFactory, configImpl, recognizerConfig, this);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { TranscriberRecognizer } from \"../../common.speech/Exports\";\r\nimport { marshalPromiseToCallbacks } from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    CancellationEventArgs,\r\n    ConversationTranscriptionEventArgs,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    SessionEventArgs,\r\n} from \"../Exports\";\r\nimport {\r\n    ConversationHandler,\r\n    ConversationImpl,\r\n    ConversationTranscriptionHandler,\r\n} from \"./Exports\";\r\nimport { Callback, IConversation } from \"./IConversation\";\r\n\r\nexport class ConversationTranscriber implements ConversationTranscriptionHandler {\r\n    private privDisposedRecognizer: boolean;\r\n    private privRecognizer: TranscriberRecognizer;\r\n    private privProperties: PropertyCollection;\r\n    protected privAudioConfig: AudioConfig;\r\n\r\n    /**\r\n     * ConversationTranscriber constructor.\r\n     * @constructor\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the recognizer\r\n     */\r\n    public constructor(audioConfig?: AudioConfig) {\r\n        this.privAudioConfig = audioConfig;\r\n        this.privProperties = new PropertyCollection();\r\n        this.privRecognizer = undefined;\r\n        this.privDisposedRecognizer = false;\r\n    }\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during the conversation.\r\n     * @member ConversationTranscriber.prototype.conversationCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public conversationCanceled: (sender: ConversationHandler, event: CancellationEventArgs) => void;\r\n\r\n    /**\r\n     * The event canceled signals that an error occurred during transcription.\r\n     * @member ConversationTranscriber.prototype.canceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public canceled: (sender: ConversationHandler, event: CancellationEventArgs) => void;\r\n\r\n    /**\r\n     * @param {Conversation} converation - conversation to be recognized\r\n     */\r\n    public joinConversationAsync(conversation: IConversation, cb?: Callback, err?: Callback): void {\r\n        const conversationImpl = conversation as ConversationImpl;\r\n        Contracts.throwIfNullOrUndefined(conversationImpl, \"Conversation\");\r\n\r\n        // ref the conversation object\r\n        // create recognizer and subscribe to recognizer events\r\n        this.privRecognizer = new TranscriberRecognizer(conversation.config, this.privAudioConfig);\r\n        Contracts.throwIfNullOrUndefined(this.privRecognizer, \"Recognizer\");\r\n        this.privRecognizer.connectCallbacks(this);\r\n\r\n        marshalPromiseToCallbacks(conversationImpl.connectTranscriberRecognizer(this.privRecognizer), cb, err);\r\n    }\r\n\r\n     /**\r\n      * The event recognized signals that a final conversation transcription result is received.\r\n      * @member ConversationTranscriber.prototype.transcribed\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribed: (sender: ConversationTranscriptionHandler, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n     /**\r\n      * The event recognizing signals that an intermediate conversation transcription result is received.\r\n      * @member ConversationTranscriber.prototype.transcribing\r\n      * @function\r\n      * @public\r\n      */\r\n    public transcribing: (sender: ConversationTranscriptionHandler, event: ConversationTranscriptionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session started events.\r\n     * @member ConversationTranscriber.prototype.sessionStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for session stopped events.\r\n     * @member ConversationTranscriber.prototype.sessionStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public sessionStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for conversation started events.\r\n     * @member ConversationTranscriber.prototype.conversationStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public conversationStarted: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for conversation stopped events.\r\n     * @member ConversationTranscriber.prototype.conversationStopped\r\n     * @function\r\n     * @public\r\n     */\r\n    public conversationStopped: (sender: ConversationHandler, event: SessionEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member ConversationTranscriber.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * Gets the spoken language of recognition.\r\n     * @member ConversationTranscriber.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} The spoken language of recognition.\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this ConversationTranscriber.\r\n     * @member ConversationTranscriber.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this ConversationTranscriber.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Starts conversation transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member ConversationTranscriber.prototype.startTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public startTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.startContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Starts conversation transcription, until stopTranscribingAsync() is called.\r\n     * User must subscribe to events to receive transcription results.\r\n     * @member ConversationTranscriber.prototype.stopTranscribingAsync\r\n     * @function\r\n     * @public\r\n     * @param cb - Callback invoked once the transcription has started.\r\n     * @param err - Callback invoked in case of an error.\r\n     */\r\n    public stopTranscribingAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.stopContinuousRecognitionAsync(cb, err);\r\n    }\r\n\r\n    /**\r\n     * Leave the current conversation. After this is called, you will no longer receive any events.\r\n     */\r\n    public leaveConversationAsync(cb?: Callback, err?: Callback): void {\r\n        this.privRecognizer.disconnectCallbacks();\r\n        marshalPromiseToCallbacks((async (): Promise<void> => { return; })(), cb, err);\r\n    }\r\n\r\n    /**\r\n     * closes all external resources held by an instance of this class.\r\n     * @member ConversationTranscriber.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, errorCb?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposedRecognizer);\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, errorCb);\r\n    }\r\n\r\n    /**\r\n     * Disposes any resources held by the object.\r\n     * @member ConversationTranscriber.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - true if disposing the object.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposedRecognizer) {\r\n            return;\r\n        }\r\n        if (!!this.privRecognizer) {\r\n            await this.privRecognizer.close();\r\n            this.privRecognizer = undefined;\r\n        }\r\n        if (disposing) {\r\n            this.privDisposedRecognizer = true;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the point system for pronunciation score calibration; default value is FivePoint.\r\n * Added in version 1.15.0\r\n * @class PronunciationAssessmentGradingSystem\r\n */\r\nexport enum PronunciationAssessmentGradingSystem {\r\n    /**\r\n     * Five point calibration\r\n     * @member PronunciationAssessmentGradingSystem.FivePoint\r\n     */\r\n    FivePoint = 1,\r\n\r\n    /**\r\n     * Hundred mark\r\n     * @member PronunciationAssessmentGradingSystem.HundredMark\r\n     */\r\n    HundredMark,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the pronunciation evaluation granularity; default value is Phoneme.\r\n * Added in version 1.15.0\r\n * @class PronunciationAssessmentGranularity\r\n */\r\nexport enum PronunciationAssessmentGranularity {\r\n    /**\r\n     * Shows the score on the full text, word and phoneme level\r\n     * @member PronunciationAssessmentGranularity.Phoneme\r\n     */\r\n    Phoneme = 1,\r\n\r\n    /**\r\n     * Shows the score on the full text and word level\r\n     * @member PronunciationAssessmentGranularity.Word\r\n     */\r\n    Word,\r\n\r\n    /**\r\n     * Shows the score on the full text level only\r\n     * @member PronunciationAssessmentGranularity.FullText\r\n     */\r\n    FullText,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SynthesisResult, VoiceInfo } from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SynthesisVoicesResult\r\n * Added in version 1.20.0\r\n */\r\nexport class SynthesisVoicesResult extends SynthesisResult {\r\n    private privVoices: VoiceInfo[];\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param requestId - result id for request.\r\n     * @param json - json payload from endpoint.\r\n     */\r\n    constructor(requestId: string, json: any) {\r\n        if (Array.isArray(json)) {\r\n            super(requestId, ResultReason.VoicesListRetrieved, undefined, new PropertyCollection());\r\n            this.privVoices = [];\r\n            for (const item of json) {\r\n                this.privVoices.push(new VoiceInfo(item));\r\n            }\r\n        } else {\r\n            super(requestId, ResultReason.Canceled, !!json.errorDetails ? json.errorDetails : \"Error information unavailable\", new PropertyCollection());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The list of voices\r\n     * @member SynthesisVoicesResult.prototype.voices\r\n     * @function\r\n     * @public\r\n     * @returns {VoiceInfo[]} List of synthesized voices.\r\n     */\r\n    public get voices(): VoiceInfo[] {\r\n        return this.privVoices;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PathLike } from \"fs\";\r\nimport { IRestResponse } from \"../common.browser/RestMessageAdapter\";\r\nimport {\r\n    AutoDetectSourceLanguagesOpenRangeOptionName,\r\n    CognitiveSubscriptionKeyAuthentication,\r\n    CognitiveTokenAuthentication,\r\n    Context,\r\n    IAuthentication,\r\n    ISynthesisConnectionFactory,\r\n    OS,\r\n    SpeechServiceConfig,\r\n    SpeechSynthesisConnectionFactory,\r\n    SynthesisAdapterBase,\r\n    SynthesisRestAdapter,\r\n    SynthesizerConfig,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    createNoDashGuid,\r\n    IAudioDestination,\r\n    IStringDictionary,\r\n    marshalPromiseToCallbacks,\r\n    Queue\r\n} from \"../common/Exports\";\r\nimport { AudioOutputConfigImpl } from \"./Audio/AudioConfig\";\r\nimport { AudioFileWriter } from \"./Audio/AudioFileWriter\";\r\nimport { AudioOutputFormatImpl } from \"./Audio/AudioOutputFormat\";\r\nimport {\r\n    PullAudioOutputStreamImpl,\r\n    PushAudioOutputStreamImpl\r\n} from \"./Audio/AudioOutputStream\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    AudioConfig,\r\n    AudioOutputStream,\r\n    AutoDetectSourceLanguageConfig,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    PullAudioOutputStream,\r\n    PushAudioOutputStreamCallback,\r\n    SpeechConfig,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisOutputFormat,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SynthesisVoicesResult,\r\n} from \"./Exports\";\r\nimport { SpeechConfigImpl } from \"./SpeechConfig\";\r\n\r\n/**\r\n * Defines the class SpeechSynthesizer for text to speech.\r\n * Updated in version 1.16.0\r\n * @class SpeechSynthesizer\r\n */\r\nexport class SpeechSynthesizer {\r\n    protected audioConfig: AudioConfig;\r\n    protected privAdapter: SynthesisAdapterBase;\r\n    protected privRestAdapter: SynthesisRestAdapter;\r\n    protected privProperties: PropertyCollection;\r\n    protected synthesisRequestQueue: Queue<SynthesisRequest>;\r\n\r\n    /**\r\n     * Defines event handler for synthesis start events.\r\n     * @member SpeechSynthesizer.prototype.synthesisStarted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisStarted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesizing events.\r\n     * @member SpeechSynthesizer.prototype.synthesizing\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesizing: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis completed events.\r\n     * @member SpeechSynthesizer.prototype.synthesisCompleted\r\n     * @function\r\n     * @public\r\n     */\r\n    public synthesisCompleted: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for synthesis cancelled events.\r\n     * @member SpeechSynthesizer.prototype.SynthesisCanceled\r\n     * @function\r\n     * @public\r\n     */\r\n    public SynthesisCanceled: (sender: SpeechSynthesizer, event: SpeechSynthesisEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for word boundary events\r\n     * @member SpeechSynthesizer.prototype.wordBoundary\r\n     * @function\r\n     * @public\r\n     */\r\n    public wordBoundary: (sender: SpeechSynthesizer, event: SpeechSynthesisWordBoundaryEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for bookmark reached events\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.bookmarkReached\r\n     * @function\r\n     * @public\r\n     */\r\n    public bookmarkReached: (sender: SpeechSynthesizer, event: SpeechSynthesisBookmarkEventArgs) => void;\r\n\r\n    /**\r\n     * Defines event handler for viseme received event\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesizer.prototype.visemeReceived\r\n     * @function\r\n     * @public\r\n     */\r\n    public visemeReceived: (sender: SpeechSynthesizer, event: SpeechSynthesisVisemeEventArgs) => void;\r\n\r\n    /**\r\n     * Gets the authorization token used to communicate with the service.\r\n     * @member SpeechSynthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @returns {string} Authorization token.\r\n     */\r\n    public get authorizationToken(): string {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the authorization token used to communicate with the service.\r\n     * @member SpeechSynthesizer.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} token - Authorization token.\r\n     */\r\n    public set authorizationToken(token: string) {\r\n        Contracts.throwIfNullOrWhitespace(token, \"token\");\r\n        this.properties.setProperty(PropertyId.SpeechServiceAuthorization_Token, token);\r\n    }\r\n\r\n    /**\r\n     * The collection of properties and their values defined for this SpeechSynthesizer.\r\n     * @member SpeechSynthesizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The collection of properties and their values defined for this SpeechSynthesizer.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    /**\r\n     * Indicates if auto detect source language is enabled\r\n     * @member SpeechSynthesizer.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {boolean} if auto detect source language is enabled\r\n     */\r\n    public get autoDetectSourceLanguage(): boolean {\r\n        return this.properties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages) === AutoDetectSourceLanguagesOpenRangeOptionName;\r\n    }\r\n\r\n    private privDisposed: boolean;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n    private privSynthesizing: boolean;\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - An set of initial properties for this synthesizer.\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer.\r\n     */\r\n    public constructor(speechConfig: SpeechConfig, audioConfig?: AudioConfig) {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        Contracts.throwIfNull(speechConfigImpl, \"speechConfig\");\r\n\r\n        if (audioConfig !== null) {\r\n            if (audioConfig === undefined) {\r\n                this.audioConfig = (typeof window === \"undefined\") ? undefined : AudioConfig.fromDefaultSpeakerOutput();\r\n            } else {\r\n                this.audioConfig = audioConfig;\r\n            }\r\n        }\r\n\r\n        this.privProperties = speechConfigImpl.properties.clone();\r\n        this.privDisposed = false;\r\n        this.privSynthesizing = false;\r\n        this.privConnectionFactory = new SpeechSynthesisConnectionFactory();\r\n        this.synthesisRequestQueue = new Queue<SynthesisRequest>();\r\n        this.implCommonSynthesizeSetup();\r\n    }\r\n\r\n    /**\r\n     * SpeechSynthesizer constructor.\r\n     * @constructor\r\n     * @param {SpeechConfig} speechConfig - an set of initial properties for this synthesizer\r\n     * @param {AutoDetectSourceLanguageConfig} autoDetectSourceLanguageConfig - An source language detection configuration associated with the synthesizer\r\n     * @param {AudioConfig} audioConfig - An optional audio configuration associated with the synthesizer\r\n     */\r\n    public static FromConfig(speechConfig: SpeechConfig, autoDetectSourceLanguageConfig: AutoDetectSourceLanguageConfig, audioConfig?: AudioConfig): SpeechSynthesizer {\r\n        const speechConfigImpl: SpeechConfigImpl = speechConfig as SpeechConfigImpl;\r\n        autoDetectSourceLanguageConfig.properties.mergeTo(speechConfigImpl.properties);\r\n        return new SpeechSynthesizer(speechConfig, audioConfig);\r\n    }\r\n\r\n    public buildSsml(text: string): string {\r\n        const languageToDefaultVoice: IStringDictionary<string>  = {\r\n            [\"af-ZA\"]: \"af-ZA-AdriNeural\",\r\n            [\"am-ET\"]: \"am-ET-AmehaNeural\",\r\n            [\"ar-AE\"]: \"ar-AE-FatimaNeural\",\r\n            [\"ar-BH\"]: \"ar-BH-AliNeural\",\r\n            [\"ar-DZ\"]: \"ar-DZ-AminaNeural\",\r\n            [\"ar-EG\"]: \"ar-EG-SalmaNeural\",\r\n            [\"ar-IQ\"]: \"ar-IQ-BasselNeural\",\r\n            [\"ar-JO\"]: \"ar-JO-SanaNeural\",\r\n            [\"ar-KW\"]: \"ar-KW-FahedNeural\",\r\n            [\"ar-LY\"]: \"ar-LY-ImanNeural\",\r\n            [\"ar-MA\"]: \"ar-MA-JamalNeural\",\r\n            [\"ar-QA\"]: \"ar-QA-AmalNeural\",\r\n            [\"ar-SA\"]: \"ar-SA-HamedNeural\",\r\n            [\"ar-SY\"]: \"ar-SY-AmanyNeural\",\r\n            [\"ar-TN\"]: \"ar-TN-HediNeural\",\r\n            [\"ar-YE\"]: \"ar-YE-MaryamNeural\",\r\n            [\"bg-BG\"]: \"bg-BG-BorislavNeural\",\r\n            [\"bn-BD\"]: \"bn-BD-NabanitaNeural\",\r\n            [\"ca-ES\"]: \"ca-ES-JoanaNeural\",\r\n            [\"cs-CZ\"]: \"cs-CZ-AntoninNeural\",\r\n            [\"cy-GB\"]: \"cy-GB-AledNeural\",\r\n            [\"da-DK\"]: \"da-DK-ChristelNeural\",\r\n            [\"de-AT\"]: \"de-AT-IngridNeural\",\r\n            [\"de-CH\"]: \"de-CH-JanNeural\",\r\n            [\"de-DE\"]: \"de-DE-KatjaNeural\",\r\n            [\"el-GR\"]: \"el-GR-AthinaNeural\",\r\n            [\"en-AU\"]: \"en-AU-NatashaNeural\",\r\n            [\"en-CA\"]: \"en-CA-ClaraNeural\",\r\n            [\"en-GB\"]: \"en-GB-LibbyNeural\",\r\n            [\"en-HK\"]: \"en-HK-SamNeural\",\r\n            [\"en-IE\"]: \"en-IE-ConnorNeural\",\r\n            [\"en-IN\"]: \"en-IN-NeerjaNeural\",\r\n            [\"en-KE\"]: \"en-KE-AsiliaNeural\",\r\n            [\"en-NG\"]: \"en-NG-AbeoNeural\",\r\n            [\"en-NZ\"]: \"en-NZ-MitchellNeural\",\r\n            [\"en-PH\"]: \"en-PH-JamesNeural\",\r\n            [\"en-SG\"]: \"en-SG-LunaNeural\",\r\n            [\"en-TZ\"]: \"en-TZ-ElimuNeural\",\r\n            [\"en-US\"]: \"en-US-JennyNeural\",\r\n            [\"en-ZA\"]: \"en-ZA-LeahNeural\",\r\n            [\"es-AR\"]: \"es-AR-ElenaNeural\",\r\n            [\"es-BO\"]: \"es-BO-MarceloNeural\",\r\n            [\"es-CL\"]: \"es-CL-CatalinaNeural\",\r\n            [\"es-CO\"]: \"es-CO-GonzaloNeural\",\r\n            [\"es-CR\"]: \"es-CR-JuanNeural\",\r\n            [\"es-CU\"]: \"es-CU-BelkysNeural\",\r\n            [\"es-DO\"]: \"es-DO-EmilioNeural\",\r\n            [\"es-EC\"]: \"es-EC-AndreaNeural\",\r\n            [\"es-ES\"]: \"es-ES-AlvaroNeural\",\r\n            [\"es-GQ\"]: \"es-GQ-JavierNeural\",\r\n            [\"es-GT\"]: \"es-GT-AndresNeural\",\r\n            [\"es-HN\"]: \"es-HN-CarlosNeural\",\r\n            [\"es-MX\"]: \"es-MX-DaliaNeural\",\r\n            [\"es-NI\"]: \"es-NI-FedericoNeural\",\r\n            [\"es-PA\"]: \"es-PA-MargaritaNeural\",\r\n            [\"es-PE\"]: \"es-PE-AlexNeural\",\r\n            [\"es-PR\"]: \"es-PR-KarinaNeural\",\r\n            [\"es-PY\"]: \"es-PY-MarioNeural\",\r\n            [\"es-SV\"]: \"es-SV-LorenaNeural\",\r\n            [\"es-US\"]: \"es-US-AlonsoNeural\",\r\n            [\"es-UY\"]: \"es-UY-MateoNeural\",\r\n            [\"es-VE\"]: \"es-VE-PaolaNeural\",\r\n            [\"et-EE\"]: \"et-EE-AnuNeural\",\r\n            [\"fa-IR\"]: \"fa-IR-DilaraNeural\",\r\n            [\"fi-FI\"]: \"fi-FI-SelmaNeural\",\r\n            [\"fil-PH\"]: \"fil-PH-AngeloNeural\",\r\n            [\"fr-BE\"]: \"fr-BE-CharlineNeural\",\r\n            [\"fr-CA\"]: \"fr-CA-SylvieNeural\",\r\n            [\"fr-CH\"]: \"fr-CH-ArianeNeural\",\r\n            [\"fr-FR\"]: \"fr-FR-DeniseNeural\",\r\n            [\"ga-IE\"]: \"ga-IE-ColmNeural\",\r\n            [\"gl-ES\"]: \"gl-ES-RoiNeural\",\r\n            [\"gu-IN\"]: \"gu-IN-DhwaniNeural\",\r\n            [\"he-IL\"]: \"he-IL-AvriNeural\",\r\n            [\"hi-IN\"]: \"hi-IN-MadhurNeural\",\r\n            [\"hr-HR\"]: \"hr-HR-GabrijelaNeural\",\r\n            [\"hu-HU\"]: \"hu-HU-NoemiNeural\",\r\n            [\"id-ID\"]: \"id-ID-ArdiNeural\",\r\n            [\"it-IT\"]: \"it-IT-IsabellaNeural\",\r\n            [\"ja-JP\"]: \"ja-JP-NanamiNeural\",\r\n            [\"jv-ID\"]: \"jv-ID-DimasNeural\",\r\n            [\"km-KH\"]: \"km-KH-PisethNeural\",\r\n            [\"ko-KR\"]: \"ko-KR-SunHiNeural\",\r\n            [\"lt-LT\"]: \"lt-LT-LeonasNeural\",\r\n            [\"lv-LV\"]: \"lv-LV-EveritaNeural\",\r\n            [\"mr-IN\"]: \"mr-IN-AarohiNeural\",\r\n            [\"ms-MY\"]: \"ms-MY-OsmanNeural\",\r\n            [\"mt-MT\"]: \"mt-MT-GraceNeural\",\r\n            [\"my-MM\"]: \"my-MM-NilarNeural\",\r\n            [\"nb-NO\"]: \"nb-NO-PernilleNeural\",\r\n            [\"nl-BE\"]: \"nl-BE-ArnaudNeural\",\r\n            [\"nl-NL\"]: \"nl-NL-ColetteNeural\",\r\n            [\"pl-PL\"]: \"pl-PL-AgnieszkaNeural\",\r\n            [\"pt-BR\"]: \"pt-BR-FranciscaNeural\",\r\n            [\"pt-PT\"]: \"pt-PT-DuarteNeural\",\r\n            [\"ro-RO\"]: \"ro-RO-AlinaNeural\",\r\n            [\"ru-RU\"]: \"ru-RU-SvetlanaNeural\",\r\n            [\"sk-SK\"]: \"sk-SK-LukasNeural\",\r\n            [\"sl-SI\"]: \"sl-SI-PetraNeural\",\r\n            [\"so-SO\"]: \"so-SO-MuuseNeural\",\r\n            [\"su-ID\"]: \"su-ID-JajangNeural\",\r\n            [\"sv-SE\"]: \"sv-SE-SofieNeural\",\r\n            [\"sw-KE\"]: \"sw-KE-RafikiNeural\",\r\n            [\"sw-TZ\"]: \"sw-TZ-DaudiNeural\",\r\n            [\"ta-IN\"]: \"ta-IN-PallaviNeural\",\r\n            [\"ta-LK\"]: \"ta-LK-KumarNeural\",\r\n            [\"ta-SG\"]: \"ta-SG-AnbuNeural\",\r\n            [\"te-IN\"]: \"te-IN-MohanNeural\",\r\n            [\"th-TH\"]: \"th-TH-PremwadeeNeural\",\r\n            [\"tr-TR\"]: \"tr-TR-AhmetNeural\",\r\n            [\"uk-UA\"]: \"uk-UA-OstapNeural\",\r\n            [\"ur-IN\"]: \"ur-IN-GulNeural\",\r\n            [\"ur-PK\"]: \"ur-PK-AsadNeural\",\r\n            [\"uz-UZ\"]: \"uz-UZ-MadinaNeural\",\r\n            [\"vi-VN\"]: \"vi-VN-HoaiMyNeural\",\r\n            [\"zh-CN\"]: \"zh-CN-XiaoxiaoNeural\",\r\n            [\"zh-HK\"]: \"zh-HK-HiuMaanNeural\",\r\n            [\"zh-TW\"]: \"zh-TW-HsiaoChenNeural\",\r\n            [\"zu-ZA\"]: \"zu-ZA-ThandoNeural\",\r\n        };\r\n\r\n        let language = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage, \"en-US\");\r\n        let voice = this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice, \"\");\r\n        let ssml: string = SpeechSynthesizer.XMLEncode(text);\r\n        if (this.autoDetectSourceLanguage) {\r\n            language = \"en-US\";\r\n        } else {\r\n            voice = voice || languageToDefaultVoice[language];\r\n        }\r\n        if (voice) {\r\n            ssml = `<voice name='${voice}'>${ssml}</voice>`;\r\n        }\r\n        ssml = `<speak version='1.0' xmlns='http://www.w3.org/2001/10/synthesis' xmlns:mstts='http://www.w3.org/2001/mstts' xmlns:emo='http://www.w3.org/2009/10/emotionml' xml:lang='${language}'>${ssml}</speak>`;\r\n        return ssml;\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on plain text.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakTextAsync\r\n     * @function\r\n     * @public\r\n     * @param text - Text to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakTextAsync(text: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(text, false, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Executes speech synthesis on SSML.\r\n     * The task returns the synthesis result.\r\n     * @member SpeechSynthesizer.prototype.speakSsmlAsync\r\n     * @function\r\n     * @public\r\n     * @param ssml - SSML to be synthesized.\r\n     * @param cb - Callback that received the SpeechSynthesisResult.\r\n     * @param err - Callback invoked in case of an error.\r\n     * @param stream - AudioOutputStream to receive the synthesized audio.\r\n     */\r\n    public speakSsmlAsync(ssml: string, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, stream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        this.speakImpl(ssml, true, cb, err, stream);\r\n    }\r\n\r\n    /**\r\n     * Get list of synthesis voices available.\r\n     * The task returns the synthesis voice result.\r\n     * @member SpeechSynthesizer.prototype.getVoicesAsync\r\n     * @function\r\n     * @async\r\n     * @public\r\n     * @param locale - Locale of voices in BCP-47 format; if left empty, get all available voices.\r\n     * @return {Promise<SynthesisVoicesResult>} - Promise of a SynthesisVoicesResult.\r\n     */\r\n    public async getVoicesAsync(locale: string = \"\"): Promise<SynthesisVoicesResult> {\r\n        return this.getVoices(locale);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member SpeechSynthesizer.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(cb?: () => void, err?: (error: string) => void): void {\r\n        Contracts.throwIfDisposed(this.privDisposed);\r\n\r\n        marshalPromiseToCallbacks(this.dispose(true), cb, err);\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public get internalData(): object {\r\n        return this.privAdapter;\r\n    }\r\n\r\n    /**\r\n     * This method performs cleanup of resources.\r\n     * The Boolean parameter disposing indicates whether the method is called\r\n     * from Dispose (if disposing is true) or from the finalizer (if disposing is false).\r\n     * Derived classes should override this method to dispose resource if needed.\r\n     * @member SpeechSynthesizer.prototype.dispose\r\n     * @function\r\n     * @public\r\n     * @param {boolean} disposing - Flag to request disposal.\r\n     */\r\n    protected async dispose(disposing: boolean): Promise<void> {\r\n        if (this.privDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (disposing) {\r\n            if (this.privAdapter) {\r\n                await this.privAdapter.dispose();\r\n            }\r\n        }\r\n\r\n        this.privDisposed = true;\r\n    }\r\n\r\n    //\r\n    // ################################################################################################################\r\n    // IMPLEMENTATION.\r\n    // Move to independent class\r\n    // ################################################################################################################\r\n    //\r\n    protected createSynthesizerConfig(speechConfig: SpeechServiceConfig): SynthesizerConfig {\r\n        return new SynthesizerConfig(\r\n            speechConfig,\r\n            this.privProperties);\r\n    }\r\n\r\n    // Creates the synthesis adapter\r\n    protected createSynthesisAdapter(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        audioConfig: AudioConfig,\r\n        synthesizerConfig: SynthesizerConfig): SynthesisAdapterBase {\r\n        return new SynthesisAdapterBase(authentication, connectionFactory,\r\n            synthesizerConfig, this, this.audioConfig as AudioOutputConfigImpl);\r\n    }\r\n\r\n    protected implCommonSynthesizeSetup(): void {\r\n\r\n        let osPlatform = (typeof window !== \"undefined\") ? \"Browser\" : \"Node\";\r\n        let osName = \"unknown\";\r\n        let osVersion = \"unknown\";\r\n\r\n        if (typeof navigator !== \"undefined\") {\r\n            osPlatform = osPlatform + \"/\" + navigator.platform;\r\n            osName = navigator.userAgent;\r\n            osVersion = navigator.appVersion;\r\n        }\r\n\r\n        const synthesizerConfig = this.createSynthesizerConfig(\r\n            new SpeechServiceConfig(\r\n                new Context(new OS(osPlatform, osName, osVersion))));\r\n\r\n        const subscriptionKey = this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        const authentication = (subscriptionKey && subscriptionKey !== \"\") ?\r\n            new CognitiveSubscriptionKeyAuthentication(subscriptionKey) :\r\n            new CognitiveTokenAuthentication(\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                },\r\n                (authFetchEventId: string): Promise<string> => {\r\n                    const authorizationToken = this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token, undefined);\r\n                    return Promise.resolve(authorizationToken);\r\n                });\r\n\r\n        this.privAdapter = this.createSynthesisAdapter(\r\n            authentication,\r\n            this.privConnectionFactory,\r\n            this.audioConfig,\r\n            synthesizerConfig);\r\n\r\n        this.privAdapter.audioOutputFormat = AudioOutputFormatImpl.fromSpeechSynthesisOutputFormat(\r\n            (SpeechSynthesisOutputFormat as any)[this.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)]\r\n        );\r\n\r\n        this.privRestAdapter = new SynthesisRestAdapter(synthesizerConfig);\r\n    }\r\n\r\n    protected speakImpl(text: string, IsSsml: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: AudioOutputStream | PushAudioOutputStreamCallback | PathLike): void {\r\n        try {\r\n            Contracts.throwIfDisposed(this.privDisposed);\r\n            const requestId = createNoDashGuid();\r\n            let audioDestination;\r\n            if (dataStream instanceof PushAudioOutputStreamCallback) {\r\n                audioDestination = new PushAudioOutputStreamImpl(dataStream);\r\n            } else if (dataStream instanceof PullAudioOutputStream) {\r\n                audioDestination = dataStream as PullAudioOutputStreamImpl;\r\n            } else if (dataStream !== undefined) {\r\n                audioDestination = new AudioFileWriter(dataStream as PathLike);\r\n            } else {\r\n                audioDestination = undefined;\r\n            }\r\n            this.synthesisRequestQueue.enqueue(new SynthesisRequest(requestId, text, IsSsml, (e: SpeechSynthesisResult): void => {\r\n                this.privSynthesizing = false;\r\n                if (!!cb) {\r\n                    try {\r\n                        cb(e);\r\n                    } catch (e) {\r\n                        if (!!err) {\r\n                            err(e);\r\n                        }\r\n                    }\r\n                }\r\n                cb = undefined;\r\n                /* tslint:disable:no-empty */\r\n                this.adapterSpeak().catch(() => { });\r\n\r\n            }, (e: string): void => {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }, audioDestination));\r\n\r\n            /* tslint:disable:no-empty */\r\n            this.adapterSpeak().catch(() => { });\r\n\r\n        } catch (error) {\r\n            if (!!err) {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n            }\r\n\r\n            // Destroy the synthesizer.\r\n            /* tslint:disable:no-empty */\r\n            this.dispose(true).catch(() => { });\r\n        }\r\n    }\r\n\r\n    protected async getVoices(locale: string): Promise<SynthesisVoicesResult> {\r\n        const requestId = createNoDashGuid();\r\n        const response: IRestResponse = await this.privRestAdapter.getVoicesList(requestId);\r\n        if (response.ok && Array.isArray(response.json)) {\r\n            let json = response.json;\r\n            if (!!locale && locale.length > 0) {\r\n                json = json.filter((item: any) => !!item.Locale && item.Locale.toLowerCase() === locale.toLowerCase() );\r\n            }\r\n            return new SynthesisVoicesResult(requestId, json);\r\n        } else {\r\n            return new SynthesisVoicesResult(requestId, { errorDetails: `Error: ${response.status}: ${response.statusText}`});\r\n        }\r\n   }\r\n\r\n    protected async adapterSpeak(): Promise<void> {\r\n        if (!this.privDisposed && !this.privSynthesizing) {\r\n            this.privSynthesizing = true;\r\n            const request: SynthesisRequest = await this.synthesisRequestQueue.dequeue();\r\n            return this.privAdapter.Speak(request.text, request.isSSML, request.requestId, request.cb, request.err, request.dataStream);\r\n        }\r\n    }\r\n\r\n    private static XMLEncode(text: string): string {\r\n        return text.replace(/&/g, \"&amp;\")\r\n            .replace(/</g, \"&lt;\")\r\n            .replace(/>/g, \"&gt;\")\r\n            .replace(/\"/g, \"&quot;\")\r\n            .replace(/'/g, \"&apos;\");\r\n    }\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SynthesisRequest {\r\n    public requestId: string;\r\n    public text: string;\r\n    public isSSML: boolean;\r\n    public cb: (e: SpeechSynthesisResult) => void;\r\n    public err: (e: string) => void;\r\n    public dataStream: IAudioDestination;\r\n\r\n    constructor(requestId: string, text: string, isSSML: boolean, cb?: (e: SpeechSynthesisResult) => void, err?: (e: string) => void, dataStream?: IAudioDestination) {\r\n        this.requestId = requestId;\r\n        this.text = text;\r\n        this.isSSML = isSSML;\r\n        this.cb = cb;\r\n        this.err = err;\r\n        this.dataStream = dataStream;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ServiceRecognizerBase } from \"../common.speech/ServiceRecognizerBase\";\r\nimport { Contracts } from \"./Contracts\";\r\nimport {\r\n    PronunciationAssessmentGradingSystem,\r\n    PronunciationAssessmentGranularity,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    Recognizer\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Pronunciation assessment configuration.\r\n * @class PronunciationAssessmentConfig\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentConfig {\r\n    private privProperties: PropertyCollection;\r\n    private privPhonemeAlphabet: string;\r\n    private privNBestPhonemeCount: number;\r\n\r\n    /**\r\n     * PronunciationAssessmentConfig constructor.\r\n     * @constructor\r\n     * @param {string} referenceText\r\n     * @param gradingSystem\r\n     * @param granularity\r\n     * @param enableMiscue\r\n     */\r\n    public constructor(referenceText: string,\r\n                       gradingSystem: PronunciationAssessmentGradingSystem = PronunciationAssessmentGradingSystem.FivePoint,\r\n                       granularity: PronunciationAssessmentGranularity = PronunciationAssessmentGranularity.Phoneme,\r\n                       enableMiscue: boolean = false) {\r\n        Contracts.throwIfNullOrUndefined(referenceText, \"referenceText\");\r\n        this.privProperties = new PropertyCollection();\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_GradingSystem, PronunciationAssessmentGradingSystem[gradingSystem]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Granularity, PronunciationAssessmentGranularity[granularity]);\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_EnableMiscue, String(enableMiscue));\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.fromJSON\r\n     * @function\r\n     * @public\r\n     * @param {string} json The json string containing the pronunciation assessment parameters.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentConfig from json.\r\n     */\r\n    public static fromJSON(json: string): PronunciationAssessmentConfig {\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        const config = new PronunciationAssessmentConfig(\"\");\r\n        config.privProperties = new PropertyCollection();\r\n        config.properties.setProperty(PropertyId.PronunciationAssessment_Json, json);\r\n        return config;\r\n    }\r\n\r\n    public toJSON(): string {\r\n        this.updateJson();\r\n        return this.privProperties.getProperty(PropertyId.PronunciationAssessment_Params);\r\n    }\r\n\r\n    public applyTo(recognizer: Recognizer): void {\r\n        this.updateJson();\r\n        const recoBase = recognizer.internalData as ServiceRecognizerBase;\r\n        recoBase.speechContext.setPronunciationAssessmentParams(this.properties.getProperty(PropertyId.PronunciationAssessment_Params));\r\n    }\r\n\r\n    /**\r\n     * Gets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @returns {string} Reference text.\r\n     */\r\n    public get referenceText(): string {\r\n        return this.properties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n    }\r\n\r\n    /**\r\n     * Gets/Sets the reference text.\r\n     * @member PronunciationAssessmentConfig.prototype.referenceText\r\n     * @function\r\n     * @public\r\n     * @param {string} referenceText - Reference text.\r\n     */\r\n    public set referenceText(referenceText: string) {\r\n        Contracts.throwIfNullOrWhitespace(referenceText, \"referenceText\");\r\n        this.properties.setProperty(PropertyId.PronunciationAssessment_ReferenceText, referenceText);\r\n    }\r\n\r\n    /**\r\n     * Sets the phoneme alphabet.\r\n     * The valid values are \"SAPI\" (default) and \"IPA\".\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.phonemeAlphabet\r\n     * @function\r\n     * @public\r\n     * @param {string} phonemeAlphabet - Phoneme alphabet.\r\n     */\r\n    public set phonemeAlphabet(phonemeAlphabet: string) {\r\n        Contracts.throwIfNullOrWhitespace(phonemeAlphabet, \"phonemeAlphabet\");\r\n        this.privPhonemeAlphabet = phonemeAlphabet;\r\n    }\r\n\r\n    /**\r\n     * Sets the nbest phoneme count\r\n     * Added in version 1.20.0\r\n     * @member PronunciationAssessmentConfig.prototype.nbestPhonemeCount\r\n     * @function\r\n     * @public\r\n     * @param {number} nbestPhonemeCount - NBest phoneme count.\r\n     */\r\n    public set nbestPhonemeCount(nbestPhonemeCount: number) {\r\n        this.privNBestPhonemeCount = nbestPhonemeCount;\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentConfig.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @return {PropertyCollection} Properties of the config.\r\n     * @summary Gets a pronunciation assessment config properties\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    private updateJson(): void {\r\n        const jsonString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Json, \"{}\");\r\n        const paramsJson = JSON.parse(jsonString);\r\n\r\n        const referenceText = this.privProperties.getProperty(PropertyId.PronunciationAssessment_ReferenceText);\r\n        if (referenceText) {\r\n            paramsJson.referenceText = referenceText;\r\n        }\r\n\r\n        const gradingSystem = this.privProperties.getProperty(PropertyId.PronunciationAssessment_GradingSystem);\r\n        if (gradingSystem) {\r\n            paramsJson.gradingSystem = gradingSystem;\r\n        }\r\n\r\n        const granularity = this.privProperties.getProperty(PropertyId.PronunciationAssessment_Granularity);\r\n        if (granularity) {\r\n            paramsJson.granularity = granularity;\r\n        }\r\n\r\n        if (this.privPhonemeAlphabet) {\r\n            paramsJson.phonemeAlphabet = this.privPhonemeAlphabet;\r\n        }\r\n\r\n        if (this.privNBestPhonemeCount) {\r\n            paramsJson.nbestPhonemeCount = this.privNBestPhonemeCount;\r\n        }\r\n\r\n        // always set dimension to Comprehensive\r\n        paramsJson.dimension = \"Comprehensive\";\r\n\r\n        const enableMiscueString = this.privProperties.getProperty(PropertyId.PronunciationAssessment_EnableMiscue);\r\n        if (enableMiscueString === \"true\") {\r\n            paramsJson.enableMiscue = true;\r\n        } else if (enableMiscueString === \"false\") {\r\n            paramsJson.enableMiscue = false;\r\n        }\r\n\r\n        this.privProperties.setProperty(PropertyId.PronunciationAssessment_Params, JSON.stringify(paramsJson));\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Contracts} from \"./Contracts\";\r\nimport {\r\n    PropertyId,\r\n    RecognitionResult\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Pronunciation assessment results.\r\n * @class PronunciationAssessmentResult\r\n * Added in version 1.15.0.\r\n */\r\nexport class PronunciationAssessmentResult {\r\n    private privPronJson: any;\r\n\r\n    private constructor(jsonString: string) {\r\n        const j = JSON.parse(jsonString);\r\n        Contracts.throwIfNullOrUndefined(j.NBest[0], \"NBest\");\r\n        this.privPronJson = j.NBest[0];\r\n    }\r\n\r\n    /**\r\n     * @member PronunciationAssessmentResult.fromResult\r\n     * @function\r\n     * @public\r\n     * @param {RecognitionResult} result The recognition result.\r\n     * @return {PronunciationAssessmentConfig} Instance of PronunciationAssessmentConfig\r\n     * @summary Creates an instance of the PronunciationAssessmentResult from recognition result.\r\n     */\r\n    public static fromResult(result: RecognitionResult): PronunciationAssessmentResult {\r\n        Contracts.throwIfNullOrUndefined(result, \"result\");\r\n        const json: string = result.properties.getProperty(PropertyId.SpeechServiceResponse_JsonResult);\r\n        Contracts.throwIfNullOrUndefined(json, \"json\");\r\n        return new PronunciationAssessmentResult(json);\r\n    }\r\n\r\n    /**\r\n     * Gets the detail result of pronunciation assessment.\r\n     * @member PronunciationAssessmentConfig.prototype.detailResult\r\n     * @function\r\n     * @public\r\n     * @returns {any} detail result.\r\n     */\r\n    public get detailResult(): any {\r\n        return this.privPronJson;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the pronunciation accuracy of the given speech, which indicates\r\n     * how closely the phonemes match a native speaker's pronunciation.\r\n     * @member PronunciationAssessmentResult.prototype.accuracyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Accuracy score.\r\n     */\r\n    public get accuracyScore(): number {\r\n        return this.detailResult.PronunciationAssessment.AccuracyScore;\r\n    }\r\n\r\n    /**\r\n     * The overall score indicating the pronunciation quality of the given speech.\r\n     * This is calculated from AccuracyScore, FluencyScore and CompletenessScore with weight.\r\n     * @member PronunciationAssessmentResult.prototype.pronunciationScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Pronunciation score.\r\n     */\r\n    public get pronunciationScore(): number {\r\n        return this.detailResult.PronunciationAssessment.PronScore;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the completeness of the given speech by calculating the ratio of pronounced words towards entire input.\r\n     * @member PronunciationAssessmentResult.prototype.completenessScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Completeness score.\r\n     */\r\n    public get completenessScore(): number {\r\n        return this.detailResult.PronunciationAssessment.CompletenessScore;\r\n    }\r\n\r\n    /**\r\n     * The score indicating the fluency of the given speech.\r\n     * @member PronunciationAssessmentResult.prototype.fluencyScore\r\n     * @function\r\n     * @public\r\n     * @returns {number} Fluency score.\r\n     */\r\n    public get fluencyScore(): number {\r\n        return this.detailResult.PronunciationAssessment.FluencyScore;\r\n    }\r\n}\r\n","module.exports.MEDIA_DEVICE_KINDS = [\n  \"audioinput\",\n  \"videoinput\",\n  \"audiooutput\",\n  \"videooutput\",\n];\n\nmodule.exports.AUDIO_TRACK_KIND = \"audio\";\nmodule.exports.VIDEO_TRACK_KIND = \"video\";\n\n/**\n * A/V device kinds w/o input / output designations.\n *\n * These types aren't officially recognized by the browser as a device kind\n * (they will be *input/*output, however this package uses them for\n * identification purposes).\n **/\nmodule.exports.GENERIC_AUDIO_DEVICE_KIND = \"audio\";\nmodule.exports.GENERIC_VIDEO_DEVICE_KIND = \"video\";\n\nmodule.exports.GENERIC_INPUT_DEVICE_KIND = \"input\";\nmodule.exports.GENERIC_OUTPUT_DEVICE_KIND = \"output\";\n","import { V, c as computeRubberband } from './maths-b2a210f4.esm.js';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nconst EVENT_TYPE_MAP = {\n  pointer: {\n    start: 'down',\n    change: 'move',\n    end: 'up'\n  },\n  mouse: {\n    start: 'down',\n    change: 'move',\n    end: 'up'\n  },\n  touch: {\n    start: 'start',\n    change: 'move',\n    end: 'end'\n  },\n  gesture: {\n    start: 'start',\n    change: 'change',\n    end: 'end'\n  }\n};\n\nfunction capitalize(string) {\n  if (!string) return '';\n  return string[0].toUpperCase() + string.slice(1);\n}\n\nfunction toHandlerProp(device, action = '', capture = false) {\n  const deviceProps = EVENT_TYPE_MAP[device];\n  const actionKey = deviceProps ? deviceProps[action] || action : action;\n  return 'on' + capitalize(device) + capitalize(actionKey) + (capture ? 'Capture' : '');\n}\nfunction toDomEventType(device, action = '') {\n  const deviceProps = EVENT_TYPE_MAP[device];\n  const actionKey = deviceProps ? deviceProps[action] || action : action;\n  return device + actionKey;\n}\nfunction isTouch(event) {\n  return 'touches' in event;\n}\n\nfunction getCurrentTargetTouchList(event) {\n  return Array.from(event.touches).filter(e => {\n    var _event$currentTarget, _event$currentTarget$;\n\n    return e.target === event.currentTarget || ((_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 ? void 0 : (_event$currentTarget$ = _event$currentTarget.contains) === null || _event$currentTarget$ === void 0 ? void 0 : _event$currentTarget$.call(_event$currentTarget, e.target));\n  });\n}\n\nfunction getTouchList(event) {\n  return event.type === 'touchend' ? event.changedTouches : event.targetTouches;\n}\n\nfunction getValueEvent(event) {\n  return isTouch(event) ? getTouchList(event)[0] : event;\n}\n\nfunction distanceAngle(P1, P2) {\n  const dx = P2.clientX - P1.clientX;\n  const dy = P2.clientY - P1.clientY;\n  const cx = (P2.clientX + P1.clientX) / 2;\n  const cy = (P2.clientY + P1.clientY) / 2;\n  const distance = Math.hypot(dx, dy);\n  const angle = -(Math.atan2(dx, dy) * 180) / Math.PI;\n  const origin = [cx, cy];\n  return {\n    angle,\n    distance,\n    origin\n  };\n}\nfunction touchIds(event) {\n  return getCurrentTargetTouchList(event).map(touch => touch.identifier);\n}\nfunction touchDistanceAngle(event, ids) {\n  const [P1, P2] = Array.from(event.touches).filter(touch => ids.includes(touch.identifier));\n  return distanceAngle(P1, P2);\n}\nfunction pointerId(event) {\n  const valueEvent = getValueEvent(event);\n  return isTouch(event) ? valueEvent.identifier : valueEvent.pointerId;\n}\nfunction pointerValues(event) {\n  const valueEvent = getValueEvent(event);\n  return [valueEvent.clientX, valueEvent.clientY];\n}\nconst LINE_HEIGHT = 40;\nconst PAGE_HEIGHT = 800;\nfunction wheelValues(event) {\n  let {\n    deltaX,\n    deltaY,\n    deltaMode\n  } = event;\n\n  if (deltaMode === 1) {\n    deltaX *= LINE_HEIGHT;\n    deltaY *= LINE_HEIGHT;\n  } else if (deltaMode === 2) {\n    deltaX *= PAGE_HEIGHT;\n    deltaY *= PAGE_HEIGHT;\n  }\n\n  return [deltaX, deltaY];\n}\nfunction scrollValues(event) {\n  var _ref, _ref2;\n\n  const {\n    scrollX,\n    scrollY,\n    scrollLeft,\n    scrollTop\n  } = event.currentTarget;\n  return [(_ref = scrollX !== null && scrollX !== void 0 ? scrollX : scrollLeft) !== null && _ref !== void 0 ? _ref : 0, (_ref2 = scrollY !== null && scrollY !== void 0 ? scrollY : scrollTop) !== null && _ref2 !== void 0 ? _ref2 : 0];\n}\nfunction getEventDetails(event) {\n  const payload = {};\n  if ('buttons' in event) payload.buttons = event.buttons;\n\n  if ('shiftKey' in event) {\n    const {\n      shiftKey,\n      altKey,\n      metaKey,\n      ctrlKey\n    } = event;\n    Object.assign(payload, {\n      shiftKey,\n      altKey,\n      metaKey,\n      ctrlKey\n    });\n  }\n\n  return payload;\n}\n\nfunction call(v, ...args) {\n  if (typeof v === 'function') {\n    return v(...args);\n  } else {\n    return v;\n  }\n}\nfunction noop() {}\nfunction chain(...fns) {\n  if (fns.length === 0) return noop;\n  if (fns.length === 1) return fns[0];\n  return function () {\n    let result;\n\n    for (const fn of fns) {\n      result = fn.apply(this, arguments) || result;\n    }\n\n    return result;\n  };\n}\nfunction assignDefault(value, fallback) {\n  return Object.assign({}, fallback, value || {});\n}\n\nconst BEFORE_LAST_KINEMATICS_DELAY = 32;\nclass Engine {\n  constructor(ctrl, args, key) {\n    this.ctrl = ctrl;\n    this.args = args;\n    this.key = key;\n\n    if (!this.state) {\n      this.state = {\n        values: [0, 0],\n        initial: [0, 0]\n      };\n      if (this.init) this.init();\n      this.reset();\n    }\n  }\n\n  get state() {\n    return this.ctrl.state[this.key];\n  }\n\n  set state(state) {\n    this.ctrl.state[this.key] = state;\n  }\n\n  get shared() {\n    return this.ctrl.state.shared;\n  }\n\n  get eventStore() {\n    return this.ctrl.gestureEventStores[this.key];\n  }\n\n  get timeoutStore() {\n    return this.ctrl.gestureTimeoutStores[this.key];\n  }\n\n  get config() {\n    return this.ctrl.config[this.key];\n  }\n\n  get sharedConfig() {\n    return this.ctrl.config.shared;\n  }\n\n  get handler() {\n    return this.ctrl.handlers[this.key];\n  }\n\n  reset() {\n    const {\n      state,\n      shared,\n      config,\n      ingKey,\n      args\n    } = this;\n    const {\n      transform,\n      threshold\n    } = config;\n    shared[ingKey] = state._active = state.active = state._blocked = state._force = false;\n    state._step = [false, false];\n    state.intentional = false;\n    state._movement = [0, 0];\n    state._distance = [0, 0];\n    state._delta = [0, 0];\n    state._threshold = V.sub(transform(threshold), transform([0, 0])).map(Math.abs);\n    state._bounds = [[-Infinity, Infinity], [-Infinity, Infinity]];\n    state.args = args;\n    state.axis = undefined;\n    state.memo = undefined;\n    state.elapsedTime = 0;\n    state.direction = [0, 0];\n    state.distance = [0, 0];\n    state.velocity = [0, 0];\n    state.movement = [0, 0];\n    state.delta = [0, 0];\n    state.timeStamp = 0;\n  }\n\n  start(event) {\n    const state = this.state;\n    const config = this.config;\n\n    if (!state._active) {\n      this.reset();\n      state._active = true;\n      state.target = event.target;\n      state.currentTarget = event.currentTarget;\n      state.initial = state.values;\n      state.lastOffset = config.from ? call(config.from, state) : state.offset;\n      state.offset = state.lastOffset;\n    }\n\n    state.startTime = state.timeStamp = event.timeStamp;\n  }\n\n  compute(event) {\n    const {\n      state,\n      config,\n      shared\n    } = this;\n    state.args = this.args;\n    let dt = 0;\n\n    if (event) {\n      state.event = event;\n      if (config.preventDefault && event.cancelable) state.event.preventDefault();\n      state.type = event.type;\n      shared.touches = this.ctrl.pointerIds.size || this.ctrl.touchIds.size;\n      shared.locked = !!document.pointerLockElement;\n      Object.assign(shared, getEventDetails(event));\n      shared.down = shared.pressed = shared.buttons % 2 === 1 || shared.touches > 0;\n      dt = event.timeStamp - state.timeStamp;\n      state.timeStamp = event.timeStamp;\n      state.elapsedTime = state.timeStamp - state.startTime;\n    }\n\n    if (state._active) {\n      const _absoluteDelta = state._delta.map(Math.abs);\n\n      V.addTo(state._distance, _absoluteDelta);\n    }\n\n    const [_m0, _m1] = config.transform(state._movement);\n\n    if (process.env.NODE_ENV === 'development') {\n      const isNumberAndNotNaN = v => typeof v === 'number' && !Number.isNaN(v);\n\n      if (!isNumberAndNotNaN(_m0) || !isNumberAndNotNaN(_m1)) {\n        console.warn(`[@use-gesture]: config.transform() must produce a valid result, but it was: [${_m0},${_m1}]`);\n      }\n    }\n\n    const [_t0, _t1] = state._threshold;\n    let [_s0, _s1] = state._step;\n    if (_s0 === false) _s0 = Math.abs(_m0) >= _t0 && Math.sign(_m0) * _t0;\n    if (_s1 === false) _s1 = Math.abs(_m1) >= _t1 && Math.sign(_m1) * _t1;\n    state.intentional = _s0 !== false || _s1 !== false;\n    if (!state.intentional) return;\n    state._step = [_s0, _s1];\n    const movement = [0, 0];\n    movement[0] = _s0 !== false ? _m0 - _s0 : 0;\n    movement[1] = _s1 !== false ? _m1 - _s1 : 0;\n    if (this.intent) this.intent(movement);\n\n    if (state._active && !state._blocked || state.active) {\n      state.first = state._active && !state.active;\n      state.last = !state._active && state.active;\n      state.active = shared[this.ingKey] = state._active;\n\n      if (event) {\n        if (state.first) {\n          if ('bounds' in config) state._bounds = call(config.bounds, state);\n          if (this.setup) this.setup();\n        }\n\n        state.movement = movement;\n        const previousOffset = state.offset;\n        this.computeOffset();\n\n        if (!state.last || dt > BEFORE_LAST_KINEMATICS_DELAY) {\n          state.delta = V.sub(state.offset, previousOffset);\n          const absoluteDelta = state.delta.map(Math.abs);\n          V.addTo(state.distance, absoluteDelta);\n          state.direction = state.delta.map(Math.sign);\n\n          if (!state.first && dt > 0) {\n            state.velocity = [absoluteDelta[0] / dt, absoluteDelta[1] / dt];\n          }\n        }\n      }\n    }\n\n    const rubberband = state._active ? config.rubberband || [0, 0] : [0, 0];\n    state.offset = computeRubberband(state._bounds, state.offset, rubberband);\n    this.computeMovement();\n  }\n\n  emit() {\n    const state = this.state;\n    const shared = this.shared;\n    const config = this.config;\n    if (!state._active) this.clean();\n    if ((state._blocked || !state.intentional) && !state._force && !config.triggerAllEvents) return;\n    const memo = this.handler(_objectSpread2(_objectSpread2(_objectSpread2({}, shared), state), {}, {\n      [this.aliasKey]: state.values\n    }));\n    if (memo !== undefined) state.memo = memo;\n  }\n\n  clean() {\n    this.eventStore.clean();\n    this.timeoutStore.clean();\n  }\n\n}\n\nfunction selectAxis([dx, dy]) {\n  const d = Math.abs(dx) - Math.abs(dy);\n  if (d > 0) return 'x';\n  if (d < 0) return 'y';\n  return undefined;\n}\n\nfunction restrictVectorToAxis(v, axis) {\n  switch (axis) {\n    case 'x':\n      v[1] = 0;\n      break;\n\n    case 'y':\n      v[0] = 0;\n      break;\n  }\n}\n\nclass CoordinatesEngine extends Engine {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"aliasKey\", 'xy');\n  }\n\n  reset() {\n    super.reset();\n    this.state.axis = undefined;\n  }\n\n  init() {\n    this.state.offset = [0, 0];\n    this.state.lastOffset = [0, 0];\n  }\n\n  computeOffset() {\n    this.state.offset = V.add(this.state.lastOffset, this.state.movement);\n  }\n\n  computeMovement() {\n    this.state.movement = V.sub(this.state.offset, this.state.lastOffset);\n  }\n\n  intent(v) {\n    this.state.axis = this.state.axis || selectAxis(v);\n    this.state._blocked = (this.config.lockDirection || !!this.config.axis) && !this.state.axis || !!this.config.axis && this.config.axis !== this.state.axis;\n    if (this.state._blocked) return;\n\n    if (this.config.axis || this.config.lockDirection) {\n      restrictVectorToAxis(v, this.state.axis);\n    }\n  }\n\n}\n\nconst DEFAULT_RUBBERBAND = 0.15;\nconst commonConfigResolver = {\n  enabled(value = true) {\n    return value;\n  },\n\n  preventDefault(value = false) {\n    return value;\n  },\n\n  triggerAllEvents(value = false) {\n    return value;\n  },\n\n  rubberband(value = 0) {\n    switch (value) {\n      case true:\n        return [DEFAULT_RUBBERBAND, DEFAULT_RUBBERBAND];\n\n      case false:\n        return [0, 0];\n\n      default:\n        return V.toVector(value);\n    }\n  },\n\n  from(value) {\n    if (typeof value === 'function') return value;\n    if (value != null) return V.toVector(value);\n  },\n\n  transform(value, _k, config) {\n    return value || config.shared.transform;\n  },\n\n  threshold(value) {\n    return V.toVector(value, 0);\n  }\n\n};\n\nif (process.env.NODE_ENV === 'development') {\n  Object.assign(commonConfigResolver, {\n    domTarget(value) {\n      if (value !== undefined) {\n        throw Error(`[@use-gesture]: \\`domTarget\\` option has been renamed to \\`target\\`.`);\n      }\n    },\n\n    lockDirection(value) {\n      if (value !== undefined) {\n        throw Error(`[@use-gesture]: \\`lockDirection\\` option has been merged with \\`axis\\`. Use it as in \\`{ axis: 'lock' }\\``);\n      }\n    },\n\n    initial(value) {\n      if (value !== undefined) {\n        throw Error(`[@use-gesture]: \\`initial\\` option has been renamed to \\`from\\`.`);\n      }\n    }\n\n  });\n}\n\nconst coordinatesConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {\n  axis(_v, _k, {\n    axis\n  }) {\n    this.lockDirection = axis === 'lock';\n    if (!this.lockDirection) return axis;\n  },\n\n  bounds(value = {}) {\n    if (typeof value === 'function') {\n      return state => coordinatesConfigResolver.bounds(value(state));\n    }\n\n    if ('current' in value) {\n      return () => value.current;\n    }\n\n    if (typeof HTMLElement === 'function' && value instanceof HTMLElement) {\n      return value;\n    }\n\n    const {\n      left = -Infinity,\n      right = Infinity,\n      top = -Infinity,\n      bottom = Infinity\n    } = value;\n    return [[left, right], [top, bottom]];\n  }\n\n});\n\nconst DISPLACEMENT = 10;\nconst KEYS_DELTA_MAP = {\n  ArrowRight: (factor = 1) => [DISPLACEMENT * factor, 0],\n  ArrowLeft: (factor = 1) => [-DISPLACEMENT * factor, 0],\n  ArrowUp: (factor = 1) => [0, -DISPLACEMENT * factor],\n  ArrowDown: (factor = 1) => [0, DISPLACEMENT * factor]\n};\nclass DragEngine extends CoordinatesEngine {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"ingKey\", 'dragging');\n  }\n\n  reset() {\n    super.reset();\n    const state = this.state;\n    state._pointerId = undefined;\n    state._pointerActive = false;\n    state._keyboardActive = false;\n    state._preventScroll = false;\n    state._delayed = false;\n    state.swipe = [0, 0];\n    state.tap = false;\n    state.canceled = false;\n    state.cancel = this.cancel.bind(this);\n  }\n\n  setup() {\n    const state = this.state;\n\n    if (state._bounds instanceof HTMLElement) {\n      const boundRect = state._bounds.getBoundingClientRect();\n\n      const targetRect = state.currentTarget.getBoundingClientRect();\n      const _bounds = {\n        left: boundRect.left - targetRect.left + state.offset[0],\n        right: boundRect.right - targetRect.right + state.offset[0],\n        top: boundRect.top - targetRect.top + state.offset[1],\n        bottom: boundRect.bottom - targetRect.bottom + state.offset[1]\n      };\n      state._bounds = coordinatesConfigResolver.bounds(_bounds);\n    }\n  }\n\n  cancel() {\n    const state = this.state;\n    if (state.canceled) return;\n    state.canceled = true;\n    state._active = false;\n    setTimeout(() => {\n      this.compute();\n      this.emit();\n    }, 0);\n  }\n\n  setActive() {\n    this.state._active = this.state._pointerActive || this.state._keyboardActive;\n  }\n\n  clean() {\n    this.pointerClean();\n    this.state._pointerActive = false;\n    this.state._keyboardActive = false;\n    super.clean();\n  }\n\n  pointerDown(event) {\n    const config = this.config;\n    const state = this.state;\n    if (event.buttons != null && Array.isArray(config.pointerButtons) ? !config.pointerButtons.includes(event.buttons) : config.pointerButtons !== -1 && config.pointerButtons !== event.buttons) return;\n    this.ctrl.setEventIds(event);\n\n    if (config.pointerCapture) {\n      event.target.setPointerCapture(event.pointerId);\n    }\n\n    if (state._pointerActive) return;\n    this.start(event);\n    this.setupPointer(event);\n    state._pointerId = pointerId(event);\n    state._pointerActive = true;\n    state.values = pointerValues(event);\n    state.initial = state.values;\n\n    if (config.preventScroll) {\n      this.setupScrollPrevention(event);\n    } else if (config.delay > 0) {\n      this.setupDelayTrigger(event);\n    } else {\n      this.startPointerDrag(event);\n    }\n  }\n\n  startPointerDrag(event) {\n    const state = this.state;\n    state._active = true;\n    state._preventScroll = true;\n    state._delayed = false;\n    this.compute(event);\n    this.emit();\n  }\n\n  pointerMove(event) {\n    const state = this.state;\n    const config = this.config;\n    if (!state._pointerActive) return;\n    if (state.type === event.type && event.timeStamp === state.timeStamp) return;\n    const id = pointerId(event);\n    if (state._pointerId && id !== state._pointerId) return;\n    const values = pointerValues(event);\n\n    if (document.pointerLockElement === event.target) {\n      state._delta = [event.movementX, event.movementY];\n    } else {\n      state._delta = V.sub(values, state.values);\n      state.values = values;\n    }\n\n    V.addTo(state._movement, state._delta);\n    this.compute(event);\n\n    if (state._delayed) {\n      this.timeoutStore.remove('dragDelay');\n      state.active = false;\n      this.startPointerDrag(event);\n      return;\n    }\n\n    if (config.preventScroll && !state._preventScroll) {\n      if (state.axis) {\n        if (state.axis === config.preventScrollAxis || config.preventScrollAxis === 'xy') {\n          state._active = false;\n          this.clean();\n          return;\n        } else {\n          this.timeoutStore.remove('startPointerDrag');\n          this.startPointerDrag(event);\n          return;\n        }\n      } else {\n        return;\n      }\n    }\n\n    this.emit();\n  }\n\n  pointerUp(event) {\n    this.ctrl.setEventIds(event);\n\n    try {\n      if (this.config.pointerCapture && event.target.hasPointerCapture(event.pointerId)) {\n        ;\n        event.target.releasePointerCapture(event.pointerId);\n      }\n    } catch (_unused) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(`[@use-gesture]: If you see this message, it's likely that you're using an outdated version of \\`@react-three/fiber\\`. \\n\\nPlease upgrade to the latest version.`);\n      }\n    }\n\n    const state = this.state;\n    const config = this.config;\n    if (!state._pointerActive) return;\n    const id = pointerId(event);\n    if (state._pointerId && id !== state._pointerId) return;\n    this.state._pointerActive = false;\n    this.setActive();\n    this.compute(event);\n    const [dx, dy] = state._distance;\n    state.tap = dx <= 3 && dy <= 3;\n\n    if (state.tap && config.filterTaps) {\n      state._force = true;\n    } else {\n      const [dirx, diry] = state.direction;\n      const [vx, vy] = state.velocity;\n      const [mx, my] = state.movement;\n      const [svx, svy] = config.swipe.velocity;\n      const [sx, sy] = config.swipe.distance;\n      const sdt = config.swipe.duration;\n\n      if (state.elapsedTime < sdt) {\n        if (Math.abs(vx) > svx && Math.abs(mx) > sx) state.swipe[0] = dirx;\n        if (Math.abs(vy) > svy && Math.abs(my) > sy) state.swipe[1] = diry;\n      }\n    }\n\n    this.emit();\n  }\n\n  pointerClick(event) {\n    if (!this.state.tap) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  setupPointer(event) {\n    const config = this.config;\n    let device = config.device;\n\n    if (process.env.NODE_ENV === 'development') {\n      try {\n        if (device === 'pointer') {\n          const currentTarget = 'uv' in event ? event.sourceEvent.currentTarget : event.currentTarget;\n          const style = window.getComputedStyle(currentTarget);\n\n          if (style.touchAction === 'auto') {\n            console.warn(`[@use-gesture]: The drag target has its \\`touch-action\\` style property set to \\`auto\\`. It is recommended to add \\`touch-action: 'none'\\` so that the drag gesture behaves correctly on touch-enabled devices. For more information read this: https://use-gesture.netlify.app/docs/extras/#touch-action.\\n\\nThis message will only show in development mode. It won't appear in production. If this is intended, you can ignore it.`, currentTarget);\n          }\n        }\n      } catch (_unused2) {}\n    }\n\n    if (config.pointerLock) {\n      event.currentTarget.requestPointerLock();\n    }\n\n    if (!config.pointerCapture) {\n      this.eventStore.add(this.sharedConfig.window, device, 'change', this.pointerMove.bind(this));\n      this.eventStore.add(this.sharedConfig.window, device, 'end', this.pointerUp.bind(this));\n    }\n  }\n\n  pointerClean() {\n    if (this.config.pointerLock && document.pointerLockElement === this.state.currentTarget) {\n      document.exitPointerLock();\n    }\n  }\n\n  preventScroll(event) {\n    if (this.state._preventScroll && event.cancelable) {\n      event.preventDefault();\n    }\n  }\n\n  setupScrollPrevention(event) {\n    persistEvent(event);\n    this.eventStore.add(this.sharedConfig.window, 'touch', 'change', this.preventScroll.bind(this), {\n      passive: false\n    });\n    this.eventStore.add(this.sharedConfig.window, 'touch', 'end', this.clean.bind(this), {\n      passive: false\n    });\n    this.eventStore.add(this.sharedConfig.window, 'touch', 'cancel', this.clean.bind(this), {\n      passive: false\n    });\n    this.timeoutStore.add('startPointerDrag', this.startPointerDrag.bind(this), this.config.preventScroll, event);\n  }\n\n  setupDelayTrigger(event) {\n    this.state._delayed = true;\n    this.timeoutStore.add('dragDelay', this.startPointerDrag.bind(this), this.config.delay, event);\n  }\n\n  keyDown(event) {\n    const deltaFn = KEYS_DELTA_MAP[event.key];\n    const state = this.state;\n\n    if (deltaFn) {\n      const factor = event.shiftKey ? 10 : event.altKey ? 0.1 : 1;\n      state._delta = deltaFn(factor);\n      this.start(event);\n      state._keyboardActive = true;\n      V.addTo(state._movement, state._delta);\n      this.compute(event);\n      this.emit();\n    }\n  }\n\n  keyUp(event) {\n    if (!(event.key in KEYS_DELTA_MAP)) return;\n    this.state._keyboardActive = false;\n    this.setActive();\n    this.compute(event);\n    this.emit();\n  }\n\n  bind(bindFunction) {\n    const device = this.config.device;\n    bindFunction(device, 'start', this.pointerDown.bind(this));\n\n    if (this.config.pointerCapture) {\n      bindFunction(device, 'change', this.pointerMove.bind(this));\n      bindFunction(device, 'end', this.pointerUp.bind(this));\n      bindFunction(device, 'cancel', this.pointerUp.bind(this));\n    }\n\n    bindFunction('key', 'down', this.keyDown.bind(this));\n    bindFunction('key', 'up', this.keyUp.bind(this));\n\n    if (this.config.filterTaps) {\n      bindFunction('click', '', this.pointerClick.bind(this), {\n        capture: true\n      });\n    }\n  }\n\n}\n\nfunction persistEvent(event) {\n  'persist' in event && typeof event.persist === 'function' && event.persist();\n}\n\nconst isBrowser = typeof window !== 'undefined' && window.document && window.document.createElement;\n\nfunction supportsTouchEvents() {\n  return isBrowser && 'ontouchstart' in window;\n}\n\nfunction isTouchScreen() {\n  return supportsTouchEvents() || isBrowser && window.navigator.maxTouchPoints > 1;\n}\n\nfunction supportsPointerEvents() {\n  return isBrowser && 'onpointerdown' in window;\n}\n\nfunction supportsPointerLock() {\n  return isBrowser && 'exitPointerLock' in window.document;\n}\n\nfunction supportsGestureEvents() {\n  try {\n    return 'constructor' in GestureEvent;\n  } catch (e) {\n    return false;\n  }\n}\n\nconst SUPPORT = {\n  isBrowser,\n  gesture: supportsGestureEvents(),\n  touch: supportsTouchEvents(),\n  touchscreen: isTouchScreen(),\n  pointer: supportsPointerEvents(),\n  pointerLock: supportsPointerLock()\n};\n\nconst DEFAULT_PREVENT_SCROLL_DELAY = 250;\nconst DEFAULT_DRAG_DELAY = 180;\nconst DEFAULT_SWIPE_VELOCITY = 0.5;\nconst DEFAULT_SWIPE_DISTANCE = 50;\nconst DEFAULT_SWIPE_DURATION = 250;\nconst dragConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {\n  pointerLock(_v, _k, {\n    pointer: {\n      lock = false,\n      touch = false\n    } = {}\n  }) {\n    this.useTouch = SUPPORT.touch && touch;\n    return SUPPORT.pointerLock && lock;\n  },\n\n  device(_v, _k) {\n    if (this.useTouch) return 'touch';\n    if (this.pointerLock) return 'mouse';\n    if (SUPPORT.pointer) return 'pointer';\n    if (SUPPORT.touch) return 'touch';\n    return 'mouse';\n  },\n\n  preventScroll(value = false, _k, {\n    preventScrollAxis = 'y'\n  }) {\n    if (preventScrollAxis) this.preventScrollAxis = preventScrollAxis;\n    if (!SUPPORT.touchscreen) return false;\n    if (typeof value === 'number') return value;\n    return value ? DEFAULT_PREVENT_SCROLL_DELAY : false;\n  },\n\n  pointerCapture(_v, _k, {\n    pointer: {\n      capture = true,\n      buttons = 1\n    } = {}\n  }) {\n    this.pointerButtons = buttons;\n    return !this.pointerLock && this.device === 'pointer' && capture;\n  },\n\n  threshold(value, _k, {\n    filterTaps = false,\n    axis = undefined\n  }) {\n    const threshold = V.toVector(value, filterTaps ? 3 : axis ? 1 : 0);\n    this.filterTaps = filterTaps;\n    return threshold;\n  },\n\n  swipe({\n    velocity = DEFAULT_SWIPE_VELOCITY,\n    distance = DEFAULT_SWIPE_DISTANCE,\n    duration = DEFAULT_SWIPE_DURATION\n  } = {}) {\n    return {\n      velocity: this.transform(V.toVector(velocity)),\n      distance: this.transform(V.toVector(distance)),\n      duration\n    };\n  },\n\n  delay(value = 0) {\n    switch (value) {\n      case true:\n        return DEFAULT_DRAG_DELAY;\n\n      case false:\n        return 0;\n\n      default:\n        return value;\n    }\n  }\n\n});\n\nif (process.env.NODE_ENV === 'development') {\n  Object.assign(dragConfigResolver, {\n    useTouch(value) {\n      if (value !== undefined) {\n        throw Error(`[@use-gesture]: \\`useTouch\\` option has been renamed to \\`pointer.touch\\`. Use it as in \\`{ pointer: { touch: true } }\\`.`);\n      }\n    },\n\n    experimental_preventWindowScrollY(value) {\n      if (value !== undefined) {\n        throw Error(`[@use-gesture]: \\`experimental_preventWindowScrollY\\` option has been renamed to \\`preventScroll\\`.`);\n      }\n    },\n\n    swipeVelocity(value) {\n      if (value !== undefined) {\n        throw Error(`[@use-gesture]: \\`swipeVelocity\\` option has been renamed to \\`swipe.velocity\\`. Use it as in \\`{ swipe: { velocity: 0.5 } }\\`.`);\n      }\n    },\n\n    swipeDistance(value) {\n      if (value !== undefined) {\n        throw Error(`[@use-gesture]: \\`swipeDistance\\` option has been renamed to \\`swipe.distance\\`. Use it as in \\`{ swipe: { distance: 50 } }\\`.`);\n      }\n    },\n\n    swipeDuration(value) {\n      if (value !== undefined) {\n        throw Error(`[@use-gesture]: \\`swipeDuration\\` option has been renamed to \\`swipe.duration\\`. Use it as in \\`{ swipe: { duration: 250 } }\\`.`);\n      }\n    }\n\n  });\n}\n\nconst SCALE_ANGLE_RATIO_INTENT_DEG = 30;\nconst PINCH_WHEEL_RATIO = 36;\nclass PinchEngine extends Engine {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"ingKey\", 'pinching');\n\n    _defineProperty(this, \"aliasKey\", 'da');\n  }\n\n  init() {\n    this.state.offset = [1, 0];\n    this.state.lastOffset = [1, 0];\n    this.state._pointerEvents = new Map();\n  }\n\n  reset() {\n    super.reset();\n    const state = this.state;\n    state._touchIds = [];\n    state.canceled = false;\n    state.cancel = this.cancel.bind(this);\n    state.turns = 0;\n  }\n\n  computeOffset() {\n    const {\n      type,\n      movement,\n      lastOffset\n    } = this.state;\n\n    if (type === 'wheel') {\n      this.state.offset = V.add(movement, lastOffset);\n    } else {\n      this.state.offset = [(1 + movement[0]) * lastOffset[0], movement[1] + lastOffset[1]];\n    }\n  }\n\n  computeMovement() {\n    const {\n      offset,\n      lastOffset\n    } = this.state;\n    this.state.movement = [offset[0] / lastOffset[0], offset[1] - lastOffset[1]];\n  }\n\n  intent(v) {\n    const state = this.state;\n\n    if (!state.axis) {\n      const axisMovementDifference = Math.abs(v[0]) * SCALE_ANGLE_RATIO_INTENT_DEG - Math.abs(v[1]);\n      if (axisMovementDifference < 0) state.axis = 'angle';else if (axisMovementDifference > 0) state.axis = 'scale';\n    }\n\n    if (this.config.lockDirection) {\n      if (state.axis === 'scale') v[1] = 0;else if (state.axis === 'angle') v[0] = 0;\n    }\n  }\n\n  cancel() {\n    const state = this.state;\n    if (state.canceled) return;\n    setTimeout(() => {\n      state.canceled = true;\n      state._active = false;\n      this.compute();\n      this.emit();\n    }, 0);\n  }\n\n  touchStart(event) {\n    this.ctrl.setEventIds(event);\n    const state = this.state;\n    const ctrlTouchIds = this.ctrl.touchIds;\n\n    if (state._active) {\n      if (state._touchIds.every(id => ctrlTouchIds.has(id))) return;\n    }\n\n    if (ctrlTouchIds.size < 2) return;\n    this.start(event);\n    state._touchIds = Array.from(ctrlTouchIds).slice(0, 2);\n    const payload = touchDistanceAngle(event, state._touchIds);\n    this.pinchStart(event, payload);\n  }\n\n  pointerStart(event) {\n    if (event.buttons != null && event.buttons % 2 !== 1) return;\n    this.ctrl.setEventIds(event);\n    event.target.setPointerCapture(event.pointerId);\n    const state = this.state;\n    const _pointerEvents = state._pointerEvents;\n    const ctrlPointerIds = this.ctrl.pointerIds;\n\n    if (state._active) {\n      if (Array.from(_pointerEvents.keys()).every(id => ctrlPointerIds.has(id))) return;\n    }\n\n    if (_pointerEvents.size < 2) {\n      _pointerEvents.set(event.pointerId, event);\n    }\n\n    if (state._pointerEvents.size < 2) return;\n    this.start(event);\n    const payload = distanceAngle(...Array.from(_pointerEvents.values()));\n    this.pinchStart(event, payload);\n  }\n\n  pinchStart(event, payload) {\n    const state = this.state;\n    state.origin = payload.origin;\n    state.values = [payload.distance, payload.angle];\n    state.initial = state.values;\n    this.compute(event);\n    this.emit();\n  }\n\n  touchMove(event) {\n    if (!this.state._active) return;\n    const payload = touchDistanceAngle(event, this.state._touchIds);\n    this.pinchMove(event, payload);\n  }\n\n  pointerMove(event) {\n    const _pointerEvents = this.state._pointerEvents;\n\n    if (_pointerEvents.has(event.pointerId)) {\n      _pointerEvents.set(event.pointerId, event);\n    }\n\n    if (!this.state._active) return;\n    const payload = distanceAngle(...Array.from(_pointerEvents.values()));\n    this.pinchMove(event, payload);\n  }\n\n  pinchMove(event, payload) {\n    const state = this.state;\n    const prev_a = state.values[1];\n    const delta_a = payload.angle - prev_a;\n    let delta_turns = 0;\n    if (Math.abs(delta_a) > 270) delta_turns += Math.sign(delta_a);\n    state.values = [payload.distance, payload.angle - 360 * delta_turns];\n    state.origin = payload.origin;\n    state.turns = delta_turns;\n    state._movement = [state.values[0] / state.initial[0] - 1, state.values[1] - state.initial[1]];\n    this.compute(event);\n    this.emit();\n  }\n\n  touchEnd(event) {\n    this.ctrl.setEventIds(event);\n    if (!this.state._active) return;\n\n    if (this.state._touchIds.some(id => !this.ctrl.touchIds.has(id))) {\n      this.state._active = false;\n      this.compute(event);\n      this.emit();\n    }\n  }\n\n  pointerEnd(event) {\n    const state = this.state;\n    this.ctrl.setEventIds(event);\n\n    try {\n      event.target.releasePointerCapture(event.pointerId);\n    } catch (_unused) {}\n\n    if (state._pointerEvents.has(event.pointerId)) {\n      state._pointerEvents.delete(event.pointerId);\n    }\n\n    if (!state._active) return;\n\n    if (state._pointerEvents.size < 2) {\n      state._active = false;\n      this.compute(event);\n      this.emit();\n    }\n  }\n\n  gestureStart(event) {\n    if (event.cancelable) event.preventDefault();\n    const state = this.state;\n    if (state._active) return;\n    this.start(event);\n    state.values = [event.scale, event.rotation];\n    state.origin = [event.clientX, event.clientY];\n    this.compute(event);\n    this.emit();\n  }\n\n  gestureMove(event) {\n    if (event.cancelable) event.preventDefault();\n    if (!this.state._active) return;\n    const state = this.state;\n    state.values = [event.scale, event.rotation];\n    state.origin = [event.clientX, event.clientY];\n    const _previousMovement = state._movement;\n    state._movement = [event.scale - 1, event.rotation];\n    state._delta = V.sub(state._movement, _previousMovement);\n    this.compute(event);\n    this.emit();\n  }\n\n  gestureEnd(event) {\n    if (!this.state._active) return;\n    this.state._active = false;\n    this.compute(event);\n    this.emit();\n  }\n\n  wheel(event) {\n    if (!event.ctrlKey) return;\n    if (!this.state._active) this.wheelStart(event);else this.wheelChange(event);\n    this.timeoutStore.add('wheelEnd', this.wheelEnd.bind(this));\n  }\n\n  wheelStart(event) {\n    this.start(event);\n    this.wheelChange(event);\n  }\n\n  wheelChange(event) {\n    const isR3f = ('uv' in event);\n\n    if (!isR3f) {\n      if (event.cancelable) {\n        event.preventDefault();\n      }\n\n      if (process.env.NODE_ENV === 'development' && !event.defaultPrevented) {\n        console.warn(`[@use-gesture]: To properly support zoom on trackpads, try using the \\`target\\` option.\\n\\nThis message will only appear in development mode.`);\n      }\n    }\n\n    const state = this.state;\n    state._delta = [-wheelValues(event)[1] / PINCH_WHEEL_RATIO * state.offset[0], 0];\n    V.addTo(state._movement, state._delta);\n    this.state.origin = [event.clientX, event.clientY];\n    this.compute(event);\n    this.emit();\n  }\n\n  wheelEnd() {\n    if (!this.state._active) return;\n    this.state._active = false;\n    this.compute();\n    this.emit();\n  }\n\n  bind(bindFunction) {\n    const device = this.config.device;\n\n    if (!!device) {\n      bindFunction(device, 'start', this[device + 'Start'].bind(this));\n      bindFunction(device, 'change', this[device + 'Move'].bind(this));\n      bindFunction(device, 'end', this[device + 'End'].bind(this));\n      bindFunction(device, 'cancel', this[device + 'End'].bind(this));\n    } else {\n      bindFunction('wheel', '', this.wheel.bind(this), {\n        passive: false\n      });\n    }\n  }\n\n}\n\nconst pinchConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {\n  useTouch(_v, _k, {\n    pointer: {\n      touch = false\n    } = {}\n  }) {\n    return SUPPORT.touch && touch;\n  },\n\n  device(_v, _k, config) {\n    const sharedConfig = config.shared;\n    if (sharedConfig.target && !SUPPORT.touch && SUPPORT.gesture) return 'gesture';\n    if (this.useTouch) return 'touch';\n\n    if (SUPPORT.touchscreen) {\n      if (SUPPORT.pointer) return 'pointer';\n      if (SUPPORT.touch) return 'touch';\n    }\n  },\n\n  bounds(_v, _k, {\n    scaleBounds = {},\n    angleBounds = {}\n  }) {\n    const _scaleBounds = state => {\n      const D = assignDefault(call(scaleBounds, state), {\n        min: -Infinity,\n        max: Infinity\n      });\n      return [D.min, D.max];\n    };\n\n    const _angleBounds = state => {\n      const A = assignDefault(call(angleBounds, state), {\n        min: -Infinity,\n        max: Infinity\n      });\n      return [A.min, A.max];\n    };\n\n    if (typeof scaleBounds !== 'function' && typeof angleBounds !== 'function') return [_scaleBounds(), _angleBounds()];\n    return state => [_scaleBounds(state), _angleBounds(state)];\n  },\n\n  threshold(value, _k, config) {\n    this.lockDirection = config.axis === 'lock';\n    const threshold = V.toVector(value, this.lockDirection ? [0.1, 3] : 0);\n    return threshold;\n  }\n\n});\n\nclass MoveEngine extends CoordinatesEngine {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"ingKey\", 'moving');\n  }\n\n  move(event) {\n    if (this.config.mouseOnly && event.pointerType !== 'mouse') return;\n    if (!this.state._active) this.moveStart(event);else this.moveChange(event);\n    this.timeoutStore.add('moveEnd', this.moveEnd.bind(this));\n  }\n\n  moveStart(event) {\n    this.start(event);\n    const state = this.state;\n    state.values = pointerValues(event);\n    this.compute(event);\n    state.initial = state.values;\n    this.emit();\n  }\n\n  moveChange(event) {\n    if (!this.state._active) return;\n    const values = pointerValues(event);\n    const state = this.state;\n    state._delta = V.sub(values, state.values);\n    V.addTo(state._movement, state._delta);\n    state.values = values;\n    this.compute(event);\n    this.emit();\n  }\n\n  moveEnd(event) {\n    if (!this.state._active) return;\n    this.state._active = false;\n    this.compute(event);\n    this.emit();\n  }\n\n  bind(bindFunction) {\n    bindFunction('pointer', 'change', this.move.bind(this));\n    bindFunction('pointer', 'leave', this.moveEnd.bind(this));\n  }\n\n}\n\nconst moveConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {\n  mouseOnly: (value = true) => value\n});\n\nclass ScrollEngine extends CoordinatesEngine {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"ingKey\", 'scrolling');\n  }\n\n  scroll(event) {\n    if (!this.state._active) this.start(event);\n    this.scrollChange(event);\n    this.timeoutStore.add('scrollEnd', this.scrollEnd.bind(this));\n  }\n\n  scrollChange(event) {\n    if (event.cancelable) event.preventDefault();\n    const state = this.state;\n    const values = scrollValues(event);\n    state._delta = V.sub(values, state.values);\n    V.addTo(state._movement, state._delta);\n    state.values = values;\n    this.compute(event);\n    this.emit();\n  }\n\n  scrollEnd() {\n    if (!this.state._active) return;\n    this.state._active = false;\n    this.compute();\n    this.emit();\n  }\n\n  bind(bindFunction) {\n    bindFunction('scroll', '', this.scroll.bind(this));\n  }\n\n}\n\nconst scrollConfigResolver = coordinatesConfigResolver;\n\nclass WheelEngine extends CoordinatesEngine {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"ingKey\", 'wheeling');\n  }\n\n  wheel(event) {\n    if (!this.state._active) this.start(event);\n    this.wheelChange(event);\n    this.timeoutStore.add('wheelEnd', this.wheelEnd.bind(this));\n  }\n\n  wheelChange(event) {\n    const state = this.state;\n    state._delta = wheelValues(event);\n    V.addTo(this.state._movement, state._delta);\n    this.compute(event);\n    this.emit();\n  }\n\n  wheelEnd() {\n    if (!this.state._active) return;\n    this.state._active = false;\n    this.compute();\n    this.emit();\n  }\n\n  bind(bindFunction) {\n    bindFunction('wheel', '', this.wheel.bind(this));\n  }\n\n}\n\nconst wheelConfigResolver = coordinatesConfigResolver;\n\nclass HoverEngine extends CoordinatesEngine {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"ingKey\", 'hovering');\n  }\n\n  enter(event) {\n    if (this.config.mouseOnly && event.pointerType !== 'mouse') return;\n    this.start(event);\n    this.state.values = pointerValues(event);\n    this.compute(event);\n    this.emit();\n  }\n\n  leave(event) {\n    if (this.config.mouseOnly && event.pointerType !== 'mouse') return;\n    const state = this.state;\n    if (!state._active) return;\n    state._active = false;\n    const values = pointerValues(event);\n    state._movement = state._delta = V.sub(values, state.values);\n    state.values = values;\n    this.compute(event);\n    state.delta = state.movement;\n    this.emit();\n  }\n\n  bind(bindFunction) {\n    bindFunction('pointer', 'enter', this.enter.bind(this));\n    bindFunction('pointer', 'leave', this.leave.bind(this));\n  }\n\n}\n\nconst hoverConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {\n  mouseOnly: (value = true) => value\n});\n\nconst EngineMap = new Map();\nconst ConfigResolverMap = new Map();\nfunction registerAction(action) {\n  EngineMap.set(action.key, action.engine);\n  ConfigResolverMap.set(action.key, action.resolver);\n}\nconst dragAction = {\n  key: 'drag',\n  engine: DragEngine,\n  resolver: dragConfigResolver\n};\nconst hoverAction = {\n  key: 'hover',\n  engine: HoverEngine,\n  resolver: hoverConfigResolver\n};\nconst moveAction = {\n  key: 'move',\n  engine: MoveEngine,\n  resolver: moveConfigResolver\n};\nconst pinchAction = {\n  key: 'pinch',\n  engine: PinchEngine,\n  resolver: pinchConfigResolver\n};\nconst scrollAction = {\n  key: 'scroll',\n  engine: ScrollEngine,\n  resolver: scrollConfigResolver\n};\nconst wheelAction = {\n  key: 'wheel',\n  engine: WheelEngine,\n  resolver: wheelConfigResolver\n};\n\nexport { ConfigResolverMap as C, EngineMap as E, SUPPORT as S, _objectSpread2 as _, _defineProperty as a, touchIds as b, chain as c, toHandlerProp as d, dragAction as e, hoverAction as h, isTouch as i, moveAction as m, pinchAction as p, registerAction as r, scrollAction as s, toDomEventType as t, wheelAction as w };\n","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nexport { _extends as extends, _objectWithoutPropertiesLoose as objectWithoutPropertiesLoose };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class HeaderNames {\r\n    public static AuthKey: string = \"Ocp-Apim-Subscription-Key\";\r\n    public static ConnectionId: string = \"X-ConnectionId\";\r\n    public static ContentType: string = \"Content-Type\";\r\n    public static CustomCommandsAppId: string = \"X-CommandsAppId\";\r\n    public static Path: string = \"Path\";\r\n    public static RequestId: string = \"X-RequestId\";\r\n    public static RequestStreamId: string = \"X-StreamId\";\r\n    public static RequestTimestamp: string = \"X-Timestamp\";\r\n}\r\n","import { createContext } from 'react';\n\nvar menuContainerClass = 'szh-menu-container';\nvar menuClass = 'szh-menu';\nvar menuButtonClass = 'szh-menu-button';\nvar menuArrowClass = 'arrow';\nvar menuItemClass = 'item';\nvar menuDividerClass = 'divider';\nvar menuHeaderClass = 'header';\nvar menuGroupClass = 'group';\nvar subMenuClass = 'submenu';\nvar radioGroupClass = 'radio-group';\nvar initialHoverIndex = -1;\nvar HoverIndexContext = /*#__PURE__*/createContext(initialHoverIndex);\nvar MenuListItemContext = /*#__PURE__*/createContext({});\nvar MenuListContext = /*#__PURE__*/createContext({});\nvar EventHandlersContext = /*#__PURE__*/createContext({});\nvar RadioGroupContext = /*#__PURE__*/createContext({});\nvar SettingsContext = /*#__PURE__*/createContext({});\nvar ItemSettingsContext = /*#__PURE__*/createContext({});\nvar Keys = /*#__PURE__*/Object.freeze({\n  ENTER: 'Enter',\n  ESC: 'Escape',\n  SPACE: ' ',\n  HOME: 'Home',\n  END: 'End',\n  LEFT: 'ArrowLeft',\n  RIGHT: 'ArrowRight',\n  UP: 'ArrowUp',\n  DOWN: 'ArrowDown'\n});\nvar HoverIndexActionTypes = /*#__PURE__*/Object.freeze({\n  RESET: 'HOVER_RESET',\n  SET: 'HOVER_SET',\n  UNSET: 'HOVER_UNSET',\n  INCREASE: 'HOVER_INCREASE',\n  DECREASE: 'HOVER_DECREASE',\n  FIRST: 'HOVER_FIRST',\n  LAST: 'HOVER_LAST'\n});\nvar SubmenuActionTypes = /*#__PURE__*/Object.freeze({\n  OPEN: 'SUBMENU_OPEN',\n  CLOSE: 'SUBMENU_CLOSE'\n});\nvar CloseReason = /*#__PURE__*/Object.freeze({\n  CLICK: 'click',\n  CANCEL: 'cancel',\n  BLUR: 'blur',\n  SCROLL: 'scroll'\n});\nvar FocusPositions = /*#__PURE__*/Object.freeze({\n  INITIAL: 'initial',\n  FIRST: 'first',\n  LAST: 'last'\n});\nvar MenuStateMap = /*#__PURE__*/Object.freeze({\n  entering: 'opening',\n  entered: 'open',\n  exiting: 'closing',\n  exited: 'closed'\n});\n\nexport { CloseReason, EventHandlersContext, FocusPositions, HoverIndexActionTypes, HoverIndexContext, ItemSettingsContext, Keys, MenuListContext, MenuListItemContext, MenuStateMap, RadioGroupContext, SettingsContext, SubmenuActionTypes, initialHoverIndex, menuArrowClass, menuButtonClass, menuClass, menuContainerClass, menuDividerClass, menuGroupClass, menuHeaderClass, menuItemClass, radioGroupClass, subMenuClass };\n","import { unstable_batchedUpdates } from 'react-dom';\n\nvar isMenuOpen = function isMenuOpen(state) {\n  return !!state && state[0] === 'o';\n};\nvar batchedUpdates = unstable_batchedUpdates || function (callback) {\n  return callback();\n};\nvar values = Object.values || function (obj) {\n  return Object.keys(obj).map(function (key) {\n    return obj[key];\n  });\n};\nvar floatEqual = function floatEqual(a, b, diff) {\n  if (diff === void 0) {\n    diff = 0.0001;\n  }\n\n  return Math.abs(a - b) < diff;\n};\nvar getTransition = function getTransition(transition, name) {\n  return !!(transition && transition[name]) || transition === true;\n};\nvar safeCall = function safeCall(fn, arg) {\n  return typeof fn === 'function' ? fn(arg) : fn;\n};\nvar getName = function getName(component) {\n  return component && component['_szhsinMenu'];\n};\nvar defineName = function defineName(component, name) {\n  return name ? Object.defineProperty(component, '_szhsinMenu', {\n    value: name\n  }) : component;\n};\nvar applyHOC = function applyHOC(HOC) {\n  return function () {\n    return defineName(HOC.apply(void 0, arguments), getName(arguments.length <= 0 ? undefined : arguments[0]));\n  };\n};\nvar applyStatics = function applyStatics(sourceComponent) {\n  return function (wrappedComponent) {\n    return defineName(wrappedComponent, getName(sourceComponent));\n  };\n};\nvar attachHandlerProps = function attachHandlerProps(handlers, props) {\n  if (!props) return handlers;\n  var result = {};\n\n  var _loop = function _loop(_i2, _Object$keys2) {\n    var handlerName = _Object$keys2[_i2];\n    var handler = handlers[handlerName];\n    var propHandler = props[handlerName];\n    var attachedHandler = void 0;\n\n    if (typeof propHandler === 'function') {\n      attachedHandler = function attachedHandler(e) {\n        propHandler(e);\n        handler(e);\n      };\n    } else {\n      attachedHandler = handler;\n    }\n\n    result[handlerName] = attachedHandler;\n  };\n\n  for (var _i2 = 0, _Object$keys2 = Object.keys(handlers); _i2 < _Object$keys2.length; _i2++) {\n    _loop(_i2, _Object$keys2);\n  }\n\n  return result;\n};\nvar parsePadding = function parsePadding(paddingStr) {\n  if (typeof paddingStr !== 'string') return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  };\n  var padding = paddingStr.trim().split(/\\s+/, 4).map(parseFloat);\n  var top = !isNaN(padding[0]) ? padding[0] : 0;\n  var right = !isNaN(padding[1]) ? padding[1] : top;\n  return {\n    top: top,\n    right: right,\n    bottom: !isNaN(padding[2]) ? padding[2] : top,\n    left: !isNaN(padding[3]) ? padding[3] : right\n  };\n};\nvar getScrollAncestor = function getScrollAncestor(node) {\n  while (node && node !== document.body) {\n    var _getComputedStyle = getComputedStyle(node),\n        overflow = _getComputedStyle.overflow,\n        overflowX = _getComputedStyle.overflowX,\n        overflowY = _getComputedStyle.overflowY;\n\n    if (/auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX)) return node;\n    node = node.parentNode;\n  }\n\n  return window;\n};\nvar validateIndex = function validateIndex(index, isDisabled, node) {\n  if (process.env.NODE_ENV !== 'production' && index === undefined && !isDisabled) {\n    var error = \"[React-Menu] Validate item '\" + (node && node.toString()) + \"' failed.\\nYou're probably creating wrapping components or HOC over MenuItem, SubMenu or FocusableItem.\\nTo create wrapping components, see: https://codesandbox.io/s/react-menu-wrapping-q0b59\\nTo create HOCs, see: https://codesandbox.io/s/react-menu-hoc-0bipn\";\n    throw new Error(error);\n  }\n};\nfunction commonProps(isDisabled, isHovering) {\n  return {\n    'aria-disabled': isDisabled || undefined,\n    tabIndex: isDisabled ? undefined : isHovering ? 0 : -1\n  };\n}\n\nexport { applyHOC, applyStatics, attachHandlerProps, batchedUpdates, commonProps, defineName, floatEqual, getName, getScrollAncestor, getTransition, isMenuOpen, parsePadding, safeCall, validateIndex, values };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport enum AudioFormatTag {\r\n    PCM = 1,\r\n    MuLaw,\r\n    Siren,\r\n    MP3,\r\n    SILKSkype,\r\n    OGG_OPUS,\r\n    WEBM_OPUS,\r\n    ALaw,\r\n    FLAC,\r\n    OPUS,\r\n}\r\n\r\n/**\r\n * Represents audio stream format used for custom audio input configurations.\r\n * @class AudioStreamFormat\r\n */\r\nexport abstract class AudioStreamFormat {\r\n    /**\r\n     * Creates an audio stream format object representing the default audio stream\r\n     * format (16KHz 16bit mono PCM).\r\n     * @member AudioStreamFormat.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormat {\r\n        return AudioStreamFormatImpl.getDefaultInputFormat();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified format characteristics.\r\n     * @member AudioStreamFormat.getWaveFormat\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     *        uses one channel and stereo data uses two channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormat(samplesPerSecond: number, bitsPerSample: number, channels: number, format: AudioFormatTag): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels, format);\r\n    }\r\n\r\n    /**\r\n     * Creates an audio stream format object with the specified pcm waveformat characteristics.\r\n     * @member AudioStreamFormat.getWaveFormatPCM\r\n     * @function\r\n     * @public\r\n     * @param {number} samplesPerSecond - Sample rate, in samples per second (Hertz).\r\n     * @param {number} bitsPerSample - Bits per sample, typically 16.\r\n     * @param {number} channels - Number of channels in the waveform-audio data. Monaural data\r\n     *        uses one channel and stereo data uses two channels.\r\n     * @returns {AudioStreamFormat} The audio stream format being created.\r\n     */\r\n    public static getWaveFormatPCM(samplesPerSecond: number, bitsPerSample: number, channels: number): AudioStreamFormat {\r\n        return new AudioStreamFormatImpl(samplesPerSecond, bitsPerSample, channels);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioStreamFormat.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * @private\r\n * @class AudioStreamFormatImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioStreamFormatImpl extends AudioStreamFormat {\r\n    protected privHeader: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {number} channels - Number of channels.\r\n     * @param {AudioFormatTag} format - Audio format (PCM, alaw or mulaw).\r\n     */\r\n    public constructor(samplesPerSec: number = 16000, bitsPerSample: number = 16, channels: number = 1, format: AudioFormatTag = AudioFormatTag.PCM) {\r\n        super();\r\n\r\n        let isWavFormat: boolean = true;\r\n        /* 1 for PCM; 6 for alaw; 7 for mulaw */\r\n        switch (format) {\r\n            case AudioFormatTag.PCM:\r\n                this.formatTag = 1;\r\n                break;\r\n            case AudioFormatTag.ALaw:\r\n                this.formatTag = 6;\r\n                break;\r\n            case AudioFormatTag.MuLaw:\r\n                this.formatTag = 7;\r\n                break;\r\n            default:\r\n                isWavFormat = false;\r\n        }\r\n        this.bitsPerSample = bitsPerSample;\r\n        this.samplesPerSec = samplesPerSec;\r\n        this.channels = channels;\r\n        this.avgBytesPerSec = this.samplesPerSec * this.channels * (this.bitsPerSample / 8);\r\n        this.blockAlign = this.channels * Math.max(this.bitsPerSample, 8);\r\n\r\n        if (isWavFormat) {\r\n            this.privHeader = new ArrayBuffer(44);\r\n\r\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\r\n            const view = new DataView(this.privHeader);\r\n\r\n            /* RIFF identifier */\r\n            this.setString(view, 0, \"RIFF\");\r\n            /* file length */\r\n            view.setUint32(4, 0, true);\r\n            /* RIFF type & Format */\r\n            this.setString(view, 8, \"WAVEfmt \");\r\n            /* format chunk length */\r\n            view.setUint32(16, 16, true);\r\n            /* audio format */\r\n            view.setUint16(20, this.formatTag, true);\r\n            /* channel count */\r\n            view.setUint16(22, this.channels, true);\r\n            /* sample rate */\r\n            view.setUint32(24, this.samplesPerSec, true);\r\n            /* byte rate (sample rate * block align) */\r\n            view.setUint32(28, this.avgBytesPerSec, true);\r\n            /* block align (channel count * bytes per sample) */\r\n            view.setUint16(32, this.channels * (this.bitsPerSample / 8), true);\r\n            /* bits per sample */\r\n            view.setUint16(34, this.bitsPerSample, true);\r\n            /* data chunk identifier */\r\n            this.setString(view, 36, \"data\");\r\n            /* data chunk length */\r\n            view.setUint32(40, 0, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the default input format.\r\n     * @member AudioStreamFormatImpl.getDefaultInputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {AudioStreamFormatImpl} The default input format.\r\n     */\r\n    public static getDefaultInputFormat(): AudioStreamFormatImpl {\r\n        return new AudioStreamFormatImpl();\r\n    }\r\n\r\n    /**\r\n     * Creates an audio context appropriate to current browser\r\n     * @member AudioStreamFormatImpl.getAudioContext\r\n     * @function\r\n     * @public\r\n     * @returns {AudioContext} An audio context instance\r\n     */\r\n    public static getAudioContext(sampleRate?: number): AudioContext {\r\n        // Workaround for Speech SDK bug in Safari.\r\n        const AudioContext = (window as any).AudioContext // our preferred impl\r\n            || (window as any).webkitAudioContext // fallback, mostly when on Safari\r\n            || false; // could not find.\r\n\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\r\n        if (!!AudioContext) {\r\n            if (sampleRate !== undefined && navigator.mediaDevices.getSupportedConstraints().sampleRate) {\r\n                return new AudioContext({ sampleRate });\r\n            } else {\r\n                return new AudioContext();\r\n            }\r\n        } else {\r\n            throw new Error(\"Browser does not support Web Audio API (AudioContext is not available).\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Closes the configuration object.\r\n     * @member AudioStreamFormatImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void { return; }\r\n\r\n    /**\r\n     * The format of the audio, valid values: 1 (PCM)\r\n     * @member AudioStreamFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: number;\r\n\r\n    /**\r\n     * The number of channels, valid values: 1 (Mono).\r\n     * @member AudioStreamFormatImpl.prototype.channels\r\n     * @function\r\n     * @public\r\n     */\r\n    public channels: number;\r\n\r\n    /**\r\n     * The sample rate, valid values: 16000.\r\n     * @member AudioStreamFormatImpl.prototype.samplesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public samplesPerSec: number;\r\n\r\n    /**\r\n     * The bits per sample, valid values: 16\r\n     * @member AudioStreamFormatImpl.prototype.b\r\n     * @function\r\n     * @public\r\n     */\r\n    public bitsPerSample: number;\r\n\r\n    /**\r\n     * Average bytes per second, usually calculated as nSamplesPerSec * nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.avgBytesPerSec\r\n     * @function\r\n     * @public\r\n     */\r\n    public avgBytesPerSec: number;\r\n\r\n    /**\r\n     * The size of a single frame, valid values: nChannels * ceil(wBitsPerSample, 8).\r\n     * @member AudioStreamFormatImpl.prototype.blockAlign\r\n     * @function\r\n     * @public\r\n     */\r\n    public blockAlign: number;\r\n\r\n    public get header(): ArrayBuffer {\r\n        return this.privHeader;\r\n    }\r\n\r\n    protected setString = (view: DataView, offset: number, str: string): void => {\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(offset + i, str.charCodeAt(i));\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    IAudioDestination,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports\";\r\nimport { Contracts } from \"../Contracts\";\r\nimport {\r\n    AudioStreamFormat,\r\n    PushAudioOutputStreamCallback\r\n} from \"../Exports\";\r\nimport { AudioOutputFormatImpl } from \"./AudioOutputFormat\";\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class AudioOutputStream\r\n */\r\nexport abstract class AudioOutputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Sets the format of the AudioOutputStream\r\n     * Note: the format is set by the synthesizer before writing. Do not set it before passing it to AudioConfig\r\n     * @member AudioOutputStream.prototype.format\r\n     */\r\n    public abstract set format(format: AudioStreamFormat);\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member AudioOutputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The audio output stream being created.\r\n     */\r\n    public static createPullStream(): PullAudioOutputStream {\r\n        return PullAudioOutputStream.create();\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @class PullAudioOutputStream\r\n */\r\nexport abstract class PullAudioOutputStream extends AudioOutputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PullAudioOutputStream with the specified audio format.\r\n     * @member PullAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @returns {PullAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(): PullAudioOutputStream {\r\n        return new PullAudioOutputStreamImpl();\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStream.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} Audio buffer length has been read.\r\n     */\r\n    public abstract read(dataBuffer: ArrayBuffer): Promise<number>;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PullAudioOutputStreamImpl\r\n */\r\nexport class PullAudioOutputStreamImpl extends PullAudioOutputStream implements IAudioDestination {\r\n    private privFormat: AudioOutputFormatImpl;\r\n    private privId: string;\r\n    private privStream: Stream<ArrayBuffer>;\r\n    private privLastChunkView: Int8Array;\r\n\r\n    /**\r\n     * Creates and initializes an instance with the given values.\r\n     * @constructor\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new Stream<ArrayBuffer>();\r\n    }\r\n\r\n    /**\r\n     * Sets the format information to the stream. For internal use only.\r\n     * @param {AudioStreamFormat} format - the format to be set.\r\n     */\r\n    public set format(format: AudioStreamFormat) {\r\n        if (format === undefined || format === null) {\r\n            this.privFormat = AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        this.privFormat = format as AudioOutputFormatImpl;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): AudioStreamFormat {\r\n        return this.privFormat;\r\n    }\r\n\r\n    /**\r\n     * Checks if the stream is closed\r\n     * @member PullAudioOutputStreamImpl.prototype.isClosed\r\n     * @property\r\n     * @public\r\n     */\r\n    public get isClosed(): boolean {\r\n        return this.privStream.isClosed;\r\n    }\r\n\r\n    /**\r\n     * Gets the id of the stream\r\n     * @member PullAudioOutputStreamImpl.prototype.id\r\n     * @property\r\n     * @public\r\n     */\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    /**\r\n     * Reads audio data from the internal buffer.\r\n     * @member PullAudioOutputStreamImpl.prototype.read\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - An ArrayBuffer to store the read data.\r\n     * @returns {Promise<number>} - Audio buffer length has been read.\r\n     */\r\n    public async read(dataBuffer: ArrayBuffer): Promise<number> {\r\n        const intView: Int8Array = new Int8Array(dataBuffer);\r\n        let totalBytes: number = 0;\r\n\r\n        if (this.privLastChunkView !== undefined) {\r\n            if (this.privLastChunkView.length > dataBuffer.byteLength) {\r\n                intView.set(this.privLastChunkView.slice(0, dataBuffer.byteLength));\r\n                this.privLastChunkView = this.privLastChunkView.slice(dataBuffer.byteLength);\r\n                return Promise.resolve(dataBuffer.byteLength);\r\n            }\r\n            intView.set(this.privLastChunkView);\r\n            totalBytes = this.privLastChunkView.length;\r\n            this.privLastChunkView = undefined;\r\n        }\r\n\r\n        // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n        while (totalBytes < dataBuffer.byteLength && !this.privStream.isReadEnded) {\r\n            const chunk: IStreamChunk<ArrayBuffer> = await this.privStream.read();\r\n            if (chunk !== undefined && !chunk.isEnd) {\r\n                let tmpBuffer: ArrayBuffer;\r\n                if (chunk.buffer.byteLength > dataBuffer.byteLength - totalBytes) {\r\n                    tmpBuffer = chunk.buffer.slice(0, dataBuffer.byteLength - totalBytes);\r\n                    this.privLastChunkView = new Int8Array(chunk.buffer.slice(dataBuffer.byteLength - totalBytes));\r\n                } else {\r\n                    tmpBuffer = chunk.buffer;\r\n                }\r\n                intView.set(new Int8Array(tmpBuffer), totalBytes);\r\n                totalBytes += tmpBuffer.byteLength;\r\n            } else {\r\n                await this.privStream.readEnded();\r\n            }\r\n        }\r\n        return totalBytes;\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PullAudioOutputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        Contracts.throwIfNullOrUndefined(this.privStream, \"must set format before writing\");\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioOutputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @class PushAudioOutputStream\r\n */\r\nexport abstract class PushAudioOutputStream extends AudioOutputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { super(); }\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * write() and close() methods.\r\n     * @member PushAudioOutputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     *        derived from PushAudioOutputStreamCallback\r\n     * @returns {PushAudioOutputStream} The push audio output stream being created.\r\n     */\r\n    public static create(callback: PushAudioOutputStreamCallback): PushAudioOutputStream {\r\n        return new PushAudioOutputStreamImpl(callback);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PushAudioOutputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio output stream used for custom audio output configurations.\r\n * @private\r\n * @class PushAudioOutputStreamImpl\r\n */\r\nexport class PushAudioOutputStreamImpl extends PushAudioOutputStream implements IAudioDestination {\r\n    private readonly privId: string;\r\n    private privCallback: PushAudioOutputStreamCallback;\r\n\r\n    /**\r\n     * Creates a PushAudioOutputStream that delegates to the specified callback interface for\r\n     * read() and close() methods.\r\n     * @constructor\r\n     * @param {PushAudioOutputStreamCallback} callback - The custom audio output object,\r\n     *        derived from PushAudioOutputStreamCallback\r\n     */\r\n    public constructor(callback: PushAudioOutputStreamCallback) {\r\n        super();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n    }\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public set format(format: AudioStreamFormat) { }\r\n\r\n    public write(buffer: ArrayBuffer): void {\r\n        if (!!this.privCallback.write) {\r\n            this.privCallback.write(buffer);\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        if (!!this.privCallback.close) {\r\n            this.privCallback.close();\r\n        }\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ServicePropertiesPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport { IConnection, IStringDictionary } from \"../common/Exports\";\r\nimport { OutputFormat, PropertyId } from \"../sdk/Exports\";\r\nimport { AuthInfo, IConnectionFactory, RecognitionMode, RecognizerConfig, WebsocketMessageFormatter } from \"./Exports\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport abstract class ConnectionFactoryBase implements IConnectionFactory {\r\n\r\n    public static getHostSuffix(region: string): string {\r\n        if (!!region) {\r\n            if (region.toLowerCase().startsWith(\"china\")) {\r\n                return \".azure.cn\";\r\n            }\r\n            if (region.toLowerCase().startsWith(\"usgov\")) {\r\n                return \".azure.us\";\r\n            }\r\n        }\r\n        return \".microsoft.com\";\r\n    }\r\n\r\n    public abstract create(\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection;\r\n\r\n    protected setCommonUrlParams(\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_EnableAudioLogging,\r\n            QueryParameterNames.EnableAudioLogging,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps,\r\n            QueryParameterNames.EnableWordLevelTimestamps,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_ProfanityOption,\r\n            QueryParameterNames.Profanity,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_InitialSilenceTimeoutMs,\r\n            QueryParameterNames.InitialSilenceTimeoutMs,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceConnection_EndSilenceTimeoutMs,\r\n            QueryParameterNames.EndSilenceTimeoutMs,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        this.setUrlParameter(PropertyId.SpeechServiceResponse_StablePartialResultThreshold,\r\n            QueryParameterNames.StableIntermediateThreshold,\r\n            config,\r\n            queryParams,\r\n            endpoint);\r\n\r\n        const serviceProperties: IStringDictionary<string> = JSON.parse(config.parameters.getProperty(ServicePropertiesPropertyName, \"{}\"));\r\n\r\n        Object.keys(serviceProperties).forEach((value: string, num: number, array: string[]) => {\r\n            queryParams[value] = serviceProperties[value];\r\n        });\r\n    }\r\n\r\n    protected setUrlParameter(\r\n        propId: PropertyId,\r\n        parameterName: string,\r\n        config: RecognizerConfig,\r\n        queryParams: IStringDictionary<string>,\r\n        endpoint: string): void {\r\n\r\n        const value: string = config.parameters.getProperty(propId, undefined);\r\n\r\n        if (value && (!endpoint || endpoint.search(parameterName) === -1)) {\r\n            queryParams[parameterName] = value.toLocaleLowerCase();\r\n        }\r\n    }\r\n\r\n}\r\n","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nimport isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nimport isNativeFunction from \"@babel/runtime/helpers/esm/isNativeFunction\";\nimport construct from \"@babel/runtime/helpers/esm/construct\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\n/**\r\n * The error that is thrown when an argument passed in is null.\r\n *\r\n * @export\r\n * @class ArgumentNullError\r\n * @extends {Error}\r\n */\r\nexport class ArgumentNullError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ArgumentNullError.\r\n     *\r\n     * @param {string} argumentName - Name of the argument that is null\r\n     *\r\n     * @memberOf ArgumentNullError\r\n     */\r\n    public constructor(argumentName: string) {\r\n        super(argumentName);\r\n        this.name = \"ArgumentNull\";\r\n        this.message = argumentName;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an invalid operation is performed in the code.\r\n *\r\n * @export\r\n * @class InvalidOperationError\r\n * @extends {Error}\r\n */\r\nexport class InvalidOperationError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of InvalidOperationError.\r\n     *\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf InvalidOperationError\r\n     */\r\n    public constructor(error: string) {\r\n        super(error);\r\n        this.name = \"InvalidOperation\";\r\n        this.message = error;\r\n    }\r\n}\r\n\r\n/**\r\n * The error that is thrown when an object is disposed.\r\n *\r\n * @export\r\n * @class ObjectDisposedError\r\n * @extends {Error}\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ObjectDisposedError extends Error {\r\n\r\n    /**\r\n     * Creates an instance of ObjectDisposedError.\r\n     *\r\n     * @param {string} objectName - The object that is disposed\r\n     * @param {string} error - The error\r\n     *\r\n     * @memberOf ObjectDisposedError\r\n     */\r\n    public constructor(objectName: string, error?: string) {\r\n        super(error);\r\n        this.name = objectName + \"ObjectDisposed\";\r\n        this.message = error;\r\n    }\r\n}\r\n","const PhantomCore = require(\"phantom-core\");\nconst { EVT_UPDATED, EVT_DESTROYED } = PhantomCore;\nconst stopMediaStreamTrack = require(\"../utils/mediaStreamTrack/stopMediaStreamTrack\");\n\n// FIXME: Use PhantomCollection instead?\nconst _instances = {};\n\n// FIXME: Extend PhantomState and use _isTrackEnded, _isMuted properties as\n// state?\n/**\n * NOTE: Once a MediaStreamTrack is associated with a track controller, it\n * will be stopped when the controller is destructed.\n *\n * IMPORTANT: For most use cases, this class should not be utilized directly,\n * and instead should be utilized by the AudioMediaStreamTrackController and\n * VideoMediaStreamTrackController extension classes.\n */\nclass MediaStreamTrackControllerBase extends PhantomCore {\n  /**\n   * Retrieves currently active MediaStreamTrackController instances.\n   *\n   * @return {MediaStreamTrackController[]}\n   */\n  static getTrackControllerInstances() {\n    return Object.values(_instances);\n  }\n\n  /**\n   * Retrieves all track controllers with the given MediaStreamTrack.\n   *\n   * @param {MediaStreamTrack} mediaStreamTrack\n   * @return {MediaStreamTrackControllerBase[]}\n   */\n  static getTrackControllersWithTrack(mediaStreamTrack) {\n    const controllers =\n      MediaStreamTrackControllerBase.getTrackControllerInstances();\n\n    return controllers.filter(controller =>\n      Object.is(controller._inputMediaStreamTrack, mediaStreamTrack)\n    );\n  }\n\n  /**\n   * @param {MediaStreamTrack} inputMediaStreamTrack\n   * @param {Object} phantomCoreOptions? [default = {}]\n   */\n  constructor(inputMediaStreamTrack, phantomCoreOptions = {}) {\n    if (!(inputMediaStreamTrack instanceof MediaStreamTrack)) {\n      throw new TypeError(\n        \"inputMediaStreamTrack is not of MediaStreamTrack type\"\n      );\n    }\n\n    super(phantomCoreOptions);\n\n    _instances[this._uuid] = this;\n\n    this._inputMediaStreamTrack = Object.seal(inputMediaStreamTrack);\n\n    // TODO: Dynamically handle w/ passed option\n    // IMPORTANT: Do not clone input track for the output track because it\n    // makes it difficult for the controller to stop the underlying device when\n    // destructed\n    //\n    // FIXME: (jh) The previous message may no longer be the case after\n    // applying workaround fixes to track stopping, however I'm not yet\n    // positive if cloning the track would bring any additional benefit and\n    // haven't yet looked into this further\n    this._outputMediaStreamTrack = Object.seal(inputMediaStreamTrack);\n\n    this._isTrackEnded = false;\n\n    this._isMuted = false;\n\n    // Destroy instance once track ends\n    (() => {\n      // IMPORTANT: This setImmediate is utilized so that\n      // _outputMediaStreamTrack can be overridden by extender's constructor\n      setImmediate(() => {\n        const _handleTrackEnded = () => {\n          // This check is here to prevent an infinite loop resulting in\n          // Maximum Callstack Error\n          if (!this._isTrackEnded) {\n            this._isTrackEnded = true;\n\n            if (!this.getIsDestroying()) {\n              this.destroy();\n            }\n          }\n        };\n\n        this._inputMediaStreamTrack.addEventListener(\n          \"ended\",\n          _handleTrackEnded\n        );\n        this._outputMediaStreamTrack.addEventListener(\n          \"ended\",\n          _handleTrackEnded\n        );\n\n        this.once(EVT_DESTROYED, () => {\n          this._inputMediaStreamTrack.removeEventListener(\n            \"ended\",\n            _handleTrackEnded\n          );\n          this._outputMediaStreamTrack.removeEventListener(\n            \"ended\",\n            _handleTrackEnded\n          );\n        });\n      });\n    })();\n  }\n\n  /**\n   * Retrieves whether the associated input MediaStreamTrack is an audio or\n   * video track.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/kind\n   *\n   * @return {\"audio\" | \"video\"}\n   */\n  getKind() {\n    return this._inputMediaStreamTrack.kind;\n  }\n\n  /**\n   * Retrieves the output MediaStreamTrack.\n   *\n   * @return {MediaStreamTrack}\n   */\n  getOutputMediaStreamTrack() {\n    return this._outputMediaStreamTrack;\n  }\n\n  /**\n   * Alias of this.getOutputMediaStreamTrack().\n   *\n   * @return {MediaStreamTrack}\n   */\n  getOutputTrack() {\n    return this._outputMediaStreamTrack;\n  }\n\n  /**\n   * @return {\"audio\" | \"video\"}\n   */\n  getTrackKind() {\n    return this._outputMediaStreamTrack.kind;\n  }\n\n  /**\n   * Retrieves the settings related to the input MediaStreamTrack.\n   *\n   * More information about supported properties can be found here:\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings\n   *\n   * @return {MediaTrackSettings}\n   */\n  getSettings() {\n    return this._inputMediaStreamTrack.getSettings();\n  }\n\n  /**\n   * Retrieves the input device ID, which is an origin-unique string\n   * identifying the source of the track.\n   *\n   * @return {string}\n   */\n  getInputDeviceId() {\n    const inputSettings = this.getSettings();\n\n    if (inputSettings) {\n      return inputSettings.deviceId;\n    }\n  }\n\n  /**\n   * Retrieves an object with a structure based on a subset of MediaDeviceInfo\n   * used for potential device matching with utils.getMediaDeviceMatch().\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n   *\n   * @return {Object}\n   */\n  getPartialMediaDeviceInfo() {\n    return {\n      deviceId: this.getInputDeviceId(),\n    };\n  }\n\n  /**\n   * Retrieves MediaDeviceInfo of the track controller, compared against given\n   * array of MediaDeviceInfo descriptions.\n   *\n   * This is written like this because this controller does may not have direct\n   * access to the known list of MediaDeviceInfo as obtained from the window\n   * navigator, and it shouldn't aggressively try to obtain the list (i.e. start\n   * a media device on its own to get the full labels).\n   *\n   * Other considerations include being able to match against remote lists.\n   *\n   * @param {MediaDeviceInfo[] | Object[]} mediaDeviceInfoList\n   * @return {MediaDeviceInfo | Object}\n   */\n  getInputMediaDeviceInfoFromList(mediaDeviceInfoList) {\n    // FIXME: This require is included within the function body itself because\n    // of a conflict when trying to use it in the outer-scope and trying to\n    // instantiate the class.\n    //\n    // Fixes Uncaught TypeError: Class extends value #<Object> is not a\n    // constructor or null\n    const getMatchedMediaDevice = require(\"../utils/mediaDevice/getMatchedMediaDevice\");\n\n    const partialMediaDeviceInfo = this.getPartialMediaDeviceInfo();\n\n    return getMatchedMediaDevice(\n      `${this.getKind()}input`,\n      partialMediaDeviceInfo,\n      mediaDeviceInfoList\n    );\n  }\n\n  /**\n   * @param {boolean} isMuted\n   * @return {Promise<void>}\n   */\n  async setIsMuted(isMuted) {\n    this._isMuted = isMuted;\n\n    this.emit(EVT_UPDATED);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  getIsMuted() {\n    return this._isMuted;\n  }\n\n  /**\n   * @return {Promise<void>}\n   */\n  async mute() {\n    return this.setIsMuted(true);\n  }\n\n  /**\n   * @return {Promise<void>}\n   */\n  async unmute() {\n    return this.setIsMuted(false);\n  }\n\n  /**\n   * Sets muting state to alternate state.\n   *\n   * @return {Promise<void>}\n   */\n  async toggleMute() {\n    this.setIsMuted(!this._isMuted);\n  }\n\n  /**\n   * Alias for this.destroy().\n   *\n   * @return {Promise<void>}\n   */\n  async stop() {\n    return this.destroy();\n  }\n\n  /**\n   * TODO: Utilize destroyHandler?\n   * @return {Promise<void>}\n   */\n  async destroy() {\n    return super.destroy(() => {\n      // Automatically stop input and output tracks\n      stopMediaStreamTrack(this._inputMediaStreamTrack);\n      stopMediaStreamTrack(this._outputMediaStreamTrack);\n\n      delete _instances[this._uuid];\n    });\n  }\n}\n\nmodule.exports = MediaStreamTrackControllerBase;\nmodule.exports.EVT_UPDATED = EVT_UPDATED;\nmodule.exports.EVT_DESTROYED = EVT_DESTROYED;\n","import { useMemo } from 'react';\n\nvar useBEM = function useBEM(_ref) {\n  var block = _ref.block,\n      element = _ref.element,\n      modifiers = _ref.modifiers,\n      className = _ref.className;\n  return useMemo(function () {\n    var blockElement = element ? block + \"__\" + element : block;\n    var classString = blockElement;\n\n    for (var _i2 = 0, _Object$keys2 = Object.keys(modifiers || {}); _i2 < _Object$keys2.length; _i2++) {\n      var name = _Object$keys2[_i2];\n      var value = modifiers[name];\n\n      if (value) {\n        classString += \" \" + blockElement + \"--\";\n        classString += value === true ? name : name + \"-\" + value;\n      }\n    }\n\n    var expandedClassName = typeof className === 'function' ? className(modifiers) : className;\n\n    if (typeof expandedClassName === 'string') {\n      expandedClassName = expandedClassName.trim();\n      if (expandedClassName) classString += \" \" + expandedClassName;\n    }\n\n    return classString;\n  }, [block, element, modifiers, className]);\n};\n\nexport { useBEM };\n","const { deepMerge } = require(\"phantom-core\");\nconst { AUDIO_TRACK_KIND, VIDEO_TRACK_KIND } = require(\"../../constants\");\n\n/**\n * Deep merges, the given user constraints onto the default constraints, where\n * user constraints take precedence.\n *\n * The individual constraint types are first normalized, in order to provide\n * protection against mix of booleans and objects, multi-level intermediate\n * objects (improperly formed constraints), etc.\n *\n * @param {MediaTrackConstraints} defaultConstraints? [default = {}]\n * @param {MediaTrackConstraints} userConstraints? [default = {}]\n * @return {Object} // TODO: Document return object\n */\nmodule.exports = function mergeConstraints(\n  defaultConstraints = {},\n  userConstraints = {}\n) {\n  const defaultAudioConstraints = normalizeConstraints(\n    AUDIO_TRACK_KIND,\n    defaultConstraints && defaultConstraints.audio\n  );\n  const defaultVideoConstraints = normalizeConstraints(\n    VIDEO_TRACK_KIND,\n    defaultConstraints && defaultConstraints.video\n  );\n\n  const userAudioConstraints = normalizeConstraints(\n    AUDIO_TRACK_KIND,\n    userConstraints && userConstraints.audio\n  );\n  const userVideoConstraints = normalizeConstraints(\n    VIDEO_TRACK_KIND,\n    userConstraints && userConstraints.video\n  );\n\n  const nextDefaultConstraints = deepMerge(\n    defaultAudioConstraints,\n    defaultVideoConstraints\n  );\n\n  const nextUserConstraints = deepMerge(\n    userAudioConstraints,\n    userVideoConstraints\n  );\n\n  const merged = deepMerge(nextDefaultConstraints, nextUserConstraints);\n\n  return merged;\n};\n\n/**\n * Given the set of constraints of the given kind (audio or video), normalizes\n * the constraints with the kind as a sub-object and the constraints defined\n * within that sub-object, regardless if the sub-object was part of the\n * supplied constraints.\n *\n * IMPORTANT: This should be considered a \"helper\" utility and shouldn't\n * generally be utilized on its own.\n *\n * @param {\"audio\" | \"video\"} kind\n * @param {Object | boolean | null | undefined} userConstraints\n * @return {Object} // TODO: Document return object\n */\nfunction normalizeConstraints(kind, userConstraints = {}) {\n  if (kind !== AUDIO_TRACK_KIND && kind !== VIDEO_TRACK_KIND) {\n    throw new TypeError(\"kind must be either audio or video\");\n  }\n\n  if (\n    typeof userConstraints !== \"object\" &&\n    typeof userConstraints !== \"boolean\"\n  ) {\n    throw new TypeError(\n      `userConstraints must be either an object or a boolean; received \"${typeof userConstraints}\" type`\n    );\n  }\n\n  // Implement direct boolean pass-thru w/ base sub-object\n  if (typeof userConstraints === \"boolean\") {\n    return {\n      [kind]: Boolean(userConstraints),\n    };\n  }\n\n  // Allow userConstraints to be null\n  if (userConstraints === null || userConstraints === undefined) {\n    userConstraints = {};\n  }\n\n  if (userConstraints[kind] === undefined) {\n    // Migrate existing user constraints to new object\n    const prevUserConstraints = { ...userConstraints };\n\n    userConstraints = {\n      [kind]: prevUserConstraints,\n    };\n  } else if (userConstraints[kind][kind] !== undefined) {\n    // Fix situations where doubled-up kind may be inadvertently passed via\n    // userConstraints\n    userConstraints[kind] = { ...userConstraints[kind][kind] };\n  }\n\n  // Return empty object if no constraints of the given kind\n  if (!Object.keys(userConstraints[kind]).length) {\n    return {};\n  }\n\n  return userConstraints;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst createGuid: () => string = (): string => {\r\n    return uuid();\r\n};\r\n\r\nconst createNoDashGuid: () => string = (): string => {\r\n    return createGuid().replace(new RegExp(\"-\", \"g\"), \"\").toUpperCase();\r\n};\r\n\r\nexport { createGuid, createNoDashGuid };\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class QueryParameterNames {\r\n    public static BotId: string = \"botid\";\r\n    public static CustomSpeechDeploymentId: string = \"cid\";\r\n    public static CustomVoiceDeploymentId: string = \"deploymentId\";\r\n    public static EnableAudioLogging: string = \"storeAudio\";\r\n    public static EnableLanguageId: string = \"lidEnabled\";\r\n    public static EnableWordLevelTimestamps: string = \"wordLevelTimestamps\";\r\n    public static EndSilenceTimeoutMs: string = \"endSilenceTimeoutMs\";\r\n    public static Format: string = \"format\";\r\n    public static InitialSilenceTimeoutMs: string = \"initialSilenceTimeoutMs\";\r\n    public static Language: string = \"language\";\r\n    public static Profanity: string = \"profanity\";\r\n    public static RequestBotStatusMessages: string = \"enableBotMessageStatus\";\r\n    public static StableIntermediateThreshold: string = \"stableIntermediateThreshold\";\r\n    public static StableTranslation: string = \"stableTranslation\";\r\n    public static TestHooks: string = \"testhooks\";\r\n}\r\n","function clamp(v, min, max) {\n  return Math.max(min, Math.min(v, max));\n}\nconst V = {\n  toVector(v, fallback) {\n    if (v === undefined) v = fallback;\n    return Array.isArray(v) ? v : [v, v];\n  },\n\n  add(v1, v2) {\n    return [v1[0] + v2[0], v1[1] + v2[1]];\n  },\n\n  sub(v1, v2) {\n    return [v1[0] - v2[0], v1[1] - v2[1]];\n  },\n\n  addTo(v1, v2) {\n    v1[0] += v2[0];\n    v1[1] += v2[1];\n  },\n\n  subTo(v1, v2) {\n    v1[0] -= v2[0];\n    v1[1] -= v2[1];\n  }\n\n};\n\nfunction rubberband(distance, dimension, constant) {\n  if (dimension === 0 || Math.abs(dimension) === Infinity) return Math.pow(distance, constant * 5);\n  return distance * dimension * constant / (dimension + constant * distance);\n}\n\nfunction rubberbandIfOutOfBounds(position, min, max, constant = 0.15) {\n  if (constant === 0) return clamp(position, min, max);\n  if (position < min) return -rubberband(min - position, max - min, constant) + min;\n  if (position > max) return +rubberband(position - max, max - min, constant) + max;\n  return position;\n}\nfunction computeRubberband(bounds, [Vx, Vy], [Rx, Ry]) {\n  const [[X0, X1], [Y0, Y1]] = bounds;\n  return [rubberbandIfOutOfBounds(Vx, X0, X1, Rx), rubberbandIfOutOfBounds(Vy, Y0, Y1, Ry)];\n}\n\nexport { V, computeRubberband as c, rubberbandIfOutOfBounds as r };\n","import { extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { useMemo } from 'react';\n\nvar isObject = function isObject(obj) {\n  return obj && typeof obj === 'object';\n};\n\nvar sanitiseKey = function sanitiseKey(key) {\n  return key[0] === '$' ? key.slice(1) : key;\n};\n\nvar useFlatStyles = function useFlatStyles(styles, modifiers) {\n  return useMemo(function () {\n    if (typeof styles === 'function') return styles(modifiers);\n    if (!isObject(styles)) return undefined;\n    if (!modifiers) return styles;\n    var style = {};\n\n    for (var _i2 = 0, _Object$keys2 = Object.keys(styles); _i2 < _Object$keys2.length; _i2++) {\n      var prop = _Object$keys2[_i2];\n      var value = styles[prop];\n\n      if (isObject(value)) {\n        var modifierValue = modifiers[sanitiseKey(prop)];\n\n        if (typeof modifierValue === 'string') {\n          for (var _i4 = 0, _Object$keys4 = Object.keys(value); _i4 < _Object$keys4.length; _i4++) {\n            var nestedProp = _Object$keys4[_i4];\n            var nestedValue = value[nestedProp];\n\n            if (isObject(nestedValue)) {\n              if (sanitiseKey(nestedProp) === modifierValue) {\n                style = _extends({}, style, nestedValue);\n              }\n            } else {\n              style[nestedProp] = nestedValue;\n            }\n          }\n        } else if (modifierValue) {\n          style = _extends({}, style, value);\n        }\n      } else {\n        style[prop] = value;\n      }\n    }\n\n    return style;\n  }, [styles, modifiers]);\n};\n\nexport { useFlatStyles };\n","import { extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { oneOfType, string, func, object, bool, number, oneOf, exact } from 'prop-types';\n\nvar stylePropTypes = function stylePropTypes(name) {\n  var _ref;\n\n  return _ref = {}, _ref[name ? name + \"ClassName\" : 'className'] = oneOfType([string, func]), _ref[name ? name + \"Styles\" : 'styles'] = oneOfType([object, func]), _ref;\n};\nvar menuPropTypes = /*#__PURE__*/_extends({\n  className: string\n}, /*#__PURE__*/stylePropTypes('menu'), /*#__PURE__*/stylePropTypes('arrow'), {\n  arrow: bool,\n  offsetX: number,\n  offsetY: number,\n  align: /*#__PURE__*/oneOf(['start', 'center', 'end']),\n  direction: /*#__PURE__*/oneOf(['left', 'right', 'top', 'bottom']),\n  position: /*#__PURE__*/oneOf(['auto', 'anchor', 'initial']),\n  overflow: /*#__PURE__*/oneOf(['auto', 'visible', 'hidden'])\n});\nvar rootMenuPropTypes = /*#__PURE__*/_extends({}, menuPropTypes, {\n  containerProps: object,\n  initialMounted: bool,\n  unmountOnClose: bool,\n  transition: /*#__PURE__*/oneOfType([bool, /*#__PURE__*/exact({\n    open: bool,\n    close: bool,\n    item: bool\n  })]),\n  transitionTimeout: number,\n  boundingBoxRef: object,\n  boundingBoxPadding: string,\n  reposition: /*#__PURE__*/oneOf(['auto', 'initial']),\n  repositionFlag: /*#__PURE__*/oneOfType([string, number]),\n  viewScroll: /*#__PURE__*/oneOf(['auto', 'close', 'initial']),\n  submenuOpenDelay: number,\n  submenuCloseDelay: number,\n  portal: bool,\n  theming: string,\n  onItemClick: func\n});\nvar uncontrolledMenuPropTypes = {\n  instanceRef: /*#__PURE__*/oneOfType([object, func]),\n  onMenuChange: func\n};\nvar menuDefaultProps = {\n  offsetX: 0,\n  offsetY: 0,\n  align: 'start',\n  direction: 'bottom',\n  position: 'auto',\n  overflow: 'visible'\n};\nvar rootMenuDefaultProps = /*#__PURE__*/_extends({}, menuDefaultProps, {\n  reposition: 'auto',\n  viewScroll: 'initial',\n  transitionTimeout: 500,\n  submenuOpenDelay: 300,\n  submenuCloseDelay: 150\n});\n\nexport { menuDefaultProps, menuPropTypes, rootMenuDefaultProps, rootMenuPropTypes, stylePropTypes, uncontrolledMenuPropTypes };\n","module.exports = {\n  AudioMediaStreamTrackController: require(\"./audio/AudioMediaStreamTrackController\"),\n  VideoMediaStreamTrackController: require(\"./video/VideoMediaStreamTrackController\"),\n  MediaStreamTrackControllerFactory: require(\"./MediaStreamTrackControllerFactory\"),\n  MediaStreamTrackControllerFactoryCollection: require(\"./MediaStreamTrackControllerFactoryCollection\"),\n  MediaStreamTrackControllerCollection: require(\"./MediaStreamTrackControllerCollection\"),\n  utils: require(\"./utils\"),\n  AudioMediaStreamTrackLevelMonitor: require(\"./audio/AudioMediaStreamTrackLevelMonitor\"),\n  MultiAudioMediaStreamTrackLevelMonitor: require(\"./audio/MultiAudioMediaStreamTrackLevelMonitor\"),\n};\n","const { logger } = require(\"phantom-core\");\nconst MediaStreamTrackControllerCollection = require(\"./MediaStreamTrackControllerCollection\");\nconst {\n  /** @export */\n  EVT_READY,\n  /** @export */\n  EVT_UPDATED,\n  /** @export */\n  EVT_DESTROYED,\n  /** @export */\n  EVT_CHILD_INSTANCE_ADDED,\n  /** @export */\n  EVT_CHILD_INSTANCE_REMOVED,\n} = MediaStreamTrackControllerCollection;\nconst MediaStreamTrackController = require(\"./_base/_MediaStreamTrackControllerBase\");\nconst createTrackControllersFromMediaStream = require(\"./utils/mediaStreamTrack/createTrackControllersFromMediaStream\");\n\nconst _factoryInstances = {};\n\n/**\n * Factory class which breaks down a given MediaStream into\n * Audio/VideoMediaStreamTrackController constituents and uses them as a\n * collection.\n *\n * Generally, a single factory is utilized for a single gUM call.\n *\n * IMPORTANT: When all associated track controllers are removed, the factory\n * will self-destruct.\n */\nclass MediaStreamTrackControllerFactory extends MediaStreamTrackControllerCollection {\n  // TODO: Move to factory collection instead?\n  /**\n   * Retrieves currently active MediaStreamTrackController instances.\n   *\n   * @return {MediaStreamTrackController[]}\n   */\n  static getTrackControllerInstances() {\n    return MediaStreamTrackController.getTrackControllerInstances();\n  }\n\n  /**\n   * @return {MediaStreamTrackControllerFactory[]}\n   */\n  static getFactoryInstances() {\n    return Object.values(_factoryInstances);\n  }\n\n  // TODO: Move to factory collection instead?\n  /**\n   * Retrieves the factory instances which include one or more track\n   * controllers originating from the given input media device.\n   *\n   * @param {MediaDeviceInfo | Object} mediaDeviceInfo\n   * @param {string | null} kind? [default = null] // TODO: Specify available kinds\n   * @return {MediaStreamTrackControllerFactory[]}\n   */\n  static getFactoriesWithInputMediaDevice(mediaDeviceInfo, kind = null) {\n    // Gracefully ignore mediaDeviceInfo not being present; just warn about it\n    // and return an empty array\n    if (!mediaDeviceInfo || !mediaDeviceInfo.deviceId) {\n      logger.warn(\n        \"Unable to acquire associated factories for this media device because no mediaDeviceInfo is present\"\n      );\n\n      return [];\n    }\n\n    const { deviceId } = mediaDeviceInfo;\n\n    return MediaStreamTrackControllerFactory.getFactoryInstances().filter(\n      factory => factory.getInputDeviceIds(kind).includes(deviceId)\n    );\n  }\n\n  /**\n   * @param {MediaStream} inputMediaStream\n   * @param {Object} factoryOptions? // TODO: Document\n   */\n  constructor(inputMediaStream, factoryOptions = {}) {\n    if (!(inputMediaStream instanceof MediaStream)) {\n      throw new TypeError(\"inputMediaStream is not of MediaStream type\");\n    }\n\n    const initialTrackControllers = createTrackControllersFromMediaStream(\n      inputMediaStream,\n      factoryOptions\n    );\n\n    super(initialTrackControllers, factoryOptions);\n\n    _factoryInstances[this._uuid] = this;\n\n    // Handle auto-destruct once track controllers have ended\n\n    this.on(EVT_CHILD_INSTANCE_REMOVED, () => {\n      if (!this.getChildren().length && !this.getIsDestroying()) {\n        this.destroy();\n      }\n    });\n\n    // If no children are already present, self-destruct\n    if (!this.getChildren().length && !this.getIsDestroying()) {\n      this.destroy();\n    }\n  }\n\n  /**\n   * TODO: Document destroyHandler\n   * @return {Promise<void>}\n   */\n  async destroy(destroyHandler = () => null) {\n    return super.destroy(async () => {\n      await destroyHandler();\n\n      delete _factoryInstances[this._uuid];\n\n      // Destruct all children on shutdown\n      await this.destroyAllChildren();\n    });\n  }\n}\n\nmodule.exports = MediaStreamTrackControllerFactory;\n\nmodule.exports.EVT_READY = EVT_READY;\nmodule.exports.EVT_UPDATED = EVT_UPDATED;\nmodule.exports.EVT_DESTROYED = EVT_DESTROYED;\n\nmodule.exports.EVT_CHILD_INSTANCE_ADDED = EVT_CHILD_INSTANCE_ADDED;\nmodule.exports.EVT_CHILD_INSTANCE_REMOVED = EVT_CHILD_INSTANCE_REMOVED;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport {\r\n    connectivity,\r\n    ISpeechConfigAudioDevice,\r\n    type,\r\n} from \"../../common.speech/Exports\";\r\nimport {\r\n    AudioSourceEvent,\r\n    AudioSourceInitializingEvent,\r\n    AudioSourceReadyEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    ChunkedArrayBufferStream,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n    Stream,\r\n} from \"../../common/Exports\";\r\nimport { createNoDashGuid } from \"../../common/Guid\";\r\nimport { AudioStreamFormat, PullAudioInputStreamCallback } from \"../Exports\";\r\nimport { AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class AudioInputStream\r\n */\r\nexport abstract class AudioInputStream {\r\n\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member AudioInputStream.createPushStream\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     *        written to the push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPushStream(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return PushAudioInputStream.create(format);\r\n    }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for read()\r\n     * and close() methods.\r\n     * @member AudioInputStream.createPullStream\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object, derived from\r\n     *        PullAudioInputStreamCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be returned from\r\n     *        the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The audio input stream being created.\r\n     */\r\n    public static createPullStream(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return PullAudioInputStream.create(callback, format);\r\n        // throw new Error(\"Oops\");\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member AudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @class PushAudioInputStream\r\n */\r\nexport abstract class PushAudioInputStream extends AudioInputStream {\r\n\r\n    /**\r\n     * Creates a memory backed PushAudioInputStream with the specified audio format.\r\n     * @member PushAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be written to the\r\n     *        push audio stream's write() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PushAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(format?: AudioStreamFormat): PushAudioInputStream {\r\n        return new PushAudioInputStreamImpl(format);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStream.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public abstract write(dataBuffer: ArrayBuffer): void;\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n}\r\n\r\n/**\r\n * Represents memory backed push audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PushAudioInputStreamImpl\r\n */\r\nexport class PushAudioInputStreamImpl extends PushAudioInputStream implements IAudioSource {\r\n\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privStream: Stream<ArrayBuffer>;\r\n\r\n    /**\r\n     * Creates and initalizes an instance with the given values.\r\n     * @constructor\r\n     * @param {AudioStreamFormat} format - The audio stream format.\r\n     */\r\n    public constructor(format?: AudioStreamFormat) {\r\n        super();\r\n        if (format === undefined) {\r\n            this.privFormat = AudioStreamFormatImpl.getDefaultInputFormat();\r\n        } else {\r\n            this.privFormat = format as AudioStreamFormatImpl;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privStream = new ChunkedArrayBufferStream(this.privFormat.avgBytesPerSec / 10);\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Writes the audio data specified by making an internal copy of the data.\r\n     * @member PushAudioInputStreamImpl.prototype.write\r\n     * @function\r\n     * @public\r\n     * @param {ArrayBuffer} dataBuffer - The audio buffer of which this function will make a copy.\r\n     */\r\n    public write(dataBuffer: ArrayBuffer): void {\r\n        this.privStream.writeStreamChunk({\r\n            buffer: dataBuffer,\r\n            isEnd: false,\r\n            timeReceived: Date.now()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PushAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privStream.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return this.attach(\"id\").then<Blob | Buffer>((audioNode: IAudioStreamNode) => {\r\n            const data: ArrayBuffer[] = [];\r\n            let bufferData = Buffer.from(\"\");\r\n            const readCycle = (): Promise<Blob | Buffer> => {\r\n                return audioNode.read().then<Blob | Buffer>((audioStreamChunk: IStreamChunk<ArrayBuffer>) => {\r\n                    if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                        if (typeof (XMLHttpRequest) !== \"undefined\" && typeof (Blob) !== \"undefined\") {\r\n                            return Promise.resolve(new Blob(data));\r\n                        } else {\r\n                            return Promise.resolve(Buffer.from(bufferData));\r\n                        }\r\n                    } else {\r\n                        if (typeof (Blob) !== \"undefined\") {\r\n                            data.push(audioStreamChunk.buffer);\r\n                        } else {\r\n                            bufferData = Buffer.concat([bufferData, this.toBuffer(audioStreamChunk.buffer)]);\r\n                        }\r\n                        return readCycle();\r\n                    }\r\n                });\r\n            };\r\n            return readCycle();\r\n        });\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        const stream = this.privStream;\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: async () => {\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: () => {\r\n                return audioNodeId;\r\n            },\r\n            read: () => {\r\n                return stream.read();\r\n            },\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PushStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent = (event: AudioSourceEvent): void => {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private toBuffer(arrayBuffer: ArrayBuffer): Buffer {\r\n        const buf: Buffer = Buffer.alloc(arrayBuffer.byteLength);\r\n        const view: Uint8Array = new Uint8Array(arrayBuffer);\r\n        for (let i = 0; i < buf.length; ++i) {\r\n            buf[i] = view[i];\r\n        }\r\n        return buf;\r\n    }\r\n}\r\n\r\n/*\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @class PullAudioInputStream\r\n */\r\nexport abstract class PullAudioInputStream extends AudioInputStream {\r\n    /**\r\n     * Creates and initializes and instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { super(); }\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @member PullAudioInputStream.create\r\n     * @function\r\n     * @public\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     *        derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     *        returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     * @returns {PullAudioInputStream} The push audio input stream being created.\r\n     */\r\n    public static create(callback: PullAudioInputStreamCallback, format?: AudioStreamFormat): PullAudioInputStream {\r\n        return new PullAudioInputStreamImpl(callback, format as AudioStreamFormatImpl);\r\n    }\r\n\r\n    /**\r\n     * Explicitly frees any external resource attached to the object\r\n     * @member PullAudioInputStream.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract close(): void;\r\n\r\n}\r\n\r\n/**\r\n * Represents audio input stream used for custom audio input configurations.\r\n * @private\r\n * @class PullAudioInputStreamImpl\r\n */\r\nexport class PullAudioInputStreamImpl extends PullAudioInputStream implements IAudioSource {\r\n\r\n    private privCallback: PullAudioInputStreamCallback;\r\n    private privFormat: AudioStreamFormatImpl;\r\n    private privId: string;\r\n    private privEvents: EventSource<AudioSourceEvent>;\r\n    private privIsClosed: boolean;\r\n    private privBufferSize: number;\r\n\r\n    /**\r\n     * Creates a PullAudioInputStream that delegates to the specified callback interface for\r\n     * read() and close() methods, using the default format (16 kHz 16bit mono PCM).\r\n     * @constructor\r\n     * @param {PullAudioInputStreamCallback} callback - The custom audio input object,\r\n     *        derived from PullAudioInputStreamCustomCallback\r\n     * @param {AudioStreamFormat} format - The audio data format in which audio will be\r\n     *        returned from the callback's read() method (Required if format is not 16 kHz 16bit mono PCM).\r\n     */\r\n    public constructor(callback: PullAudioInputStreamCallback, format?: AudioStreamFormatImpl) {\r\n        super();\r\n        if (undefined === format) {\r\n            this.privFormat = AudioStreamFormat.getDefaultInputFormat() as AudioStreamFormatImpl;\r\n        } else {\r\n            this.privFormat = format;\r\n        }\r\n        this.privEvents = new EventSource<AudioSourceEvent>();\r\n        this.privId = createNoDashGuid();\r\n        this.privCallback = callback;\r\n        this.privIsClosed = false;\r\n        this.privBufferSize = this.privFormat.avgBytesPerSec / 10;\r\n    }\r\n\r\n    /**\r\n     * Format information for the audio\r\n     */\r\n    public get format(): Promise<AudioStreamFormatImpl> {\r\n        return Promise.resolve(this.privFormat);\r\n    }\r\n\r\n    /**\r\n     * Closes the stream.\r\n     * @member PullAudioInputStreamImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        this.privIsClosed = true;\r\n        this.privCallback.close();\r\n    }\r\n\r\n    public id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public get blob(): Promise<Blob | Buffer> {\r\n        return Promise.reject(\"Not implemented\");\r\n    }\r\n\r\n    public turnOn(): Promise<void> {\r\n        this.onEvent(new AudioSourceInitializingEvent(this.privId)); // no stream id\r\n        this.onEvent(new AudioSourceReadyEvent(this.privId));\r\n        return;\r\n    }\r\n\r\n    public async attach(audioNodeId: string): Promise<IAudioStreamNode> {\r\n        this.onEvent(new AudioStreamNodeAttachingEvent(this.privId, audioNodeId));\r\n\r\n        await this.turnOn();\r\n        this.onEvent(new AudioStreamNodeAttachedEvent(this.privId, audioNodeId));\r\n        return {\r\n            detach: () => {\r\n                this.privCallback.close();\r\n                this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n                return this.turnOff();\r\n            },\r\n            id: () => {\r\n                return audioNodeId;\r\n            },\r\n            read: (): Promise<IStreamChunk<ArrayBuffer>> => {\r\n                let totalBytes: number = 0;\r\n                let transmitBuff: ArrayBuffer;\r\n                // Until we have the minimum number of bytes to send in a transmission, keep asking for more.\r\n                while (totalBytes < this.privBufferSize) {\r\n                    // Sizing the read buffer to the delta between the perfect size and what's left means we won't ever get too much\r\n                    // data back.\r\n                    const readBuff: ArrayBuffer = new ArrayBuffer(this.privBufferSize - totalBytes);\r\n                    const pulledBytes: number = this.privCallback.read(readBuff);\r\n                    // If there is no return buffer yet defined, set the return buffer to the that was just populated.\r\n                    // This was, if we have enough data there's no copy penalty, but if we don't we have a buffer that's the\r\n                    // preferred size allocated.\r\n                    if (undefined === transmitBuff) {\r\n                        transmitBuff = readBuff;\r\n                    } else {\r\n                        // Not the first bite at the apple, so fill the return buffer with the data we got back.\r\n                        const intView: Int8Array = new Int8Array(transmitBuff);\r\n                        intView.set(new Int8Array(readBuff), totalBytes);\r\n                    }\r\n                    // If there are no bytes to read, just break out and be done.\r\n                    if (0 === pulledBytes) {\r\n                        break;\r\n                    }\r\n                    totalBytes += pulledBytes;\r\n                }\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: transmitBuff.slice(0, totalBytes),\r\n                    isEnd: this.privIsClosed || totalBytes === 0,\r\n                    timeReceived: Date.now(),\r\n                });\r\n            },\r\n        };\r\n    }\r\n\r\n    public detach(audioNodeId: string): void {\r\n        this.onEvent(new AudioStreamNodeDetachedEvent(this.privId, audioNodeId));\r\n    }\r\n\r\n    public turnOff(): Promise<void> {\r\n        return;\r\n    }\r\n\r\n    public get events(): EventSource<AudioSourceEvent> {\r\n        return this.privEvents;\r\n    }\r\n\r\n    public get deviceInfo(): Promise<ISpeechConfigAudioDevice> {\r\n        return Promise.resolve({\r\n            bitspersample: this.privFormat.bitsPerSample,\r\n            channelcount: this.privFormat.channels,\r\n            connectivity: connectivity.Unknown,\r\n            manufacturer: \"Speech SDK\",\r\n            model: \"PullStream\",\r\n            samplerate: this.privFormat.samplesPerSec,\r\n            type: type.Stream,\r\n        });\r\n    }\r\n\r\n    private onEvent = (event: AudioSourceEvent): void => {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n}\r\n","const createNewAudioContext = require(\"./createNewAudioContext\");\n\n/**\n * Retrieves a memoized shared audio context, or creates a new one and memoizes\n * it for subsequent calls.\n *\n * @return {AudioContext}\n */\nconst getSharedAudioContext = (() => {\n  // Use for caching\n  const sharedAudioCtx = createNewAudioContext();\n\n  /**\n   * Retrieves the shared AudioContext instance, creating it if not already\n   * created.\n   *\n   * @return {AudioContext}\n   */\n  return () => sharedAudioCtx;\n})();\n\nmodule.exports = getSharedAudioContext;\n","// TODO: Rename to createNewAudioContext\n/**\n * Retrieves a new AudioContext instance.\n *\n * NOTE: Subsequent calls to this will return a new AudioContext every time.\n * Most use cases might be better off calling getSharedAudioContext instead.\n *\n * @return {AudioContext | null}\n */\nmodule.exports = function createNewAudioContext() {\n  const AudioContext = window.AudioContext || window.webkitAudioContext;\n  const audioCtx = AudioContext ? new AudioContext() : null;\n\n  return audioCtx;\n};\n","const { GENERIC_INPUT_DEVICE_KIND } = require(\"../../../constants\");\n\n/**\n * Returns a filtered array of MediaDeviceInfo[-like] structures, representing\n * input devices only.\n *\n * @param {MediaDeviceInfo[] | Object[]} mediaDeviceInfoList\n * @return {MediaDeviceInfo[] | Object[]}\n */\nmodule.exports = function filterInputMediaDevices(mediaDeviceInfoList) {\n  return mediaDeviceInfoList.filter(device =>\n    device.kind.includes(GENERIC_INPUT_DEVICE_KIND)\n  );\n};\n","const stopMediaStreamTrack = require(\"../mediaStreamTrack/stopMediaStreamTrack\");\n\n/**\n * Stops all of the tracks of the given MediaStream, then removes them from the\n * stream.\n *\n * @param {MediaStream} mediaStream\n * @return {void}\n */\nmodule.exports = function stopMediaStream(mediaStream) {\n  mediaStream.getTracks().forEach(track => {\n    stopMediaStreamTrack(track);\n\n    mediaStream.removeTrack(track);\n  });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\n\r\nexport enum EventType {\r\n    Debug,\r\n    Info,\r\n    Warning,\r\n    Error,\r\n}\r\n\r\nexport class PlatformEvent {\r\n    private privName: string;\r\n    private privEventId: string;\r\n    private privEventTime: string;\r\n    private privEventType: EventType;\r\n    private privMetadata: IStringDictionary<string>;\r\n\r\n    constructor(eventName: string, eventType: EventType) {\r\n        this.privName = eventName;\r\n        this.privEventId = createNoDashGuid();\r\n        this.privEventTime = new Date().toISOString();\r\n        this.privEventType = eventType;\r\n        this.privMetadata = { };\r\n    }\r\n\r\n    public get name(): string {\r\n        return this.privName;\r\n    }\r\n\r\n    public get eventId(): string {\r\n        return this.privEventId;\r\n    }\r\n\r\n    public get eventTime(): string {\r\n        return this.privEventTime;\r\n    }\r\n\r\n    public get eventType(): EventType {\r\n        return this.privEventType;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines speech property ids.\r\n * @class PropertyId\r\n */\r\nexport enum PropertyId {\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service subscription Key. If you are using an intent recognizer, you need to specify\r\n     * to specify the LUIS endpoint key for your particular LUIS app. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]].\r\n     * @member PropertyId.SpeechServiceConnection_Key\r\n     */\r\n    SpeechServiceConnection_Key = 0,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint (url). Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromEndpoint]].\r\n     * NOTE: This endpoint is not the same as the endpoint used to obtain an access token.\r\n     * @member PropertyId.SpeechServiceConnection_Endpoint\r\n     */\r\n    SpeechServiceConnection_Endpoint,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service region. Under normal circumstances, you shouldn't have to\r\n     * use this property directly.\r\n     * Instead, use [[SpeechConfig.fromSubscription]], [[SpeechConfig.fromEndpoint]], [[SpeechConfig.fromAuthorizationToken]].\r\n     * @member PropertyId.SpeechServiceConnection_Region\r\n     */\r\n    SpeechServiceConnection_Region,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service authorization token (aka access token). Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromAuthorizationToken]], [[SpeechRecognizer.authorizationToken]],\r\n     * [[IntentRecognizer.authorizationToken]], [[TranslationRecognizer.authorizationToken]], [[SpeakerRecognizer.authorizationToken]].\r\n     * @member PropertyId.SpeechServiceAuthorization_Token\r\n     */\r\n    SpeechServiceAuthorization_Token,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service authorization type. Currently unused.\r\n     * @member PropertyId.SpeechServiceAuthorization_Type\r\n     */\r\n    SpeechServiceAuthorization_Type,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service endpoint id. Under normal circumstances, you shouldn't\r\n     * have to use this property directly.\r\n     * Instead, use [[SpeechConfig.endpointId]].\r\n     * NOTE: The endpoint id is available in the Speech Portal, listed under Endpoint Details.\r\n     * @member PropertyId.SpeechServiceConnection_EndpointId\r\n     */\r\n    SpeechServiceConnection_EndpointId,\r\n\r\n    /**\r\n     * The list of comma separated languages (BCP-47 format) used as target translation languages. Under normal circumstances,\r\n     * you shouldn't have to use this property directly.\r\n     * Instead use [[SpeechTranslationConfig.addTargetLanguage]],\r\n     * [[SpeechTranslationConfig.targetLanguages]], [[TranslationRecognizer.targetLanguages]].\r\n     * @member PropertyId.SpeechServiceConnection_TranslationToLanguages\r\n     */\r\n    SpeechServiceConnection_TranslationToLanguages,\r\n\r\n    /**\r\n     * The name of the Cognitive Service Text to Speech Service Voice. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead, use [[SpeechTranslationConfig.voiceName]].\r\n     * NOTE: Valid voice names can be found <a href=\"https://aka.ms/csspeech/voicenames\">here</a>.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationVoice\r\n     */\r\n    SpeechServiceConnection_TranslationVoice,\r\n\r\n    /**\r\n     * Translation features.\r\n     * @member PropertyId.SpeechServiceConnection_TranslationFeatures\r\n     */\r\n    SpeechServiceConnection_TranslationFeatures,\r\n\r\n    /**\r\n     * The Language Understanding Service Region. Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[LanguageUnderstandingModel]].\r\n     * @member PropertyId.SpeechServiceConnection_IntentRegion\r\n     */\r\n    SpeechServiceConnection_IntentRegion,\r\n\r\n    /**\r\n     * The host name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyHostName,\r\n\r\n    /**\r\n     * The port of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyPort,\r\n\r\n    /**\r\n     * The user name of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyUserName,\r\n\r\n    /**\r\n     * The password of the proxy server used to connect to the Cognitive Services Speech Service. Only relevant in Node.js environments.\r\n     * You shouldn't have to use this property directly.\r\n     * Instead use <see cref=\"SpeechConfig.SetProxy(string,int,string,string)\"/>.\r\n     * Added in version 1.4.0.\r\n     */\r\n    SpeechServiceConnection_ProxyPassword,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service recognition Mode. Can be \"INTERACTIVE\", \"CONVERSATION\", \"DICTATION\".\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * @member PropertyId.SpeechServiceConnection_RecoMode\r\n     */\r\n    SpeechServiceConnection_RecoMode,\r\n\r\n    /**\r\n     * The spoken language to be recognized (in BCP-47 format). Under normal circumstances, you shouldn't have to use this property\r\n     * directly.\r\n     * Instead, use [[SpeechConfig.speechRecognitionLanguage]].\r\n     * @member PropertyId.SpeechServiceConnection_RecoLanguage\r\n     */\r\n    SpeechServiceConnection_RecoLanguage,\r\n\r\n    /**\r\n     * The session id. This id is a universally unique identifier (aka UUID) representing a specific binding of an audio input stream\r\n     * and the underlying speech recognition instance to which it is bound. Under normal circumstances, you shouldn't have to use this\r\n     * property directly.\r\n     * Instead use [[SessionEventArgs.sessionId]].\r\n     * @member PropertyId.Speech_SessionId\r\n     */\r\n    Speech_SessionId,\r\n\r\n    /**\r\n     * The spoken language to be synthesized (e.g. en-US)\r\n     * @member PropertyId.SpeechServiceConnection_SynthLanguage\r\n     */\r\n    SpeechServiceConnection_SynthLanguage,\r\n\r\n    /**\r\n     * The name of the TTS voice to be used for speech synthesis\r\n     * @member PropertyId.SpeechServiceConnection_SynthVoice\r\n     */\r\n    SpeechServiceConnection_SynthVoice,\r\n\r\n    /**\r\n     * The string to specify TTS output audio format\r\n     * @member PropertyId.SpeechServiceConnection_SynthOutputFormat\r\n     */\r\n    SpeechServiceConnection_SynthOutputFormat,\r\n\r\n    /**\r\n     * The list of comma separated languages used as possible source languages\r\n     * Added in version 1.13.0\r\n     * @member PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages\r\n     */\r\n    SpeechServiceConnection_AutoDetectSourceLanguages,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output format (simple or detailed). Under normal circumstances, you shouldn't have\r\n     * to use this property directly.\r\n     * Instead use [[SpeechConfig.outputFormat]].\r\n     * @member PropertyId.SpeechServiceResponse_RequestDetailedResultTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestDetailedResultTrueFalse,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity level. Currently unused.\r\n     * @member PropertyId.SpeechServiceResponse_RequestProfanityFilterTrueFalse\r\n     */\r\n    SpeechServiceResponse_RequestProfanityFilterTrueFalse,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service response output (in JSON format). This property is available on recognition result objects only.\r\n     * @member PropertyId.SpeechServiceResponse_JsonResult\r\n     */\r\n    SpeechServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service error details (in JSON format). Under normal circumstances, you shouldn't have to\r\n     * use this property directly. Instead use [[CancellationDetails.errorDetails]].\r\n     * @member PropertyId.SpeechServiceResponse_JsonErrorDetails\r\n     */\r\n    SpeechServiceResponse_JsonErrorDetails,\r\n\r\n    /**\r\n     * The cancellation reason. Currently unused.\r\n     * @member PropertyId.CancellationDetails_Reason\r\n     */\r\n    CancellationDetails_Reason,\r\n\r\n    /**\r\n     * The cancellation text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonText\r\n     */\r\n    CancellationDetails_ReasonText,\r\n\r\n    /**\r\n     * The Cancellation detailed text. Currently unused.\r\n     * @member PropertyId.CancellationDetails_ReasonDetailedText\r\n     */\r\n    CancellationDetails_ReasonDetailedText,\r\n\r\n    /**\r\n     * The Language Understanding Service response output (in JSON format). Available via [[IntentRecognitionResult]]\r\n     * @member PropertyId.LanguageUnderstandingServiceResponse_JsonResult\r\n     */\r\n    LanguageUnderstandingServiceResponse_JsonResult,\r\n\r\n    /**\r\n     * The URL string built from speech configuration.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * NOTE: Added in version 1.7.0.\r\n     */\r\n    SpeechServiceConnection_Url,\r\n\r\n    /**\r\n     * The initial silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_InitialSilenceTimeoutMs,\r\n\r\n    /**\r\n     * The end silence timeout value (in milliseconds) used by the service.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_EndSilenceTimeoutMs,\r\n\r\n    /**\r\n     * A boolean value specifying whether audio logging is enabled in the service or not.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceConnection_EnableAudioLogging,\r\n\r\n    /**\r\n     * The requested Cognitive Services Speech Service response output profanity setting.\r\n     * Allowed values are \"masked\", \"removed\", and \"raw\".\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_ProfanityOption,\r\n\r\n    /**\r\n     * A string value specifying which post processing option should be used by service.\r\n     * Allowed values are \"TrueText\".\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_PostProcessingOption,\r\n\r\n    /**\r\n     *  A boolean value specifying whether to include word-level timestamps in the response result.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_RequestWordLevelTimestamps,\r\n\r\n    /**\r\n     * The number of times a word has to be in partial results to be returned.\r\n     * Added in version 1.7.0\r\n     */\r\n    SpeechServiceResponse_StablePartialResultThreshold,\r\n\r\n    /**\r\n     * A string value specifying the output format option in the response result. Internal use only.\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_OutputFormatOption,\r\n\r\n    /**\r\n     * A boolean value to request for stabilizing translation partial results by omitting words in the end.\r\n     * Added in version 1.7.0.\r\n     */\r\n    SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n\r\n    /**\r\n     * Identifier used to connect to the backend service.\r\n     * @member PropertyId.Conversation_ApplicationId\r\n     */\r\n    Conversation_ApplicationId,\r\n\r\n    /**\r\n     * Type of dialog backend to connect to.\r\n     * @member PropertyId.Conversation_DialogType\r\n     */\r\n    Conversation_DialogType,\r\n\r\n    /**\r\n     * Silence timeout for listening\r\n     * @member PropertyId.Conversation_Initial_Silence_Timeout\r\n     */\r\n    Conversation_Initial_Silence_Timeout,\r\n\r\n    /**\r\n     * From Id to add to speech recognition activities.\r\n     * @member PropertyId.Conversation_From_Id\r\n     */\r\n    Conversation_From_Id,\r\n\r\n    /**\r\n     * ConversationId for the session.\r\n     * @member PropertyId.Conversation_Conversation_Id\r\n     */\r\n    Conversation_Conversation_Id,\r\n\r\n    /**\r\n     * Comma separated list of custom voice deployment ids.\r\n     * @member PropertyId.Conversation_Custom_Voice_Deployment_Ids\r\n     */\r\n    Conversation_Custom_Voice_Deployment_Ids,\r\n\r\n    /**\r\n     * Speech activity template, stamp properties from the template on the activity generated by the service for speech.\r\n     * @member PropertyId.Conversation_Speech_Activity_Template\r\n     * Added in version 1.10.0.\r\n     */\r\n    Conversation_Speech_Activity_Template,\r\n\r\n    /**\r\n     * Enables or disables the receipt of turn status messages as obtained on the turnStatusReceived event.\r\n     * @member PropertyId.Conversation_Request_Bot_Status_Messages\r\n     * Added in version 1.15.0.\r\n     */\r\n    Conversation_Request_Bot_Status_Messages,\r\n\r\n    /**\r\n     * Specifies the connection ID to be provided in the Agent configuration message, e.g. a Direct Line token for\r\n     * channel authentication.\r\n     * Added in version 1.15.1.\r\n     */\r\n    Conversation_Agent_Connection_Id,\r\n\r\n    /**\r\n     * The Cognitive Services Speech Service host (url). Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Instead, use [[SpeechConfig.fromHost]].\r\n     */\r\n    SpeechServiceConnection_Host,\r\n\r\n    /**\r\n     * Set the host for service calls to the Conversation Translator REST management and websocket calls.\r\n     */\r\n    ConversationTranslator_Host,\r\n\r\n    /**\r\n     * Optionally set the the host's display name.\r\n     * Used when joining a conversation.\r\n     */\r\n    ConversationTranslator_Name,\r\n\r\n    /**\r\n     * Optionally set a value for the X-CorrelationId request header.\r\n     * Used for troubleshooting errors in the server logs. It should be a valid guid.\r\n     */\r\n    ConversationTranslator_CorrelationId,\r\n\r\n    /**\r\n     * Set the conversation token to be sent to the speech service. This enables the\r\n     * service to service call from the speech service to the Conversation Translator service for relaying\r\n     * recognitions. For internal use.\r\n     */\r\n    ConversationTranslator_Token,\r\n\r\n    /**\r\n     * The reference text of the audio for pronunciation evaluation.\r\n     * For this and the following pronunciation assessment parameters, see\r\n     * https://docs.microsoft.com/azure/cognitive-services/speech-service/rest-speech-to-text#pronunciation-assessment-parameters for details.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_ReferenceText,\r\n\r\n    /**\r\n     * The point system for pronunciation score calibration (FivePoint or HundredMark).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_GradingSystem,\r\n\r\n    /**\r\n     * The pronunciation evaluation granularity (Phoneme, Word, or FullText).\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Granularity,\r\n\r\n    /**\r\n     * Defines if enable miscue calculation.\r\n     * With this enabled, the pronounced words will be compared to the reference text,\r\n     * and will be marked with omission/insertion based on the comparison. The default setting is False.\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_EnableMiscue,\r\n\r\n    /**\r\n     * The json string of pronunciation assessment parameters\r\n     * Under normal circumstances, you shouldn't have to use this property directly.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Json,\r\n\r\n    /**\r\n     * Pronunciation assessment parameters.\r\n     * This property is intended to be read-only. The SDK is using it internally.\r\n     * Added in version 1.15.0\r\n     */\r\n    PronunciationAssessment_Params,\r\n\r\n    /**\r\n     * Version of Speaker Recognition API to use.\r\n     * Added in version 1.18.0\r\n     */\r\n    SpeakerRecognition_Api_Version\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError, ConnectionMessage, IStringDictionary, MessageType } from \"../common/Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\nexport class SpeechConnectionMessage extends ConnectionMessage {\r\n\r\n    private privPath: string;\r\n    private privRequestId: string;\r\n    private privContentType: string;\r\n    private privStreamId: string;\r\n    private privAdditionalHeaders: IStringDictionary<string>;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        path: string,\r\n        requestId: string,\r\n        contentType: string,\r\n        body: any,\r\n        streamId?: string,\r\n        additionalHeaders?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (!path) {\r\n            throw new ArgumentNullError(\"path\");\r\n        }\r\n\r\n        if (!requestId) {\r\n            throw new ArgumentNullError(\"requestId\");\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        headers[HeaderNames.Path] = path;\r\n        headers[HeaderNames.RequestId] = requestId;\r\n        headers[HeaderNames.RequestTimestamp] = new Date().toISOString();\r\n        if (contentType) {\r\n            headers[HeaderNames.ContentType] = contentType;\r\n        }\r\n\r\n        if (streamId) {\r\n            headers[HeaderNames.RequestStreamId] = streamId;\r\n        }\r\n\r\n        if (additionalHeaders) {\r\n            for (const headerName in additionalHeaders) {\r\n                if (headerName) {\r\n                    headers[headerName] = additionalHeaders[headerName];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (id) {\r\n            super(messageType, body, headers, id);\r\n        } else {\r\n            super(messageType, body, headers);\r\n        }\r\n\r\n        this.privPath = path;\r\n        this.privRequestId = requestId;\r\n        this.privContentType = contentType;\r\n        this.privStreamId = streamId;\r\n        this.privAdditionalHeaders = additionalHeaders;\r\n    }\r\n\r\n    public get path(): string {\r\n        return this.privPath;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get contentType(): string {\r\n        return this.privContentType;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public get additionalHeaders(): IStringDictionary<string> {\r\n        return this.privAdditionalHeaders;\r\n    }\r\n\r\n    public static fromConnectionMessage = (message: ConnectionMessage): SpeechConnectionMessage => {\r\n        let path = null;\r\n        let requestId = null;\r\n        let contentType = null;\r\n        let requestTimestamp = null;\r\n        let streamId = null;\r\n        const additionalHeaders: IStringDictionary<string> = {};\r\n\r\n        if (message.headers) {\r\n            for (const headerName in message.headers) {\r\n                if (headerName) {\r\n                    if (headerName.toLowerCase() === HeaderNames.Path.toLowerCase()) {\r\n                        path = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestId.toLowerCase()) {\r\n                        requestId = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestTimestamp.toLowerCase()) {\r\n                        requestTimestamp = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.ContentType.toLowerCase()) {\r\n                        contentType = message.headers[headerName];\r\n                    } else if (headerName.toLowerCase() === HeaderNames.RequestStreamId.toLowerCase()) {\r\n                        streamId = message.headers[headerName];\r\n                    } else {\r\n                        additionalHeaders[headerName] = message.headers[headerName];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return new SpeechConnectionMessage(\r\n            message.messageType,\r\n            path,\r\n            requestId,\r\n            contentType,\r\n            message.body,\r\n            streamId,\r\n            additionalHeaders,\r\n            message.id);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { INumberDictionary } from \"../../common/Exports\";\r\nimport { SpeechSynthesisOutputFormat } from \"../SpeechSynthesisOutputFormat\";\r\nimport { AudioFormatTag, AudioStreamFormatImpl } from \"./AudioStreamFormat\";\r\n\r\n/**\r\n * @private\r\n * @class AudioOutputFormatImpl\r\n * Updated in version 1.17.0\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AudioOutputFormatImpl extends AudioStreamFormatImpl {\r\n    public static SpeechSynthesisOutputFormatToString: INumberDictionary<string> = {\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw]: \"raw-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren]: \"riff-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren]: \"audio-16khz-16kbps-mono-siren\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3]: \"audio-16khz-32kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3]: \"audio-16khz-128kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3]: \"audio-16khz-64kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3]: \"audio-24khz-48kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3]: \"audio-24khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3]: \"audio-24khz-160kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk]: \"raw-16khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm]: \"riff-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm]: \"riff-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm]: \"riff-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw]: \"riff-8khz-8bit-mono-mulaw\",\r\n        [SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm]: \"raw-16khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm]: \"raw-24khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm]: \"raw-8khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus]: \"ogg-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus]: \"ogg-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm]: \"raw-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm]: \"riff-48khz-16bit-mono-pcm\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3]: \"audio-48khz-96kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3]: \"audio-48khz-192kbitrate-mono-mp3\",\r\n        [SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus]: \"ogg-48khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus]: \"webm-16khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus]: \"webm-24khz-16bit-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus]: \"webm-24khz-16bit-24kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk]: \"raw-24khz-16bit-mono-truesilk\",\r\n        [SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw]: \"raw-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw]: \"riff-8khz-8bit-mono-alaw\",\r\n        [SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus]: \"audio-16khz-16bit-32kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus]: \"audio-24khz-16bit-48kbps-mono-opus\",\r\n        [SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus]: \"audio-24khz-16bit-24kbps-mono-opus\",\r\n    };\r\n    private priAudioFormatString: string;\r\n    /**\r\n     * audio format string for synthesis request, which may differ from priAudioFormatString.\r\n     * e.g. for riff format, we will request raw format and add a header in SDK side.\r\n     */\r\n    private readonly priRequestAudioFormatString: string;\r\n    private readonly priHasHeader: boolean;\r\n\r\n    /**\r\n     * Creates an instance with the given values.\r\n     * @constructor\r\n     * @param formatTag\r\n     * @param {number} channels - Number of channels.\r\n     * @param {number} samplesPerSec - Samples per second.\r\n     * @param {number} avgBytesPerSec - Average bytes per second.\r\n     * @param {number} blockAlign - Block alignment.\r\n     * @param {number} bitsPerSample - Bits per sample.\r\n     * @param {string} audioFormatString - Audio format string\r\n     * @param {string} requestAudioFormatString - Audio format string sent to service.\r\n     * @param {boolean} hasHeader - If the format has header or not.\r\n     */\r\n    public constructor(formatTag: AudioFormatTag,\r\n                       channels: number,\r\n                       samplesPerSec: number,\r\n                       avgBytesPerSec: number,\r\n                       blockAlign: number,\r\n                       bitsPerSample: number,\r\n                       audioFormatString: string,\r\n                       requestAudioFormatString: string,\r\n                       hasHeader: boolean) {\r\n        super(samplesPerSec, bitsPerSample, channels, formatTag);\r\n        this.formatTag = formatTag;\r\n        this.avgBytesPerSec = avgBytesPerSec;\r\n        this.blockAlign = blockAlign;\r\n        this.priAudioFormatString = audioFormatString;\r\n        this.priRequestAudioFormatString = requestAudioFormatString;\r\n        this.priHasHeader = hasHeader;\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormat(speechSynthesisOutputFormat?: SpeechSynthesisOutputFormat): AudioOutputFormatImpl {\r\n        if (speechSynthesisOutputFormat === undefined) {\r\n            return AudioOutputFormatImpl.getDefaultOutputFormat();\r\n        }\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            AudioOutputFormatImpl.SpeechSynthesisOutputFormatToString[speechSynthesisOutputFormat]);\r\n    }\r\n\r\n    public static fromSpeechSynthesisOutputFormatString(speechSynthesisOutputFormatString: string): AudioOutputFormatImpl {\r\n        switch (speechSynthesisOutputFormatString) {\r\n            case \"raw-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"audio-16khz-16kbps-mono-siren\",\r\n                    true);\r\n            case \"audio-16khz-16kbps-mono-siren\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.Siren,\r\n                    1,\r\n                    16000,\r\n                    2000,\r\n                    40,\r\n                    0,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-32kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    32 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-128kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    128 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-64kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    16000,\r\n                    64 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-48kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    48 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-160kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    24000,\r\n                    160 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-16khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n\r\n            case \"riff-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"riff-8khz-8bit-mono-mulaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MuLaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-mulaw\",\r\n                    true);\r\n            case \"raw-16khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-24khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"raw-8khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    8000,\r\n                    16000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"ogg-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    16000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    24000,\r\n                    8192,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    false);\r\n            case \"riff-48khz-16bit-mono-pcm\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    48000,\r\n                    96000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-48khz-16bit-mono-pcm\",\r\n                    true);\r\n            case \"audio-48khz-96kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    96 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-192kbitrate-mono-mp3\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.MP3,\r\n                    1,\r\n                    48000,\r\n                    192 << 7,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"ogg-48khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OGG_OPUS,\r\n                    1,\r\n                    48000,\r\n                    12000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-16khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"webm-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.WEBM_OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-16khz-16bit-32kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    16000,\r\n                    4000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-48kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    6000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-24kbps-mono-opus\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.OPUS,\r\n                    1,\r\n                    24000,\r\n                    3000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-24khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    24000,\r\n                    24000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"audio-48khz-16bit-mono-flac\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.FLAC,\r\n                    1,\r\n                    48000,\r\n                    30000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-24khz-16bit-mono-truesilk\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.SILKSkype,\r\n                    1,\r\n                    24000,\r\n                    48000,\r\n                    2,\r\n                    16,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"raw-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    speechSynthesisOutputFormatString,\r\n                    false);\r\n            case \"riff-8khz-8bit-mono-alaw\":\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.ALaw,\r\n                    1,\r\n                    8000,\r\n                    8000,\r\n                    1,\r\n                    8,\r\n                    speechSynthesisOutputFormatString,\r\n                    \"raw-8khz-8bit-mono-alaw\",\r\n                    true);\r\n            case \"riff-16khz-16bit-mono-pcm\":\r\n            default:\r\n                return new AudioOutputFormatImpl(\r\n                    AudioFormatTag.PCM,\r\n                    1,\r\n                    16000,\r\n                    32000,\r\n                    2,\r\n                    16,\r\n                    \"riff-16khz-16bit-mono-pcm\",\r\n                    \"raw-16khz-16bit-mono-pcm\",\r\n                    true);\r\n        }\r\n    }\r\n\r\n    public static getDefaultOutputFormat(): AudioOutputFormatImpl {\r\n        return AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(\r\n            (typeof window !== \"undefined\") ? \"audio-24khz-48kbitrate-mono-mp3\" : \"riff-16khz-16bit-mono-pcm\");\r\n    }\r\n\r\n    /**\r\n     * The format tag of the audio\r\n     * @AudioFormatTag AudioOutputFormatImpl.prototype.formatTag\r\n     * @function\r\n     * @public\r\n     */\r\n    public formatTag: AudioFormatTag;\r\n\r\n    /**\r\n     * Specifies if this audio output format has a header\r\n     * @boolean AudioOutputFormatImpl.prototype.hasHeader\r\n     * @function\r\n     * @public\r\n     */\r\n    public get hasHeader(): boolean {\r\n        return this.priHasHeader;\r\n    }\r\n\r\n    /**\r\n     * Specifies the header of this format\r\n     * @ArrayBuffer AudioOutputFormatImpl.prototype.header\r\n     * @function\r\n     * @public\r\n     */\r\n    public get header(): ArrayBuffer {\r\n        if (this.hasHeader) {\r\n            return this.privHeader;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Updates the header based on the audio length\r\n     * @member AudioOutputFormatImpl.updateHeader\r\n     * @function\r\n     * @public\r\n     * @param {number} audioLength - the audio length\r\n     */\r\n    public updateHeader(audioLength: number): void {\r\n        if (this.priHasHeader) {\r\n            const view = new DataView(this.privHeader);\r\n            view.setUint32(40, audioLength, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio format string to be sent to the service\r\n     * @string AudioOutputFormatImpl.prototype.requestAudioFormatString\r\n     * @function\r\n     * @public\r\n     */\r\n    public get requestAudioFormatString(): string {\r\n        return this.priRequestAudioFormatString;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { EventType, PlatformEvent } from \"../common/Exports\";\r\n\r\nexport class SpeechRecognitionEvent extends PlatformEvent {\r\n    private privRequestId: string;\r\n    private privSessionId: string;\r\n\r\n    constructor(eventName: string, requestId: string, sessionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.privRequestId = requestId;\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n\r\nexport class RecognitionTriggeredEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"RecognitionTriggeredEvent\", requestId, sessionId);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class ListeningStartedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    constructor(requestId: string, sessionId: string, audioSourceId: string, audioNodeId: string) {\r\n        super(\"ListeningStartedEvent\", requestId, sessionId);\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class ConnectingToServiceEvent extends SpeechRecognitionEvent {\r\n    private privAuthFetchEventid: string;\r\n\r\n    constructor(requestId: string, authFetchEventid: string, sessionId: string) {\r\n        super(\"ConnectingToServiceEvent\", requestId, sessionId);\r\n        this.privAuthFetchEventid = authFetchEventid;\r\n    }\r\n\r\n    public get authFetchEventid(): string {\r\n        return this.privAuthFetchEventid;\r\n    }\r\n}\r\n\r\nexport class RecognitionStartedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAuthFetchEventId: string;\r\n\r\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string, authFetchEventId: string, sessionId: string) {\r\n        super(\"RecognitionStartedEvent\", requestId, sessionId);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\nexport enum RecognitionCompletionStatus {\r\n    Success,\r\n    AudioSourceError,\r\n    AudioSourceTimeout,\r\n    AuthTokenFetchError,\r\n    AuthTokenFetchTimeout,\r\n    UnAuthorized,\r\n    ConnectTimeout,\r\n    ConnectError,\r\n    ClientRecognitionActivityTimeout,\r\n    UnknownError,\r\n}\r\n\r\nexport class RecognitionEndedEvent extends SpeechRecognitionEvent {\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAuthFetchEventId: string;\r\n    private privServiceTag: string;\r\n    private privStatus: RecognitionCompletionStatus;\r\n    private privError: string;\r\n\r\n    constructor(\r\n        requestId: string,\r\n        audioSourceId: string,\r\n        audioNodeId: string,\r\n        authFetchEventId: string,\r\n        sessionId: string,\r\n        serviceTag: string,\r\n        status: RecognitionCompletionStatus,\r\n        error: string) {\r\n\r\n        super(\"RecognitionEndedEvent\", requestId, sessionId, status === RecognitionCompletionStatus.Success ? EventType.Info : EventType.Error);\r\n\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privStatus = status;\r\n        this.privError = error;\r\n        this.privServiceTag = serviceTag;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n\r\n    public get serviceTag(): string {\r\n        return this.privServiceTag;\r\n    }\r\n\r\n    public get status(): RecognitionCompletionStatus {\r\n        return this.privStatus;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface IAuthentication {\r\n    fetch(authFetchEventId: string): Promise<AuthInfo>;\r\n    fetchOnExpiry(authFetchEventId: string): Promise<AuthInfo>;\r\n}\r\n\r\nexport class AuthInfo {\r\n    private privHeaderName: string;\r\n    private privToken: string;\r\n\r\n    public constructor(headerName: string, token: string) {\r\n        this.privHeaderName = headerName;\r\n        this.privToken = token;\r\n    }\r\n\r\n    public get headerName(): string {\r\n        return this.privHeaderName;\r\n    }\r\n\r\n    public get token(): string {\r\n        return this.privToken;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"./Contracts\";\r\nimport { PropertyCollection, PropertyId, ServicePropertyChannel, SpeechConfigImpl } from \"./Exports\";\r\nimport { OutputFormat } from \"./OutputFormat\";\r\n\r\n/**\r\n * Class that defines base configurations for dialog service connector\r\n * @class DialogServiceConfig\r\n */\r\nexport abstract class DialogServiceConfig {\r\n\r\n    /**\r\n     * Creates an instance of DialogService config.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string | PropertyId, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member DialogServiceConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string | PropertyId, def?: string): string;\r\n\r\n    /**\r\n     * @member DialogServiceConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     * @summary Sets a property value that will be passed to service using the specified channel.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param porxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member DialogServiceConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to use for recognition.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets the corresponding backend application identifier.\r\n     * @member DialogServiceConfig.prototype.Conversation_ApplicationId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The application identifier to set.\r\n     */\r\n    // tslint:disable-next-line: no-empty\r\n    public set applicationId(value: string) { }\r\n\r\n    public static DialogTypes: any = class {\r\n        public static BotFramework: string = \"bot_framework\";\r\n        public static CustomCommands: string = \"custom_commands\";\r\n    };\r\n}\r\n\r\n/**\r\n * Dialog Service configuration.\r\n * @class DialogServiceConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class DialogServiceConfigImpl extends DialogServiceConfig {\r\n\r\n    private privSpeechConfig: SpeechConfigImpl;\r\n\r\n    /**\r\n     * Creates an instance of dialogService config.\r\n     */\r\n    public constructor() {\r\n        super();\r\n        this.privSpeechConfig = new SpeechConfigImpl();\r\n    }\r\n\r\n    /**\r\n     * Provides access to custom properties.\r\n     * @member DialogServiceConfigImpl.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The properties.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privSpeechConfig.properties;\r\n    }\r\n\r\n    /**\r\n     * Gets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privSpeechConfig.speechRecognitionLanguage;\r\n    }\r\n\r\n    /**\r\n     * Sets the speech recognition language.\r\n     * @member DialogServiceConfigImpl.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The language to set.\r\n     */\r\n    public set speechRecognitionLanguage(value: string) {\r\n        Contracts.throwIfNullOrWhitespace(value, \"value\");\r\n        this.privSpeechConfig.speechRecognitionLanguage = value;\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return this.privSpeechConfig.outputFormat;\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privSpeechConfig.outputFormat = value;\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to set.\r\n     * @param {string} value - The value.\r\n     */\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        this.privSpeechConfig.setProperty(name, value);\r\n    }\r\n\r\n    /**\r\n     * Sets a named property as value\r\n     * @member DialogServiceConfigImpl.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {PropertyId | string} name - The property to get.\r\n     * @param {string} def - The default value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n        return this.privSpeechConfig.getProperty(name);\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName?: string, proxyPassword?: string): void {\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyHostName, proxyHostName);\r\n        this.setProperty(PropertyId.SpeechServiceConnection_ProxyPort, `${proxyPort}`);\r\n        if (proxyUserName) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyUserName, proxyUserName);\r\n        }\r\n        if (proxyPassword) {\r\n            this.setProperty(PropertyId.SpeechServiceConnection_ProxyPassword, proxyPassword);\r\n        }\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        this.privSpeechConfig.setServiceProperty(name, value, channel);\r\n    }\r\n\r\n    /**\r\n     * Dispose of associated resources.\r\n     * @member DialogServiceConfigImpl.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    public close(): void {\r\n        return;\r\n    }\r\n}\r\n","export { C as ConfigResolverMap, E as EngineMap, e as dragAction, h as hoverAction, m as moveAction, p as pinchAction, r as registerAction, s as scrollAction, w as wheelAction } from '../../dist/actions-ef87abaa.esm.js';\nimport '../../dist/maths-b2a210f4.esm.js';\n","import { useMemo } from 'react';\n\nvar setRef = function setRef(ref, element) {\n  if (typeof ref === 'function') {\n    ref(element);\n  } else if (ref) {\n    ref.current = element;\n  }\n};\n\nvar useCombinedRef = function useCombinedRef(refA, refB) {\n  return useMemo(function () {\n    if (!refA) return refB;\n    if (!refB) return refA;\n    return function (element) {\n      setRef(refA, element);\n      setRef(refB, element);\n    };\n  }, [refA, refB]);\n};\n\nexport { useCombinedRef };\n","const { deepMerge } = require(\"phantom-core\");\nconst MediaStreamTrackControllerBase = require(\"../_base/_MediaStreamTrackControllerBase\");\nconst { EVT_UPDATED, EVT_DESTROYED } = MediaStreamTrackControllerBase;\nconst getSharedAudioContext = require(\"../utils/audioContext/getSharedAudioContext\");\nconst { AUDIO_TRACK_KIND } = require(\"../constants\");\n\n// TODO: Add stereo panner\n// https://stackoverflow.com/questions/5123844/change-left-right-balance-on-playing-audio-in-javascript?rq=1\n//    - default pan set to 0 - center\n//    - const stereoNode = new StereoPannerNode(audioContext, { pan: 0 });\n\n/**\n * Utilized for live-manipulation of audio MediaStreamTrack instances.\n */\nclass AudioMediaStreamTrackController extends MediaStreamTrackControllerBase {\n  /**\n   * @param {MediaStreamTrack} inputMediaStreamTrack\n   * @param {Object} options? [default = {}]\n   */\n  constructor(inputMediaStreamTrack, options = {}) {\n    if (inputMediaStreamTrack.kind !== AUDIO_TRACK_KIND) {\n      throw new TypeError(\"inputMediaStreamTrack is not of audio type\");\n    }\n\n    const DEFAULT_OPTIONS = {\n      isAsync: true,\n    };\n\n    super(inputMediaStreamTrack, deepMerge(DEFAULT_OPTIONS, options));\n\n    // TODO: Make dynamic w/ passed config\n    this._audioCtx = getSharedAudioContext();\n\n    // The gain level when unmuted\n    this._unmutedGain = 1;\n\n    (async () => {\n      this._src = this._audioCtx.createMediaStreamSource(\n        new MediaStream([inputMediaStreamTrack])\n      );\n\n      this._dst = this._audioCtx.createMediaStreamDestination();\n      this._gainNode = this._audioCtx.createGain();\n\n      this._src.connect(this._gainNode);\n      this._gainNode.connect(this._dst);\n\n      this._outputMediaStream = this._dst.stream;\n      this._outputMediaStreamTrack = this._outputMediaStream.getTracks()[0];\n\n      await super._init();\n    })();\n  }\n\n  /**\n   * @param {boolean} isMuted\n   * @return {Promise<void>}\n   */\n  async setIsMuted(isMuted) {\n    await this.setGain(isMuted ? 0 : this._unmutedGain, false);\n\n    return super.setIsMuted(isMuted);\n  }\n\n  /**\n   * NOTE: If the track controller is not ready, this request will defer until\n   * it is ready.\n   *\n   * @param {number} gain A floating point number from 0 - 1.\n   * @param {boolean} isSetUnmutedGain? [default = true] If true, sets the\n   * value for the gain level to be resumed after unmuting.\n   * @return {Promise<void>}\n   */\n  async setGain(gain, isSetUnmutedGain = true) {\n    if (isSetUnmutedGain) {\n      this._unmutedGain = gain;\n    }\n\n    // Defer request until track is ready\n    if (!this._isReady) {\n      await this.onceReady();\n\n      return this.setGain(gain, isSetUnmutedGain);\n    }\n\n    if (this._gainNode) {\n      this._gainNode.gain.value = gain;\n    }\n\n    this.emit(EVT_UPDATED);\n  }\n\n  /**\n   * A floating point number from 0 - 1.\n   *\n   * @return {number}\n   */\n  getGain() {\n    if (!this._isReady) {\n      throw new Error(\"AudioMediaStreamTrackController is not ready\");\n    }\n\n    return this._gainNode && this._gainNode.gain && this._gainNode.gain.value;\n  }\n\n  /**\n   * IMPORTANT: This is only accurate if the input MediaStreamTrack is directly\n   * linked (not copied) to a getUserMedia or getDisplayMedia call.\n   *\n   * @return {boolean}\n   */\n  getIsNoiseSuppressionEnabled() {\n    return this.getSettings().noiseSuppression;\n  }\n\n  /**\n   * Sets whether noise suppression filtering should be applied to the track.\n   *\n   * @param {boolean} isNoiseSuppressionEnabled\n   * @return {Promise<void>}\n   */\n  async setIsNoiseSuppressionEnabled(isNoiseSuppressionEnabled) {\n    await this._inputMediaStreamTrack.applyConstraints({\n      noiseSuppression: isNoiseSuppressionEnabled,\n    });\n\n    // NOTE: Chrome <= 96.x(+?) has a bug which does not allow for constraint\n    // updates and silently ignores the fact\n    if (isNoiseSuppressionEnabled !== this.getIsAutoGainControlEnabled()) {\n      throw new Error(\n        \"Could not successfully apply noiseSuppression update to currently running track\"\n      );\n    }\n\n    this.emit(EVT_UPDATED);\n  }\n\n  /**\n   * IMPORTANT: This is only accurate if the input MediaStreamTrack is directly\n   * linked (not copied) to a getUserMedia or getDisplayMedia call.\n   *\n   * @return {boolean}\n   */\n  getIsEchoCancellationEnabled() {\n    return this.getSettings().echoCancellation;\n  }\n\n  /**\n   * Sets whether echo cancellation filtering should be applied to the track.\n   *\n   * @param {boolean} isNoiseSuppressionEnabled\n   * @return {Promise<void>}\n   */\n  async setIsEchoCancellationEnabled(isEchoCancellationEnabled) {\n    await this._inputMediaStreamTrack.applyConstraints({\n      echoCancellation: isEchoCancellationEnabled,\n    });\n\n    // NOTE: Chrome <= 96.x(+?) has a bug which does not allow for constraint\n    // updates and silently ignores the fact\n    if (isEchoCancellationEnabled !== this.getIsEchoCancellationEnabled()) {\n      throw new Error(\n        \"Could not successfully apply echoCancellation update to currently running track\"\n      );\n    }\n\n    this.emit(EVT_UPDATED);\n  }\n\n  /**\n   * IMPORTANT: This is only accurate if the input MediaStreamTrack is directly\n   * linked (not copied) to a getUserMedia or getDisplayMedia call.\n   *\n   * @return {boolean}\n   */\n  getIsAutoGainControlEnabled() {\n    return this.getSettings().autoGainControl;\n  }\n\n  /**\n   * Sets whether auto gain control should be applied to the track.\n   *\n   * @param {boolean} isNoiseSuppressionEnabled\n   * @return {Promise<void>}\n   */\n  async setIsAutoGainControlEnabled(isAutoGainControlEnabled) {\n    await this._inputMediaStreamTrack.applyConstraints({\n      autoGainControl: isAutoGainControlEnabled,\n    });\n\n    // NOTE: Chrome <= 96.x(+?) has a bug which does not allow for constraint\n    // updates and silently ignores the fact\n    if (isAutoGainControlEnabled !== this.getIsAutoGainControlEnabled()) {\n      throw new Error(\n        \"Could not successfully apply autoGainControl update to currently running track\"\n      );\n    }\n\n    this.emit(EVT_UPDATED);\n  }\n}\n\nmodule.exports = AudioMediaStreamTrackController;\nmodule.exports.EVT_UPDATED = EVT_UPDATED;\nmodule.exports.EVT_DESTROYED = EVT_DESTROYED;\n","/**\n * Stops the given MediaStreamTrack.\n *\n * NOTE: As opposed to just calling track.stop() on the track itself, this\n * applies some workaround fixes to ensure that the track is properly managed\n * within the library.\n *\n * @param {MediaStreamTrack} mediaStreamTrack\n * @return {void}\n */\nmodule.exports = function stopMediaStreamTrack(mediaStreamTrack) {\n  mediaStreamTrack.stop();\n\n  /**\n   * Because ended is explicitly not fired when you call track.stop()\n   * yourself. It only fires when a track ends for other reasons.\n   *\n   * From the spec:\n   *\n   * Fired when...\n   * The MediaStreamTrack object's source will no longer provide any data,\n   * either because the user revoked the permissions, or because the source\n   * device has been ejected, or because the remote peer permanently stopped\n   * sending data.\n   *\n   * @link https://stackoverflow.com/questions/55953038/why-is-the-ended-event-not-firing-for-this-mediastreamtrack\n   */\n  mediaStreamTrack.dispatchEvent(new Event(\"ended\"));\n};\n","const MediaStreamTrackControllerBase = require(\"../_base/_MediaStreamTrackControllerBase\");\nconst { EVT_UPDATED, EVT_DESTROYED } = MediaStreamTrackControllerBase;\n\n/**\n * Utilized for live-manipulation of video MediaStreamTrack instances.\n */\nclass VideoMediaStreamTrackController extends MediaStreamTrackControllerBase {\n  /**\n   * @param {MediaStreamTrack} inputMediaStreamTrack\n   * @param {Object} options? [default = {}]\n   */\n  constructor(inputMediaStreamTrack, options = {}) {\n    if (inputMediaStreamTrack.kind !== \"video\") {\n      throw new TypeError(\"inputMediaStreamTrack is not of video type\");\n    }\n\n    super(inputMediaStreamTrack, options);\n  }\n\n  /**\n   * @param {boolean} isMuted\n   * @return {Promise<void>}\n   */\n  setIsMuted(isMuted) {\n    console.warn(\"video setIsMuted is not currently implemented\");\n\n    // TODO: Implement ability to mute video\n    return super.setIsMuted(isMuted);\n  }\n}\n\nmodule.exports = VideoMediaStreamTrackController;\nmodule.exports.EVT_UPDATED = EVT_UPDATED;\nmodule.exports.EVT_DESTROYED = EVT_DESTROYED;\n","const mergeConstraints = require(\"./mergeConstraints\");\n\nconst {\n  getAudioQualityPresetConstraints,\n  AUDIO_QUALITY_PRESET_MUSIC_HIGH_QUALITY,\n} = require(\"./audioQualityPresets\");\n\n/**\n * Form audio capture constraints, merging optional user constraints onto\n * internal default constraints.\n *\n * @param {MediaTrackConstraints | Object} userConstraints? [default = {}]\n * @return {MediaTrackConstraints | Object}\n */\nmodule.exports = function makeAudioConstraints(userConstraints = {}) {\n  const DEFAULT_AUDIO_CONSTRAINTS = getAudioQualityPresetConstraints(\n    AUDIO_QUALITY_PRESET_MUSIC_HIGH_QUALITY\n  );\n\n  return mergeConstraints(DEFAULT_AUDIO_CONSTRAINTS, userConstraints);\n};\n","const { GENERIC_OUTPUT_DEVICE_KIND } = require(\"../../../constants\");\n\n/**\n * Returns a filtered array of MediaDeviceInfo[-like] structures, representing\n * output devices only.\n *\n * @param {MediaDeviceInfo[] | Object[]} mediaDeviceInfoList\n * @return {MediaDeviceInfo[] | Object[]}\n */\nmodule.exports = function filterOutputMediaDevices(mediaDeviceInfoList) {\n  return mediaDeviceInfoList.filter(device =>\n    device.kind.includes(GENERIC_OUTPUT_DEVICE_KIND)\n  );\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioDestination,\r\n    IConnection,\r\n    IDisposable,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechSynthesisBookmarkEventArgs,\r\n    SpeechSynthesisEventArgs,\r\n    SpeechSynthesisResult,\r\n    SpeechSynthesisVisemeEventArgs,\r\n    SpeechSynthesisWordBoundaryEventArgs,\r\n    SpeechSynthesizer,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    AgentConfig,\r\n    CancellationErrorCodePropertyName,\r\n    ISynthesisConnectionFactory,\r\n    MetadataType,\r\n    SynthesisAudioMetadata,\r\n    SynthesisContext,\r\n    SynthesisTurn,\r\n    SynthesizerConfig\r\n} from \"./Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport class SynthesisAdapterBase implements IDisposable {\r\n    protected privSynthesisTurn: SynthesisTurn;\r\n    protected privConnectionId: string;\r\n    protected privSynthesizerConfig: SynthesizerConfig;\r\n    protected privSpeechSynthesizer: SpeechSynthesizer;\r\n    protected privSuccessCallback: (e: SpeechSynthesisResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public get synthesisContext(): SynthesisContext {\r\n        return this.privSynthesisContext;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    protected speakOverride: (ssml: string, requestId: string, sc: (e: SpeechSynthesisResult) => void, ec: (e: string) => void) => any = undefined;\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public set activityTemplate(messagePayload: string) { this.privActivityTemplate = messagePayload; }\r\n    public get activityTemplate(): string { return this.privActivityTemplate; }\r\n\r\n    protected receiveMessageOverride: () => any = undefined;\r\n\r\n    protected connectImplOverride: (isUnAuthorized: boolean) => any = undefined;\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => any = undefined;\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n        this.privSynthesisTurn.audioOutputFormat = format;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.format = format;\r\n        }\r\n        if (this.synthesisContext !== undefined) {\r\n            this.synthesisContext.audioOutputFormat = format;\r\n        }\r\n    }\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: ISynthesisConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection>;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privSynthesisContext: SynthesisContext;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privSessionAudioDestination: IAudioDestination;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: ISynthesisConnectionFactory,\r\n        synthesizerConfig: SynthesizerConfig,\r\n        speechSynthesizer: SpeechSynthesizer,\r\n        audioDestination: IAudioDestination) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!synthesizerConfig) {\r\n            throw new ArgumentNullError(\"synthesizerConfig\");\r\n        }\r\n\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privSynthesizerConfig = synthesizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privSpeechSynthesizer = speechSynthesizer;\r\n        this.privSessionAudioDestination = audioDestination;\r\n        this.privSynthesisTurn = new SynthesisTurn();\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privSynthesisContext = new SynthesisContext(this.privSpeechSynthesizer);\r\n        this.privAgentConfig = new AgentConfig();\r\n\r\n        this.connectionEvents.attach((connectionEvent: ConnectionEvent): void => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode !== 1000) {\r\n                    this.cancelSynthesisLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        connectionClosedEvent.reason + \" websocket error code: \" + connectionClosedEvent.statusCode);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public static addHeader(audio: ArrayBuffer, format: AudioOutputFormatImpl): ArrayBuffer {\r\n        if (!format.hasHeader) {\r\n            return audio;\r\n        }\r\n        format.updateHeader(audio.byteLength);\r\n        const tmp = new Uint8Array(audio.byteLength + format.header.byteLength);\r\n        tmp.set(new Uint8Array(format.header), 0);\r\n        tmp.set(new Uint8Array(audio), format.header.byteLength);\r\n        return tmp.buffer;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privSessionAudioDestination !== undefined) {\r\n            this.privSessionAudioDestination.close();\r\n        }\r\n        if (this.privConnectionConfigurationPromise) {\r\n            const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n            await connection.dispose(reason);\r\n        }\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n    }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privSynthesisTurn.requestId, contentType, payload));\r\n    }\r\n\r\n    public async Speak(\r\n        text: string,\r\n        isSSML: boolean,\r\n        requestId: string,\r\n        successCallback: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n        audioDestination: IAudioDestination,\r\n    ): Promise<void> {\r\n\r\n        let ssml: string;\r\n\r\n        if (isSSML) {\r\n            ssml = text;\r\n        } else {\r\n            ssml = this.privSpeechSynthesizer.buildSsml(text);\r\n        }\r\n\r\n        if (this.speakOverride !== undefined) {\r\n            return this.speakOverride(ssml, requestId, successCallback, errorCallBack);\r\n        }\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privSynthesisTurn.startNewSynthesis(requestId, text, isSSML, audioDestination);\r\n\r\n        try {\r\n            await this.connectImpl();\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSynthesisContext(connection);\r\n            await this.sendSsmlMessage(connection, ssml, requestId);\r\n            const synthesisStartEventArgs: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                new SpeechSynthesisResult(\r\n                    requestId,\r\n                    ResultReason.SynthesizingAudioStarted,\r\n                )\r\n            );\r\n\r\n            if (!!this.privSpeechSynthesizer.synthesisStarted) {\r\n                this.privSpeechSynthesizer.synthesisStarted(this.privSpeechSynthesizer, synthesisStartEventArgs);\r\n            }\r\n\r\n            const messageRetrievalPromise = this.receiveMessage();\r\n        } catch (e) {\r\n            this.cancelSynthesisLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, e);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesis(\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n        const result: SpeechSynthesisResult = new SpeechSynthesisResult(\r\n            requestId,\r\n            ResultReason.Canceled,\r\n            undefined,\r\n            error,\r\n            properties\r\n        );\r\n\r\n        if (!!this.privSpeechSynthesizer.SynthesisCanceled) {\r\n            const cancelEvent: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(result);\r\n            try {\r\n                this.privSpeechSynthesizer.SynthesisCanceled(this.privSpeechSynthesizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Cancels synthesis.\r\n    protected cancelSynthesisLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        if (!!this.privSynthesisTurn.isSynthesizing) {\r\n            this.privSynthesisTurn.onStopSynthesizing();\r\n\r\n            this.cancelSynthesis(\r\n                this.privSynthesisTurn.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechSynthesisResult) => void,\r\n        errorCallBack?: (e: string) => void): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            const message: ConnectionMessage = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privSynthesisTurn.isSynthesizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n            this.privServiceHasSentMessage = true;\r\n\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privSynthesisTurn.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privSynthesisTurn.onServiceTurnStartResponse();\r\n                        break;\r\n                    case \"response\":\r\n                        this.privSynthesisTurn.onServiceResponseMessage(connectionMessage.textBody);\r\n                        break;\r\n                    case \"audio\":\r\n                        if (this.privSynthesisTurn.streamId.toLowerCase() === connectionMessage.streamId.toLowerCase()\r\n                            && !!connectionMessage.binaryBody) {\r\n                            this.privSynthesisTurn.onAudioChunkReceived(connectionMessage.binaryBody);\r\n                            if (!!this.privSpeechSynthesizer.synthesizing) {\r\n                                try {\r\n                                    const audioWithHeader = SynthesisAdapterBase.addHeader(connectionMessage.binaryBody, this.privSynthesisTurn.audioOutputFormat);\r\n                                    const ev: SpeechSynthesisEventArgs = new SpeechSynthesisEventArgs(\r\n                                        new SpeechSynthesisResult(\r\n                                            this.privSynthesisTurn.requestId,\r\n                                            ResultReason.SynthesizingAudio,\r\n                                            audioWithHeader));\r\n                                    this.privSpeechSynthesizer.synthesizing(this.privSpeechSynthesizer, ev);\r\n                                } catch (error) {\r\n                                    // Not going to let errors in the event handler\r\n                                    // trip things up.\r\n                                }\r\n                            }\r\n                            if (this.privSessionAudioDestination !== undefined) {\r\n                                this.privSessionAudioDestination.write(connectionMessage.binaryBody);\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"audio.metadata\":\r\n                        const metadataList = SynthesisAudioMetadata.fromJSON(connectionMessage.textBody).Metadata;\r\n                        for (const metadata of metadataList) {\r\n                            switch (metadata.Type) {\r\n                                case MetadataType.WordBoundary:\r\n                                    this.privSynthesisTurn.onWordBoundaryEvent(metadata.Data.text.Text);\r\n\r\n                                    const wordBoundaryEventArgs: SpeechSynthesisWordBoundaryEventArgs = new SpeechSynthesisWordBoundaryEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.text.Text,\r\n                                        metadata.Data.text.Length,\r\n                                        this.privSynthesisTurn.currentTextOffset);\r\n\r\n                                    if (!!this.privSpeechSynthesizer.wordBoundary) {\r\n                                        try {\r\n                                            this.privSpeechSynthesizer.wordBoundary(this.privSpeechSynthesizer, wordBoundaryEventArgs);\r\n                                        } catch (error) {\r\n                                            // Not going to let errors in the event handler\r\n                                            // trip things up.\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.Bookmark:\r\n                                    const bookmarkEventArgs: SpeechSynthesisBookmarkEventArgs = new SpeechSynthesisBookmarkEventArgs(\r\n                                        metadata.Data.Offset,\r\n                                        metadata.Data.Bookmark);\r\n\r\n                                    if (!!this.privSpeechSynthesizer.bookmarkReached) {\r\n                                        try {\r\n                                            this.privSpeechSynthesizer.bookmarkReached(this.privSpeechSynthesizer, bookmarkEventArgs);\r\n                                        } catch (error) {\r\n                                            // Not going to let errors in the event handler\r\n                                            // trip things up.\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                case MetadataType.Viseme:\r\n\r\n                                    this.privSynthesisTurn.onVisemeMetadataReceived(metadata);\r\n\r\n                                    if (metadata.Data.IsLastAnimation) {\r\n                                        const visemeEventArgs: SpeechSynthesisVisemeEventArgs = new SpeechSynthesisVisemeEventArgs(\r\n                                            metadata.Data.Offset,\r\n                                            metadata.Data.VisemeId,\r\n                                            this.privSynthesisTurn.getAndClearVisemeAnimation());\r\n\r\n                                        if (!!this.privSpeechSynthesizer.visemeReceived) {\r\n                                            try {\r\n                                                this.privSpeechSynthesizer.visemeReceived(this.privSpeechSynthesizer, visemeEventArgs);\r\n                                            } catch (error) {\r\n                                                // Not going to let errors in the event handler\r\n                                                // trip things up.\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"turn.end\":\r\n                        this.privSynthesisTurn.onServiceTurnEndResponse();\r\n                        let result: SpeechSynthesisResult;\r\n                        try {\r\n                            const audioBuffer: ArrayBuffer = await this.privSynthesisTurn.getAllReceivedAudioWithHeader();\r\n                            result = new SpeechSynthesisResult(\r\n                                this.privSynthesisTurn.requestId,\r\n                                ResultReason.SynthesizingAudioCompleted,\r\n                                audioBuffer\r\n                            );\r\n                            if (!!this.privSuccessCallback) {\r\n                                this.privSuccessCallback(result);\r\n                            }\r\n                        } catch (error) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(error);\r\n                            }\r\n                        }\r\n                        if (this.privSpeechSynthesizer.synthesisCompleted) {\r\n                            try {\r\n                                this.privSpeechSynthesizer.synthesisCompleted(\r\n                                    this.privSpeechSynthesizer,\r\n                                    new SpeechSynthesisEventArgs(result)\r\n                                );\r\n                            } catch (e) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n\r\n                        if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n\r\n                }\r\n            }\r\n\r\n            return this.receiveMessage();\r\n\r\n        } catch (e) {\r\n            // TODO: What goes here?\r\n        }\r\n    }\r\n\r\n    protected sendSynthesisContext = (connection: IConnection): Promise<void> => {\r\n        const synthesisContextJson = this.synthesisContext.toJSON();\r\n\r\n        if (synthesisContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"synthesis.context\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                synthesisContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected connectImpl(isUnAuthorized: boolean = false): Promise<IConnection> {\r\n        if (this.privConnectionPromise) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = null;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (error: string): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        this.privConnectionId = createNoDashGuid();\r\n\r\n        this.privSynthesisTurn.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n\r\n        const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n\r\n        this.privConnectionPromise = authPromise.then(async (result: AuthInfo) => {\r\n            await this.privSynthesisTurn.onAuthCompleted(false);\r\n\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privSynthesizerConfig, result, this.privConnectionId);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent) => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n            const response = await connection.open();\r\n            if (response.statusCode === 200) {\r\n                await this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 403 && !isUnAuthorized) {\r\n                return this.connectImpl(true);\r\n            } else {\r\n                await this.privSynthesisTurn.onConnectionEstablishCompleted(response.statusCode, response.reason);\r\n                return Promise.reject(`Unable to contact server. StatusCode: ${response.statusCode}, ${this.privSynthesizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${response.reason}`);\r\n            }\r\n        }, async (error: string): Promise<IConnection> => {\r\n            await this.privSynthesisTurn.onAuthCompleted(true, error);\r\n            throw new Error(error);\r\n        });\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        this.privConnectionPromise.catch(() => { });\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n    protected sendSpeechServiceConfig = (connection: IConnection, SpeechServiceConfigJson: string): Promise<void> => {\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                this.privSynthesisTurn.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n    }\r\n\r\n    protected sendSsmlMessage = (connection: IConnection, ssml: string, requestId: string): Promise<void> => {\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"ssml\",\r\n            requestId,\r\n            \"application/ssml+xml\",\r\n            ssml));\r\n    }\r\n\r\n    private async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = null;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (error: string): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = null;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privSynthesizerConfig.SpeechServiceConfig.serialize());\r\n        return connection;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Define speech synthesis audio output formats.\r\n * @enum SpeechSynthesisOutputFormat\r\n * Updated in version 1.17.0\r\n */\r\nexport enum SpeechSynthesisOutputFormat {\r\n    /**\r\n     * raw-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoMULaw,\r\n     */\r\n    Raw8Khz8BitMonoMULaw,\r\n\r\n    /**\r\n     * riff-16khz-16kbps-mono-siren\r\n     * @note Unsupported by the service. Do not use this value.\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16KbpsMonoSiren\r\n     */\r\n    Riff16Khz16KbpsMonoSiren ,\r\n\r\n    /**\r\n     * audio-16khz-16kbps-mono-siren\r\n     * @note Unsupported by the service. Do not use this value.\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16KbpsMonoSiren\r\n     */\r\n    Audio16Khz16KbpsMonoSiren,\r\n\r\n    /**\r\n     * audio-16khz-32kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3\r\n     */\r\n    Audio16Khz32KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-16khz-128kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz128KBitRateMonoMp3\r\n     */\r\n    Audio16Khz128KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-16khz-64kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3\r\n     */\r\n    Audio16Khz64KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-48kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3\r\n     */\r\n    Audio24Khz48KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz96KBitRateMonoMp3\r\n     */\r\n    Audio24Khz96KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-24khz-160kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz160KBitRateMonoMp3\r\n     */\r\n    Audio24Khz160KBitRateMonoMp3,\r\n\r\n    /**\r\n     * raw-16khz-16bit-mono-truesilk\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoTrueSilk\r\n     */\r\n    Raw16Khz16BitMonoTrueSilk,\r\n\r\n    /**\r\n     * riff-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff16Khz16BitMonoPcm\r\n     */\r\n    Riff16Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz16BitMonoPcm\r\n     */\r\n    Riff8Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff24Khz16BitMonoPcm\r\n     */\r\n    Riff24Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-8khz-8bit-mono-mulaw\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoMULaw\r\n     */\r\n    Riff8Khz8BitMonoMULaw,\r\n\r\n    /**\r\n     * raw-16khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw16Khz16BitMonoPcm\r\n     */\r\n    Raw16Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-24khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoPcm\r\n     */\r\n    Raw24Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * raw-8khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz16BitMonoPcm\r\n     */\r\n    Raw8Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * ogg-16khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus\r\n     */\r\n    Ogg16Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * ogg-24khz-16bit-mono-opus\r\n     * @member SpeechSynthesisOutputFormat.Ogg24Khz16BitMonoOpus\r\n     */\r\n    Ogg24Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * raw-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Raw48Khz16BitMonoPcm\r\n     */\r\n    Raw48Khz16BitMonoPcm,\r\n\r\n    /**\r\n     * riff-48khz-16bit-mono-pcm\r\n     * @member SpeechSynthesisOutputFormat.Riff48Khz16BitMonoPcm\r\n     */\r\n\r\n    Riff48Khz16BitMonoPcm,\r\n    /**\r\n     * audio-48khz-96kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz96KBitRateMonoMp3\r\n     */\r\n    Audio48Khz96KBitRateMonoMp3,\r\n\r\n    /**\r\n     * audio-48khz-192kbitrate-mono-mp3\r\n     * @member SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3\r\n     */\r\n    Audio48Khz192KBitRateMonoMp3,\r\n\r\n    /**\r\n     * ogg-48khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Ogg48Khz16BitMonoOpus\r\n     */\r\n    Ogg48Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * webm-16khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm16Khz16BitMonoOpus\r\n     */\r\n    Webm16Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * webm-24khz-16bit-mono-opus\r\n     * Added in version 1.16.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16BitMonoOpus\r\n     */\r\n    Webm24Khz16BitMonoOpus,\r\n\r\n    /**\r\n     * raw-24khz-16bit-mono-truesilk\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Raw24Khz16BitMonoTrueSilk\r\n     */\r\n     Raw24Khz16BitMonoTrueSilk,\r\n\r\n    /**\r\n     * raw-8khz-8bit-mono-alaw\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Raw8Khz8BitMonoALaw\r\n     */\r\n     Raw8Khz8BitMonoALaw,\r\n\r\n    /**\r\n     * riff-8khz-8bit-mono-alaw\r\n     * Added in version 1.17.0\r\n     * @member SpeechSynthesisOutputFormat.Riff8Khz8BitMonoALaw\r\n     */\r\n     Riff8Khz8BitMonoALaw,\r\n\r\n    /**\r\n     * webm-24khz-16bit-24kbps-mono-opus\r\n     * Audio compressed by OPUS codec in a webm container, with bitrate of 24kbps, optimized for IoT scenario.\r\n     * Added in version 1.19.0\r\n     * @member SpeechSynthesisOutputFormat.Webm24Khz16Bit24KbpsMonoOpus\r\n     */\r\n    Webm24Khz16Bit24KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-16khz-16bit-32kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 32kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio16Khz16Bit32KbpsMonoOpus\r\n     */\r\n    Audio16Khz16Bit32KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-24khz-16bit-48kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 48kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit48KbpsMonoOpus\r\n     */\r\n    Audio24Khz16Bit48KbpsMonoOpus,\r\n\r\n    /**\r\n     * audio-24khz-16bit-24kbps-mono-opus\r\n     * Audio compressed by OPUS codec without container, with bitrate of 24kbps.\r\n     * Added in version 1.20.0\r\n     * @member SpeechSynthesisOutputFormat.Audio24Khz16Bit24KbpsMonoOpus\r\n     */\r\n    Audio24Khz16Bit24KbpsMonoOpus\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyId } from \"./Exports\";\r\n\r\n/**\r\n * Represents collection of properties and their values.\r\n * @class PropertyCollection\r\n */\r\nexport class PropertyCollection {\r\n    private privKeys: string[] = [] as string[];\r\n    private privValues: string[] = [] as string[];\r\n\r\n    /**\r\n     * Returns the property value in type String. The parameter must have the same type as String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member PropertyCollection.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} def - The default value which is returned if the parameter\r\n     *        is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public getProperty(key: PropertyId | string, def?: string): string {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                return this.privValues[n];\r\n            }\r\n        }\r\n\r\n        return def;\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member PropertyCollection.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public setProperty(key: string | PropertyId, value: string): void {\r\n        let keyToUse: string;\r\n\r\n        if (typeof key === \"string\") {\r\n            keyToUse = key;\r\n        } else {\r\n            keyToUse = PropertyId[key];\r\n        }\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            if (this.privKeys[n] === keyToUse) {\r\n                this.privValues[n] = value;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.privKeys.push(keyToUse);\r\n        this.privValues.push(value);\r\n    }\r\n\r\n    /**\r\n     * Clones the collection.\r\n     * @member PropertyCollection.prototype.clone\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} A copy of the collection.\r\n     */\r\n    public clone(): PropertyCollection {\r\n        const clonedMap = new PropertyCollection();\r\n\r\n        for (let n = 0; n < this.privKeys.length; n++) {\r\n            clonedMap.privKeys.push(this.privKeys[n]);\r\n            clonedMap.privValues.push(this.privValues[n]);\r\n        }\r\n\r\n        return clonedMap;\r\n    }\r\n\r\n    /**\r\n     * Merges this set of properties into another, no overwrites.\r\n     * @member PropertyCollection.prototype.mergeTo\r\n     * @function\r\n     * @public\r\n     * @param {PropertyCollection} The collection to merge into.\r\n     */\r\n    public mergeTo(destinationCollection: PropertyCollection): void {\r\n        this.privKeys.forEach((key: string | PropertyId) => {\r\n            if (destinationCollection.getProperty(key, undefined) === undefined) {\r\n                const value = this.getProperty(key);\r\n                destinationCollection.setProperty(key, value);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the keys in Property Collection.\r\n     * @member PropertyCollection.prototype.keys\r\n     * @function\r\n     * @public\r\n     * @returns {string []} Keys in the collection.\r\n     */\r\n    public get keys(): string[] {\r\n        return this.privKeys;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionEventArgs, SpeechRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Defines contents of speech recognizing/recognized event.\r\n * @class SpeechRecognitionEventArgs\r\n */\r\nexport class SpeechRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: SpeechRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechRecognitionResult} result - The speech recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: SpeechRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member SpeechRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): SpeechRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n\r\n/**\r\n * Defines contents of conversation transcribed/transcribing event.\r\n * @class ConversationTranscriptionEventArgs\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class ConversationTranscriptionEventArgs extends SpeechRecognitionEventArgs {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationEventArgs,\r\n    CancellationReason,\r\n    RecognitionEventArgs\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Defines content of a CancellationEvent.\r\n * @class CancellationEventArgsBase\r\n */\r\nexport class CancellationEventArgsBase extends RecognitionEventArgs implements CancellationEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} reason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(reason: CancellationReason, errorDetails: string,\r\n                       errorCode: CancellationErrorCode, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member CancellationEventArgsBase.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful operation.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful operation, provides details of the occurred error.\r\n     * @member CancellationEventArgsBase.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult, Translations } from \"./Exports\";\r\n\r\n/**\r\n * Translation text result.\r\n * @class TranslationRecognitionResult\r\n */\r\nexport class TranslationRecognitionResult extends SpeechRecognitionResult {\r\n    private privTranslations: Translations;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {Translations} translations - The translations.\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(translations: Translations, resultId?: string, reason?: ResultReason,\r\n                       text?: string, duration?: number, offset?: number, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, undefined, undefined, undefined, errorDetails, json, properties);\r\n\r\n        this.privTranslations = translations;\r\n    }\r\n\r\n    /**\r\n     * Presents the translation results. Each item in the dictionary represents\r\n     * a translation result in one of target languages, where the key is the name\r\n     * of the target language, in BCP-47 format, and the value is the translation\r\n     * text in the specified language.\r\n     * @member TranslationRecognitionResult.prototype.translations\r\n     * @function\r\n     * @public\r\n     * @returns {Translations} the current translation map that holds all translations requested.\r\n     */\r\n    public get translations(): Translations {\r\n        return this.privTranslations;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n    ServicePropertiesPropertyName\r\n} from \"../common.speech/Exports\";\r\nimport {IStringDictionary} from \"../common/Exports\";\r\nimport {Contracts} from \"./Contracts\";\r\nimport {\r\n    OutputFormat,\r\n    ProfanityOption,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ServicePropertyChannel,\r\n    SpeechSynthesisOutputFormat,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Speech configuration.\r\n * @class SpeechConfig\r\n */\r\nexport abstract class SpeechConfig {\r\n    /**\r\n     * Creates and initializes an instance.\r\n     * @constructor\r\n     */\r\n    protected constructor() { }\r\n\r\n    /**\r\n     * Static instance of SpeechConfig returned by passing subscriptionKey and service region.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * @member SpeechConfig.fromSubscription\r\n     * @function\r\n     * @public\r\n     * @param {string} subscriptionKey - The subscription key.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} The speech factory\r\n     */\r\n    public static fromSubscription(subscriptionKey: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNullOrWhitespace(subscriptionKey, \"subscriptionKey\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified endpoint and subscription key.\r\n     * This method is intended only for users who use a non-standard service endpoint or parameters.\r\n     * Note: Please use your LanguageUnderstanding subscription key in case you want to use the Intent recognizer.\r\n     * Note: The query parameters specified in the endpoint URL are not changed, even if they are set by any other APIs.\r\n     * For example, if language is defined in the uri as query parameter \"language=de-DE\", and also set by\r\n     *              SpeechConfig.speechRecognitionLanguage = \"en-US\", the language setting in uri takes precedence,\r\n     *              and the effective language is \"de-DE\". Only the parameters that are not specified in the\r\n     *              endpoint URL can be set by other APIs.\r\n     * Note: To use authorization token with fromEndpoint, pass an empty string to the subscriptionKey in the\r\n     *       fromEndpoint method, and then set authorizationToken=\"token\" on the created SpeechConfig instance to\r\n     *       use the authorization token.\r\n     * @member SpeechConfig.fromEndpoint\r\n     * @function\r\n     * @public\r\n     * @param {URL} endpoint - The service endpoint to connect to.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromEndpoint(endpoint: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(endpoint, \"endpoint\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Endpoint, endpoint.href);\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech config with specified host and subscription key.\r\n     * This method is intended only for users who use a non-default service host. Standard resource path will be assumed.\r\n     * For services with a non-standard resource path or no path at all, use fromEndpoint instead.\r\n     * Note: Query parameters are not allowed in the host URI and must be set by other APIs.\r\n     * Note: To use an authorization token with fromHost, use fromHost(URL),\r\n     * and then set the AuthorizationToken property on the created SpeechConfig instance.\r\n     * Note: Added in version 1.9.0.\r\n     * @member SpeechConfig.fromHost\r\n     * @function\r\n     * @public\r\n     * @param {URL} host - The service endpoint to connect to. Format is \"protocol://host:port\" where \":port\" is optional.\r\n     * @param {string} subscriptionKey - The subscription key. If a subscription key is not specified, an authorization token must be set.\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromHost(hostName: URL, subscriptionKey?: string): SpeechConfig {\r\n        Contracts.throwIfNull(hostName, \"hostName\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Host, hostName.protocol + \"//\" + hostName.hostname + (hostName.port === \"\" ? \"\" : \":\" + hostName.port));\r\n\r\n        if (undefined !== subscriptionKey) {\r\n            speechImpl.setProperty(PropertyId.SpeechServiceConnection_Key, subscriptionKey);\r\n        }\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Creates an instance of the speech factory with specified initial authorization token and region.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     *       expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * Note: Please use a token derived from your LanguageUnderstanding subscription key in case you want\r\n     *       to use the Intent recognizer. As configuration values are copied when creating a new recognizer,\r\n     *       the new token value will not apply to recognizers that have already been created. For recognizers\r\n     *       that have been created before, you need to set authorization token of the corresponding recognizer\r\n     *       to refresh the token. Otherwise, the recognizers will encounter errors during recognition.\r\n     * @member SpeechConfig.fromAuthorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} authorizationToken - The initial authorization token.\r\n     * @param {string} region - The region name (see the <a href=\"https://aka.ms/csspeech/region\">region page</a>).\r\n     * @returns {SpeechConfig} A speech factory instance.\r\n     */\r\n    public static fromAuthorizationToken(authorizationToken: string, region: string): SpeechConfig {\r\n        Contracts.throwIfNull(authorizationToken, \"authorizationToken\");\r\n        Contracts.throwIfNullOrWhitespace(region, \"region\");\r\n\r\n        const speechImpl: SpeechConfigImpl = new SpeechConfigImpl();\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_Region, region);\r\n        speechImpl.setProperty(PropertyId.SpeechServiceConnection_IntentRegion, region);\r\n        speechImpl.authorizationToken = authorizationToken;\r\n        return speechImpl;\r\n    }\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server.\r\n     * @param proxyPort The port number of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number): void;\r\n\r\n    /**\r\n     * Sets the proxy configuration.\r\n     * Only relevant in Node.js environments.\r\n     * Added in version 1.4.0.\r\n     * @param proxyHostName The host name of the proxy server, without the protocol scheme (http://)\r\n     * @param proxyPort The port number of the proxy server.\r\n     * @param proxyUserName The user name of the proxy server.\r\n     * @param proxyPassword The password of the proxy server.\r\n     */\r\n    public abstract setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n\r\n    /**\r\n     * Gets the authorization token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get authorizationToken(): string;\r\n\r\n    /**\r\n     * Gets/Sets the authorization token.\r\n     * Note: The caller needs to ensure that the authorization token is valid. Before the authorization token\r\n     * expires, the caller needs to refresh it by calling this setter with a new valid token.\r\n     * @member SpeechConfig.prototype.authorizationToken\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set authorizationToken(value: string);\r\n\r\n    /**\r\n     * Returns the configured language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract get speechRecognitionLanguage(): string;\r\n\r\n    /**\r\n     * Gets/Sets the input language.\r\n     * @member SpeechConfig.prototype.speechRecognitionLanguage\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The authorization token.\r\n     */\r\n    public abstract set speechRecognitionLanguage(value: string);\r\n\r\n    /**\r\n     * Sets an arbitrary property.\r\n     * @member SpeechConfig.prototype.setProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to set.\r\n     * @param {string} value - The new value of the property.\r\n     */\r\n    public abstract setProperty(name: string, value: string): void;\r\n\r\n    /**\r\n     * Returns the current value of an arbitrary property.\r\n     * @member SpeechConfig.prototype.getProperty\r\n     * @function\r\n     * @public\r\n     * @param {string} name - The name of the property to query.\r\n     * @param {string} def - The value to return in case the property is not known.\r\n     * @returns {string} The current value, or provided default, of the given property.\r\n     */\r\n    public abstract getProperty(name: string, def?: string): string;\r\n\r\n    /**\r\n     * Gets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * get synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {OutputFormat} Returns the output format.\r\n     */\r\n    public abstract get outputFormat(): OutputFormat;\r\n\r\n    /**\r\n     * Gets/Sets speech recognition output format (simple or detailed).\r\n     * Note: This output format is for speech recognition result, use [SpeechConfig.speechSynthesisOutputFormat] to\r\n     * set synthesized audio output format.\r\n     * @member SpeechConfig.prototype.outputFormat\r\n     * @function\r\n     * @public\r\n     */\r\n    public abstract set outputFormat(format: OutputFormat);\r\n\r\n    /**\r\n     * Gets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @return {string} The endpoint ID\r\n     */\r\n    public abstract get endpointId(): string;\r\n\r\n    /**\r\n     * Gets/Sets the endpoint ID of a customized speech model that is used for speech recognition.\r\n     * @member SpeechConfig.prototype.endpointId\r\n     * @function\r\n     * @public\r\n     * @param {string} value - The endpoint ID\r\n     */\r\n    public abstract set endpointId(value: string);\r\n\r\n    /**\r\n     * Closes the configuration.\r\n     * @member SpeechConfig.prototype.close\r\n     * @function\r\n     * @public\r\n     */\r\n    /* tslint:disable:no-empty */\r\n    public close(): void { }\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.subscriptionKey\r\n     * @function\r\n     * @public\r\n     * @return {string} The subscription key set on the config.\r\n     */\r\n    public abstract get subscriptionKey(): string;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.region\r\n     * @function\r\n     * @public\r\n     * @return {region} The region set on the config.\r\n     */\r\n    public abstract get region(): string;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.setServiceProperty\r\n     * @function\r\n     * @public\r\n     * @param {name} The name of the property.\r\n     * @param {value} Value to set.\r\n     * @param {channel} The channel used to pass the specified property to service.\r\n     * @summary Sets a property value that will be passed to service using the specified channel.\r\n     * Added in version 1.7.0.\r\n     */\r\n    public abstract setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.setProfanity\r\n     * @function\r\n     * @public\r\n     * @param {profanity} Profanity option to set.\r\n     * @summary Sets profanity option.\r\n     * Added in version 1.7.0.\r\n     */\r\n    public abstract setProfanity(profanity: ProfanityOption): void;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.enableAudioLogging\r\n     * @function\r\n     * @public\r\n     * @summary Enable audio logging in service.\r\n     * Added in version 1.7.0.\r\n     */\r\n    public abstract enableAudioLogging(): void;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.requestWordLevelTimestamps\r\n     * @function\r\n     * @public\r\n     * @summary Includes word-level timestamps.\r\n     * Added in version 1.7.0.\r\n     */\r\n    public abstract requestWordLevelTimestamps(): void;\r\n\r\n    /**\r\n     * @member SpeechConfig.prototype.enableDictation\r\n     * @function\r\n     * @public\r\n     * @summary Enable dictation. Only supported in speech continuous recognition.\r\n     * Added in version 1.7.0.\r\n     */\r\n    public abstract enableDictation(): void;\r\n\r\n    /**\r\n     * Gets the language of the speech synthesizer.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis language.\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract get speechSynthesisLanguage(): string;\r\n\r\n    /**\r\n     * Sets the language of the speech synthesizer.\r\n     * @member SpeechConfig.prototype.speechSynthesisLanguage\r\n     * @function\r\n     * @public\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract set speechSynthesisLanguage(language: string);\r\n\r\n    /**\r\n     * Gets the voice of the speech synthesizer.\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     * @returns {string} Returns the speech synthesis voice.\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract get speechSynthesisVoiceName(): string;\r\n\r\n    /**\r\n     * Sets the voice of the speech synthesizer. (see <a href=\"https://aka.ms/speech/tts-languages\">available voices</a>).\r\n     * @member SpeechConfig.prototype.speechSynthesisVoiceName\r\n     * @function\r\n     * @public\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract set speechSynthesisVoiceName(voice: string);\r\n\r\n    /**\r\n     * Gets the speech synthesis output format.\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisOutputFormat} Returns the speech synthesis output format\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat;\r\n\r\n    /**\r\n     * Sets the speech synthesis output format (e.g. Riff16Khz16BitMonoPcm).\r\n     * @member SpeechConfig.prototype.speechSynthesisOutputFormat\r\n     * @function\r\n     * @public\r\n     * The default format is Audio16Khz64KBitRateMonoMp3 for browser and Riff16Khz16BitMonoPcm for Node.JS\r\n     * Added in version 1.11.0.\r\n     */\r\n    public abstract set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat);\r\n}\r\n\r\n/**\r\n * @public\r\n * @class SpeechConfigImpl\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechConfigImpl extends SpeechConfig {\r\n\r\n    private privProperties: PropertyCollection;\r\n\r\n    public constructor() {\r\n        super();\r\n        this.privProperties = new PropertyCollection();\r\n        this.speechRecognitionLanguage = \"en-US\"; // Should we have a default?\r\n        this.outputFormat = OutputFormat.Simple;\r\n    }\r\n\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n\r\n    public get endPoint(): URL {\r\n        return new URL(this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Endpoint));\r\n    }\r\n\r\n    public get subscriptionKey(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Key);\r\n    }\r\n\r\n    public get region(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_Region);\r\n    }\r\n\r\n    public get authorizationToken(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceAuthorization_Token);\r\n    }\r\n\r\n    public set authorizationToken(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceAuthorization_Token, value);\r\n    }\r\n\r\n    public get speechRecognitionLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage);\r\n    }\r\n\r\n    public set speechRecognitionLanguage(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_RecoLanguage, value);\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages);\r\n    }\r\n\r\n    public set autoDetectSourceLanguages(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, value);\r\n    }\r\n\r\n    public get outputFormat(): OutputFormat {\r\n        return (OutputFormat as any)[this.privProperties.getProperty(OutputFormatPropertyName, undefined)];\r\n    }\r\n\r\n    public set outputFormat(value: OutputFormat) {\r\n        this.privProperties.setProperty(OutputFormatPropertyName, OutputFormat[value]);\r\n    }\r\n\r\n    public get endpointId(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_EndpointId);\r\n    }\r\n\r\n    public set endpointId(value: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EndpointId, value);\r\n    }\r\n\r\n    public setProperty(name: string | PropertyId, value: string): void {\r\n        Contracts.throwIfNull(value, \"value\");\r\n\r\n        this.privProperties.setProperty(name, value);\r\n    }\r\n\r\n    public getProperty(name: string | PropertyId, def?: string): string {\r\n\r\n        return this.privProperties.getProperty(name, def);\r\n    }\r\n\r\n    public setProxy(proxyHostName: string, proxyPort: number): void;\r\n    public setProxy(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string): void;\r\n    public setProxy(proxyHostName: any, proxyPort: any, proxyUserName?: any, proxyPassword?: any): void {\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyHostName], proxyHostName);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPort], proxyPort);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyUserName], proxyUserName);\r\n        this.setProperty(PropertyId[PropertyId.SpeechServiceConnection_ProxyPassword], proxyPassword);\r\n    }\r\n\r\n    public setServiceProperty(name: string, value: string, channel: ServicePropertyChannel): void {\r\n        const currentProperties: IStringDictionary<string> = JSON.parse(this.privProperties.getProperty(ServicePropertiesPropertyName, \"{}\"));\r\n\r\n        currentProperties[name] = value;\r\n\r\n        this.privProperties.setProperty(ServicePropertiesPropertyName, JSON.stringify(currentProperties));\r\n    }\r\n\r\n    public setProfanity(profanity: ProfanityOption): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_ProfanityOption, ProfanityOption[profanity]);\r\n    }\r\n\r\n    public enableAudioLogging(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_EnableAudioLogging, \"true\");\r\n    }\r\n    public requestWordLevelTimestamps(): void {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceResponse_RequestWordLevelTimestamps, \"true\");\r\n    }\r\n    public enableDictation(): void {\r\n        this.privProperties.setProperty(ForceDictationPropertyName, \"true\");\r\n    }\r\n\r\n    public clone(): SpeechConfigImpl {\r\n        const ret: SpeechConfigImpl = new SpeechConfigImpl();\r\n        ret.privProperties = this.privProperties.clone();\r\n        return ret;\r\n    }\r\n\r\n    public get speechSynthesisLanguage(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthLanguage);\r\n    }\r\n\r\n    public set speechSynthesisLanguage(language: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthLanguage, language);\r\n    }\r\n\r\n    public get speechSynthesisVoiceName(): string {\r\n        return this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthVoice);\r\n    }\r\n\r\n    public set speechSynthesisVoiceName(voice: string) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthVoice, voice);\r\n    }\r\n\r\n    public get speechSynthesisOutputFormat(): SpeechSynthesisOutputFormat {\r\n        return (SpeechSynthesisOutputFormat as any)[this.privProperties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)];\r\n    }\r\n\r\n    public set speechSynthesisOutputFormat(format: SpeechSynthesisOutputFormat) {\r\n        this.privProperties.setProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, SpeechSynthesisOutputFormat[format]);\r\n    }\r\n}\r\n","import { registerAction, dragAction, pinchAction, wheelAction, scrollAction, moveAction, hoverAction } from '@use-gesture/core/actions';\nexport * from '@use-gesture/core/actions';\nimport React from 'react';\nimport { Controller, parseMergedHandlers } from '@use-gesture/core';\nexport * from '@use-gesture/core/utils';\nexport * from '@use-gesture/core/types';\n\nfunction useRecognizers(handlers, config = {}, gestureKey, nativeHandlers) {\n  const ctrl = React.useMemo(() => new Controller(handlers), []);\n  ctrl.applyHandlers(handlers, nativeHandlers);\n  ctrl.applyConfig(config, gestureKey);\n  React.useEffect(ctrl.effect.bind(ctrl));\n  React.useEffect(() => {\n    return ctrl.clean.bind(ctrl);\n  }, []);\n\n  if (config.target === undefined) {\n    return ctrl.bind.bind(ctrl);\n  }\n\n  return undefined;\n}\n\nfunction useDrag(handler, config = {}) {\n  registerAction(dragAction);\n  return useRecognizers({\n    drag: handler\n  }, config, 'drag');\n}\n\nfunction usePinch(handler, config = {}) {\n  registerAction(pinchAction);\n  return useRecognizers({\n    pinch: handler\n  }, config, 'pinch');\n}\n\nfunction useWheel(handler, config = {}) {\n  registerAction(wheelAction);\n  return useRecognizers({\n    wheel: handler\n  }, config, 'wheel');\n}\n\nfunction useScroll(handler, config = {}) {\n  registerAction(scrollAction);\n  return useRecognizers({\n    scroll: handler\n  }, config, 'scroll');\n}\n\nfunction useMove(handler, config = {}) {\n  registerAction(moveAction);\n  return useRecognizers({\n    move: handler\n  }, config, 'move');\n}\n\nfunction useHover(handler, config = {}) {\n  registerAction(hoverAction);\n  return useRecognizers({\n    hover: handler\n  }, config, 'hover');\n}\n\nfunction createUseGesture(actions) {\n  actions.forEach(registerAction);\n  return function useGesture(_handlers, _config = {}) {\n    const {\n      handlers,\n      nativeHandlers,\n      config\n    } = parseMergedHandlers(_handlers, _config);\n    return useRecognizers(handlers, config, undefined, nativeHandlers);\n  };\n}\n\nfunction useGesture(handlers, config = {}) {\n  const hook = createUseGesture([dragAction, pinchAction, scrollAction, wheelAction, moveAction, hoverAction]);\n  return hook(handlers, config);\n}\n\nexport { createUseGesture, useDrag, useGesture, useHover, useMove, usePinch, useScroll, useWheel };\n","import { extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { forwardRef, useContext } from 'react';\nimport { HoverIndexContext } from './constants.js';\nimport { defineName } from './utils.js';\n\nvar withHovering = function withHovering(WrapppedComponent, name) {\n  var WithHovering = defineName( /*#__PURE__*/forwardRef(function (props, ref) {\n    return /*#__PURE__*/React.createElement(WrapppedComponent, _extends({}, props, {\n      externalRef: ref,\n      isHovering: useContext(HoverIndexContext) === props.index\n    }));\n  }), name);\n  WithHovering.displayName = \"WithHovering(\" + name + \")\";\n  return WithHovering;\n};\n\nexport { withHovering };\n","import { useState } from 'react';\nimport { Keys } from '../utils/constants.js';\n\nvar useActiveState = function useActiveState(isHovering, isDisabled, moreKeys) {\n  var _useState = useState(false),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var activeKeys = [Keys.ENTER, Keys.SPACE].concat(moreKeys);\n\n  var cancelActive = function cancelActive() {\n    return active && setActive(false);\n  };\n\n  return {\n    isActive: active,\n    onPointerDown: function onPointerDown() {\n      if (!isDisabled) setActive(true);\n    },\n    onPointerUp: cancelActive,\n    onPointerLeave: cancelActive,\n    onKeyDown: function onKeyDown(e) {\n      if (!active && isHovering && !isDisabled && activeKeys.indexOf(e.key) !== -1) {\n        setActive(true);\n      }\n    },\n    onKeyUp: function onKeyUp(e) {\n      if (activeKeys.indexOf(e.key) !== -1) {\n        setActive(false);\n      }\n    },\n    onBlur: function onBlur(e) {\n      if (active && !e.currentTarget.contains(e.relatedTarget)) {\n        setActive(false);\n      }\n    }\n  };\n};\n\nexport { useActiveState };\n","const { MEDIA_DEVICE_KINDS } = require(\"../../constants\");\nconst getIsSameMediaDevice = require(\"./getIsSameMediaDevice\");\n\n/**\n * Determines best-guess comparison of the given MediaDeviceInfo[-like] against\n * an array of MediaDeviceInfo[-like] objects.\n *\n * WHY: Multiple gUM calls will resolve new object instances, and this attempts\n * to abstract away those multiple calls while still targeting the relevant\n * device.\n *\n * @param {\"audioinput\" | \"videoinput\" | \"audiooutput\" | \"videooutput\"} kind\n * IMPORTANT: Kind is required because there are potential situations where\n * partialMediaDeviceInfo may only contain \"default\" for deviceId and no\n * additional information related to its type (@see getPartialMediaDeviceInfo\n * in _MediaStreamTrackControllerBase, for example).\n * @param {MediaDeviceInfo | Object} partialMediaDeviceInfo A regular Object may be\n * passed if unable to acquire original MediaDeviceInfo (i.e. from a serialized\n * cache, etc.)\n * @param {MediaDeviceInfo[] | Object[]} mediaDeviceInfoList An array of\n * MediaDeviceInfo[-like] objects to compare against.\n * @return {MediaDeviceInfo | Object | null}\n */\nmodule.exports = function getMatchedMediaDevice(\n  kind,\n  partialMediaDeviceInfo,\n  mediaDeviceInfoList\n) {\n  if (!MEDIA_DEVICE_KINDS.includes(kind)) {\n    throw new ReferenceError(`Invalid kind \"${kind}\"`);\n  }\n\n  // IMPORTANT: Don't return the first device in the list as a last resort\n  // because it will likely be the wrong data and skew a lot of implementations\n  // of this function\n  return mediaDeviceInfoList.find(pred =>\n    getIsSameMediaDevice(partialMediaDeviceInfo, pred, kind)\n  );\n};\n","const mediaDeviceToPlainObject = require(\"./mediaDeviceToPlainObject\");\nconst { MEDIA_DEVICE_KINDS } = require(\"../../constants\");\n\n/**\n * Determines whether the given media devices are the same, despite if their\n * object references are different.\n *\n * This includes the ability to determine if MediaDeviceInfo matches an object\n * with MediaDeviceInfo-like properties.\n *\n * NOTE: One of these devices may represent partial data, such as one of them\n * only having a deviceId. It is in hopes that the object would not be run\n * through this comparison algorithm if the type was never known, however, as a\n * fallback, the enforcedKind will add additional checking.\n *\n * @param {MediaDeviceInfo | Object} deviceA Partial, or complete data\n * representation of the device\n * @param {MediaDeviceInfo | Object} deviceB Partial, or complete data\n * representation of the device\n * @param {string} enforcedKind? [default = null] Utilized for augmentation of\n * device info should one of the devices be missing this type\n * @return {boolean}\n */\nmodule.exports = function getIsSameMediaDevice(\n  deviceA,\n  deviceB,\n  enforcedKind = null\n) {\n  if (enforcedKind && !MEDIA_DEVICE_KINDS.includes(enforcedKind)) {\n    throw new ReferenceError(`Invalid enforcedKind \"${enforcedKind}`);\n  }\n\n  if (typeof deviceA !== \"object\" || typeof deviceB !== \"object\") {\n    throw new TypeError(\"deviceA and deviceB must be objects\");\n  }\n\n  // Obtain copies of the devices so that we can potentially add properties to\n  // them without affecting their source reference\n  const [locDeviceA, locDeviceB] = [deviceA, deviceB].map(device =>\n    mediaDeviceToPlainObject(device)\n  );\n\n  if (enforcedKind) {\n    // If neither device has a kind associated to it, return false\n    if (!locDeviceA.kind && !locDeviceB.kind) {\n      return false;\n    }\n\n    // \"Conditional patch logic\" follows; if either one of the devices does not\n    // have an associated kind attached to it, add the property\n    [locDeviceA, locDeviceB].forEach(device => {\n      if (!device.kind) {\n        device.kind = enforcedKind;\n      }\n    });\n  }\n\n  // If either device still doesn't have an associated kind after conditional\n  // patch logic above, return false\n  if (!locDeviceA.kind || !locDeviceB.kind) {\n    return false;\n  } else if (!MEDIA_DEVICE_KINDS.includes(locDeviceA.kind)) {\n    throw new ReferenceError(`Invalid kind for deviceA \"${locDeviceA.kind}\"`);\n  } else if (!MEDIA_DEVICE_KINDS.includes(locDeviceB.kind)) {\n    throw new ReferenceError(`Invalid kind for deviceB \"${locDeviceB.kind}\"`);\n  } else if (\n    enforcedKind &&\n    // Ensure both devices match the enforcedKind\n    (locDeviceA.kind !== enforcedKind || locDeviceB.kind !== enforcedKind)\n  ) {\n    return false;\n  }\n\n  if (\n    // Best match\n    locDeviceA.kind === locDeviceB.kind &&\n    (locDeviceA.deviceId !== undefined || locDeviceB.deviceId !== undefined) &&\n    locDeviceA.deviceId === locDeviceB.deviceId\n  ) {\n    return true;\n  } else if (\n    // Fallback match\n    locDeviceA.kind === locDeviceB.kind &&\n    (locDeviceA.label !== undefined || locDeviceB.label !== undefined) &&\n    locDeviceA.label === locDeviceB.label\n  ) {\n    return true;\n  } else {\n    // No match\n    return false;\n  }\n};\n","/**\n * Converts a MediaDeviceInfo object into a plain object.\n *\n * @param {MediaDeviceInfo | Object} device\n * @return {Object}\n */\nmodule.exports = function mediaDeviceToPlainObject(device) {\n  // IMPORTANT: I (jh) experimented with several attempts to iterate over a\n  // combination of MediaDeviceInfo and regular objects, and was having\n  // trouble getting tests to run in SauceLabs environment.\n  //\n  // Apparently MediaDeviceInfo cannot be iterated on with {...device}, nor\n  // is it apparently available in non-SSL environments, which I believe is\n  // the case that some of these tests are running in.\n  const ret = {};\n  for (const prop in device) {\n    ret[prop] = device[prop];\n  }\n  return ret;\n};\n","const {\n  PhantomCollection,\n  /** @export */\n  EVT_UPDATED,\n  /** @export */\n  EVT_DESTROYED,\n} = require(\"phantom-core\");\nconst {\n  /** @export */ EVT_CHILD_INSTANCE_ADDED,\n  /** @export */ EVT_CHILD_INSTANCE_REMOVED,\n} = PhantomCollection;\nconst MediaStreamTrackController = require(\"./_base/_MediaStreamTrackControllerBase\");\nconst AudioMediaStreamTrackController = require(\"./audio/AudioMediaStreamTrackController\");\nconst VideoMediaStreamTrackController = require(\"./video/VideoMediaStreamTrackController\");\nconst {\n  GENERIC_AUDIO_DEVICE_KIND,\n  GENERIC_VIDEO_DEVICE_KIND,\n} = require(\"./constants\");\n\n/**\n * Manages an arbitrary amount of MediaStreamTrackControllers, where mute states\n * are linked together.\n */\nclass MediaStreamTrackControllerCollection extends PhantomCollection {\n  /**\n   * @param {MediaStreamTrackController[]} initialMediaStreamTrackControllers? [default = []]\n   * @param {Object} phantomCollectionOptions? [default = {}]\n   */\n  constructor(\n    initialMediaStreamTrackControllers = [],\n    phantomCollectionOptions = {}\n  ) {\n    super(initialMediaStreamTrackControllers, phantomCollectionOptions);\n\n    // Experimental, direct MediaStream support\n    //\n    // FIXME: This probably should not be used for most use cases at this time,\n    // individual track controllers should likely be used instead, if possible\n    //\n    // FIXME: Since this exposes addEventListener property, it could create a\n    // potential memory-leak should bind to it with a listener; further\n    // consideration should be implemented for this\n    //\n    // FIXME: If deciding to leave in here, make a common collection called\n    // MediaStreamTrackCollection and base this class, plus\n    // ...FactoryCollection on it\n    this._outputMediaStream = new MediaStream(\n      this.getChildren().map(trackController =>\n        trackController.getOutputTrack()\n      )\n    );\n\n    (() => {\n      let prevChildren = this.getChildren();\n\n      const _handleUpdate = () => {\n        // Handle output media stream dynamic track add / removal\n        (() => {\n          const nextChildren = this.getChildren();\n          const {\n            added: addedTrackControllers,\n            removed: removedTrackControllers,\n          } = MediaStreamTrackControllerCollection.getChildrenDiff(\n            prevChildren,\n            nextChildren\n          );\n\n          addedTrackControllers.forEach(trackController => {\n            const mediaStreamTrack = trackController.getOutputTrack();\n\n            // FIXME: Is this necessary since the track is from a controller?\n            if (!(mediaStreamTrack instanceof MediaStreamTrack)) {\n              throw new TypeError(\"mediaStreamTrack is not a MediaStreamTrack\");\n            }\n\n            this._outputMediaStream.addTrack(trackController.getOutputTrack());\n          });\n\n          removedTrackControllers.forEach(trackController => {\n            const mediaStreamTrack = trackController.getOutputTrack();\n\n            // NOTE: The MediaStreamTrack might not be available if the\n            // controller was destructed prior to _handleUpdate being called\n            if (mediaStreamTrack) {\n              // FIXME: Is this necessary since the track is from a controller?\n              if (!(mediaStreamTrack instanceof MediaStreamTrack)) {\n                throw new TypeError(\n                  \"mediaStreamTrack is not a MediaStreamTrack\"\n                );\n              }\n\n              // FIXME: (jh) This does not appear to actually remove the track\n              // from the MediaStream (tested in Chrome, Firefox and iOS 14)\n              // workaround-082320212130\n              this._outputMediaStream.removeTrack(mediaStreamTrack);\n            }\n          });\n        })();\n\n        // Mask mute handling w/ all children\n        this._syncTrackControllersMuteState();\n      };\n\n      this.on(EVT_UPDATED, _handleUpdate);\n      this.on(EVT_CHILD_INSTANCE_ADDED, _handleUpdate);\n      this.on(EVT_CHILD_INSTANCE_REMOVED, _handleUpdate);\n    })();\n  }\n\n  /**\n   * @return {MediaStream}\n   */\n  getOutputMediaStream() {\n    return this._outputMediaStream;\n  }\n\n  /**\n   * Adds a MediaStreamTrackController to the collection.\n   *\n   * @param {MediaStreamTrackController} mediaStreamTrackController\n   * @return {void}\n   */\n  addChild(mediaStreamTrackController) {\n    if (!(mediaStreamTrackController instanceof MediaStreamTrackController)) {\n      throw new TypeError(\n        \"mediaStreamTrackController is not a MediaStreamTrackController\"\n      );\n    }\n\n    // FIXME: This needs some consideration before enabling; perhaps a separate\n    // property should be added (i.e. \"isExplicitlyMuted\") which is set if the\n    // user muted the collection themselves, and if so, apply that muting state\n    // to subsequent newly added track controllers. NOTE: This was considered\n    // after inclusion of _syncTrackControllersMuteState and is not a conflict\n    // of interest.\n    /*\n    // If collection is already muted, apply muting to added track controllers\n    if (this.getIsMuted()) {\n      mediaStreamTrackController.setIsMuted(true);\n    }\n    */\n\n    super.addChild(mediaStreamTrackController);\n\n    this._isMuted = false;\n  }\n\n  /**\n   * Adds a MediaStreamTrackController to the collection.\n   *\n   * @param {MediaStreamTrackController} mediaStreamTrackController\n   * @return {void}\n   */\n  addTrackController(mediaStreamTrackController) {\n    this.addChild(mediaStreamTrackController);\n  }\n\n  /**\n   * Removes a MediaStreamTrackController from the collection.\n   *\n   * @param {MediaStreamTrackController} mediaStreamTrackController\n   * @return {void}\n   */\n  removeTrackController(mediaStreamTrackController) {\n    this.removeChild(mediaStreamTrackController);\n  }\n\n  /**\n   * @return {MediaStreamTrackController[]}\n   */\n  getTrackControllers() {\n    return this.getChildren();\n  }\n\n  /**\n    @return {AudioMediaStreamTrackController[]}\n  */\n  getAudioTrackControllers() {\n    return this.getTrackControllers().filter(\n      controller => controller instanceof AudioMediaStreamTrackController\n    );\n  }\n\n  /**\n    @return {VideoMediaStreamTrackController[]}\n  */\n  getVideoTrackControllers() {\n    return this.getTrackControllers().filter(\n      controller => controller instanceof VideoMediaStreamTrackController\n    );\n  }\n\n  /**\n   * Retrieves an array of input device ids, not guaranteed to be unique, for\n   * all of associated track controllers.\n   *\n   * @param {string | null} kind? [default = null] IMPORTANT: This helps with\n   * controller lookups with device ids that may be set to \"default,\" in which\n   * case an unexpected kind could occur if running audio / video controllers\n   * simultaneously within the same collection.\n   * @return {string[]}\n   */\n  getInputDeviceIds(kind = null) {\n    let _lookupTracksFunc = null;\n\n    switch (kind) {\n      case null:\n        _lookupTracksFunc = \"getTrackControllers\";\n        break;\n\n      case GENERIC_AUDIO_DEVICE_KIND:\n        _lookupTracksFunc = \"getAudioTrackControllers\";\n        break;\n\n      case GENERIC_VIDEO_DEVICE_KIND:\n        _lookupTracksFunc = \"getVideoTrackControllers\";\n        break;\n\n      default:\n        throw new ReferenceError(`Unreferenced kind \"${kind}\"`);\n    }\n\n    return this[_lookupTracksFunc]().map(controller =>\n      controller.getInputDeviceId()\n    );\n  }\n\n  /**\n   * Checks the state of all of the associated track controllers and flips the\n   * this._isMuted flag accordingly without calling EVT_UPDATED.\n   *\n   * This is internally called once each track controller is updated.\n   *\n   * Conditions:\n   *  - If every track controller is muted, set the _isMuted flag to true\n   *  - If some track controllers are not muted, set the _isMuted flag to false\n   *  - Otherwise, don't change the flag\n   *\n   * @return {void}\n   */\n  _syncTrackControllersMuteState() {\n    const trackControllers = this.getChildren();\n\n    if (trackControllers.every(controller => controller.getIsMuted())) {\n      // If every is muted...\n      this._isMuted = true;\n    } else if (trackControllers.some(controller => !controller.getIsMuted())) {\n      // If some are not muted...\n      this._isMuted = false;\n    }\n  }\n\n  // FIXME: Use the following methods via mixin with\n  // MediaStreamTrackController base, once support is added in PhantomCore\n  // @link https://github.com/zenOSmosis/phantom-core/issues/44\n\n  /**\n   * @param {boolean} isMuted\n   * @return {<Promise<void>}\n   */\n  async setIsMuted(isMuted) {\n    // Mute the track controllers directly\n    await Promise.all(\n      this.getTrackControllers().map(controller =>\n        controller.setIsMuted(isMuted)\n      )\n    );\n  }\n\n  /**\n   * @return {boolean}\n   */\n  getIsMuted() {\n    return this._isMuted;\n  }\n\n  /**\n   * @return {Promise<void>}\n   */\n  async mute() {\n    return this.setIsMuted(true);\n  }\n\n  /**\n   * @return {Promise<void>}\n   */\n  async unmute() {\n    return this.setIsMuted(false);\n  }\n\n  /**\n   * Sets muting state to alternate state.\n   *\n   * @return {Promise<void>}\n   */\n  async toggleMute() {\n    return this.setIsMuted(!this._isMuted);\n  }\n\n  /**\n   * Alias for this.destroy().\n   *\n   * @return {Promise<void>}\n   */\n  async stop() {\n    if (!this.getIsDestroying()) {\n      return this.destroy();\n    }\n  }\n}\n\nmodule.exports = MediaStreamTrackControllerCollection;\n\nmodule.exports.EVT_UPDATED = EVT_UPDATED;\nmodule.exports.EVT_DESTROYED = EVT_DESTROYED;\n\nmodule.exports.EVT_CHILD_INSTANCE_ADDED = EVT_CHILD_INSTANCE_ADDED;\nmodule.exports.EVT_CHILD_INSTANCE_REMOVED = EVT_CHILD_INSTANCE_REMOVED;\n","const AudioMediaStreamTrackController = require(\"../../audio/AudioMediaStreamTrackController\");\nconst VideoMediaStreamTrackController = require(\"../../video/VideoMediaStreamTrackController\");\nconst { AUDIO_TRACK_KIND, VIDEO_TRACK_KIND } = require(\"../../constants\");\n\n/**\n * Processes inputMediaStream, converting it into audio and video track\n * controllers.\n *\n * NOTE: For most use cases, it would be better to instantiate\n * MediaStreamTrackControllerFactory instead of this, as it includes collection\n * support to manage multiple track controllers at once. The factory method\n * utilizes this utility in seed it with the initial track controllers.\n *\n * @param {MediaStream} inputMediaStream\n * @param {Object} factoryOptions? [optional; default = {}] If set, factoryOptions are\n * passed collectively to track controller constructors\n * @return {AudioMediaStreamTrackController[] & VideoMediaStreamTrackController[]}\n */\nmodule.exports = function createTrackControllersFromMediaStream(\n  inputMediaStream,\n  factoryOptions = {}\n) {\n  const controllers = [];\n\n  for (const track of inputMediaStream.getTracks()) {\n    switch (track.kind) {\n      case AUDIO_TRACK_KIND:\n        controllers.push(\n          new AudioMediaStreamTrackController(track, factoryOptions)\n        );\n        break;\n\n      case VIDEO_TRACK_KIND:\n        controllers.push(\n          new VideoMediaStreamTrackController(track, factoryOptions)\n        );\n        break;\n\n      default:\n        throw new TypeError(`Unknown track kind: ${track.kind}`);\n    }\n  }\n\n  return controllers;\n};\n","/**\n * For additional information regarding constraints:\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints\n */\n\n/** @export */\nconst AUDIO_QUALITY_PRESET_TALK_RADIO = {\n  name: \"Talk Radio\",\n  constraints: {\n    audio: {\n      echoCancellation: true,\n      noiseSuppression: true,\n      autoGainControl: true,\n      sampleRate: 24000,\n      sampleSize: 8,\n      // Mono\n      channelCount: {\n        ideal: 1,\n      },\n    },\n  },\n};\n\n/** @export */\nconst AUDIO_QUALITY_PRESET_MUSIC_LOW_QUALITY = {\n  name: \"Music - Low Quality\",\n  constraints: {\n    audio: {\n      echoCancellation: false,\n      noiseSuppression: false,\n      autoGainControl: false,\n      sampleRate: 24000,\n      sampleSize: 8,\n      // Mono\n      channelCount: {\n        ideal: 1,\n      },\n    },\n  },\n};\n\n/** @export */\nconst AUDIO_QUALITY_PRESET_MUSIC_HIGH_QUALITY = {\n  name: \"Music - High Quality\",\n  constraints: {\n    audio: {\n      echoCancellation: false,\n      noiseSuppression: false,\n      autoGainControl: false,\n      sampleRate: 48000,\n      sampleSize: 16,\n      // Stereo\n      channelCount: {\n        ideal: 2,\n      },\n    },\n  },\n};\n\n/** @export */\nconst audioQualityPresets = [\n  AUDIO_QUALITY_PRESET_TALK_RADIO,\n  AUDIO_QUALITY_PRESET_MUSIC_LOW_QUALITY,\n  AUDIO_QUALITY_PRESET_MUSIC_HIGH_QUALITY,\n];\n\nmodule.exports = audioQualityPresets;\n\nmodule.exports.AUDIO_QUALITY_PRESET_TALK_RADIO =\n  AUDIO_QUALITY_PRESET_TALK_RADIO;\n\nmodule.exports.AUDIO_QUALITY_PRESET_MUSIC_LOW_QUALITY =\n  AUDIO_QUALITY_PRESET_MUSIC_LOW_QUALITY;\n\nmodule.exports.AUDIO_QUALITY_PRESET_MUSIC_HIGH_QUALITY =\n  AUDIO_QUALITY_PRESET_MUSIC_HIGH_QUALITY;\n\n/**\n * Retrieves the associated audio quality preset with the given name.\n *\n * @param {string} name\n * @return {Object | void} // TODO: Typedef object\n */\nmodule.exports.getAudioQualityPresetWithName = name =>\n  audioQualityPresets.find(({ name: presetName }) => name === presetName);\n\n/**\n * Retrieves the constraints associated with the given audio quality preset.\n *\n * @param {Object} audioQualityPreset? [default = AUDIO_QUALITY_PRESET_MUSIC_HIGH_QUALITY]\n * @return {Object | void} // TODO: Typedef object\n */\nmodule.exports.getAudioQualityPresetConstraints = (\n  audioQualityPreset = AUDIO_QUALITY_PRESET_MUSIC_HIGH_QUALITY\n) => {\n  return audioQualityPreset.constraints;\n};\n","const makeAudioConstraints = require(\"./makeAudioConstraints\");\nconst makeVideoConstraints = require(\"./makeVideoConstraints\");\nconst mergeConstraints = require(\"./mergeConstraints\");\n\n/**\n * Form screen capture constraints, merging optional user constraints onto\n * internal default constraints.\n *\n * @param {MediaTrackConstraints | Object} userConstraints? [default = {}]\n * @return {MediaTrackConstraints | Object}\n */\nmodule.exports = function makeScreenCaptureConstraints(userConstraints = {}) {\n  const DEFAULT_CONSTRAINTS = {\n    // NOTE: Audio capturing is typically only available in Chromium-based\n    // browsers and typically only works for capturing audio in browser tabs.\n    //\n    // Windows can capture full system audio this way, and Mac can be made to\n    // capture full system audio with a third party virtual audio device\n    // driver.\n    //\n    // To enable audio capturing in Chromium-based browsers, the user typically\n    // needs to enable it in the UI dialog presented when initiating the screen\n    // capture, and is sometimes easy to miss.\n    ...makeAudioConstraints(userConstraints && userConstraints.audio),\n\n    // NOTE: Video constraints add cursor capturing capability on top of\n    // existing default video constraints, hence why mergeConstraints is used\n    // in the createDefaultVideoConstraints argument.\n    ...makeVideoConstraints(\n      mergeConstraints(\n        {\n          video: {\n            cursor: \"always\",\n          },\n        },\n        userConstraints && userConstraints.video\n      )\n    ),\n  };\n\n  return mergeConstraints(DEFAULT_CONSTRAINTS, userConstraints);\n};\n","const mergeConstraints = require(\"./mergeConstraints\");\n\n/**\n * Form video capture constraints, merging optional user constraints onto\n * internal default constraints.\n *\n * @param {MediaTrackConstraints | Object} userConstraints? [default = {}]\n * @return {MediaTrackConstraints | Object}\n */\nmodule.exports = function makeVideoConstraints(userConstraints = {}) {\n  const DEFAULT_VIDEO_CONSTRAINTS = {\n    video: true,\n  };\n\n  return mergeConstraints(DEFAULT_VIDEO_CONSTRAINTS, userConstraints);\n};\n","const mergeConstraints = require(\"./mergeConstraints\");\nconst {\n  GENERIC_AUDIO_DEVICE_KIND,\n  GENERIC_VIDEO_DEVICE_KIND,\n} = require(\"../../constants\");\n\n/**\n * Helper method for obtaining constraints to capture from a specific media\n * device.\n *\n * @param {MediaDeviceInfo} mediaDeviceInfo @see fetchMediaDevices\n * @param {MediaTrackConstraints} userConstraints? [default = {}]\n * @return {Object} // TODO: Document return object\n */\nmodule.exports = function makeSpecificDeviceCaptureConstraints(\n  mediaDeviceInfo,\n  userConstraints = {}\n) {\n  if (!(mediaDeviceInfo instanceof MediaDeviceInfo)) {\n    console.warn(typeof mediaDeviceInfo);\n\n    throw new TypeError(\"mediaDeviceInfo must be of MediaDeviceInfo type\");\n  }\n\n  return makeSpecificDeviceIdCaptureConstraints(\n    mediaDeviceInfo.deviceId,\n    // TODO: Use constant here\n    // TODO: Strip off \"input\" instead of the ternary operation\n    mediaDeviceInfo.kind === \"audioinput\"\n      ? GENERIC_AUDIO_DEVICE_KIND\n      : GENERIC_VIDEO_DEVICE_KIND,\n    userConstraints\n  );\n};\n\n/**\n * Helper method for obtaining constraints to capture from a specific media\n * device with a given device id and type.\n *\n * IMPORTANT: If the device id is not obtainable, it will use the default\n * device for the kind.\n *\n * @param {string} deviceId\n * @param {\"audio\" | \"video\"} deviceKind\n * @param {MediaTrackConstraints} userConstraints? [default = {}]\n * @return {Object} // TODO: Document return object\n */\nfunction makeSpecificDeviceIdCaptureConstraints(\n  deviceId,\n  deviceKind,\n  userConstraints = {}\n) {\n  if (\n    deviceKind !== GENERIC_AUDIO_DEVICE_KIND &&\n    deviceKind !== GENERIC_VIDEO_DEVICE_KIND\n  ) {\n    throw new TypeError(\"deviceKind must be audio or video\");\n  }\n\n  // Prevent device from being captured if {audio/video: false} is set\n  if (userConstraints && userConstraints[deviceKind] === false) {\n    return {\n      [deviceKind]: false,\n    };\n  }\n\n  const OVERRIDE_CONSTRAINTS = {\n    [deviceKind]: {\n      deviceId: {\n        exact: deviceId || \"default\",\n      },\n    },\n\n    // Prevent device of alternate type from starting (especially prevents mic\n    // from starting when wanting to only capture video)\n    [deviceKind === GENERIC_AUDIO_DEVICE_KIND\n      ? GENERIC_VIDEO_DEVICE_KIND\n      : GENERIC_AUDIO_DEVICE_KIND]: false,\n  };\n\n  // IMPORTANT: OVERRIDE_CONSTRAINTS takes precedence here\n  return mergeConstraints(userConstraints, OVERRIDE_CONSTRAINTS);\n}\n\nmodule.exports.makeSpecificDeviceIdCaptureConstraints =\n  makeSpecificDeviceIdCaptureConstraints;\n","// TODO: Rename\n/**\n * Applies a differential cache to prev / next media devices to enable\n * subsequent calls to fetchMediaDevices to retrieve the same device info\n * during the session duration.\n *\n * @param {MediaDeviceInfo[] | Object[]} prevMediaDevices\n * @param {MediaDeviceInfo[] | Object[]} nextMediaDevices\n * @return {MediaDeviceInfo[] | Object[]}\n */\nmodule.exports = function cacheDiffMediaDevices(\n  prevMediaDevices,\n  nextMediaDevices\n) {\n  /**\n   * This will become what is written back to the mediaDevices state.\n   *\n   * This original value represents the current state of mediaDevices with\n   * removed new devices filtered out.\n   *\n   * @type {MediaDeviceList[]}\n   */\n  const next = prevMediaDevices.filter(device =>\n    Boolean(\n      nextMediaDevices.find(predicate => {\n        const isMatch =\n          predicate.kind === device.kind &&\n          predicate.deviceId === device.deviceId;\n\n        return isMatch;\n      })\n    )\n  );\n\n  // Add new media devices to the next array\n  nextMediaDevices.forEach(device => {\n    const isPrevious = Boolean(\n      prevMediaDevices.find(\n        predicate =>\n          predicate.kind === device.kind &&\n          predicate.deviceId === device.deviceId\n      )\n    );\n\n    if (!isPrevious) {\n      next.push(device);\n    }\n  });\n\n  return next;\n};\n","const MediaStreamTrackControllerFactory = require(\"../../MediaStreamTrackControllerFactory\");\nconst mergeConstraints = require(\"../constraints/mergeConstraints\");\nconst makeAudioConstraints = require(\"../constraints/makeAudioConstraints\");\n\n/**\n * Capture device media (gUM) and resolve a controller factory to manage the\n * media track(s).\n *\n * IMPORTANT: At this time, video is not captured by default but can be enabled\n * with constraints.\n *\n * For additional reading, @link https://w3c.github.io/mediacapture-main.\n *\n * @param {MediaTrackConstraints} userConstraints? [optional; default = {}]\n * @param {Object} factoryOptions? [optional; default = {}]\n * @return {Promise<MediaStreamTrackControllerFactory>}\n */\nmodule.exports = async function captureMediaDevice(\n  userConstraints = {},\n  factoryOptions = {}\n) {\n  const DEFAULT_CONSTRAINTS = {\n    ...(() => {\n      // Capture audio if no user constraints are provided; if audio\n      // constraints are provided, merge them in with default audio\n      // constraints, where userConstraints takes precedence over defaults\n      if (!userConstraints || userConstraints.audio) {\n        return makeAudioConstraints(userConstraints && userConstraints.audio);\n      } else {\n        return {};\n      }\n    })(),\n\n    // FIXME: Implement video constraints if video will be captured by default\n    // ...createDefaultVideoConstraints(userConstraints && userConstraints.video),\n    video: false,\n  };\n\n  const mediaStream = await navigator.mediaDevices.getUserMedia(\n    mergeConstraints(DEFAULT_CONSTRAINTS, userConstraints)\n  );\n\n  return new MediaStreamTrackControllerFactory(mediaStream, factoryOptions);\n};\n","const cacheDiffMediaDevices = require(\"./cacheDiffMediaDevices\");\n\n/**\n * Lists all input and output media devices.\n *\n * IMPORTANT: Unlike the underlying call to\n * navigator.mediaDevices.enumerateDevices, this function will resolve the same\n * MediaDeviceInfo instances across subsequent calls (as long as isAggressive\n * is not changed between calls).\n *\n * @param {boolean} isAggressive? [optional; default=true] If true, temporarily\n * turn on devices in order to obtain label information.\n * @return {Promise<MediaDeviceInfo[]>}\n */\nconst fetchMediaDevices = (() => {\n  const cache = {\n    lastIsAggressive: null,\n    lastMediaDevices: [],\n  };\n\n  return async (isAggressive = true) => {\n    if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n      console.warn(\"enumerateDevices() not supported.\");\n      return [];\n    }\n\n    const fetchDevices = () => navigator.mediaDevices.enumerateDevices();\n\n    let devices = await fetchDevices();\n\n    // TODO: Skip this step (or change internal constraints) if already capturing type\n    // If not able to fetch label for all devices...\n    // TODO: Document the !label.length thing... why was this needed?\n    if (isAggressive && devices.some(({ label }) => !label.length)) {\n      // ... temporarily turn on microphone...\n      const tempMediaStream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n\n        // TODO: Provide optional video aggressive labeling (i.e. video: true)\n      });\n\n      //  ... and fetch again\n      devices = await fetchDevices();\n\n      // ... then turn off the aggressively captured media devices\n      tempMediaStream.getTracks().forEach(track => track.stop());\n    }\n\n    // If last run isAggressive is the same as the current, use the cacheDiff,\n    // otherwise bust the cache and start over\n    //\n    // IMPORTANT: This Boolean coerce fixes an issue in Safari when wrapping\n    // fetchMediaDevice where cached media devices were not being used\n    // @link https://github.com/zenOSmosis/speaker.app/pull/80\n    if (Boolean(cache.lastIsAggressive) === Boolean(isAggressive)) {\n      devices = cacheDiffMediaDevices(cache.lastMediaDevices, devices);\n    } else {\n      // Bust the cache and start over\n\n      // Set updated isAggressive\n      cache.lastIsAggressive = isAggressive;\n\n      // Reset device list\n      cache.lastMediaDevices = [];\n    }\n\n    cache.lastMediaDevices = [...devices];\n\n    return devices;\n  };\n})();\n\nmodule.exports = fetchMediaDevices;\n","const MediaStreamTrackControllerBase = require(\"../../_base/_MediaStreamTrackControllerBase\");\n\n/**\n * Retrieves the associated track controllers for the given media device.\n *\n * @param {MediaDeviceInfo | Object} mediaDeviceInfo\n * @return {MediaStreamTrackControllerBase[]}\n */\nmodule.exports = function getMediaDeviceTrackControllers(mediaDeviceInfo) {\n  const { deviceId } = mediaDeviceInfo;\n\n  if (!deviceId) {\n    throw new ReferenceError(\"Could not obtain deviceId from mediaDeviceInfo\");\n  }\n\n  return MediaStreamTrackControllerBase.getTrackControllerInstances().filter(\n    controller => controller.getInputDeviceId() === deviceId\n  );\n};\n","// IMPORTANT: The proxy is exposed rather than the original monitor in order to\n// reduce CPU load when multiple instances of the monitor are present at any\n// given time\nconst AudioMediaStreamTrackLevelMonitor = require(\"./AudioMediaStreamTrackLevelMonitor\");\nconst { EVT_DESTROYED, EVT_AUDIO_SILENCE_STARTED, EVT_AUDIO_SILENCE_ENDED } =\n  AudioMediaStreamTrackLevelMonitor;\n\nmodule.exports = AudioMediaStreamTrackLevelMonitor;\n\nmodule.exports.EVT_DESTROYED = EVT_DESTROYED;\nmodule.exports.EVT_AUDIO_SILENCE_STARTED = EVT_AUDIO_SILENCE_STARTED;\nmodule.exports.EVT_AUDIO_SILENCE_ENDED = EVT_AUDIO_SILENCE_ENDED;\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t(require(\"react\")):\"function\"==typeof define&&define.amd?define([\"react\"],t):\"object\"==typeof exports?exports.reactJsonView=t(require(\"react\")):e.reactJsonView=t(e.React)}(this,(function(e){return function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var r in e)n.d(a,r,function(t){return e[t]}.bind(null,r));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=48)}([function(t,n){t.exports=e},function(e,t){var n=e.exports={version:\"2.6.12\"};\"number\"==typeof __e&&(__e=n)},function(e,t,n){var a=n(26)(\"wks\"),r=n(17),o=n(3).Symbol,i=\"function\"==typeof o;(e.exports=function(e){return a[e]||(a[e]=i&&o[e]||(i?o:r)(\"Symbol.\"+e))}).store=a},function(e,t){var n=e.exports=\"undefined\"!=typeof window&&window.Math==Math?window:\"undefined\"!=typeof self&&self.Math==Math?self:Function(\"return this\")();\"number\"==typeof __g&&(__g=n)},function(e,t,n){e.exports=!n(8)((function(){return 7!=Object.defineProperty({},\"a\",{get:function(){return 7}}).a}))},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var a=n(7),r=n(16);e.exports=n(4)?function(e,t,n){return a.f(e,t,r(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var a=n(10),r=n(35),o=n(23),i=Object.defineProperty;t.f=n(4)?Object.defineProperty:function(e,t,n){if(a(e),t=o(t,!0),a(n),r)try{return i(e,t,n)}catch(e){}if(\"get\"in n||\"set\"in n)throw TypeError(\"Accessors not supported!\");return\"value\"in n&&(e[t]=n.value),e}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var a=n(40),r=n(22);e.exports=function(e){return a(r(e))}},function(e,t,n){var a=n(11);e.exports=function(e){if(!a(e))throw TypeError(e+\" is not an object!\");return e}},function(e,t){e.exports=function(e){return\"object\"==typeof e?null!==e:\"function\"==typeof e}},function(e,t){e.exports={}},function(e,t,n){var a=n(39),r=n(27);e.exports=Object.keys||function(e){return a(e,r)}},function(e,t){e.exports=!0},function(e,t,n){var a=n(3),r=n(1),o=n(53),i=n(6),s=n(5),c=function(e,t,n){var l,u,f,p=e&c.F,d=e&c.G,b=e&c.S,h=e&c.P,v=e&c.B,m=e&c.W,y=d?r:r[t]||(r[t]={}),g=y.prototype,E=d?a:b?a[t]:(a[t]||{}).prototype;for(l in d&&(n=t),n)(u=!p&&E&&void 0!==E[l])&&s(y,l)||(f=u?E[l]:n[l],y[l]=d&&\"function\"!=typeof E[l]?n[l]:v&&u?o(f,a):m&&E[l]==f?function(e){var t=function(t,n,a){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,a)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(f):h&&\"function\"==typeof f?o(Function.call,f):f,h&&((y.virtual||(y.virtual={}))[l]=f,e&c.R&&g&&!g[l]&&i(g,l,f)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,e.exports=c},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var n=0,a=Math.random();e.exports=function(e){return\"Symbol(\".concat(void 0===e?\"\":e,\")_\",(++n+a).toString(36))}},function(e,t,n){var a=n(22);e.exports=function(e){return Object(a(e))}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){\"use strict\";var a=n(52)(!0);n(34)(String,\"String\",(function(e){this._t=String(e),this._i=0}),(function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=a(t,n),this._i+=e.length,{value:e,done:!1})}))},function(e,t){var n=Math.ceil,a=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?a:n)(e)}},function(e,t){e.exports=function(e){if(null==e)throw TypeError(\"Can't call method on  \"+e);return e}},function(e,t,n){var a=n(11);e.exports=function(e,t){if(!a(e))return e;var n,r;if(t&&\"function\"==typeof(n=e.toString)&&!a(r=n.call(e)))return r;if(\"function\"==typeof(n=e.valueOf)&&!a(r=n.call(e)))return r;if(!t&&\"function\"==typeof(n=e.toString)&&!a(r=n.call(e)))return r;throw TypeError(\"Can't convert object to primitive value\")}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var a=n(26)(\"keys\"),r=n(17);e.exports=function(e){return a[e]||(a[e]=r(e))}},function(e,t,n){var a=n(1),r=n(3),o=r[\"__core-js_shared__\"]||(r[\"__core-js_shared__\"]={});(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})(\"versions\",[]).push({version:a.version,mode:n(14)?\"pure\":\"global\",copyright:\"© 2020 Denis Pushkarev (zloirock.ru)\"})},function(e,t){e.exports=\"constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf\".split(\",\")},function(e,t,n){var a=n(7).f,r=n(5),o=n(2)(\"toStringTag\");e.exports=function(e,t,n){e&&!r(e=n?e:e.prototype,o)&&a(e,o,{configurable:!0,value:t})}},function(e,t,n){n(62);for(var a=n(3),r=n(6),o=n(12),i=n(2)(\"toStringTag\"),s=\"CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList\".split(\",\"),c=0;c<s.length;c++){var l=s[c],u=a[l],f=u&&u.prototype;f&&!f[i]&&r(f,i,l),o[l]=o.Array}},function(e,t,n){t.f=n(2)},function(e,t,n){var a=n(3),r=n(1),o=n(14),i=n(30),s=n(7).f;e.exports=function(e){var t=r.Symbol||(r.Symbol=o?{}:a.Symbol||{});\"_\"==e.charAt(0)||e in t||s(t,e,{value:i.f(e)})}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t){e.exports=function(e,t,n){return Math.min(Math.max(e,t),n)}},function(e,t,n){\"use strict\";var a=n(14),r=n(15),o=n(37),i=n(6),s=n(12),c=n(55),l=n(28),u=n(61),f=n(2)(\"iterator\"),p=!([].keys&&\"next\"in[].keys()),d=function(){return this};e.exports=function(e,t,n,b,h,v,m){c(n,t,b);var y,g,E,j=function(e){if(!p&&e in O)return O[e];switch(e){case\"keys\":case\"values\":return function(){return new n(this,e)}}return function(){return new n(this,e)}},x=t+\" Iterator\",_=\"values\"==h,k=!1,O=e.prototype,C=O[f]||O[\"@@iterator\"]||h&&O[h],S=C||j(h),w=h?_?j(\"entries\"):S:void 0,A=\"Array\"==t&&O.entries||C;if(A&&(E=u(A.call(new e)))!==Object.prototype&&E.next&&(l(E,x,!0),a||\"function\"==typeof E[f]||i(E,f,d)),_&&C&&\"values\"!==C.name&&(k=!0,S=function(){return C.call(this)}),a&&!m||!p&&!k&&O[f]||i(O,f,S),s[t]=S,s[x]=d,h)if(y={values:_?S:j(\"values\"),keys:v?S:j(\"keys\"),entries:w},m)for(g in y)g in O||o(O,g,y[g]);else r(r.P+r.F*(p||k),t,y);return y}},function(e,t,n){e.exports=!n(4)&&!n(8)((function(){return 7!=Object.defineProperty(n(36)(\"div\"),\"a\",{get:function(){return 7}}).a}))},function(e,t,n){var a=n(11),r=n(3).document,o=a(r)&&a(r.createElement);e.exports=function(e){return o?r.createElement(e):{}}},function(e,t,n){e.exports=n(6)},function(e,t,n){var a=n(10),r=n(56),o=n(27),i=n(25)(\"IE_PROTO\"),s=function(){},c=function(){var e,t=n(36)(\"iframe\"),a=o.length;for(t.style.display=\"none\",n(60).appendChild(t),t.src=\"javascript:\",(e=t.contentWindow.document).open(),e.write(\"<script>document.F=Object<\\/script>\"),e.close(),c=e.F;a--;)delete c.prototype[o[a]];return c()};e.exports=Object.create||function(e,t){var n;return null!==e?(s.prototype=a(e),n=new s,s.prototype=null,n[i]=e):n=c(),void 0===t?n:r(n,t)}},function(e,t,n){var a=n(5),r=n(9),o=n(57)(!1),i=n(25)(\"IE_PROTO\");e.exports=function(e,t){var n,s=r(e),c=0,l=[];for(n in s)n!=i&&a(s,n)&&l.push(n);for(;t.length>c;)a(s,n=t[c++])&&(~o(l,n)||l.push(n));return l}},function(e,t,n){var a=n(24);e.exports=Object(\"z\").propertyIsEnumerable(0)?Object:function(e){return\"String\"==a(e)?e.split(\"\"):Object(e)}},function(e,t,n){var a=n(39),r=n(27).concat(\"length\",\"prototype\");t.f=Object.getOwnPropertyNames||function(e){return a(e,r)}},function(e,t,n){var a=n(24),r=n(2)(\"toStringTag\"),o=\"Arguments\"==a(function(){return arguments}());e.exports=function(e){var t,n,i;return void 0===e?\"Undefined\":null===e?\"Null\":\"string\"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),r))?n:o?a(t):\"Object\"==(i=a(t))&&\"function\"==typeof t.callee?\"Arguments\":i}},function(e,t){var n;n=function(){return this}();try{n=n||new Function(\"return this\")()}catch(e){\"object\"==typeof window&&(n=window)}e.exports=n},function(e,t){var n=/-?\\d+(\\.\\d+)?%?/g;e.exports=function(e){return e.match(n)}},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.getBase16Theme=t.createStyling=t.invertTheme=void 0;var a=d(n(49)),r=d(n(76)),o=d(n(81)),i=d(n(89)),s=d(n(93)),c=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(94)),l=d(n(132)),u=d(n(133)),f=d(n(138)),p=n(139);function d(e){return e&&e.__esModule?e:{default:e}}var b=c.default,h=(0,i.default)(b),v=(0,f.default)(u.default,p.rgb2yuv,(function(e){var t,n=(0,o.default)(e,3),a=n[0],r=n[1],i=n[2];return[(t=a,t<.25?1:t<.5?.9-t:1.1-t),r,i]}),p.yuv2rgb,l.default),m=function(e){return function(t){return{className:[t.className,e.className].filter(Boolean).join(\" \"),style:(0,r.default)({},t.style||{},e.style||{})}}},y=function(e,t){var n=(0,i.default)(t);for(var o in e)-1===n.indexOf(o)&&n.push(o);return n.reduce((function(n,o){return n[o]=function(e,t){if(void 0===e)return t;if(void 0===t)return e;var n=void 0===e?\"undefined\":(0,a.default)(e),o=void 0===t?\"undefined\":(0,a.default)(t);switch(n){case\"string\":switch(o){case\"string\":return[t,e].filter(Boolean).join(\" \");case\"object\":return m({className:e,style:t});case\"function\":return function(n){for(var a=arguments.length,r=Array(a>1?a-1:0),o=1;o<a;o++)r[o-1]=arguments[o];return m({className:e})(t.apply(void 0,[n].concat(r)))}}case\"object\":switch(o){case\"string\":return m({className:t,style:e});case\"object\":return(0,r.default)({},t,e);case\"function\":return function(n){for(var a=arguments.length,r=Array(a>1?a-1:0),o=1;o<a;o++)r[o-1]=arguments[o];return m({style:e})(t.apply(void 0,[n].concat(r)))}}case\"function\":switch(o){case\"string\":return function(n){for(var a=arguments.length,r=Array(a>1?a-1:0),o=1;o<a;o++)r[o-1]=arguments[o];return e.apply(void 0,[m(n)({className:t})].concat(r))};case\"object\":return function(n){for(var a=arguments.length,r=Array(a>1?a-1:0),o=1;o<a;o++)r[o-1]=arguments[o];return e.apply(void 0,[m(n)({style:t})].concat(r))};case\"function\":return function(n){for(var a=arguments.length,r=Array(a>1?a-1:0),o=1;o<a;o++)r[o-1]=arguments[o];return e.apply(void 0,[t.apply(void 0,[n].concat(r))].concat(r))}}}}(e[o],t[o]),n}),{})},g=function(e,t){for(var n=arguments.length,o=Array(n>2?n-2:0),s=2;s<n;s++)o[s-2]=arguments[s];if(null===t)return e;Array.isArray(t)||(t=[t]);var c=t.map((function(t){return e[t]})).filter(Boolean),l=c.reduce((function(e,t){return\"string\"==typeof t?e.className=[e.className,t].filter(Boolean).join(\" \"):\"object\"===(void 0===t?\"undefined\":(0,a.default)(t))?e.style=(0,r.default)({},e.style,t):\"function\"==typeof t&&(e=(0,r.default)({},e,t.apply(void 0,[e].concat(o)))),e}),{className:\"\",style:{}});return l.className||delete l.className,0===(0,i.default)(l.style).length&&delete l.style,l},E=t.invertTheme=function(e){return(0,i.default)(e).reduce((function(t,n){return t[n]=/^base/.test(n)?v(e[n]):\"scheme\"===n?e[n]+\":inverted\":e[n],t}),{})},j=(t.createStyling=(0,s.default)((function(e){for(var t=arguments.length,n=Array(t>3?t-3:0),a=3;a<t;a++)n[a-3]=arguments[a];var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},c=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},l=o.defaultBase16,u=void 0===l?b:l,f=o.base16Themes,p=void 0===f?null:f,d=j(c,p);d&&(c=(0,r.default)({},d,c));var v=h.reduce((function(e,t){return e[t]=c[t]||u[t],e}),{}),m=(0,i.default)(c).reduce((function(e,t){return-1===h.indexOf(t)?(e[t]=c[t],e):e}),{}),E=e(v),x=y(m,E);return(0,s.default)(g,2).apply(void 0,[x].concat(n))}),3),t.getBase16Theme=function(e,t){if(e&&e.extend&&(e=e.extend),\"string\"==typeof e){var n=e.split(\":\"),a=(0,o.default)(n,2),r=a[0],i=a[1];e=(t||{})[r]||c[r],\"inverted\"===i&&(e=E(e))}return e&&e.hasOwnProperty(\"base00\")?e:void 0})},function(e,t,n){\"use strict\";var a,r=\"object\"==typeof Reflect?Reflect:null,o=r&&\"function\"==typeof r.apply?r.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};a=r&&\"function\"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,e.exports.once=function(e,t){return new Promise((function(n,a){function r(){void 0!==o&&e.removeListener(\"error\",o),n([].slice.call(arguments))}var o;\"error\"!==t&&(o=function(n){e.removeListener(t,r),a(n)},e.once(\"error\",o)),e.once(t,r)}))},s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var c=10;function l(e){if(\"function\"!=typeof e)throw new TypeError('The \"listener\" argument must be of type Function. Received type '+typeof e)}function u(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function f(e,t,n,a){var r,o,i,s;if(l(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit(\"newListener\",t,n.listener?n.listener:n),o=e._events),i=o[t]),void 0===i)i=o[t]=n,++e._eventsCount;else if(\"function\"==typeof i?i=o[t]=a?[n,i]:[i,n]:a?i.unshift(n):i.push(n),(r=u(e))>0&&i.length>r&&!i.warned){i.warned=!0;var c=new Error(\"Possible EventEmitter memory leak detected. \"+i.length+\" \"+String(t)+\" listeners added. Use emitter.setMaxListeners() to increase limit\");c.name=\"MaxListenersExceededWarning\",c.emitter=e,c.type=t,c.count=i.length,s=c,console&&console.warn&&console.warn(s)}return e}function p(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,n){var a={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},r=p.bind(a);return r.listener=n,a.wrapFn=r,r}function b(e,t,n){var a=e._events;if(void 0===a)return[];var r=a[t];return void 0===r?[]:\"function\"==typeof r?n?[r.listener||r]:[r]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(r):v(r,r.length)}function h(e){var t=this._events;if(void 0!==t){var n=t[e];if(\"function\"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function v(e,t){for(var n=new Array(t),a=0;a<t;++a)n[a]=e[a];return n}Object.defineProperty(s,\"defaultMaxListeners\",{enumerable:!0,get:function(){return c},set:function(e){if(\"number\"!=typeof e||e<0||i(e))throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received '+e+\".\");c=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if(\"number\"!=typeof e||e<0||i(e))throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received '+e+\".\");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return u(this)},s.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var a=\"error\"===e,r=this._events;if(void 0!==r)a=a&&void 0===r.error;else if(!a)return!1;if(a){var i;if(t.length>0&&(i=t[0]),i instanceof Error)throw i;var s=new Error(\"Unhandled error.\"+(i?\" (\"+i.message+\")\":\"\"));throw s.context=i,s}var c=r[e];if(void 0===c)return!1;if(\"function\"==typeof c)o(c,this,t);else{var l=c.length,u=v(c,l);for(n=0;n<l;++n)o(u[n],this,t)}return!0},s.prototype.addListener=function(e,t){return f(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return f(this,e,t,!0)},s.prototype.once=function(e,t){return l(t),this.on(e,d(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){return l(t),this.prependListener(e,d(this,e,t)),this},s.prototype.removeListener=function(e,t){var n,a,r,o,i;if(l(t),void 0===(a=this._events))return this;if(void 0===(n=a[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete a[e],a.removeListener&&this.emit(\"removeListener\",e,n.listener||t));else if(\"function\"!=typeof n){for(r=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){i=n[o].listener,r=o;break}if(r<0)return this;0===r?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,r),1===n.length&&(a[e]=n[0]),void 0!==a.removeListener&&this.emit(\"removeListener\",e,i||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,n,a;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var r,o=Object.keys(n);for(a=0;a<o.length;++a)\"removeListener\"!==(r=o[a])&&this.removeAllListeners(r);return this.removeAllListeners(\"removeListener\"),this._events=Object.create(null),this._eventsCount=0,this}if(\"function\"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(a=t.length-1;a>=0;a--)this.removeListener(e,t[a]);return this},s.prototype.listeners=function(e){return b(this,e,!0)},s.prototype.rawListeners=function(e){return b(this,e,!1)},s.listenerCount=function(e,t){return\"function\"==typeof e.listenerCount?e.listenerCount(t):h.call(e,t)},s.prototype.listenerCount=h,s.prototype.eventNames=function(){return this._eventsCount>0?a(this._events):[]}},function(e,t,n){e.exports.Dispatcher=n(140)},function(e,t,n){e.exports=n(142)},function(e,t,n){\"use strict\";t.__esModule=!0;var a=i(n(50)),r=i(n(65)),o=\"function\"==typeof r.default&&\"symbol\"==typeof a.default?function(e){return typeof e}:function(e){return e&&\"function\"==typeof r.default&&e.constructor===r.default&&e!==r.default.prototype?\"symbol\":typeof e};function i(e){return e&&e.__esModule?e:{default:e}}t.default=\"function\"==typeof r.default&&\"symbol\"===o(a.default)?function(e){return void 0===e?\"undefined\":o(e)}:function(e){return e&&\"function\"==typeof r.default&&e.constructor===r.default&&e!==r.default.prototype?\"symbol\":void 0===e?\"undefined\":o(e)}},function(e,t,n){e.exports={default:n(51),__esModule:!0}},function(e,t,n){n(20),n(29),e.exports=n(30).f(\"iterator\")},function(e,t,n){var a=n(21),r=n(22);e.exports=function(e){return function(t,n){var o,i,s=String(r(t)),c=a(n),l=s.length;return c<0||c>=l?e?\"\":void 0:(o=s.charCodeAt(c))<55296||o>56319||c+1===l||(i=s.charCodeAt(c+1))<56320||i>57343?e?s.charAt(c):o:e?s.slice(c,c+2):i-56320+(o-55296<<10)+65536}}},function(e,t,n){var a=n(54);e.exports=function(e,t,n){if(a(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,a){return e.call(t,n,a)};case 3:return function(n,a,r){return e.call(t,n,a,r)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){if(\"function\"!=typeof e)throw TypeError(e+\" is not a function!\");return e}},function(e,t,n){\"use strict\";var a=n(38),r=n(16),o=n(28),i={};n(6)(i,n(2)(\"iterator\"),(function(){return this})),e.exports=function(e,t,n){e.prototype=a(i,{next:r(1,n)}),o(e,t+\" Iterator\")}},function(e,t,n){var a=n(7),r=n(10),o=n(13);e.exports=n(4)?Object.defineProperties:function(e,t){r(e);for(var n,i=o(t),s=i.length,c=0;s>c;)a.f(e,n=i[c++],t[n]);return e}},function(e,t,n){var a=n(9),r=n(58),o=n(59);e.exports=function(e){return function(t,n,i){var s,c=a(t),l=r(c.length),u=o(i,l);if(e&&n!=n){for(;l>u;)if((s=c[u++])!=s)return!0}else for(;l>u;u++)if((e||u in c)&&c[u]===n)return e||u||0;return!e&&-1}}},function(e,t,n){var a=n(21),r=Math.min;e.exports=function(e){return e>0?r(a(e),9007199254740991):0}},function(e,t,n){var a=n(21),r=Math.max,o=Math.min;e.exports=function(e,t){return(e=a(e))<0?r(e+t,0):o(e,t)}},function(e,t,n){var a=n(3).document;e.exports=a&&a.documentElement},function(e,t,n){var a=n(5),r=n(18),o=n(25)(\"IE_PROTO\"),i=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=r(e),a(e,o)?e[o]:\"function\"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?i:null}},function(e,t,n){\"use strict\";var a=n(63),r=n(64),o=n(12),i=n(9);e.exports=n(34)(Array,\"Array\",(function(e,t){this._t=i(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,r(1)):r(0,\"keys\"==t?n:\"values\"==t?e[n]:[n,e[n]])}),\"values\"),o.Arguments=o.Array,a(\"keys\"),a(\"values\"),a(\"entries\")},function(e,t){e.exports=function(){}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){e.exports={default:n(66),__esModule:!0}},function(e,t,n){n(67),n(73),n(74),n(75),e.exports=n(1).Symbol},function(e,t,n){\"use strict\";var a=n(3),r=n(5),o=n(4),i=n(15),s=n(37),c=n(68).KEY,l=n(8),u=n(26),f=n(28),p=n(17),d=n(2),b=n(30),h=n(31),v=n(69),m=n(70),y=n(10),g=n(11),E=n(18),j=n(9),x=n(23),_=n(16),k=n(38),O=n(71),C=n(72),S=n(32),w=n(7),A=n(13),M=C.f,P=w.f,F=O.f,D=a.Symbol,I=a.JSON,R=I&&I.stringify,L=d(\"_hidden\"),B=d(\"toPrimitive\"),N={}.propertyIsEnumerable,z=u(\"symbol-registry\"),T=u(\"symbols\"),q=u(\"op-symbols\"),V=Object.prototype,K=\"function\"==typeof D&&!!S.f,W=a.QObject,H=!W||!W.prototype||!W.prototype.findChild,U=o&&l((function(){return 7!=k(P({},\"a\",{get:function(){return P(this,\"a\",{value:7}).a}})).a}))?function(e,t,n){var a=M(V,t);a&&delete V[t],P(e,t,n),a&&e!==V&&P(V,t,a)}:P,G=function(e){var t=T[e]=k(D.prototype);return t._k=e,t},J=K&&\"symbol\"==typeof D.iterator?function(e){return\"symbol\"==typeof e}:function(e){return e instanceof D},Y=function(e,t,n){return e===V&&Y(q,t,n),y(e),t=x(t,!0),y(n),r(T,t)?(n.enumerable?(r(e,L)&&e[L][t]&&(e[L][t]=!1),n=k(n,{enumerable:_(0,!1)})):(r(e,L)||P(e,L,_(1,{})),e[L][t]=!0),U(e,t,n)):P(e,t,n)},$=function(e,t){y(e);for(var n,a=v(t=j(t)),r=0,o=a.length;o>r;)Y(e,n=a[r++],t[n]);return e},Q=function(e){var t=N.call(this,e=x(e,!0));return!(this===V&&r(T,e)&&!r(q,e))&&(!(t||!r(this,e)||!r(T,e)||r(this,L)&&this[L][e])||t)},Z=function(e,t){if(e=j(e),t=x(t,!0),e!==V||!r(T,t)||r(q,t)){var n=M(e,t);return!n||!r(T,t)||r(e,L)&&e[L][t]||(n.enumerable=!0),n}},X=function(e){for(var t,n=F(j(e)),a=[],o=0;n.length>o;)r(T,t=n[o++])||t==L||t==c||a.push(t);return a},ee=function(e){for(var t,n=e===V,a=F(n?q:j(e)),o=[],i=0;a.length>i;)!r(T,t=a[i++])||n&&!r(V,t)||o.push(T[t]);return o};K||(s((D=function(){if(this instanceof D)throw TypeError(\"Symbol is not a constructor!\");var e=p(arguments.length>0?arguments[0]:void 0),t=function(n){this===V&&t.call(q,n),r(this,L)&&r(this[L],e)&&(this[L][e]=!1),U(this,e,_(1,n))};return o&&H&&U(V,e,{configurable:!0,set:t}),G(e)}).prototype,\"toString\",(function(){return this._k})),C.f=Z,w.f=Y,n(41).f=O.f=X,n(19).f=Q,S.f=ee,o&&!n(14)&&s(V,\"propertyIsEnumerable\",Q,!0),b.f=function(e){return G(d(e))}),i(i.G+i.W+i.F*!K,{Symbol:D});for(var te=\"hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables\".split(\",\"),ne=0;te.length>ne;)d(te[ne++]);for(var ae=A(d.store),re=0;ae.length>re;)h(ae[re++]);i(i.S+i.F*!K,\"Symbol\",{for:function(e){return r(z,e+=\"\")?z[e]:z[e]=D(e)},keyFor:function(e){if(!J(e))throw TypeError(e+\" is not a symbol!\");for(var t in z)if(z[t]===e)return t},useSetter:function(){H=!0},useSimple:function(){H=!1}}),i(i.S+i.F*!K,\"Object\",{create:function(e,t){return void 0===t?k(e):$(k(e),t)},defineProperty:Y,defineProperties:$,getOwnPropertyDescriptor:Z,getOwnPropertyNames:X,getOwnPropertySymbols:ee});var oe=l((function(){S.f(1)}));i(i.S+i.F*oe,\"Object\",{getOwnPropertySymbols:function(e){return S.f(E(e))}}),I&&i(i.S+i.F*(!K||l((function(){var e=D();return\"[null]\"!=R([e])||\"{}\"!=R({a:e})||\"{}\"!=R(Object(e))}))),\"JSON\",{stringify:function(e){for(var t,n,a=[e],r=1;arguments.length>r;)a.push(arguments[r++]);if(n=t=a[1],(g(t)||void 0!==e)&&!J(e))return m(t)||(t=function(e,t){if(\"function\"==typeof n&&(t=n.call(this,e,t)),!J(t))return t}),a[1]=t,R.apply(I,a)}}),D.prototype[B]||n(6)(D.prototype,B,D.prototype.valueOf),f(D,\"Symbol\"),f(Math,\"Math\",!0),f(a.JSON,\"JSON\",!0)},function(e,t,n){var a=n(17)(\"meta\"),r=n(11),o=n(5),i=n(7).f,s=0,c=Object.isExtensible||function(){return!0},l=!n(8)((function(){return c(Object.preventExtensions({}))})),u=function(e){i(e,a,{value:{i:\"O\"+ ++s,w:{}}})},f=e.exports={KEY:a,NEED:!1,fastKey:function(e,t){if(!r(e))return\"symbol\"==typeof e?e:(\"string\"==typeof e?\"S\":\"P\")+e;if(!o(e,a)){if(!c(e))return\"F\";if(!t)return\"E\";u(e)}return e[a].i},getWeak:function(e,t){if(!o(e,a)){if(!c(e))return!0;if(!t)return!1;u(e)}return e[a].w},onFreeze:function(e){return l&&f.NEED&&c(e)&&!o(e,a)&&u(e),e}}},function(e,t,n){var a=n(13),r=n(32),o=n(19);e.exports=function(e){var t=a(e),n=r.f;if(n)for(var i,s=n(e),c=o.f,l=0;s.length>l;)c.call(e,i=s[l++])&&t.push(i);return t}},function(e,t,n){var a=n(24);e.exports=Array.isArray||function(e){return\"Array\"==a(e)}},function(e,t,n){var a=n(9),r=n(41).f,o={}.toString,i=\"object\"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return i&&\"[object Window]\"==o.call(e)?function(e){try{return r(e)}catch(e){return i.slice()}}(e):r(a(e))}},function(e,t,n){var a=n(19),r=n(16),o=n(9),i=n(23),s=n(5),c=n(35),l=Object.getOwnPropertyDescriptor;t.f=n(4)?l:function(e,t){if(e=o(e),t=i(t,!0),c)try{return l(e,t)}catch(e){}if(s(e,t))return r(!a.f.call(e,t),e[t])}},function(e,t){},function(e,t,n){n(31)(\"asyncIterator\")},function(e,t,n){n(31)(\"observable\")},function(e,t,n){\"use strict\";t.__esModule=!0;var a,r=n(77),o=(a=r)&&a.__esModule?a:{default:a};t.default=o.default||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}},function(e,t,n){e.exports={default:n(78),__esModule:!0}},function(e,t,n){n(79),e.exports=n(1).Object.assign},function(e,t,n){var a=n(15);a(a.S+a.F,\"Object\",{assign:n(80)})},function(e,t,n){\"use strict\";var a=n(4),r=n(13),o=n(32),i=n(19),s=n(18),c=n(40),l=Object.assign;e.exports=!l||n(8)((function(){var e={},t={},n=Symbol(),a=\"abcdefghijklmnopqrst\";return e[n]=7,a.split(\"\").forEach((function(e){t[e]=e})),7!=l({},e)[n]||Object.keys(l({},t)).join(\"\")!=a}))?function(e,t){for(var n=s(e),l=arguments.length,u=1,f=o.f,p=i.f;l>u;)for(var d,b=c(arguments[u++]),h=f?r(b).concat(f(b)):r(b),v=h.length,m=0;v>m;)d=h[m++],a&&!p.call(b,d)||(n[d]=b[d]);return n}:l},function(e,t,n){\"use strict\";t.__esModule=!0;var a=o(n(82)),r=o(n(85));function o(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t){if(Array.isArray(e))return e;if((0,a.default)(Object(e)))return function(e,t){var n=[],a=!0,o=!1,i=void 0;try{for(var s,c=(0,r.default)(e);!(a=(s=c.next()).done)&&(n.push(s.value),!t||n.length!==t);a=!0);}catch(e){o=!0,i=e}finally{try{!a&&c.return&&c.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}},function(e,t,n){e.exports={default:n(83),__esModule:!0}},function(e,t,n){n(29),n(20),e.exports=n(84)},function(e,t,n){var a=n(42),r=n(2)(\"iterator\"),o=n(12);e.exports=n(1).isIterable=function(e){var t=Object(e);return void 0!==t[r]||\"@@iterator\"in t||o.hasOwnProperty(a(t))}},function(e,t,n){e.exports={default:n(86),__esModule:!0}},function(e,t,n){n(29),n(20),e.exports=n(87)},function(e,t,n){var a=n(10),r=n(88);e.exports=n(1).getIterator=function(e){var t=r(e);if(\"function\"!=typeof t)throw TypeError(e+\" is not iterable!\");return a(t.call(e))}},function(e,t,n){var a=n(42),r=n(2)(\"iterator\"),o=n(12);e.exports=n(1).getIteratorMethod=function(e){if(null!=e)return e[r]||e[\"@@iterator\"]||o[a(e)]}},function(e,t,n){e.exports={default:n(90),__esModule:!0}},function(e,t,n){n(91),e.exports=n(1).Object.keys},function(e,t,n){var a=n(18),r=n(13);n(92)(\"keys\",(function(){return function(e){return r(a(e))}}))},function(e,t,n){var a=n(15),r=n(1),o=n(8);e.exports=function(e,t){var n=(r.Object||{})[e]||Object[e],i={};i[e]=t(n),a(a.S+a.F*o((function(){n(1)})),\"Object\",i)}},function(e,t,n){(function(t){var n=[[\"ary\",128],[\"bind\",1],[\"bindKey\",2],[\"curry\",8],[\"curryRight\",16],[\"flip\",512],[\"partial\",32],[\"partialRight\",64],[\"rearg\",256]],a=/^\\s+|\\s+$/g,r=/\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/,o=/\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,i=/,? & /,s=/^[-+]0x[0-9a-f]+$/i,c=/^0b[01]+$/i,l=/^\\[object .+?Constructor\\]$/,u=/^0o[0-7]+$/i,f=/^(?:0|[1-9]\\d*)$/,p=parseInt,d=\"object\"==typeof t&&t&&t.Object===Object&&t,b=\"object\"==typeof self&&self&&self.Object===Object&&self,h=d||b||Function(\"return this\")();function v(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function m(e,t){return!!(e?e.length:0)&&function(e,t,n){if(t!=t)return function(e,t,n,a){var r=e.length,o=n+(a?1:-1);for(;a?o--:++o<r;)if(t(e[o],o,e))return o;return-1}(e,y,n);var a=n-1,r=e.length;for(;++a<r;)if(e[a]===t)return a;return-1}(e,t,0)>-1}function y(e){return e!=e}function g(e,t){for(var n=e.length,a=0;n--;)e[n]===t&&a++;return a}function E(e,t){for(var n=-1,a=e.length,r=0,o=[];++n<a;){var i=e[n];i!==t&&\"__lodash_placeholder__\"!==i||(e[n]=\"__lodash_placeholder__\",o[r++]=n)}return o}var j,x,_,k=Function.prototype,O=Object.prototype,C=h[\"__core-js_shared__\"],S=(j=/[^.]+$/.exec(C&&C.keys&&C.keys.IE_PROTO||\"\"))?\"Symbol(src)_1.\"+j:\"\",w=k.toString,A=O.hasOwnProperty,M=O.toString,P=RegExp(\"^\"+w.call(A).replace(/[\\\\^$.*+?()[\\]{}|]/g,\"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g,\"$1.*?\")+\"$\"),F=Object.create,D=Math.max,I=Math.min,R=(x=H(Object,\"defineProperty\"),(_=H.name)&&_.length>2?x:void 0);function L(e){return X(e)?F(e):{}}function B(e){return!(!X(e)||function(e){return!!S&&S in e}(e))&&(function(e){var t=X(e)?M.call(e):\"\";return\"[object Function]\"==t||\"[object GeneratorFunction]\"==t}(e)||function(e){var t=!1;if(null!=e&&\"function\"!=typeof e.toString)try{t=!!(e+\"\")}catch(e){}return t}(e)?P:l).test(function(e){if(null!=e){try{return w.call(e)}catch(e){}try{return e+\"\"}catch(e){}}return\"\"}(e))}function N(e,t,n,a){for(var r=-1,o=e.length,i=n.length,s=-1,c=t.length,l=D(o-i,0),u=Array(c+l),f=!a;++s<c;)u[s]=t[s];for(;++r<i;)(f||r<o)&&(u[n[r]]=e[r]);for(;l--;)u[s++]=e[r++];return u}function z(e,t,n,a){for(var r=-1,o=e.length,i=-1,s=n.length,c=-1,l=t.length,u=D(o-s,0),f=Array(u+l),p=!a;++r<u;)f[r]=e[r];for(var d=r;++c<l;)f[d+c]=t[c];for(;++i<s;)(p||r<o)&&(f[d+n[i]]=e[r++]);return f}function T(e){return function(){var t=arguments;switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3]);case 5:return new e(t[0],t[1],t[2],t[3],t[4]);case 6:return new e(t[0],t[1],t[2],t[3],t[4],t[5]);case 7:return new e(t[0],t[1],t[2],t[3],t[4],t[5],t[6])}var n=L(e.prototype),a=e.apply(n,t);return X(a)?a:n}}function q(e,t,n,a,r,o,i,s,c,l){var u=128&t,f=1&t,p=2&t,d=24&t,b=512&t,v=p?void 0:T(e);return function m(){for(var y=arguments.length,j=Array(y),x=y;x--;)j[x]=arguments[x];if(d)var _=W(m),k=g(j,_);if(a&&(j=N(j,a,r,d)),o&&(j=z(j,o,i,d)),y-=k,d&&y<l){var O=E(j,_);return V(e,t,q,m.placeholder,n,j,O,s,c,l-y)}var C=f?n:this,S=p?C[e]:e;return y=j.length,s?j=Y(j,s):b&&y>1&&j.reverse(),u&&c<y&&(j.length=c),this&&this!==h&&this instanceof m&&(S=v||T(S)),S.apply(C,j)}}function V(e,t,n,a,r,o,i,s,c,l){var u=8&t;t|=u?32:64,4&(t&=~(u?64:32))||(t&=-4);var f=n(e,t,r,u?o:void 0,u?i:void 0,u?void 0:o,u?void 0:i,s,c,l);return f.placeholder=a,$(f,e,t)}function K(e,t,n,a,r,o,i,s){var c=2&t;if(!c&&\"function\"!=typeof e)throw new TypeError(\"Expected a function\");var l=a?a.length:0;if(l||(t&=-97,a=r=void 0),i=void 0===i?i:D(te(i),0),s=void 0===s?s:te(s),l-=r?r.length:0,64&t){var u=a,f=r;a=r=void 0}var p=[e,t,n,a,r,u,f,o,i,s];if(e=p[0],t=p[1],n=p[2],a=p[3],r=p[4],!(s=p[9]=null==p[9]?c?0:e.length:D(p[9]-l,0))&&24&t&&(t&=-25),t&&1!=t)d=8==t||16==t?function(e,t,n){var a=T(e);return function r(){for(var o=arguments.length,i=Array(o),s=o,c=W(r);s--;)i[s]=arguments[s];var l=o<3&&i[0]!==c&&i[o-1]!==c?[]:E(i,c);if((o-=l.length)<n)return V(e,t,q,r.placeholder,void 0,i,l,void 0,void 0,n-o);var u=this&&this!==h&&this instanceof r?a:e;return v(u,this,i)}}(e,t,s):32!=t&&33!=t||r.length?q.apply(void 0,p):function(e,t,n,a){var r=1&t,o=T(e);return function t(){for(var i=-1,s=arguments.length,c=-1,l=a.length,u=Array(l+s),f=this&&this!==h&&this instanceof t?o:e;++c<l;)u[c]=a[c];for(;s--;)u[c++]=arguments[++i];return v(f,r?n:this,u)}}(e,t,n,a);else var d=function(e,t,n){var a=1&t,r=T(e);return function t(){var o=this&&this!==h&&this instanceof t?r:e;return o.apply(a?n:this,arguments)}}(e,t,n);return $(d,e,t)}function W(e){return e.placeholder}function H(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return B(n)?n:void 0}function U(e){var t=e.match(o);return t?t[1].split(i):[]}function G(e,t){var n=t.length,a=n-1;return t[a]=(n>1?\"& \":\"\")+t[a],t=t.join(n>2?\", \":\" \"),e.replace(r,\"{\\n/* [wrapped with \"+t+\"] */\\n\")}function J(e,t){return!!(t=null==t?9007199254740991:t)&&(\"number\"==typeof e||f.test(e))&&e>-1&&e%1==0&&e<t}function Y(e,t){for(var n=e.length,a=I(t.length,n),r=function(e,t){var n=-1,a=e.length;for(t||(t=Array(a));++n<a;)t[n]=e[n];return t}(e);a--;){var o=t[a];e[a]=J(o,n)?r[o]:void 0}return e}var $=R?function(e,t,n){var a,r=t+\"\";return R(e,\"toString\",{configurable:!0,enumerable:!1,value:(a=G(r,Q(U(r),n)),function(){return a})})}:function(e){return e};function Q(e,t){return function(e,t){for(var n=-1,a=e?e.length:0;++n<a&&!1!==t(e[n],n,e););}(n,(function(n){var a=\"_.\"+n[0];t&n[1]&&!m(e,a)&&e.push(a)})),e.sort()}function Z(e,t,n){var a=K(e,8,void 0,void 0,void 0,void 0,void 0,t=n?void 0:t);return a.placeholder=Z.placeholder,a}function X(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}function ee(e){return e?(e=function(e){if(\"number\"==typeof e)return e;if(function(e){return\"symbol\"==typeof e||function(e){return!!e&&\"object\"==typeof e}(e)&&\"[object Symbol]\"==M.call(e)}(e))return NaN;if(X(e)){var t=\"function\"==typeof e.valueOf?e.valueOf():e;e=X(t)?t+\"\":t}if(\"string\"!=typeof e)return 0===e?e:+e;e=e.replace(a,\"\");var n=c.test(e);return n||u.test(e)?p(e.slice(2),n?2:8):s.test(e)?NaN:+e}(e))===1/0||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}function te(e){var t=ee(e),n=t%1;return t==t?n?t-n:t:0}Z.placeholder={},e.exports=Z}).call(this,n(43))},function(e,t,n){\"use strict\";function a(e){return e&&e.__esModule?e.default:e}t.__esModule=!0;var r=n(95);t.threezerotwofour=a(r);var o=n(96);t.apathy=a(o);var i=n(97);t.ashes=a(i);var s=n(98);t.atelierDune=a(s);var c=n(99);t.atelierForest=a(c);var l=n(100);t.atelierHeath=a(l);var u=n(101);t.atelierLakeside=a(u);var f=n(102);t.atelierSeaside=a(f);var p=n(103);t.bespin=a(p);var d=n(104);t.brewer=a(d);var b=n(105);t.bright=a(b);var h=n(106);t.chalk=a(h);var v=n(107);t.codeschool=a(v);var m=n(108);t.colors=a(m);var y=n(109);t.default=a(y);var g=n(110);t.eighties=a(g);var E=n(111);t.embers=a(E);var j=n(112);t.flat=a(j);var x=n(113);t.google=a(x);var _=n(114);t.grayscale=a(_);var k=n(115);t.greenscreen=a(k);var O=n(116);t.harmonic=a(O);var C=n(117);t.hopscotch=a(C);var S=n(118);t.isotope=a(S);var w=n(119);t.marrakesh=a(w);var A=n(120);t.mocha=a(A);var M=n(121);t.monokai=a(M);var P=n(122);t.ocean=a(P);var F=n(123);t.paraiso=a(F);var D=n(124);t.pop=a(D);var I=n(125);t.railscasts=a(I);var R=n(126);t.shapeshifter=a(R);var L=n(127);t.solarized=a(L);var B=n(128);t.summerfruit=a(B);var N=n(129);t.tomorrow=a(N);var z=n(130);t.tube=a(z);var T=n(131);t.twilight=a(T)},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"threezerotwofour\",author:\"jan t. sott (http://github.com/idleberg)\",base00:\"#090300\",base01:\"#3a3432\",base02:\"#4a4543\",base03:\"#5c5855\",base04:\"#807d7c\",base05:\"#a5a2a2\",base06:\"#d6d5d4\",base07:\"#f7f7f7\",base08:\"#db2d20\",base09:\"#e8bbd0\",base0A:\"#fded02\",base0B:\"#01a252\",base0C:\"#b5e4f4\",base0D:\"#01a0e4\",base0E:\"#a16a94\",base0F:\"#cdab53\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"apathy\",author:\"jannik siebert (https://github.com/janniks)\",base00:\"#031A16\",base01:\"#0B342D\",base02:\"#184E45\",base03:\"#2B685E\",base04:\"#5F9C92\",base05:\"#81B5AC\",base06:\"#A7CEC8\",base07:\"#D2E7E4\",base08:\"#3E9688\",base09:\"#3E7996\",base0A:\"#3E4C96\",base0B:\"#883E96\",base0C:\"#963E4C\",base0D:\"#96883E\",base0E:\"#4C963E\",base0F:\"#3E965B\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"ashes\",author:\"jannik siebert (https://github.com/janniks)\",base00:\"#1C2023\",base01:\"#393F45\",base02:\"#565E65\",base03:\"#747C84\",base04:\"#ADB3BA\",base05:\"#C7CCD1\",base06:\"#DFE2E5\",base07:\"#F3F4F5\",base08:\"#C7AE95\",base09:\"#C7C795\",base0A:\"#AEC795\",base0B:\"#95C7AE\",base0C:\"#95AEC7\",base0D:\"#AE95C7\",base0E:\"#C795AE\",base0F:\"#C79595\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"atelier dune\",author:\"bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/dune)\",base00:\"#20201d\",base01:\"#292824\",base02:\"#6e6b5e\",base03:\"#7d7a68\",base04:\"#999580\",base05:\"#a6a28c\",base06:\"#e8e4cf\",base07:\"#fefbec\",base08:\"#d73737\",base09:\"#b65611\",base0A:\"#cfb017\",base0B:\"#60ac39\",base0C:\"#1fad83\",base0D:\"#6684e1\",base0E:\"#b854d4\",base0F:\"#d43552\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"atelier forest\",author:\"bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/forest)\",base00:\"#1b1918\",base01:\"#2c2421\",base02:\"#68615e\",base03:\"#766e6b\",base04:\"#9c9491\",base05:\"#a8a19f\",base06:\"#e6e2e0\",base07:\"#f1efee\",base08:\"#f22c40\",base09:\"#df5320\",base0A:\"#d5911a\",base0B:\"#5ab738\",base0C:\"#00ad9c\",base0D:\"#407ee7\",base0E:\"#6666ea\",base0F:\"#c33ff3\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"atelier heath\",author:\"bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/heath)\",base00:\"#1b181b\",base01:\"#292329\",base02:\"#695d69\",base03:\"#776977\",base04:\"#9e8f9e\",base05:\"#ab9bab\",base06:\"#d8cad8\",base07:\"#f7f3f7\",base08:\"#ca402b\",base09:\"#a65926\",base0A:\"#bb8a35\",base0B:\"#379a37\",base0C:\"#159393\",base0D:\"#516aec\",base0E:\"#7b59c0\",base0F:\"#cc33cc\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"atelier lakeside\",author:\"bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/lakeside/)\",base00:\"#161b1d\",base01:\"#1f292e\",base02:\"#516d7b\",base03:\"#5a7b8c\",base04:\"#7195a8\",base05:\"#7ea2b4\",base06:\"#c1e4f6\",base07:\"#ebf8ff\",base08:\"#d22d72\",base09:\"#935c25\",base0A:\"#8a8a0f\",base0B:\"#568c3b\",base0C:\"#2d8f6f\",base0D:\"#257fad\",base0E:\"#5d5db1\",base0F:\"#b72dd2\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"atelier seaside\",author:\"bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/seaside/)\",base00:\"#131513\",base01:\"#242924\",base02:\"#5e6e5e\",base03:\"#687d68\",base04:\"#809980\",base05:\"#8ca68c\",base06:\"#cfe8cf\",base07:\"#f0fff0\",base08:\"#e6193c\",base09:\"#87711d\",base0A:\"#c3c322\",base0B:\"#29a329\",base0C:\"#1999b3\",base0D:\"#3d62f5\",base0E:\"#ad2bee\",base0F:\"#e619c3\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"bespin\",author:\"jan t. sott\",base00:\"#28211c\",base01:\"#36312e\",base02:\"#5e5d5c\",base03:\"#666666\",base04:\"#797977\",base05:\"#8a8986\",base06:\"#9d9b97\",base07:\"#baae9e\",base08:\"#cf6a4c\",base09:\"#cf7d34\",base0A:\"#f9ee98\",base0B:\"#54be0d\",base0C:\"#afc4db\",base0D:\"#5ea6ea\",base0E:\"#9b859d\",base0F:\"#937121\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"brewer\",author:\"timothée poisot (http://github.com/tpoisot)\",base00:\"#0c0d0e\",base01:\"#2e2f30\",base02:\"#515253\",base03:\"#737475\",base04:\"#959697\",base05:\"#b7b8b9\",base06:\"#dadbdc\",base07:\"#fcfdfe\",base08:\"#e31a1c\",base09:\"#e6550d\",base0A:\"#dca060\",base0B:\"#31a354\",base0C:\"#80b1d3\",base0D:\"#3182bd\",base0E:\"#756bb1\",base0F:\"#b15928\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"bright\",author:\"chris kempson (http://chriskempson.com)\",base00:\"#000000\",base01:\"#303030\",base02:\"#505050\",base03:\"#b0b0b0\",base04:\"#d0d0d0\",base05:\"#e0e0e0\",base06:\"#f5f5f5\",base07:\"#ffffff\",base08:\"#fb0120\",base09:\"#fc6d24\",base0A:\"#fda331\",base0B:\"#a1c659\",base0C:\"#76c7b7\",base0D:\"#6fb3d2\",base0E:\"#d381c3\",base0F:\"#be643c\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"chalk\",author:\"chris kempson (http://chriskempson.com)\",base00:\"#151515\",base01:\"#202020\",base02:\"#303030\",base03:\"#505050\",base04:\"#b0b0b0\",base05:\"#d0d0d0\",base06:\"#e0e0e0\",base07:\"#f5f5f5\",base08:\"#fb9fb1\",base09:\"#eda987\",base0A:\"#ddb26f\",base0B:\"#acc267\",base0C:\"#12cfc0\",base0D:\"#6fc2ef\",base0E:\"#e1a3ee\",base0F:\"#deaf8f\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"codeschool\",author:\"brettof86\",base00:\"#232c31\",base01:\"#1c3657\",base02:\"#2a343a\",base03:\"#3f4944\",base04:\"#84898c\",base05:\"#9ea7a6\",base06:\"#a7cfa3\",base07:\"#b5d8f6\",base08:\"#2a5491\",base09:\"#43820d\",base0A:\"#a03b1e\",base0B:\"#237986\",base0C:\"#b02f30\",base0D:\"#484d79\",base0E:\"#c59820\",base0F:\"#c98344\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"colors\",author:\"mrmrs (http://clrs.cc)\",base00:\"#111111\",base01:\"#333333\",base02:\"#555555\",base03:\"#777777\",base04:\"#999999\",base05:\"#bbbbbb\",base06:\"#dddddd\",base07:\"#ffffff\",base08:\"#ff4136\",base09:\"#ff851b\",base0A:\"#ffdc00\",base0B:\"#2ecc40\",base0C:\"#7fdbff\",base0D:\"#0074d9\",base0E:\"#b10dc9\",base0F:\"#85144b\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"default\",author:\"chris kempson (http://chriskempson.com)\",base00:\"#181818\",base01:\"#282828\",base02:\"#383838\",base03:\"#585858\",base04:\"#b8b8b8\",base05:\"#d8d8d8\",base06:\"#e8e8e8\",base07:\"#f8f8f8\",base08:\"#ab4642\",base09:\"#dc9656\",base0A:\"#f7ca88\",base0B:\"#a1b56c\",base0C:\"#86c1b9\",base0D:\"#7cafc2\",base0E:\"#ba8baf\",base0F:\"#a16946\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"eighties\",author:\"chris kempson (http://chriskempson.com)\",base00:\"#2d2d2d\",base01:\"#393939\",base02:\"#515151\",base03:\"#747369\",base04:\"#a09f93\",base05:\"#d3d0c8\",base06:\"#e8e6df\",base07:\"#f2f0ec\",base08:\"#f2777a\",base09:\"#f99157\",base0A:\"#ffcc66\",base0B:\"#99cc99\",base0C:\"#66cccc\",base0D:\"#6699cc\",base0E:\"#cc99cc\",base0F:\"#d27b53\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"embers\",author:\"jannik siebert (https://github.com/janniks)\",base00:\"#16130F\",base01:\"#2C2620\",base02:\"#433B32\",base03:\"#5A5047\",base04:\"#8A8075\",base05:\"#A39A90\",base06:\"#BEB6AE\",base07:\"#DBD6D1\",base08:\"#826D57\",base09:\"#828257\",base0A:\"#6D8257\",base0B:\"#57826D\",base0C:\"#576D82\",base0D:\"#6D5782\",base0E:\"#82576D\",base0F:\"#825757\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"flat\",author:\"chris kempson (http://chriskempson.com)\",base00:\"#2C3E50\",base01:\"#34495E\",base02:\"#7F8C8D\",base03:\"#95A5A6\",base04:\"#BDC3C7\",base05:\"#e0e0e0\",base06:\"#f5f5f5\",base07:\"#ECF0F1\",base08:\"#E74C3C\",base09:\"#E67E22\",base0A:\"#F1C40F\",base0B:\"#2ECC71\",base0C:\"#1ABC9C\",base0D:\"#3498DB\",base0E:\"#9B59B6\",base0F:\"#be643c\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"google\",author:\"seth wright (http://sethawright.com)\",base00:\"#1d1f21\",base01:\"#282a2e\",base02:\"#373b41\",base03:\"#969896\",base04:\"#b4b7b4\",base05:\"#c5c8c6\",base06:\"#e0e0e0\",base07:\"#ffffff\",base08:\"#CC342B\",base09:\"#F96A38\",base0A:\"#FBA922\",base0B:\"#198844\",base0C:\"#3971ED\",base0D:\"#3971ED\",base0E:\"#A36AC7\",base0F:\"#3971ED\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"grayscale\",author:\"alexandre gavioli (https://github.com/alexx2/)\",base00:\"#101010\",base01:\"#252525\",base02:\"#464646\",base03:\"#525252\",base04:\"#ababab\",base05:\"#b9b9b9\",base06:\"#e3e3e3\",base07:\"#f7f7f7\",base08:\"#7c7c7c\",base09:\"#999999\",base0A:\"#a0a0a0\",base0B:\"#8e8e8e\",base0C:\"#868686\",base0D:\"#686868\",base0E:\"#747474\",base0F:\"#5e5e5e\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"green screen\",author:\"chris kempson (http://chriskempson.com)\",base00:\"#001100\",base01:\"#003300\",base02:\"#005500\",base03:\"#007700\",base04:\"#009900\",base05:\"#00bb00\",base06:\"#00dd00\",base07:\"#00ff00\",base08:\"#007700\",base09:\"#009900\",base0A:\"#007700\",base0B:\"#00bb00\",base0C:\"#005500\",base0D:\"#009900\",base0E:\"#00bb00\",base0F:\"#005500\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"harmonic16\",author:\"jannik siebert (https://github.com/janniks)\",base00:\"#0b1c2c\",base01:\"#223b54\",base02:\"#405c79\",base03:\"#627e99\",base04:\"#aabcce\",base05:\"#cbd6e2\",base06:\"#e5ebf1\",base07:\"#f7f9fb\",base08:\"#bf8b56\",base09:\"#bfbf56\",base0A:\"#8bbf56\",base0B:\"#56bf8b\",base0C:\"#568bbf\",base0D:\"#8b56bf\",base0E:\"#bf568b\",base0F:\"#bf5656\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"hopscotch\",author:\"jan t. sott\",base00:\"#322931\",base01:\"#433b42\",base02:\"#5c545b\",base03:\"#797379\",base04:\"#989498\",base05:\"#b9b5b8\",base06:\"#d5d3d5\",base07:\"#ffffff\",base08:\"#dd464c\",base09:\"#fd8b19\",base0A:\"#fdcc59\",base0B:\"#8fc13e\",base0C:\"#149b93\",base0D:\"#1290bf\",base0E:\"#c85e7c\",base0F:\"#b33508\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"isotope\",author:\"jan t. sott\",base00:\"#000000\",base01:\"#404040\",base02:\"#606060\",base03:\"#808080\",base04:\"#c0c0c0\",base05:\"#d0d0d0\",base06:\"#e0e0e0\",base07:\"#ffffff\",base08:\"#ff0000\",base09:\"#ff9900\",base0A:\"#ff0099\",base0B:\"#33ff00\",base0C:\"#00ffff\",base0D:\"#0066ff\",base0E:\"#cc00ff\",base0F:\"#3300ff\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"marrakesh\",author:\"alexandre gavioli (http://github.com/alexx2/)\",base00:\"#201602\",base01:\"#302e00\",base02:\"#5f5b17\",base03:\"#6c6823\",base04:\"#86813b\",base05:\"#948e48\",base06:\"#ccc37a\",base07:\"#faf0a5\",base08:\"#c35359\",base09:\"#b36144\",base0A:\"#a88339\",base0B:\"#18974e\",base0C:\"#75a738\",base0D:\"#477ca1\",base0E:\"#8868b3\",base0F:\"#b3588e\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"mocha\",author:\"chris kempson (http://chriskempson.com)\",base00:\"#3B3228\",base01:\"#534636\",base02:\"#645240\",base03:\"#7e705a\",base04:\"#b8afad\",base05:\"#d0c8c6\",base06:\"#e9e1dd\",base07:\"#f5eeeb\",base08:\"#cb6077\",base09:\"#d28b71\",base0A:\"#f4bc87\",base0B:\"#beb55b\",base0C:\"#7bbda4\",base0D:\"#8ab3b5\",base0E:\"#a89bb9\",base0F:\"#bb9584\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"monokai\",author:\"wimer hazenberg (http://www.monokai.nl)\",base00:\"#272822\",base01:\"#383830\",base02:\"#49483e\",base03:\"#75715e\",base04:\"#a59f85\",base05:\"#f8f8f2\",base06:\"#f5f4f1\",base07:\"#f9f8f5\",base08:\"#f92672\",base09:\"#fd971f\",base0A:\"#f4bf75\",base0B:\"#a6e22e\",base0C:\"#a1efe4\",base0D:\"#66d9ef\",base0E:\"#ae81ff\",base0F:\"#cc6633\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"ocean\",author:\"chris kempson (http://chriskempson.com)\",base00:\"#2b303b\",base01:\"#343d46\",base02:\"#4f5b66\",base03:\"#65737e\",base04:\"#a7adba\",base05:\"#c0c5ce\",base06:\"#dfe1e8\",base07:\"#eff1f5\",base08:\"#bf616a\",base09:\"#d08770\",base0A:\"#ebcb8b\",base0B:\"#a3be8c\",base0C:\"#96b5b4\",base0D:\"#8fa1b3\",base0E:\"#b48ead\",base0F:\"#ab7967\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"paraiso\",author:\"jan t. sott\",base00:\"#2f1e2e\",base01:\"#41323f\",base02:\"#4f424c\",base03:\"#776e71\",base04:\"#8d8687\",base05:\"#a39e9b\",base06:\"#b9b6b0\",base07:\"#e7e9db\",base08:\"#ef6155\",base09:\"#f99b15\",base0A:\"#fec418\",base0B:\"#48b685\",base0C:\"#5bc4bf\",base0D:\"#06b6ef\",base0E:\"#815ba4\",base0F:\"#e96ba8\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"pop\",author:\"chris kempson (http://chriskempson.com)\",base00:\"#000000\",base01:\"#202020\",base02:\"#303030\",base03:\"#505050\",base04:\"#b0b0b0\",base05:\"#d0d0d0\",base06:\"#e0e0e0\",base07:\"#ffffff\",base08:\"#eb008a\",base09:\"#f29333\",base0A:\"#f8ca12\",base0B:\"#37b349\",base0C:\"#00aabb\",base0D:\"#0e5a94\",base0E:\"#b31e8d\",base0F:\"#7a2d00\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"railscasts\",author:\"ryan bates (http://railscasts.com)\",base00:\"#2b2b2b\",base01:\"#272935\",base02:\"#3a4055\",base03:\"#5a647e\",base04:\"#d4cfc9\",base05:\"#e6e1dc\",base06:\"#f4f1ed\",base07:\"#f9f7f3\",base08:\"#da4939\",base09:\"#cc7833\",base0A:\"#ffc66d\",base0B:\"#a5c261\",base0C:\"#519f50\",base0D:\"#6d9cbe\",base0E:\"#b6b3eb\",base0F:\"#bc9458\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"shapeshifter\",author:\"tyler benziger (http://tybenz.com)\",base00:\"#000000\",base01:\"#040404\",base02:\"#102015\",base03:\"#343434\",base04:\"#555555\",base05:\"#ababab\",base06:\"#e0e0e0\",base07:\"#f9f9f9\",base08:\"#e92f2f\",base09:\"#e09448\",base0A:\"#dddd13\",base0B:\"#0ed839\",base0C:\"#23edda\",base0D:\"#3b48e3\",base0E:\"#f996e2\",base0F:\"#69542d\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"solarized\",author:\"ethan schoonover (http://ethanschoonover.com/solarized)\",base00:\"#002b36\",base01:\"#073642\",base02:\"#586e75\",base03:\"#657b83\",base04:\"#839496\",base05:\"#93a1a1\",base06:\"#eee8d5\",base07:\"#fdf6e3\",base08:\"#dc322f\",base09:\"#cb4b16\",base0A:\"#b58900\",base0B:\"#859900\",base0C:\"#2aa198\",base0D:\"#268bd2\",base0E:\"#6c71c4\",base0F:\"#d33682\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"summerfruit\",author:\"christopher corley (http://cscorley.github.io/)\",base00:\"#151515\",base01:\"#202020\",base02:\"#303030\",base03:\"#505050\",base04:\"#B0B0B0\",base05:\"#D0D0D0\",base06:\"#E0E0E0\",base07:\"#FFFFFF\",base08:\"#FF0086\",base09:\"#FD8900\",base0A:\"#ABA800\",base0B:\"#00C918\",base0C:\"#1faaaa\",base0D:\"#3777E6\",base0E:\"#AD00A1\",base0F:\"#cc6633\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"tomorrow\",author:\"chris kempson (http://chriskempson.com)\",base00:\"#1d1f21\",base01:\"#282a2e\",base02:\"#373b41\",base03:\"#969896\",base04:\"#b4b7b4\",base05:\"#c5c8c6\",base06:\"#e0e0e0\",base07:\"#ffffff\",base08:\"#cc6666\",base09:\"#de935f\",base0A:\"#f0c674\",base0B:\"#b5bd68\",base0C:\"#8abeb7\",base0D:\"#81a2be\",base0E:\"#b294bb\",base0F:\"#a3685a\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"london tube\",author:\"jan t. sott\",base00:\"#231f20\",base01:\"#1c3f95\",base02:\"#5a5758\",base03:\"#737171\",base04:\"#959ca1\",base05:\"#d9d8d8\",base06:\"#e7e7e8\",base07:\"#ffffff\",base08:\"#ee2e24\",base09:\"#f386a1\",base0A:\"#ffd204\",base0B:\"#00853e\",base0C:\"#85cebc\",base0D:\"#009ddc\",base0E:\"#98005d\",base0F:\"#b06110\"},e.exports=t.default},function(e,t,n){\"use strict\";t.__esModule=!0,t.default={scheme:\"twilight\",author:\"david hart (http://hart-dev.com)\",base00:\"#1e1e1e\",base01:\"#323537\",base02:\"#464b50\",base03:\"#5f5a60\",base04:\"#838184\",base05:\"#a7a7a7\",base06:\"#c3c3c3\",base07:\"#ffffff\",base08:\"#cf6a4c\",base09:\"#cda869\",base0A:\"#f9ee98\",base0B:\"#8f9d6a\",base0C:\"#afc4db\",base0D:\"#7587a6\",base0E:\"#9b859d\",base0F:\"#9b703f\"},e.exports=t.default},function(e,t,n){var a=n(33);function r(e){var t=Math.round(a(e,0,255)).toString(16);return 1==t.length?\"0\"+t:t}e.exports=function(e){var t=4===e.length?r(255*e[3]):\"\";return\"#\"+r(e[0])+r(e[1])+r(e[2])+t}},function(e,t,n){var a=n(134),r=n(135),o=n(136),i=n(137);var s={\"#\":r,hsl:function(e){var t=a(e),n=i(t);return 4===t.length&&n.push(t[3]),n},rgb:o};function c(e){for(var t in s)if(0===e.indexOf(t))return s[t](e)}c.rgb=o,c.hsl=a,c.hex=r,e.exports=c},function(e,t,n){var a=n(44),r=n(33);function o(e,t){switch(e=parseFloat(e),t){case 0:return r(e,0,360);case 1:case 2:return r(e,0,100);case 3:return r(e,0,1)}}e.exports=function(e){return a(e).map(o)}},function(e,t){e.exports=function(e){4!==e.length&&5!==e.length||(e=function(e){for(var t=\"#\",n=1;n<e.length;n++){var a=e.charAt(n);t+=a+a}return t}(e));var t=[parseInt(e.substring(1,3),16),parseInt(e.substring(3,5),16),parseInt(e.substring(5,7),16)];if(9===e.length){var n=parseFloat((parseInt(e.substring(7,9),16)/255).toFixed(2));t.push(n)}return t}},function(e,t,n){var a=n(44),r=n(33);function o(e,t){return t<3?-1!=e.indexOf(\"%\")?Math.round(255*r(parseInt(e,10),0,100)/100):r(parseInt(e,10),0,255):r(parseFloat(e),0,1)}e.exports=function(e){return a(e).map(o)}},function(e,t){e.exports=function(e){var t,n,a,r,o,i=e[0]/360,s=e[1]/100,c=e[2]/100;if(0==s)return[o=255*c,o,o];t=2*c-(n=c<.5?c*(1+s):c+s-c*s),r=[0,0,0];for(var l=0;l<3;l++)(a=i+1/3*-(l-1))<0&&a++,a>1&&a--,o=6*a<1?t+6*(n-t)*a:2*a<1?n:3*a<2?t+(n-t)*(2/3-a)*6:t,r[l]=255*o;return r}},function(e,t,n){(function(t){var n=\"object\"==typeof t&&t&&t.Object===Object&&t,a=\"object\"==typeof self&&self&&self.Object===Object&&self,r=n||a||Function(\"return this\")();function o(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}function i(e,t){for(var n=-1,a=t.length,r=e.length;++n<a;)e[r+n]=t[n];return e}var s=Object.prototype,c=s.hasOwnProperty,l=s.toString,u=r.Symbol,f=s.propertyIsEnumerable,p=u?u.isConcatSpreadable:void 0,d=Math.max;function b(e){return h(e)||function(e){return function(e){return function(e){return!!e&&\"object\"==typeof e}(e)&&function(e){return null!=e&&function(e){return\"number\"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}(e.length)&&!function(e){var t=function(e){var t=typeof e;return!!e&&(\"object\"==t||\"function\"==t)}(e)?l.call(e):\"\";return\"[object Function]\"==t||\"[object GeneratorFunction]\"==t}(e)}(e)}(e)&&c.call(e,\"callee\")&&(!f.call(e,\"callee\")||\"[object Arguments]\"==l.call(e))}(e)||!!(p&&e&&e[p])}var h=Array.isArray;var v,m,y,g=(m=function(e){var t=(e=function e(t,n,a,r,o){var s=-1,c=t.length;for(a||(a=b),o||(o=[]);++s<c;){var l=t[s];n>0&&a(l)?n>1?e(l,n-1,a,r,o):i(o,l):r||(o[o.length]=l)}return o}(e,1)).length,n=t;for(v&&e.reverse();n--;)if(\"function\"!=typeof e[n])throw new TypeError(\"Expected a function\");return function(){for(var n=0,a=t?e[n].apply(this,arguments):arguments[0];++n<t;)a=e[n].call(this,a);return a}},y=d(void 0===y?m.length-1:y,0),function(){for(var e=arguments,t=-1,n=d(e.length-y,0),a=Array(n);++t<n;)a[t]=e[y+t];t=-1;for(var r=Array(y+1);++t<y;)r[t]=e[t];return r[y]=a,o(m,this,r)});e.exports=g}).call(this,n(43))},function(e,t,n){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.yuv2rgb=function(e){var t,n,a,r=e[0],o=e[1],i=e[2];return t=1*r+0*o+1.13983*i,n=1*r+-.39465*o+-.5806*i,a=1*r+2.02311*o+0*i,t=Math.min(Math.max(0,t),1),n=Math.min(Math.max(0,n),1),a=Math.min(Math.max(0,a),1),[255*t,255*n,255*a]},t.rgb2yuv=function(e){var t=e[0]/255,n=e[1]/255,a=e[2]/255;return[.299*t+.587*n+.114*a,-.14713*t+-.28886*n+.436*a,.615*t+-.51499*n+-.10001*a]}},function(e,t,n){\"use strict\";function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var r=n(141),o=function(){function e(){a(this,\"_callbacks\",void 0),a(this,\"_isDispatching\",void 0),a(this,\"_isHandled\",void 0),a(this,\"_isPending\",void 0),a(this,\"_lastID\",void 0),a(this,\"_pendingPayload\",void 0),this._callbacks={},this._isDispatching=!1,this._isHandled={},this._isPending={},this._lastID=1}var t=e.prototype;return t.register=function(e){var t=\"ID_\"+this._lastID++;return this._callbacks[t]=e,t},t.unregister=function(e){this._callbacks[e]||r(!1),delete this._callbacks[e]},t.waitFor=function(e){this._isDispatching||r(!1);for(var t=0;t<e.length;t++){var n=e[t];this._isPending[n]?this._isHandled[n]||r(!1):(this._callbacks[n]||r(!1),this._invokeCallback(n))}},t.dispatch=function(e){this._isDispatching&&r(!1),this._startDispatching(e);try{for(var t in this._callbacks)this._isPending[t]||this._invokeCallback(t)}finally{this._stopDispatching()}},t.isDispatching=function(){return this._isDispatching},t._invokeCallback=function(e){this._isPending[e]=!0,this._callbacks[e](this._pendingPayload),this._isHandled[e]=!0},t._startDispatching=function(e){for(var t in this._callbacks)this._isPending[t]=!1,this._isHandled[t]=!1;this._pendingPayload=e,this._isDispatching=!0},t._stopDispatching=function(){delete this._pendingPayload,this._isDispatching=!1},e}();e.exports=o},function(e,t,n){\"use strict\";var a=function(e){};e.exports=function(e,t){for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];if(a(t),!e){var i;if(void 0===t)i=new Error(\"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\");else{var s=0;(i=new Error(t.replace(/%s/g,(function(){return String(r[s++])})))).name=\"Invariant Violation\"}throw i.framesToPop=1,i}}},function(e,t,n){\"use strict\";function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function s(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,\"value\"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function c(e,t,n){return t&&s(e.prototype,t),n&&s(e,n),e}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function\");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function p(e){return(p=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e})(e)}function d(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}function b(e,t){return!t||\"object\"!==p(t)&&\"function\"!=typeof t?d(e):t}function h(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,a=f(e);if(t){var r=f(this).constructor;n=Reflect.construct(a,arguments,r)}else n=a.apply(this,arguments);return b(this,n)}}n.r(t);var v=n(0),m=n.n(v);function y(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!=e&&this.setState(e)}function g(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!=n?n:null}.bind(this))}function E(e,t){try{var n=this.props,a=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,a)}finally{this.props=n,this.state=a}}function j(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error(\"Can only polyfill class components\");if(\"function\"!=typeof e.getDerivedStateFromProps&&\"function\"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,a=null,r=null;if(\"function\"==typeof t.componentWillMount?n=\"componentWillMount\":\"function\"==typeof t.UNSAFE_componentWillMount&&(n=\"UNSAFE_componentWillMount\"),\"function\"==typeof t.componentWillReceiveProps?a=\"componentWillReceiveProps\":\"function\"==typeof t.UNSAFE_componentWillReceiveProps&&(a=\"UNSAFE_componentWillReceiveProps\"),\"function\"==typeof t.componentWillUpdate?r=\"componentWillUpdate\":\"function\"==typeof t.UNSAFE_componentWillUpdate&&(r=\"UNSAFE_componentWillUpdate\"),null!==n||null!==a||null!==r){var o=e.displayName||e.name,i=\"function\"==typeof e.getDerivedStateFromProps?\"getDerivedStateFromProps()\":\"getSnapshotBeforeUpdate()\";throw Error(\"Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n\"+o+\" uses \"+i+\" but also contains the following legacy lifecycles:\"+(null!==n?\"\\n  \"+n:\"\")+(null!==a?\"\\n  \"+a:\"\")+(null!==r?\"\\n  \"+r:\"\")+\"\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\nhttps://fb.me/react-async-component-lifecycle-hooks\")}if(\"function\"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=y,t.componentWillReceiveProps=g),\"function\"==typeof t.getSnapshotBeforeUpdate){if(\"function\"!=typeof t.componentDidUpdate)throw new Error(\"Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype\");t.componentWillUpdate=E;var s=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var a=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;s.call(this,e,t,a)}}return e}function x(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}function _(e){var t=function(e){return{}.toString.call(e).match(/\\s([a-zA-Z]+)/)[1].toLowerCase()}(e);return\"number\"===t&&(t=isNaN(e)?\"nan\":(0|e)!=e?\"float\":\"integer\"),t}y.__suppressDeprecationWarning=!0,g.__suppressDeprecationWarning=!0,E.__suppressDeprecationWarning=!0;var k={scheme:\"rjv-default\",author:\"mac gainor\",base00:\"rgba(0, 0, 0, 0)\",base01:\"rgb(245, 245, 245)\",base02:\"rgb(235, 235, 235)\",base03:\"#93a1a1\",base04:\"rgba(0, 0, 0, 0.3)\",base05:\"#586e75\",base06:\"#073642\",base07:\"#002b36\",base08:\"#d33682\",base09:\"#cb4b16\",base0A:\"#dc322f\",base0B:\"#859900\",base0C:\"#6c71c4\",base0D:\"#586e75\",base0E:\"#2aa198\",base0F:\"#268bd2\"},O={scheme:\"rjv-grey\",author:\"mac gainor\",base00:\"rgba(1, 1, 1, 0)\",base01:\"rgba(1, 1, 1, 0.1)\",base02:\"rgba(0, 0, 0, 0.2)\",base03:\"rgba(1, 1, 1, 0.3)\",base04:\"rgba(0, 0, 0, 0.4)\",base05:\"rgba(1, 1, 1, 0.5)\",base06:\"rgba(1, 1, 1, 0.6)\",base07:\"rgba(1, 1, 1, 0.7)\",base08:\"rgba(1, 1, 1, 0.8)\",base09:\"rgba(1, 1, 1, 0.8)\",base0A:\"rgba(1, 1, 1, 0.8)\",base0B:\"rgba(1, 1, 1, 0.8)\",base0C:\"rgba(1, 1, 1, 0.8)\",base0D:\"rgba(1, 1, 1, 0.8)\",base0E:\"rgba(1, 1, 1, 0.8)\",base0F:\"rgba(1, 1, 1, 0.8)\"},C={white:\"#fff\",black:\"#000\",transparent:\"rgba(1, 1, 1, 0)\",globalFontFamily:\"monospace\",globalCursor:\"default\",indentBlockWidth:\"5px\",braceFontWeight:\"bold\",braceCursor:\"pointer\",ellipsisFontSize:\"18px\",ellipsisLineHeight:\"10px\",ellipsisCursor:\"pointer\",keyMargin:\"0px 5px\",keyLetterSpacing:\"0.5px\",keyFontStyle:\"none\",keyBorderRadius:\"3px\",keyColonWeight:\"bold\",keyVerticalAlign:\"top\",keyOpacity:\"0.85\",keyOpacityHover:\"1\",keyValPaddingTop:\"3px\",keyValPaddingBottom:\"3px\",keyValPaddingRight:\"5px\",keyValBorderLeft:\"1px solid\",keyValBorderHover:\"2px solid\",keyValPaddingHover:\"3px 5px 3px 4px\",pushedContentMarginLeft:\"6px\",variableValuePaddingRight:\"6px\",nullFontSize:\"11px\",nullFontWeight:\"bold\",nullPadding:\"1px 2px\",nullBorderRadius:\"3px\",nanFontSize:\"11px\",nanFontWeight:\"bold\",nanPadding:\"1px 2px\",nanBorderRadius:\"3px\",undefinedFontSize:\"11px\",undefinedFontWeight:\"bold\",undefinedPadding:\"1px 2px\",undefinedBorderRadius:\"3px\",dataTypeFontSize:\"11px\",dataTypeMarginRight:\"4px\",datatypeOpacity:\"0.8\",objectSizeBorderRadius:\"3px\",objectSizeFontStyle:\"italic\",objectSizeMargin:\"0px 6px 0px 0px\",clipboardCursor:\"pointer\",clipboardCheckMarginLeft:\"-12px\",metaDataPadding:\"0px 0px 0px 10px\",arrayGroupMetaPadding:\"0px 0px 0px 4px\",iconContainerWidth:\"17px\",tooltipPadding:\"4px\",editInputMinWidth:\"130px\",editInputBorderRadius:\"2px\",editInputPadding:\"5px\",editInputMarginRight:\"4px\",editInputFontFamily:\"monospace\",iconCursor:\"pointer\",iconFontSize:\"15px\",iconPaddingRight:\"1px\",dateValueMarginLeft:\"2px\",iconMarginRight:\"3px\",detectedRowPaddingTop:\"3px\",addKeyCoverBackground:\"rgba(255, 255, 255, 0.3)\",addKeyCoverPosition:\"absolute\",addKeyCoverPositionPx:\"0px\",addKeyModalWidth:\"200px\",addKeyModalMargin:\"auto\",addKeyModalPadding:\"10px\",addKeyModalRadius:\"3px\"},S=n(45),w=function(e){var t=function(e){return{backgroundColor:e.base00,ellipsisColor:e.base09,braceColor:e.base07,expandedIcon:e.base0D,collapsedIcon:e.base0E,keyColor:e.base07,arrayKeyColor:e.base0C,objectSize:e.base04,copyToClipboard:e.base0F,copyToClipboardCheck:e.base0D,objectBorder:e.base02,dataTypes:{boolean:e.base0E,date:e.base0D,float:e.base0B,function:e.base0D,integer:e.base0F,string:e.base09,nan:e.base08,null:e.base0A,undefined:e.base05,regexp:e.base0A,background:e.base02},editVariable:{editIcon:e.base0E,cancelIcon:e.base09,removeIcon:e.base09,addIcon:e.base0E,checkIcon:e.base0E,background:e.base01,color:e.base0A,border:e.base07},addKeyModal:{background:e.base05,border:e.base04,color:e.base0A,labelColor:e.base01},validationFailure:{background:e.base09,iconColor:e.base01,fontColor:e.base01}}}(e);return{\"app-container\":{fontFamily:C.globalFontFamily,cursor:C.globalCursor,backgroundColor:t.backgroundColor,position:\"relative\"},ellipsis:{display:\"inline-block\",color:t.ellipsisColor,fontSize:C.ellipsisFontSize,lineHeight:C.ellipsisLineHeight,cursor:C.ellipsisCursor},\"brace-row\":{display:\"inline-block\",cursor:\"pointer\"},brace:{display:\"inline-block\",cursor:C.braceCursor,fontWeight:C.braceFontWeight,color:t.braceColor},\"expanded-icon\":{color:t.expandedIcon},\"collapsed-icon\":{color:t.collapsedIcon},colon:{display:\"inline-block\",margin:C.keyMargin,color:t.keyColor,verticalAlign:\"top\"},objectKeyVal:function(e,n){return{style:o({paddingTop:C.keyValPaddingTop,paddingRight:C.keyValPaddingRight,paddingBottom:C.keyValPaddingBottom,borderLeft:C.keyValBorderLeft+\" \"+t.objectBorder,\":hover\":{paddingLeft:n.paddingLeft-1+\"px\",borderLeft:C.keyValBorderHover+\" \"+t.objectBorder}},n)}},\"object-key-val-no-border\":{padding:C.keyValPadding},\"pushed-content\":{marginLeft:C.pushedContentMarginLeft},variableValue:function(e,t){return{style:o({display:\"inline-block\",paddingRight:C.variableValuePaddingRight,position:\"relative\"},t)}},\"object-name\":{display:\"inline-block\",color:t.keyColor,letterSpacing:C.keyLetterSpacing,fontStyle:C.keyFontStyle,verticalAlign:C.keyVerticalAlign,opacity:C.keyOpacity,\":hover\":{opacity:C.keyOpacityHover}},\"array-key\":{display:\"inline-block\",color:t.arrayKeyColor,letterSpacing:C.keyLetterSpacing,fontStyle:C.keyFontStyle,verticalAlign:C.keyVerticalAlign,opacity:C.keyOpacity,\":hover\":{opacity:C.keyOpacityHover}},\"object-size\":{color:t.objectSize,borderRadius:C.objectSizeBorderRadius,fontStyle:C.objectSizeFontStyle,margin:C.objectSizeMargin,cursor:\"default\"},\"data-type-label\":{fontSize:C.dataTypeFontSize,marginRight:C.dataTypeMarginRight,opacity:C.datatypeOpacity},boolean:{display:\"inline-block\",color:t.dataTypes.boolean},date:{display:\"inline-block\",color:t.dataTypes.date},\"date-value\":{marginLeft:C.dateValueMarginLeft},float:{display:\"inline-block\",color:t.dataTypes.float},function:{display:\"inline-block\",color:t.dataTypes.function,cursor:\"pointer\",whiteSpace:\"pre-line\"},\"function-value\":{fontStyle:\"italic\"},integer:{display:\"inline-block\",color:t.dataTypes.integer},string:{display:\"inline-block\",color:t.dataTypes.string},nan:{display:\"inline-block\",color:t.dataTypes.nan,fontSize:C.nanFontSize,fontWeight:C.nanFontWeight,backgroundColor:t.dataTypes.background,padding:C.nanPadding,borderRadius:C.nanBorderRadius},null:{display:\"inline-block\",color:t.dataTypes.null,fontSize:C.nullFontSize,fontWeight:C.nullFontWeight,backgroundColor:t.dataTypes.background,padding:C.nullPadding,borderRadius:C.nullBorderRadius},undefined:{display:\"inline-block\",color:t.dataTypes.undefined,fontSize:C.undefinedFontSize,padding:C.undefinedPadding,borderRadius:C.undefinedBorderRadius,backgroundColor:t.dataTypes.background},regexp:{display:\"inline-block\",color:t.dataTypes.regexp},\"copy-to-clipboard\":{cursor:C.clipboardCursor},\"copy-icon\":{color:t.copyToClipboard,fontSize:C.iconFontSize,marginRight:C.iconMarginRight,verticalAlign:\"top\"},\"copy-icon-copied\":{color:t.copyToClipboardCheck,marginLeft:C.clipboardCheckMarginLeft},\"array-group-meta-data\":{display:\"inline-block\",padding:C.arrayGroupMetaPadding},\"object-meta-data\":{display:\"inline-block\",padding:C.metaDataPadding},\"icon-container\":{display:\"inline-block\",width:C.iconContainerWidth},tooltip:{padding:C.tooltipPadding},removeVarIcon:{verticalAlign:\"top\",display:\"inline-block\",color:t.editVariable.removeIcon,cursor:C.iconCursor,fontSize:C.iconFontSize,marginRight:C.iconMarginRight},addVarIcon:{verticalAlign:\"top\",display:\"inline-block\",color:t.editVariable.addIcon,cursor:C.iconCursor,fontSize:C.iconFontSize,marginRight:C.iconMarginRight},editVarIcon:{verticalAlign:\"top\",display:\"inline-block\",color:t.editVariable.editIcon,cursor:C.iconCursor,fontSize:C.iconFontSize,marginRight:C.iconMarginRight},\"edit-icon-container\":{display:\"inline-block\",verticalAlign:\"top\"},\"check-icon\":{display:\"inline-block\",cursor:C.iconCursor,color:t.editVariable.checkIcon,fontSize:C.iconFontSize,paddingRight:C.iconPaddingRight},\"cancel-icon\":{display:\"inline-block\",cursor:C.iconCursor,color:t.editVariable.cancelIcon,fontSize:C.iconFontSize,paddingRight:C.iconPaddingRight},\"edit-input\":{display:\"inline-block\",minWidth:C.editInputMinWidth,borderRadius:C.editInputBorderRadius,backgroundColor:t.editVariable.background,color:t.editVariable.color,padding:C.editInputPadding,marginRight:C.editInputMarginRight,fontFamily:C.editInputFontFamily},\"detected-row\":{paddingTop:C.detectedRowPaddingTop},\"key-modal-request\":{position:C.addKeyCoverPosition,top:C.addKeyCoverPositionPx,left:C.addKeyCoverPositionPx,right:C.addKeyCoverPositionPx,bottom:C.addKeyCoverPositionPx,backgroundColor:C.addKeyCoverBackground},\"key-modal\":{width:C.addKeyModalWidth,backgroundColor:t.addKeyModal.background,marginLeft:C.addKeyModalMargin,marginRight:C.addKeyModalMargin,padding:C.addKeyModalPadding,borderRadius:C.addKeyModalRadius,marginTop:\"15px\",position:\"relative\"},\"key-modal-label\":{color:t.addKeyModal.labelColor,marginLeft:\"2px\",marginBottom:\"5px\",fontSize:\"11px\"},\"key-modal-input-container\":{overflow:\"hidden\"},\"key-modal-input\":{width:\"100%\",padding:\"3px 6px\",fontFamily:\"monospace\",color:t.addKeyModal.color,border:\"none\",boxSizing:\"border-box\",borderRadius:\"2px\"},\"key-modal-cancel\":{backgroundColor:t.editVariable.removeIcon,position:\"absolute\",top:\"0px\",right:\"0px\",borderRadius:\"0px 3px 0px 3px\",cursor:\"pointer\"},\"key-modal-cancel-icon\":{color:t.addKeyModal.labelColor,fontSize:C.iconFontSize,transform:\"rotate(45deg)\"},\"key-modal-submit\":{color:t.editVariable.addIcon,fontSize:C.iconFontSize,position:\"absolute\",right:\"2px\",top:\"3px\",cursor:\"pointer\"},\"function-ellipsis\":{display:\"inline-block\",color:t.ellipsisColor,fontSize:C.ellipsisFontSize,lineHeight:C.ellipsisLineHeight,cursor:C.ellipsisCursor},\"validation-failure\":{float:\"right\",padding:\"3px 6px\",borderRadius:\"2px\",cursor:\"pointer\",color:t.validationFailure.fontColor,backgroundColor:t.validationFailure.background},\"validation-failure-label\":{marginRight:\"6px\"},\"validation-failure-clear\":{position:\"relative\",verticalAlign:\"top\",cursor:\"pointer\",color:t.validationFailure.iconColor,fontSize:C.iconFontSize,transform:\"rotate(45deg)\"}}};function A(e,t,n){return e||console.error(\"theme has not been set\"),function(e){var t=k;return!1!==e&&\"none\"!==e||(t=O),Object(S.createStyling)(w,{defaultBase16:t})(e)}(e)(t,n)}var M=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){var e=this.props,t=(e.rjvId,e.type_name),n=e.displayDataTypes,a=e.theme;return n?m.a.createElement(\"span\",Object.assign({className:\"data-type-label\"},A(a,\"data-type-label\")),t):null}}]),n}(m.a.PureComponent),P=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){var e=this.props;return m.a.createElement(\"div\",A(e.theme,\"boolean\"),m.a.createElement(M,Object.assign({type_name:\"bool\"},e)),e.value?\"true\":\"false\")}}]),n}(m.a.PureComponent),F=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){var e=this.props;return m.a.createElement(\"div\",A(e.theme,\"date\"),m.a.createElement(M,Object.assign({type_name:\"date\"},e)),m.a.createElement(\"span\",Object.assign({className:\"date-value\"},A(e.theme,\"date-value\")),e.value.toLocaleTimeString(\"en-us\",{weekday:\"short\",year:\"numeric\",month:\"short\",day:\"numeric\",hour:\"2-digit\",minute:\"2-digit\"})))}}]),n}(m.a.PureComponent),D=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){var e=this.props;return m.a.createElement(\"div\",A(e.theme,\"float\"),m.a.createElement(M,Object.assign({type_name:\"float\"},e)),this.props.value)}}]),n}(m.a.PureComponent);function I(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function R(e,t){if(e){if(\"string\"==typeof e)return I(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return\"Object\"===n&&e.constructor&&(n=e.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(e):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?I(e,t):void 0}}function L(e,t){var n;if(\"undefined\"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=R(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var a=0,r=function(){};return{s:r,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:r}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var o,i=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function B(e){return function(e){if(Array.isArray(e))return I(e)}(e)||function(e){if(\"undefined\"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||R(e)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}var N=n(46),z=new(n(47).Dispatcher),T=new(function(e){u(n,e);var t=h(n);function n(){var e;i(this,n);for(var a=arguments.length,r=new Array(a),s=0;s<a;s++)r[s]=arguments[s];return(e=t.call.apply(t,[this].concat(r))).objects={},e.set=function(t,n,a,r){void 0===e.objects[t]&&(e.objects[t]={}),void 0===e.objects[t][n]&&(e.objects[t][n]={}),e.objects[t][n][a]=r},e.get=function(t,n,a,r){return void 0===e.objects[t]||void 0===e.objects[t][n]||null==e.objects[t][n][a]?r:e.objects[t][n][a]},e.handleAction=function(t){var n=t.rjvId,a=t.data;switch(t.name){case\"RESET\":e.emit(\"reset-\"+n);break;case\"VARIABLE_UPDATED\":t.data.updated_src=e.updateSrc(n,a),e.set(n,\"action\",\"variable-update\",o(o({},a),{},{type:\"variable-edited\"})),e.emit(\"variable-update-\"+n);break;case\"VARIABLE_REMOVED\":t.data.updated_src=e.updateSrc(n,a),e.set(n,\"action\",\"variable-update\",o(o({},a),{},{type:\"variable-removed\"})),e.emit(\"variable-update-\"+n);break;case\"VARIABLE_ADDED\":t.data.updated_src=e.updateSrc(n,a),e.set(n,\"action\",\"variable-update\",o(o({},a),{},{type:\"variable-added\"})),e.emit(\"variable-update-\"+n);break;case\"ADD_VARIABLE_KEY_REQUEST\":e.set(n,\"action\",\"new-key-request\",a),e.emit(\"add-key-request-\"+n)}},e.updateSrc=function(t,n){var a=n.name,r=n.namespace,o=n.new_value,i=(n.existing_value,n.variable_removed);r.shift();var s,c=e.get(t,\"global\",\"src\"),l=e.deepCopy(c,B(r)),u=l,f=L(r);try{for(f.s();!(s=f.n()).done;){u=u[s.value]}}catch(e){f.e(e)}finally{f.f()}return i?\"array\"==_(u)?u.splice(a,1):delete u[a]:null!==a?u[a]=o:l=o,e.set(t,\"global\",\"src\",l),l},e.deepCopy=function(t,n){var a,r=_(t),i=n.shift();return\"array\"==r?a=B(t):\"object\"==r&&(a=o({},t)),void 0!==i&&(a[i]=e.deepCopy(t[i],n)),a},e}return n}(N.EventEmitter));z.register(T.handleAction.bind(T));var q=T,V=function(e){u(n,e);var t=h(n);function n(e){var a;return i(this,n),(a=t.call(this,e)).toggleCollapsed=function(){a.setState({collapsed:!a.state.collapsed},(function(){q.set(a.props.rjvId,a.props.namespace,\"collapsed\",a.state.collapsed)}))},a.getFunctionDisplay=function(e){var t=d(a).props;return e?m.a.createElement(\"span\",null,a.props.value.toString().slice(9,-1).replace(/\\{[\\s\\S]+/,\"\"),m.a.createElement(\"span\",{className:\"function-collapsed\",style:{fontWeight:\"bold\"}},m.a.createElement(\"span\",null,\"{\"),m.a.createElement(\"span\",A(t.theme,\"ellipsis\"),\"...\"),m.a.createElement(\"span\",null,\"}\"))):a.props.value.toString().slice(9,-1)},a.state={collapsed:q.get(e.rjvId,e.namespace,\"collapsed\",!0)},a}return c(n,[{key:\"render\",value:function(){var e=this.props,t=this.state.collapsed;return m.a.createElement(\"div\",A(e.theme,\"function\"),m.a.createElement(M,Object.assign({type_name:\"function\"},e)),m.a.createElement(\"span\",Object.assign({},A(e.theme,\"function-value\"),{className:\"rjv-function-container\",onClick:this.toggleCollapsed}),this.getFunctionDisplay(t)))}}]),n}(m.a.PureComponent),K=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){return m.a.createElement(\"div\",A(this.props.theme,\"nan\"),\"NaN\")}}]),n}(m.a.PureComponent),W=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){return m.a.createElement(\"div\",A(this.props.theme,\"null\"),\"NULL\")}}]),n}(m.a.PureComponent),H=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){var e=this.props;return m.a.createElement(\"div\",A(e.theme,\"integer\"),m.a.createElement(M,Object.assign({type_name:\"int\"},e)),this.props.value)}}]),n}(m.a.PureComponent),U=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){var e=this.props;return m.a.createElement(\"div\",A(e.theme,\"regexp\"),m.a.createElement(M,Object.assign({type_name:\"regexp\"},e)),this.props.value.toString())}}]),n}(m.a.PureComponent),G=function(e){u(n,e);var t=h(n);function n(e){var a;return i(this,n),(a=t.call(this,e)).toggleCollapsed=function(){a.setState({collapsed:!a.state.collapsed},(function(){q.set(a.props.rjvId,a.props.namespace,\"collapsed\",a.state.collapsed)}))},a.state={collapsed:q.get(e.rjvId,e.namespace,\"collapsed\",!0)},a}return c(n,[{key:\"render\",value:function(){this.state.collapsed;var e=this.props,t=e.collapseStringsAfterLength,n=e.theme,a=e.value,r={style:{cursor:\"default\"}};return\"integer\"===_(t)&&a.length>t&&(r.style.cursor=\"pointer\",this.state.collapsed&&(a=m.a.createElement(\"span\",null,a.substring(0,t),m.a.createElement(\"span\",A(n,\"ellipsis\"),\" ...\")))),m.a.createElement(\"div\",A(n,\"string\"),m.a.createElement(M,Object.assign({type_name:\"string\"},e)),m.a.createElement(\"span\",Object.assign({className:\"string-value\"},r,{onClick:this.toggleCollapsed}),'\"',a,'\"'))}}]),n}(m.a.PureComponent),J=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){return m.a.createElement(\"div\",A(this.props.theme,\"undefined\"),\"undefined\")}}]),n}(m.a.PureComponent);function Y(){return(Y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var $=v.useLayoutEffect,Q=function(e){var t=Object(v.useRef)(e);return $((function(){t.current=e})),t},Z=function(e,t){\"function\"!=typeof e?e.current=t:e(t)},X=function(e,t){var n=Object(v.useRef)();return Object(v.useCallback)((function(a){e.current=a,n.current&&Z(n.current,null),n.current=t,t&&Z(t,a)}),[t])},ee={\"min-height\":\"0\",\"max-height\":\"none\",height:\"0\",visibility:\"hidden\",overflow:\"hidden\",position:\"absolute\",\"z-index\":\"-1000\",top:\"0\",right:\"0\"},te=function(e){Object.keys(ee).forEach((function(t){e.style.setProperty(t,ee[t],\"important\")}))},ne=null;var ae=function(){},re=[\"borderBottomWidth\",\"borderLeftWidth\",\"borderRightWidth\",\"borderTopWidth\",\"boxSizing\",\"fontFamily\",\"fontSize\",\"fontStyle\",\"fontWeight\",\"letterSpacing\",\"lineHeight\",\"paddingBottom\",\"paddingLeft\",\"paddingRight\",\"paddingTop\",\"tabSize\",\"textIndent\",\"textRendering\",\"textTransform\",\"width\"],oe=!!document.documentElement.currentStyle,ie=function(e,t){var n=e.cacheMeasurements,a=e.maxRows,r=e.minRows,o=e.onChange,i=void 0===o?ae:o,s=e.onHeightChange,c=void 0===s?ae:s,l=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,[\"cacheMeasurements\",\"maxRows\",\"minRows\",\"onChange\",\"onHeightChange\"]);var u,f=void 0!==l.value,p=Object(v.useRef)(null),d=X(p,t),b=Object(v.useRef)(0),h=Object(v.useRef)(),m=function(){var e=p.current,t=n&&h.current?h.current:function(e){var t=window.getComputedStyle(e);if(null===t)return null;var n,a=(n=t,re.reduce((function(e,t){return e[t]=n[t],e}),{})),r=a.boxSizing;return\"\"===r?null:(oe&&\"border-box\"===r&&(a.width=parseFloat(a.width)+parseFloat(a.borderRightWidth)+parseFloat(a.borderLeftWidth)+parseFloat(a.paddingRight)+parseFloat(a.paddingLeft)+\"px\"),{sizingStyle:a,paddingSize:parseFloat(a.paddingBottom)+parseFloat(a.paddingTop),borderSize:parseFloat(a.borderBottomWidth)+parseFloat(a.borderTopWidth)})}(e);if(t){h.current=t;var o=function(e,t,n,a){void 0===n&&(n=1),void 0===a&&(a=1/0),ne||((ne=document.createElement(\"textarea\")).setAttribute(\"tab-index\",\"-1\"),ne.setAttribute(\"aria-hidden\",\"true\"),te(ne)),null===ne.parentNode&&document.body.appendChild(ne);var r=e.paddingSize,o=e.borderSize,i=e.sizingStyle,s=i.boxSizing;Object.keys(i).forEach((function(e){var t=e;ne.style[t]=i[t]})),te(ne),ne.value=t;var c=function(e,t){var n=e.scrollHeight;return\"border-box\"===t.sizingStyle.boxSizing?n+t.borderSize:n-t.paddingSize}(ne,e);ne.value=\"x\";var l=ne.scrollHeight-r,u=l*n;\"border-box\"===s&&(u=u+r+o),c=Math.max(u,c);var f=l*a;return\"border-box\"===s&&(f=f+r+o),[c=Math.min(f,c),l]}(t,e.value||e.placeholder||\"x\",r,a),i=o[0],s=o[1];b.current!==i&&(b.current=i,e.style.setProperty(\"height\",i+\"px\",\"important\"),c(i,{rowHeight:s}))}};return Object(v.useLayoutEffect)(m),u=Q(m),Object(v.useLayoutEffect)((function(){var e=function(e){u.current(e)};return window.addEventListener(\"resize\",e),function(){window.removeEventListener(\"resize\",e)}}),[]),Object(v.createElement)(\"textarea\",Y({},l,{onChange:function(e){f||m(),i(e)},ref:d}))},se=Object(v.forwardRef)(ie);function ce(e){e=e.trim();try{if(\"[\"===(e=JSON.stringify(JSON.parse(e)))[0])return le(\"array\",JSON.parse(e));if(\"{\"===e[0])return le(\"object\",JSON.parse(e));if(e.match(/\\-?\\d+\\.\\d+/)&&e.match(/\\-?\\d+\\.\\d+/)[0]===e)return le(\"float\",parseFloat(e));if(e.match(/\\-?\\d+e-\\d+/)&&e.match(/\\-?\\d+e-\\d+/)[0]===e)return le(\"float\",Number(e));if(e.match(/\\-?\\d+/)&&e.match(/\\-?\\d+/)[0]===e)return le(\"integer\",parseInt(e));if(e.match(/\\-?\\d+e\\+\\d+/)&&e.match(/\\-?\\d+e\\+\\d+/)[0]===e)return le(\"integer\",Number(e))}catch(e){}switch(e=e.toLowerCase()){case\"undefined\":return le(\"undefined\",void 0);case\"nan\":return le(\"nan\",NaN);case\"null\":return le(\"null\",null);case\"true\":return le(\"boolean\",!0);case\"false\":return le(\"boolean\",!1);default:if(e=Date.parse(e))return le(\"date\",new Date(e))}return le(!1,null)}function le(e,t){return{type:e,value:t}}var ue=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){var e=this.props,t=e.style,n=x(e,[\"style\"]);return m.a.createElement(\"span\",n,m.a.createElement(\"svg\",Object.assign({},xe(t),{viewBox:\"0 0 24 24\",fill:\"currentColor\",preserveAspectRatio:\"xMidYMid meet\"}),m.a.createElement(\"path\",{d:\"M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M7,13H17V11H7\"})))}}]),n}(m.a.PureComponent),fe=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){var e=this.props,t=e.style,n=x(e,[\"style\"]);return m.a.createElement(\"span\",n,m.a.createElement(\"svg\",Object.assign({},xe(t),{viewBox:\"0 0 24 24\",fill:\"currentColor\",preserveAspectRatio:\"xMidYMid meet\"}),m.a.createElement(\"path\",{d:\"M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M13,7H11V11H7V13H11V17H13V13H17V11H13V7Z\"})))}}]),n}(m.a.PureComponent),pe=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){var e=this.props,t=e.style,n=x(e,[\"style\"]),a=xe(t).style;return m.a.createElement(\"span\",n,m.a.createElement(\"svg\",{fill:a.color,width:a.height,height:a.width,style:a,viewBox:\"0 0 1792 1792\"},m.a.createElement(\"path\",{d:\"M1344 800v64q0 14-9 23t-23 9h-832q-14 0-23-9t-9-23v-64q0-14 9-23t23-9h832q14 0 23 9t9 23zm128 448v-832q0-66-47-113t-113-47h-832q-66 0-113 47t-47 113v832q0 66 47 113t113 47h832q66 0 113-47t47-113zm128-832v832q0 119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119 84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z\"})))}}]),n}(m.a.PureComponent),de=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){var e=this.props,t=e.style,n=x(e,[\"style\"]),a=xe(t).style;return m.a.createElement(\"span\",n,m.a.createElement(\"svg\",{fill:a.color,width:a.height,height:a.width,style:a,viewBox:\"0 0 1792 1792\"},m.a.createElement(\"path\",{d:\"M1344 800v64q0 14-9 23t-23 9h-352v352q0 14-9 23t-23 9h-64q-14 0-23-9t-9-23v-352h-352q-14 0-23-9t-9-23v-64q0-14 9-23t23-9h352v-352q0-14 9-23t23-9h64q14 0 23 9t9 23v352h352q14 0 23 9t9 23zm128 448v-832q0-66-47-113t-113-47h-832q-66 0-113 47t-47 113v832q0 66 47 113t113 47h832q66 0 113-47t47-113zm128-832v832q0 119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119 84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z\"})))}}]),n}(m.a.PureComponent),be=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){var e=this.props,t=e.style,n=x(e,[\"style\"]);return m.a.createElement(\"span\",n,m.a.createElement(\"svg\",{style:o(o({},xe(t).style),{},{paddingLeft:\"2px\",verticalAlign:\"top\"}),viewBox:\"0 0 15 15\",fill:\"currentColor\"},m.a.createElement(\"path\",{d:\"M0 14l6-6-6-6z\"})))}}]),n}(m.a.PureComponent),he=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){var e=this.props,t=e.style,n=x(e,[\"style\"]);return m.a.createElement(\"span\",n,m.a.createElement(\"svg\",{style:o(o({},xe(t).style),{},{paddingLeft:\"2px\",verticalAlign:\"top\"}),viewBox:\"0 0 15 15\",fill:\"currentColor\"},m.a.createElement(\"path\",{d:\"M0 5l6 6 6-6z\"})))}}]),n}(m.a.PureComponent),ve=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){var e=this.props,t=e.style,n=x(e,[\"style\"]);return m.a.createElement(\"span\",n,m.a.createElement(\"svg\",Object.assign({},xe(t),{viewBox:\"0 0 40 40\",fill:\"currentColor\",preserveAspectRatio:\"xMidYMid meet\"}),m.a.createElement(\"g\",null,m.a.createElement(\"path\",{d:\"m30 35h-25v-22.5h25v7.5h2.5v-12.5c0-1.4-1.1-2.5-2.5-2.5h-7.5c0-2.8-2.2-5-5-5s-5 2.2-5 5h-7.5c-1.4 0-2.5 1.1-2.5 2.5v27.5c0 1.4 1.1 2.5 2.5 2.5h25c1.4 0 2.5-1.1 2.5-2.5v-5h-2.5v5z m-20-27.5h2.5s2.5-1.1 2.5-2.5 1.1-2.5 2.5-2.5 2.5 1.1 2.5 2.5 1.3 2.5 2.5 2.5h2.5s2.5 1.1 2.5 2.5h-20c0-1.5 1.1-2.5 2.5-2.5z m-2.5 20h5v-2.5h-5v2.5z m17.5-5v-5l-10 7.5 10 7.5v-5h12.5v-5h-12.5z m-17.5 10h7.5v-2.5h-7.5v2.5z m12.5-17.5h-12.5v2.5h12.5v-2.5z m-7.5 5h-5v2.5h5v-2.5z\"}))))}}]),n}(m.a.PureComponent),me=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){var e=this.props,t=e.style,n=x(e,[\"style\"]);return m.a.createElement(\"span\",n,m.a.createElement(\"svg\",Object.assign({},xe(t),{viewBox:\"0 0 40 40\",fill:\"currentColor\",preserveAspectRatio:\"xMidYMid meet\"}),m.a.createElement(\"g\",null,m.a.createElement(\"path\",{d:\"m28.6 25q0-0.5-0.4-1l-4-4 4-4q0.4-0.5 0.4-1 0-0.6-0.4-1.1l-2-2q-0.4-0.4-1-0.4-0.6 0-1 0.4l-4.1 4.1-4-4.1q-0.4-0.4-1-0.4-0.6 0-1 0.4l-2 2q-0.5 0.5-0.5 1.1 0 0.5 0.5 1l4 4-4 4q-0.5 0.5-0.5 1 0 0.7 0.5 1.1l2 2q0.4 0.4 1 0.4 0.6 0 1-0.4l4-4.1 4.1 4.1q0.4 0.4 1 0.4 0.6 0 1-0.4l2-2q0.4-0.4 0.4-1z m8.7-5q0 4.7-2.3 8.6t-6.3 6.2-8.6 2.3-8.6-2.3-6.2-6.2-2.3-8.6 2.3-8.6 6.2-6.2 8.6-2.3 8.6 2.3 6.3 6.2 2.3 8.6z\"}))))}}]),n}(m.a.PureComponent),ye=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){var e=this.props,t=e.style,n=x(e,[\"style\"]);return m.a.createElement(\"span\",n,m.a.createElement(\"svg\",Object.assign({},xe(t),{viewBox:\"0 0 40 40\",fill:\"currentColor\",preserveAspectRatio:\"xMidYMid meet\"}),m.a.createElement(\"g\",null,m.a.createElement(\"path\",{d:\"m30.1 21.4v-2.8q0-0.6-0.4-1t-1-0.5h-5.7v-5.7q0-0.6-0.4-1t-1-0.4h-2.9q-0.6 0-1 0.4t-0.4 1v5.7h-5.7q-0.6 0-1 0.5t-0.5 1v2.8q0 0.6 0.5 1t1 0.5h5.7v5.7q0 0.5 0.4 1t1 0.4h2.9q0.6 0 1-0.4t0.4-1v-5.7h5.7q0.6 0 1-0.5t0.4-1z m7.2-1.4q0 4.7-2.3 8.6t-6.3 6.2-8.6 2.3-8.6-2.3-6.2-6.2-2.3-8.6 2.3-8.6 6.2-6.2 8.6-2.3 8.6 2.3 6.3 6.2 2.3 8.6z\"}))))}}]),n}(m.a.PureComponent),ge=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){var e=this.props,t=e.style,n=x(e,[\"style\"]);return m.a.createElement(\"span\",n,m.a.createElement(\"svg\",Object.assign({},xe(t),{viewBox:\"0 0 40 40\",fill:\"currentColor\",preserveAspectRatio:\"xMidYMid meet\"}),m.a.createElement(\"g\",null,m.a.createElement(\"path\",{d:\"m31.6 21.6h-10v10h-3.2v-10h-10v-3.2h10v-10h3.2v10h10v3.2z\"}))))}}]),n}(m.a.PureComponent),Ee=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){var e=this.props,t=e.style,n=x(e,[\"style\"]);return m.a.createElement(\"span\",n,m.a.createElement(\"svg\",Object.assign({},xe(t),{viewBox:\"0 0 40 40\",fill:\"currentColor\",preserveAspectRatio:\"xMidYMid meet\"}),m.a.createElement(\"g\",null,m.a.createElement(\"path\",{d:\"m19.8 26.4l2.6-2.6-3.4-3.4-2.6 2.6v1.3h2.2v2.1h1.2z m9.8-16q-0.3-0.4-0.7 0l-7.8 7.8q-0.4 0.4 0 0.7t0.7 0l7.8-7.8q0.4-0.4 0-0.7z m1.8 13.2v4.3q0 2.6-1.9 4.5t-4.5 1.9h-18.6q-2.6 0-4.5-1.9t-1.9-4.5v-18.6q0-2.7 1.9-4.6t4.5-1.8h18.6q1.4 0 2.6 0.5 0.3 0.2 0.4 0.5 0.1 0.4-0.2 0.7l-1.1 1.1q-0.3 0.3-0.7 0.1-0.5-0.1-1-0.1h-18.6q-1.4 0-2.5 1.1t-1 2.5v18.6q0 1.4 1 2.5t2.5 1h18.6q1.5 0 2.5-1t1.1-2.5v-2.9q0-0.2 0.2-0.4l1.4-1.5q0.3-0.3 0.8-0.1t0.4 0.6z m-2.1-16.5l6.4 6.5-15 15h-6.4v-6.5z m9.9 3l-2.1 2-6.4-6.4 2.1-2q0.6-0.7 1.5-0.7t1.5 0.7l3.4 3.4q0.6 0.6 0.6 1.5t-0.6 1.5z\"}))))}}]),n}(m.a.PureComponent),je=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){var e=this.props,t=e.style,n=x(e,[\"style\"]);return m.a.createElement(\"span\",n,m.a.createElement(\"svg\",Object.assign({},xe(t),{viewBox:\"0 0 40 40\",fill:\"currentColor\",preserveAspectRatio:\"xMidYMid meet\"}),m.a.createElement(\"g\",null,m.a.createElement(\"path\",{d:\"m31.7 16.4q0-0.6-0.4-1l-2.1-2.1q-0.4-0.4-1-0.4t-1 0.4l-9.1 9.1-5-5q-0.5-0.4-1-0.4t-1 0.4l-2.1 2q-0.4 0.4-0.4 1 0 0.6 0.4 1l8.1 8.1q0.4 0.4 1 0.4 0.6 0 1-0.4l12.2-12.1q0.4-0.4 0.4-1z m5.6 3.6q0 4.7-2.3 8.6t-6.3 6.2-8.6 2.3-8.6-2.3-6.2-6.2-2.3-8.6 2.3-8.6 6.2-6.2 8.6-2.3 8.6 2.3 6.3 6.2 2.3 8.6z\"}))))}}]),n}(m.a.PureComponent);function xe(e){return e||(e={}),{style:o(o({verticalAlign:\"middle\"},e),{},{color:e.color?e.color:\"#000000\",height:\"1em\",width:\"1em\"})}}var _e=function(e){u(n,e);var t=h(n);function n(e){var a;return i(this,n),(a=t.call(this,e)).copiedTimer=null,a.handleCopy=function(){var e=document.createElement(\"textarea\"),t=a.props,n=t.clickCallback,r=t.src,o=t.namespace;e.innerHTML=JSON.stringify(a.clipboardValue(r),null,\"  \"),document.body.appendChild(e),e.select(),document.execCommand(\"copy\"),document.body.removeChild(e),a.copiedTimer=setTimeout((function(){a.setState({copied:!1})}),5500),a.setState({copied:!0},(function(){\"function\"==typeof n&&n({src:r,namespace:o,name:o[o.length-1]})}))},a.getClippyIcon=function(){var e=a.props.theme;return a.state.copied?m.a.createElement(\"span\",null,m.a.createElement(ve,Object.assign({className:\"copy-icon\"},A(e,\"copy-icon\"))),m.a.createElement(\"span\",A(e,\"copy-icon-copied\"),\"✔\")):m.a.createElement(ve,Object.assign({className:\"copy-icon\"},A(e,\"copy-icon\")))},a.clipboardValue=function(e){switch(_(e)){case\"function\":case\"regexp\":return e.toString();default:return e}},a.state={copied:!1},a}return c(n,[{key:\"componentWillUnmount\",value:function(){this.copiedTimer&&(clearTimeout(this.copiedTimer),this.copiedTimer=null)}},{key:\"render\",value:function(){var e=this.props,t=(e.src,e.theme),n=e.hidden,a=e.rowHovered,r=A(t,\"copy-to-clipboard\").style,i=\"inline\";return n&&(i=\"none\"),m.a.createElement(\"span\",{className:\"copy-to-clipboard-container\",title:\"Copy to clipboard\",style:{verticalAlign:\"top\",display:a?\"inline-block\":\"none\"}},m.a.createElement(\"span\",{style:o(o({},r),{},{display:i}),onClick:this.handleCopy},this.getClippyIcon()))}}]),n}(m.a.PureComponent),ke=function(e){u(n,e);var t=h(n);function n(e){var a;return i(this,n),(a=t.call(this,e)).getEditIcon=function(){var e=a.props,t=e.variable,n=e.theme;return m.a.createElement(\"div\",{className:\"click-to-edit\",style:{verticalAlign:\"top\",display:a.state.hovered?\"inline-block\":\"none\"}},m.a.createElement(Ee,Object.assign({className:\"click-to-edit-icon\"},A(n,\"editVarIcon\"),{onClick:function(){a.prepopInput(t)}})))},a.prepopInput=function(e){if(!1!==a.props.onEdit){var t=function(e){var t;switch(_(e)){case\"undefined\":t=\"undefined\";break;case\"nan\":t=\"NaN\";break;case\"string\":t=e;break;case\"date\":case\"function\":case\"regexp\":t=e.toString();break;default:try{t=JSON.stringify(e,null,\"  \")}catch(e){t=\"\"}}return t}(e.value),n=ce(t);a.setState({editMode:!0,editValue:t,parsedInput:{type:n.type,value:n.value}})}},a.getRemoveIcon=function(){var e=a.props,t=e.variable,n=e.namespace,r=e.theme,o=e.rjvId;return m.a.createElement(\"div\",{className:\"click-to-remove\",style:{verticalAlign:\"top\",display:a.state.hovered?\"inline-block\":\"none\"}},m.a.createElement(me,Object.assign({className:\"click-to-remove-icon\"},A(r,\"removeVarIcon\"),{onClick:function(){z.dispatch({name:\"VARIABLE_REMOVED\",rjvId:o,data:{name:t.name,namespace:n,existing_value:t.value,variable_removed:!0}})}})))},a.getValue=function(e,t){var n=!t&&e.type,r=d(a).props;switch(n){case!1:return a.getEditInput();case\"string\":return m.a.createElement(G,Object.assign({value:e.value},r));case\"integer\":return m.a.createElement(H,Object.assign({value:e.value},r));case\"float\":return m.a.createElement(D,Object.assign({value:e.value},r));case\"boolean\":return m.a.createElement(P,Object.assign({value:e.value},r));case\"function\":return m.a.createElement(V,Object.assign({value:e.value},r));case\"null\":return m.a.createElement(W,r);case\"nan\":return m.a.createElement(K,r);case\"undefined\":return m.a.createElement(J,r);case\"date\":return m.a.createElement(F,Object.assign({value:e.value},r));case\"regexp\":return m.a.createElement(U,Object.assign({value:e.value},r));default:return m.a.createElement(\"div\",{className:\"object-value\"},JSON.stringify(e.value))}},a.getEditInput=function(){var e=a.props.theme,t=a.state.editValue;return m.a.createElement(\"div\",null,m.a.createElement(se,Object.assign({type:\"text\",inputRef:function(e){return e&&e.focus()},value:t,className:\"variable-editor\",onChange:function(e){var t=e.target.value,n=ce(t);a.setState({editValue:t,parsedInput:{type:n.type,value:n.value}})},onKeyDown:function(e){switch(e.key){case\"Escape\":a.setState({editMode:!1,editValue:\"\"});break;case\"Enter\":(e.ctrlKey||e.metaKey)&&a.submitEdit(!0)}e.stopPropagation()},placeholder:\"update this value\",minRows:2},A(e,\"edit-input\"))),m.a.createElement(\"div\",A(e,\"edit-icon-container\"),m.a.createElement(me,Object.assign({className:\"edit-cancel\"},A(e,\"cancel-icon\"),{onClick:function(){a.setState({editMode:!1,editValue:\"\"})}})),m.a.createElement(je,Object.assign({className:\"edit-check string-value\"},A(e,\"check-icon\"),{onClick:function(){a.submitEdit()}})),m.a.createElement(\"div\",null,a.showDetected())))},a.submitEdit=function(e){var t=a.props,n=t.variable,r=t.namespace,o=t.rjvId,i=a.state,s=i.editValue,c=i.parsedInput,l=s;e&&c.type&&(l=c.value),a.setState({editMode:!1}),z.dispatch({name:\"VARIABLE_UPDATED\",rjvId:o,data:{name:n.name,namespace:r,existing_value:n.value,new_value:l,variable_removed:!1}})},a.showDetected=function(){var e=a.props,t=e.theme,n=(e.variable,e.namespace,e.rjvId,a.state.parsedInput),r=(n.type,n.value,a.getDetectedInput());if(r)return m.a.createElement(\"div\",null,m.a.createElement(\"div\",A(t,\"detected-row\"),r,m.a.createElement(je,{className:\"edit-check detected\",style:o({verticalAlign:\"top\",paddingLeft:\"3px\"},A(t,\"check-icon\").style),onClick:function(){a.submitEdit(!0)}})))},a.getDetectedInput=function(){var e=a.state.parsedInput,t=e.type,n=e.value,r=d(a).props,i=r.theme;if(!1!==t)switch(t.toLowerCase()){case\"object\":return m.a.createElement(\"span\",null,m.a.createElement(\"span\",{style:o(o({},A(i,\"brace\").style),{},{cursor:\"default\"})},\"{\"),m.a.createElement(\"span\",{style:o(o({},A(i,\"ellipsis\").style),{},{cursor:\"default\"})},\"...\"),m.a.createElement(\"span\",{style:o(o({},A(i,\"brace\").style),{},{cursor:\"default\"})},\"}\"));case\"array\":return m.a.createElement(\"span\",null,m.a.createElement(\"span\",{style:o(o({},A(i,\"brace\").style),{},{cursor:\"default\"})},\"[\"),m.a.createElement(\"span\",{style:o(o({},A(i,\"ellipsis\").style),{},{cursor:\"default\"})},\"...\"),m.a.createElement(\"span\",{style:o(o({},A(i,\"brace\").style),{},{cursor:\"default\"})},\"]\"));case\"string\":return m.a.createElement(G,Object.assign({value:n},r));case\"integer\":return m.a.createElement(H,Object.assign({value:n},r));case\"float\":return m.a.createElement(D,Object.assign({value:n},r));case\"boolean\":return m.a.createElement(P,Object.assign({value:n},r));case\"function\":return m.a.createElement(V,Object.assign({value:n},r));case\"null\":return m.a.createElement(W,r);case\"nan\":return m.a.createElement(K,r);case\"undefined\":return m.a.createElement(J,r);case\"date\":return m.a.createElement(F,Object.assign({value:new Date(n)},r))}},a.state={editMode:!1,editValue:\"\",hovered:!1,renameKey:!1,parsedInput:{type:!1,value:null}},a}return c(n,[{key:\"render\",value:function(){var e=this,t=this.props,n=t.variable,a=t.singleIndent,r=t.type,i=t.theme,s=t.namespace,c=t.indentWidth,l=t.enableClipboard,u=t.onEdit,f=t.onDelete,p=t.onSelect,d=t.displayArrayKey,b=t.quotesOnKeys,h=this.state.editMode;return m.a.createElement(\"div\",Object.assign({},A(i,\"objectKeyVal\",{paddingLeft:c*a}),{onMouseEnter:function(){return e.setState(o(o({},e.state),{},{hovered:!0}))},onMouseLeave:function(){return e.setState(o(o({},e.state),{},{hovered:!1}))},className:\"variable-row\",key:n.name}),\"array\"==r?d?m.a.createElement(\"span\",Object.assign({},A(i,\"array-key\"),{key:n.name+\"_\"+s}),n.name,m.a.createElement(\"div\",A(i,\"colon\"),\":\")):null:m.a.createElement(\"span\",null,m.a.createElement(\"span\",Object.assign({},A(i,\"object-name\"),{className:\"object-key\",key:n.name+\"_\"+s}),!!b&&m.a.createElement(\"span\",{style:{verticalAlign:\"top\"}},'\"'),m.a.createElement(\"span\",{style:{display:\"inline-block\"}},n.name),!!b&&m.a.createElement(\"span\",{style:{verticalAlign:\"top\"}},'\"')),m.a.createElement(\"span\",A(i,\"colon\"),\":\")),m.a.createElement(\"div\",Object.assign({className:\"variable-value\",onClick:!1===p&&!1===u?null:function(t){var a=B(s);(t.ctrlKey||t.metaKey)&&!1!==u?e.prepopInput(n):!1!==p&&(a.shift(),p(o(o({},n),{},{namespace:a})))}},A(i,\"variableValue\",{cursor:!1===p?\"default\":\"pointer\"})),this.getValue(n,h)),l?m.a.createElement(_e,{rowHovered:this.state.hovered,hidden:h,src:n.value,clickCallback:l,theme:i,namespace:[].concat(B(s),[n.name])}):null,!1!==u&&0==h?this.getEditIcon():null,!1!==f&&0==h?this.getRemoveIcon():null)}}]),n}(m.a.PureComponent),Oe=function(e){u(n,e);var t=h(n);function n(){var e;i(this,n);for(var a=arguments.length,r=new Array(a),s=0;s<a;s++)r[s]=arguments[s];return(e=t.call.apply(t,[this].concat(r))).getObjectSize=function(){var t=e.props,n=t.size,a=t.theme;if(t.displayObjectSize)return m.a.createElement(\"span\",Object.assign({className:\"object-size\"},A(a,\"object-size\")),n,\" item\",1===n?\"\":\"s\")},e.getAddAttribute=function(t){var n=e.props,a=n.theme,r=n.namespace,i=n.name,s=n.src,c=n.rjvId,l=n.depth;return m.a.createElement(\"span\",{className:\"click-to-add\",style:{verticalAlign:\"top\",display:t?\"inline-block\":\"none\"}},m.a.createElement(ye,Object.assign({className:\"click-to-add-icon\"},A(a,\"addVarIcon\"),{onClick:function(){var e={name:l>0?i:null,namespace:r.splice(0,r.length-1),existing_value:s,variable_removed:!1,key_name:null};\"object\"===_(s)?z.dispatch({name:\"ADD_VARIABLE_KEY_REQUEST\",rjvId:c,data:e}):z.dispatch({name:\"VARIABLE_ADDED\",rjvId:c,data:o(o({},e),{},{new_value:[].concat(B(s),[null])})})}})))},e.getRemoveObject=function(t){var n=e.props,a=n.theme,r=(n.hover,n.namespace),o=n.name,i=n.src,s=n.rjvId;if(1!==r.length)return m.a.createElement(\"span\",{className:\"click-to-remove\",style:{display:t?\"inline-block\":\"none\"}},m.a.createElement(me,Object.assign({className:\"click-to-remove-icon\"},A(a,\"removeVarIcon\"),{onClick:function(){z.dispatch({name:\"VARIABLE_REMOVED\",rjvId:s,data:{name:o,namespace:r.splice(0,r.length-1),existing_value:i,variable_removed:!0}})}})))},e.render=function(){var t=e.props,n=t.theme,a=t.onDelete,r=t.onAdd,o=t.enableClipboard,i=t.src,s=t.namespace,c=t.rowHovered;return m.a.createElement(\"div\",Object.assign({},A(n,\"object-meta-data\"),{className:\"object-meta-data\",onClick:function(e){e.stopPropagation()}}),e.getObjectSize(),o?m.a.createElement(_e,{rowHovered:c,clickCallback:o,src:i,theme:n,namespace:s}):null,!1!==r?e.getAddAttribute(c):null,!1!==a?e.getRemoveObject(c):null)},e}return n}(m.a.PureComponent);function Ce(e){var t=e.parent_type,n=e.namespace,a=e.quotesOnKeys,r=e.theme,o=e.jsvRoot,i=e.name,s=e.displayArrayKey,c=e.name?e.name:\"\";return!o||!1!==i&&null!==i?\"array\"==t?s?m.a.createElement(\"span\",Object.assign({},A(r,\"array-key\"),{key:n}),m.a.createElement(\"span\",{className:\"array-key\"},c),m.a.createElement(\"span\",A(r,\"colon\"),\":\")):m.a.createElement(\"span\",null):m.a.createElement(\"span\",Object.assign({},A(r,\"object-name\"),{key:n}),m.a.createElement(\"span\",{className:\"object-key\"},a&&m.a.createElement(\"span\",{style:{verticalAlign:\"top\"}},'\"'),m.a.createElement(\"span\",null,c),a&&m.a.createElement(\"span\",{style:{verticalAlign:\"top\"}},'\"')),m.a.createElement(\"span\",A(r,\"colon\"),\":\")):m.a.createElement(\"span\",null)}function Se(e){var t=e.theme;switch(e.iconStyle){case\"triangle\":return m.a.createElement(he,Object.assign({},A(t,\"expanded-icon\"),{className:\"expanded-icon\"}));case\"square\":return m.a.createElement(pe,Object.assign({},A(t,\"expanded-icon\"),{className:\"expanded-icon\"}));default:return m.a.createElement(ue,Object.assign({},A(t,\"expanded-icon\"),{className:\"expanded-icon\"}))}}function we(e){var t=e.theme;switch(e.iconStyle){case\"triangle\":return m.a.createElement(be,Object.assign({},A(t,\"collapsed-icon\"),{className:\"collapsed-icon\"}));case\"square\":return m.a.createElement(de,Object.assign({},A(t,\"collapsed-icon\"),{className:\"collapsed-icon\"}));default:return m.a.createElement(fe,Object.assign({},A(t,\"collapsed-icon\"),{className:\"collapsed-icon\"}))}}var Ae=function(e){u(n,e);var t=h(n);function n(e){var a;return i(this,n),(a=t.call(this,e)).toggleCollapsed=function(e){var t=[];for(var n in a.state.expanded)t.push(a.state.expanded[n]);t[e]=!t[e],a.setState({expanded:t})},a.state={expanded:[]},a}return c(n,[{key:\"getExpandedIcon\",value:function(e){var t=this.props,n=t.theme,a=t.iconStyle;return this.state.expanded[e]?m.a.createElement(Se,{theme:n,iconStyle:a}):m.a.createElement(we,{theme:n,iconStyle:a})}},{key:\"render\",value:function(){var e=this,t=this.props,n=t.src,a=t.groupArraysAfterLength,r=(t.depth,t.name),o=t.theme,i=t.jsvRoot,s=t.namespace,c=(t.parent_type,x(t,[\"src\",\"groupArraysAfterLength\",\"depth\",\"name\",\"theme\",\"jsvRoot\",\"namespace\",\"parent_type\"])),l=0,u=5*this.props.indentWidth;i||(l=5*this.props.indentWidth);var f=a,p=Math.ceil(n.length/f);return m.a.createElement(\"div\",Object.assign({className:\"object-key-val\"},A(o,i?\"jsv-root\":\"objectKeyVal\",{paddingLeft:l})),m.a.createElement(Ce,this.props),m.a.createElement(\"span\",null,m.a.createElement(Oe,Object.assign({size:n.length},this.props))),B(Array(p)).map((function(t,a){return m.a.createElement(\"div\",Object.assign({key:a,className:\"object-key-val array-group\"},A(o,\"objectKeyVal\",{marginLeft:6,paddingLeft:u})),m.a.createElement(\"span\",A(o,\"brace-row\"),m.a.createElement(\"div\",Object.assign({className:\"icon-container\"},A(o,\"icon-container\"),{onClick:function(t){e.toggleCollapsed(a)}}),e.getExpandedIcon(a)),e.state.expanded[a]?m.a.createElement(Fe,Object.assign({key:r+a,depth:0,name:!1,collapsed:!1,groupArraysAfterLength:f,index_offset:a*f,src:n.slice(a*f,a*f+f),namespace:s,type:\"array\",parent_type:\"array_group\",theme:o},c)):m.a.createElement(\"span\",Object.assign({},A(o,\"brace\"),{onClick:function(t){e.toggleCollapsed(a)},className:\"array-group-brace\"}),\"[\",m.a.createElement(\"div\",Object.assign({},A(o,\"array-group-meta-data\"),{className:\"array-group-meta-data\"}),m.a.createElement(\"span\",Object.assign({className:\"object-size\"},A(o,\"object-size\")),a*f,\" - \",a*f+f>n.length?n.length:a*f+f)),\"]\")))})))}}]),n}(m.a.PureComponent),Me=function(e){u(n,e);var t=h(n);function n(e){var a;i(this,n),(a=t.call(this,e)).toggleCollapsed=function(){a.setState({expanded:!a.state.expanded},(function(){q.set(a.props.rjvId,a.props.namespace,\"expanded\",a.state.expanded)}))},a.getObjectContent=function(e,t,n){return m.a.createElement(\"div\",{className:\"pushed-content object-container\"},m.a.createElement(\"div\",Object.assign({className:\"object-content\"},A(a.props.theme,\"pushed-content\")),a.renderObjectContents(t,n)))},a.getEllipsis=function(){return 0===a.state.size?null:m.a.createElement(\"div\",Object.assign({},A(a.props.theme,\"ellipsis\"),{className:\"node-ellipsis\",onClick:a.toggleCollapsed}),\"...\")},a.getObjectMetaData=function(e){var t=a.props,n=(t.rjvId,t.theme,a.state),r=n.size,o=n.hovered;return m.a.createElement(Oe,Object.assign({rowHovered:o,size:r},a.props))},a.renderObjectContents=function(e,t){var n,r=a.props,o=r.depth,i=r.parent_type,s=r.index_offset,c=r.groupArraysAfterLength,l=r.namespace,u=a.state.object_type,f=[],p=Object.keys(e||{});return a.props.sortKeys&&\"array\"!==u&&(p=p.sort()),p.forEach((function(r){if(n=new Pe(r,e[r]),\"array_group\"===i&&s&&(n.name=parseInt(n.name)+s),e.hasOwnProperty(r))if(\"object\"===n.type)f.push(m.a.createElement(Fe,Object.assign({key:n.name,depth:o+1,name:n.name,src:n.value,namespace:l.concat(n.name),parent_type:u},t)));else if(\"array\"===n.type){var p=Fe;c&&n.value.length>c&&(p=Ae),f.push(m.a.createElement(p,Object.assign({key:n.name,depth:o+1,name:n.name,src:n.value,namespace:l.concat(n.name),type:\"array\",parent_type:u},t)))}else f.push(m.a.createElement(ke,Object.assign({key:n.name+\"_\"+l,variable:n,singleIndent:5,namespace:l,type:a.props.type},t)))})),f};var r=n.getState(e);return a.state=o(o({},r),{},{prevProps:{}}),a}return c(n,[{key:\"getBraceStart\",value:function(e,t){var n=this,a=this.props,r=a.src,o=a.theme,i=a.iconStyle;if(\"array_group\"===a.parent_type)return m.a.createElement(\"span\",null,m.a.createElement(\"span\",A(o,\"brace\"),\"array\"===e?\"[\":\"{\"),t?this.getObjectMetaData(r):null);var s=t?Se:we;return m.a.createElement(\"span\",null,m.a.createElement(\"span\",Object.assign({onClick:function(e){n.toggleCollapsed()}},A(o,\"brace-row\")),m.a.createElement(\"div\",Object.assign({className:\"icon-container\"},A(o,\"icon-container\")),m.a.createElement(s,{theme:o,iconStyle:i})),m.a.createElement(Ce,this.props),m.a.createElement(\"span\",A(o,\"brace\"),\"array\"===e?\"[\":\"{\")),t?this.getObjectMetaData(r):null)}},{key:\"render\",value:function(){var e=this,t=this.props,n=t.depth,a=t.src,r=(t.namespace,t.name,t.type,t.parent_type),i=t.theme,s=t.jsvRoot,c=t.iconStyle,l=x(t,[\"depth\",\"src\",\"namespace\",\"name\",\"type\",\"parent_type\",\"theme\",\"jsvRoot\",\"iconStyle\"]),u=this.state,f=u.object_type,p=u.expanded,d={};return s||\"array_group\"===r?\"array_group\"===r&&(d.borderLeft=0,d.display=\"inline\"):d.paddingLeft=5*this.props.indentWidth,m.a.createElement(\"div\",Object.assign({className:\"object-key-val\",onMouseEnter:function(){return e.setState(o(o({},e.state),{},{hovered:!0}))},onMouseLeave:function(){return e.setState(o(o({},e.state),{},{hovered:!1}))}},A(i,s?\"jsv-root\":\"objectKeyVal\",d)),this.getBraceStart(f,p),p?this.getObjectContent(n,a,o({theme:i,iconStyle:c},l)):this.getEllipsis(),m.a.createElement(\"span\",{className:\"brace-row\"},m.a.createElement(\"span\",{style:o(o({},A(i,\"brace\").style),{},{paddingLeft:p?\"3px\":\"0px\"})},\"array\"===f?\"]\":\"}\"),p?null:this.getObjectMetaData(a)))}}],[{key:\"getDerivedStateFromProps\",value:function(e,t){var a=t.prevProps;return e.src!==a.src||e.collapsed!==a.collapsed||e.name!==a.name||e.namespace!==a.namespace||e.rjvId!==a.rjvId?o(o({},n.getState(e)),{},{prevProps:e}):null}}]),n}(m.a.PureComponent);Me.getState=function(e){var t=Object.keys(e.src).length,n=(!1===e.collapsed||!0!==e.collapsed&&e.collapsed>e.depth)&&(!e.shouldCollapse||!1===e.shouldCollapse({name:e.name,src:e.src,type:_(e.src),namespace:e.namespace}))&&0!==t;return{expanded:q.get(e.rjvId,e.namespace,\"expanded\",n),object_type:\"array\"===e.type?\"array\":\"object\",parent_type:\"array\"===e.type?\"array\":\"object\",size:t,hovered:!1}};var Pe=function e(t,n){i(this,e),this.name=t,this.value=n,this.type=_(n)};j(Me);var Fe=Me,De=function(e){u(n,e);var t=h(n);function n(){var e;i(this,n);for(var a=arguments.length,r=new Array(a),o=0;o<a;o++)r[o]=arguments[o];return(e=t.call.apply(t,[this].concat(r))).render=function(){var t=d(e).props,n=[t.name],a=Fe;return Array.isArray(t.src)&&t.groupArraysAfterLength&&t.src.length>t.groupArraysAfterLength&&(a=Ae),m.a.createElement(\"div\",{className:\"pretty-json-container object-container\"},m.a.createElement(\"div\",{className:\"object-content\"},m.a.createElement(a,Object.assign({namespace:n,depth:0,jsvRoot:!0},t))))},e}return n}(m.a.PureComponent),Ie=function(e){u(n,e);var t=h(n);function n(e){var a;return i(this,n),(a=t.call(this,e)).closeModal=function(){z.dispatch({rjvId:a.props.rjvId,name:\"RESET\"})},a.submit=function(){a.props.submit(a.state.input)},a.state={input:e.input?e.input:\"\"},a}return c(n,[{key:\"render\",value:function(){var e=this,t=this.props,n=t.theme,a=t.rjvId,r=t.isValid,o=this.state.input,i=r(o);return m.a.createElement(\"div\",Object.assign({className:\"key-modal-request\"},A(n,\"key-modal-request\"),{onClick:this.closeModal}),m.a.createElement(\"div\",Object.assign({},A(n,\"key-modal\"),{onClick:function(e){e.stopPropagation()}}),m.a.createElement(\"div\",A(n,\"key-modal-label\"),\"Key Name:\"),m.a.createElement(\"div\",{style:{position:\"relative\"}},m.a.createElement(\"input\",Object.assign({},A(n,\"key-modal-input\"),{className:\"key-modal-input\",ref:function(e){return e&&e.focus()},spellCheck:!1,value:o,placeholder:\"...\",onChange:function(t){e.setState({input:t.target.value})},onKeyPress:function(t){i&&\"Enter\"===t.key?e.submit():\"Escape\"===t.key&&e.closeModal()}})),i?m.a.createElement(je,Object.assign({},A(n,\"key-modal-submit\"),{className:\"key-modal-submit\",onClick:function(t){return e.submit()}})):null),m.a.createElement(\"span\",A(n,\"key-modal-cancel\"),m.a.createElement(ge,Object.assign({},A(n,\"key-modal-cancel-icon\"),{className:\"key-modal-cancel\",onClick:function(){z.dispatch({rjvId:a,name:\"RESET\"})}})))))}}]),n}(m.a.PureComponent),Re=function(e){u(n,e);var t=h(n);function n(){var e;i(this,n);for(var a=arguments.length,r=new Array(a),s=0;s<a;s++)r[s]=arguments[s];return(e=t.call.apply(t,[this].concat(r))).isValid=function(t){var n=e.props.rjvId,a=q.get(n,\"action\",\"new-key-request\");return\"\"!=t&&-1===Object.keys(a.existing_value).indexOf(t)},e.submit=function(t){var n=e.props.rjvId,a=q.get(n,\"action\",\"new-key-request\");a.new_value=o({},a.existing_value),a.new_value[t]=e.props.defaultValue,z.dispatch({name:\"VARIABLE_ADDED\",rjvId:n,data:a})},e}return c(n,[{key:\"render\",value:function(){var e=this.props,t=e.active,n=e.theme,a=e.rjvId;return t?m.a.createElement(Ie,{rjvId:a,theme:n,isValid:this.isValid,submit:this.submit}):null}}]),n}(m.a.PureComponent),Le=function(e){u(n,e);var t=h(n);function n(){return i(this,n),t.apply(this,arguments)}return c(n,[{key:\"render\",value:function(){var e=this.props,t=e.message,n=e.active,a=e.theme,r=e.rjvId;return n?m.a.createElement(\"div\",Object.assign({className:\"validation-failure\"},A(a,\"validation-failure\"),{onClick:function(){z.dispatch({rjvId:r,name:\"RESET\"})}}),m.a.createElement(\"span\",A(a,\"validation-failure-label\"),t),m.a.createElement(ge,A(a,\"validation-failure-clear\"))):null}}]),n}(m.a.PureComponent),Be=function(e){u(n,e);var t=h(n);function n(e){var a;return i(this,n),(a=t.call(this,e)).rjvId=Date.now().toString(),a.getListeners=function(){return{reset:a.resetState,\"variable-update\":a.updateSrc,\"add-key-request\":a.addKeyRequest}},a.updateSrc=function(){var e,t=q.get(a.rjvId,\"action\",\"variable-update\"),n=t.name,r=t.namespace,o=t.new_value,i=t.existing_value,s=(t.variable_removed,t.updated_src),c=t.type,l=a.props,u=l.onEdit,f=l.onDelete,p=l.onAdd,d={existing_src:a.state.src,new_value:o,updated_src:s,name:n,namespace:r,existing_value:i};switch(c){case\"variable-added\":e=p(d);break;case\"variable-edited\":e=u(d);break;case\"variable-removed\":e=f(d)}!1!==e?(q.set(a.rjvId,\"global\",\"src\",s),a.setState({src:s})):a.setState({validationFailure:!0})},a.addKeyRequest=function(){a.setState({addKeyRequest:!0})},a.resetState=function(){a.setState({validationFailure:!1,addKeyRequest:!1})},a.state={addKeyRequest:!1,editKeyRequest:!1,validationFailure:!1,src:n.defaultProps.src,name:n.defaultProps.name,theme:n.defaultProps.theme,validationMessage:n.defaultProps.validationMessage,prevSrc:n.defaultProps.src,prevName:n.defaultProps.name,prevTheme:n.defaultProps.theme},a}return c(n,[{key:\"componentDidMount\",value:function(){q.set(this.rjvId,\"global\",\"src\",this.state.src);var e=this.getListeners();for(var t in e)q.on(t+\"-\"+this.rjvId,e[t]);this.setState({addKeyRequest:!1,editKeyRequest:!1})}},{key:\"componentDidUpdate\",value:function(e,t){!1!==t.addKeyRequest&&this.setState({addKeyRequest:!1}),!1!==t.editKeyRequest&&this.setState({editKeyRequest:!1}),e.src!==this.state.src&&q.set(this.rjvId,\"global\",\"src\",this.state.src)}},{key:\"componentWillUnmount\",value:function(){var e=this.getListeners();for(var t in e)q.removeListener(t+\"-\"+this.rjvId,e[t])}},{key:\"render\",value:function(){var e=this.state,t=e.validationFailure,n=e.validationMessage,a=e.addKeyRequest,r=e.theme,i=e.src,s=e.name,c=this.props,l=c.style,u=c.defaultValue;return m.a.createElement(\"div\",{className:\"react-json-view\",style:o(o({},A(r,\"app-container\").style),l)},m.a.createElement(Le,{message:n,active:t,theme:r,rjvId:this.rjvId}),m.a.createElement(De,Object.assign({},this.props,{src:i,name:s,theme:r,type:_(i),rjvId:this.rjvId})),m.a.createElement(Re,{active:a,theme:r,rjvId:this.rjvId,defaultValue:u}))}}],[{key:\"getDerivedStateFromProps\",value:function(e,t){if(e.src!==t.prevSrc||e.name!==t.prevName||e.theme!==t.prevTheme){var a={src:e.src,name:e.name,theme:e.theme,validationMessage:e.validationMessage,prevSrc:e.src,prevName:e.name,prevTheme:e.theme};return n.validateState(a)}return null}}]),n}(m.a.PureComponent);Be.defaultProps={src:{},name:\"root\",theme:\"rjv-default\",collapsed:!1,collapseStringsAfterLength:!1,shouldCollapse:!1,sortKeys:!1,quotesOnKeys:!0,groupArraysAfterLength:100,indentWidth:4,enableClipboard:!0,displayObjectSize:!0,displayDataTypes:!0,onEdit:!1,onDelete:!1,onAdd:!1,onSelect:!1,iconStyle:\"triangle\",style:{},validationMessage:\"Validation Error\",defaultValue:null,displayArrayKey:!0},Be.validateState=function(e){var t={};return\"object\"!==_(e.theme)||function(e){var t=[\"base00\",\"base01\",\"base02\",\"base03\",\"base04\",\"base05\",\"base06\",\"base07\",\"base08\",\"base09\",\"base0A\",\"base0B\",\"base0C\",\"base0D\",\"base0E\",\"base0F\"];if(\"object\"===_(e)){for(var n=0;n<t.length;n++)if(!(t[n]in e))return!1;return!0}return!1}(e.theme)||(console.error(\"react-json-view error:\",\"theme prop must be a theme name or valid base-16 theme object.\",'defaulting to \"rjv-default\" theme'),t.theme=\"rjv-default\"),\"object\"!==_(e.src)&&\"array\"!==_(e.src)&&(console.error(\"react-json-view error:\",\"src property must be a valid json object\"),t.name=\"ERROR\",t.src={message:\"src property must be a valid json object\"}),o(o({},e),t)},j(Be);t.default=Be}])}));","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { ArgumentNullError } from \"./Error\";\r\n\r\nexport enum PromiseState {\r\n    None,\r\n    Resolved,\r\n    Rejected,\r\n}\r\n\r\nexport interface IDeferred<T> {\r\n    readonly promise: Promise<T>;\r\n\r\n    resolve(result: T): IDeferred<T>;\r\n\r\n    reject(error: string): IDeferred<T>;\r\n}\r\n\r\nexport class PromiseResult<T> {\r\n    protected privIsCompleted: boolean;\r\n    protected privIsError: boolean;\r\n    protected privError: string;\r\n    protected privResult: T;\r\n\r\n    public constructor(promiseResultEventSource: PromiseResultEventSource<T>) {\r\n        promiseResultEventSource.on((result: T) => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = false;\r\n                this.privResult = result;\r\n            }\r\n        }, (error: string) => {\r\n            if (!this.privIsCompleted) {\r\n                this.privIsCompleted = true;\r\n                this.privIsError = true;\r\n                this.privError = error;\r\n            }\r\n        });\r\n    }\r\n\r\n    public get isCompleted(): boolean {\r\n        return this.privIsCompleted;\r\n    }\r\n\r\n    public get isError(): boolean {\r\n        return this.privIsError;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n\r\n    public get result(): T {\r\n        return this.privResult;\r\n    }\r\n\r\n    public throwIfError = (): void => {\r\n        if (this.isError) {\r\n            throw this.error;\r\n        }\r\n    }\r\n}\r\n\r\nexport class PromiseResultEventSource<T>  {\r\n\r\n    private privOnSetResult: (result: T) => void;\r\n    private privOnSetError: (error: string) => void;\r\n\r\n    public setResult = (result: T): void => {\r\n        this.privOnSetResult(result);\r\n    }\r\n\r\n    public setError = (error: string): void => {\r\n        this.privOnSetError(error);\r\n    }\r\n\r\n    public on = (onSetResult: (result: T) => void, onSetError: (error: string) => void): void => {\r\n        this.privOnSetResult = onSetResult;\r\n        this.privOnSetError = onSetError;\r\n    }\r\n}\r\n\r\nexport class Deferred<T> implements IDeferred<T> {\r\n    private privPromise: Promise<T>;\r\n    private privResolve: (value?: T | PromiseLike<T>) => void;\r\n    private privReject: (reason?: any) => void;\r\n\r\n    public constructor() {\r\n        this.privPromise = new Promise<T>((resolve: (value: T) => void, reject: (reason: any) => void) => {\r\n            this.privResolve = resolve;\r\n            this.privReject = reject;\r\n        });\r\n    }\r\n\r\n    public get promise(): Promise<T> {\r\n        return this.privPromise;\r\n    }\r\n\r\n    public resolve = (result: T | Promise<T>): Deferred<T> => {\r\n        this.privResolve(result);\r\n        return this;\r\n    }\r\n\r\n    public reject = (error: string): Deferred<T> => {\r\n        this.privReject(error);\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class Sink<T> {\r\n    private privState: PromiseState = PromiseState.None;\r\n    private privPromiseResult: PromiseResult<T> = null;\r\n    private privPromiseResultEvents: PromiseResultEventSource<T> = null;\r\n\r\n    private privSuccessHandlers: ((result: T) => void)[] = [];\r\n    private privErrorHandlers: ((e: string) => void)[] = [];\r\n\r\n    public constructor() {\r\n        this.privPromiseResultEvents = new PromiseResultEventSource();\r\n        this.privPromiseResult = new PromiseResult(this.privPromiseResultEvents);\r\n    }\r\n\r\n    public get state(): PromiseState {\r\n        return this.privState;\r\n    }\r\n\r\n    public get result(): PromiseResult<T> {\r\n        return this.privPromiseResult;\r\n    }\r\n\r\n    public resolve = (result: T): void => {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot resolve a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Resolved;\r\n        this.privPromiseResultEvents.setResult(result);\r\n\r\n        for (let i = 0; i < this.privSuccessHandlers.length; i++) {\r\n            this.executeSuccessCallback(result, this.privSuccessHandlers[i], this.privErrorHandlers[i]);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public reject = (error: string): void => {\r\n        if (this.privState !== PromiseState.None) {\r\n            throw new Error(\"'Cannot reject a completed promise'\");\r\n        }\r\n\r\n        this.privState = PromiseState.Rejected;\r\n        this.privPromiseResultEvents.setError(error);\r\n\r\n        for (const errorHandler of this.privErrorHandlers) {\r\n            this.executeErrorCallback(error, errorHandler);\r\n        }\r\n\r\n        this.detachHandlers();\r\n    }\r\n\r\n    public on = (\r\n        successCallback: (result: T) => void,\r\n        errorCallback: (error: string) => void): void => {\r\n\r\n        if (successCallback == null) {\r\n            successCallback = (r: T) => { return; };\r\n        }\r\n\r\n        if (this.privState === PromiseState.None) {\r\n            this.privSuccessHandlers.push(successCallback);\r\n            this.privErrorHandlers.push(errorCallback);\r\n        } else {\r\n            if (this.privState === PromiseState.Resolved) {\r\n                this.executeSuccessCallback(this.privPromiseResult.result, successCallback, errorCallback);\r\n            } else if (this.privState === PromiseState.Rejected) {\r\n                this.executeErrorCallback(this.privPromiseResult.error, errorCallback);\r\n            }\r\n\r\n            this.detachHandlers();\r\n        }\r\n    }\r\n\r\n    private executeSuccessCallback = (result: T, successCallback: (result: T) => void, errorCallback: (error: string) => void): void => {\r\n        try {\r\n            successCallback(result);\r\n        } catch (e) {\r\n            this.executeErrorCallback(`'Unhandled callback error: ${e}'`, errorCallback);\r\n        }\r\n    }\r\n\r\n    private executeErrorCallback = (error: string, errorCallback: (error: string) => void): void => {\r\n        if (errorCallback) {\r\n            try {\r\n                errorCallback(error);\r\n            } catch (e) {\r\n                throw new Error(`'Unhandled callback error: ${e}. InnerError: ${error}'`);\r\n            }\r\n        } else {\r\n            throw new Error(`'Unhandled error: ${error}'`);\r\n        }\r\n    }\r\n\r\n    private detachHandlers = (): void => {\r\n        this.privErrorHandlers = [];\r\n        this.privSuccessHandlers = [];\r\n    }\r\n}\r\n\r\nexport function marshalPromiseToCallbacks<T>(\r\n    promise: Promise<T>,\r\n    cb?: (value: T) => void,\r\n    err?: (error: string) => void): void {\r\n    promise.then((val: T): void => {\r\n        try {\r\n            if (!!cb) {\r\n                cb(val);\r\n            }\r\n        } catch (error) {\r\n            if (!!err) {\r\n                try {\r\n                    if (error instanceof Error) {\r\n                        const typedError: Error = error as Error;\r\n                        err(typedError.name + \": \" + typedError.message);\r\n                    } else {\r\n                        err(error);\r\n                    }\r\n                    /* tslint:disable:no-empty */\r\n                } catch (error) { }\r\n            }\r\n        }\r\n    }, (error: any): void => {\r\n        if (!!err) {\r\n            try {\r\n                if (error instanceof Error) {\r\n                    const typedError: Error = error as Error;\r\n                    err(typedError.name + \": \" + typedError.message);\r\n                } else {\r\n                    err(error);\r\n                }\r\n                /* tslint:disable:no-empty */\r\n            } catch (error) { }\r\n        }\r\n    });\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports\";\r\n\r\nexport enum RecognitionMode {\r\n    Interactive,\r\n    Conversation,\r\n    Dictation,\r\n}\r\n\r\nexport enum SpeechResultFormat {\r\n    Simple,\r\n    Detailed,\r\n}\r\n\r\nexport class RecognizerConfig {\r\n    private privRecognitionMode: RecognitionMode = RecognitionMode.Interactive;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privRecognitionActivityTimeout: number;\r\n    private privParameters: PropertyCollection;\r\n    private privMaxRetryCount: number;\r\n\r\n    constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n        this.privMaxRetryCount = parseInt(parameters.getProperty(\"SPEECH-Error-MaxRetryCount\", \"4\"), 10);\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognitionMode;\r\n    }\r\n\r\n    public set recognitionMode(value: RecognitionMode) {\r\n        this.privRecognitionMode = value;\r\n        this.privRecognitionActivityTimeout = value === RecognitionMode.Interactive ? 8000 : 25000;\r\n        this.privSpeechServiceConfig.Recognition = RecognitionMode[value];\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n\r\n    public get recognitionActivityTimeout(): number {\r\n        return this.privRecognitionActivityTimeout;\r\n    }\r\n\r\n    public get isContinuousRecognition(): boolean {\r\n        return this.privRecognitionMode !== RecognitionMode.Interactive;\r\n    }\r\n\r\n    public get autoDetectSourceLanguages(): string {\r\n        return this.parameters.getProperty(PropertyId.SpeechServiceConnection_AutoDetectSourceLanguages, undefined);\r\n    }\r\n\r\n    public get maxRetryCount(): number {\r\n        return this.privMaxRetryCount;\r\n    }\r\n}\r\n\r\n// The config is serialized and sent as the Speech.Config\r\nexport class SpeechServiceConfig {\r\n    private context: Context;\r\n    private recognition: string;\r\n\r\n    constructor(context: Context) {\r\n        this.context = context;\r\n    }\r\n\r\n    public serialize = (): string => {\r\n        return JSON.stringify(this, (key: any, value: any): any => {\r\n            if (value && typeof value === \"object\") {\r\n                const replacement: any = {};\r\n                for (const k in value) {\r\n                    if (Object.hasOwnProperty.call(value, k)) {\r\n                        replacement[k && k.charAt(0).toLowerCase() + k.substring(1)] = value[k];\r\n                    }\r\n                }\r\n                return replacement;\r\n            }\r\n            return value;\r\n        });\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.context;\r\n    }\r\n\r\n    public get Recognition(): string {\r\n        return this.recognition;\r\n    }\r\n\r\n    public set Recognition(value: string) {\r\n        this.recognition = value.toLowerCase();\r\n    }\r\n}\r\n\r\nexport class Context {\r\n    public system: System;\r\n    public os: OS;\r\n    public audio: ISpeechConfigAudio;\r\n\r\n    constructor(os: OS) {\r\n        this.system = new System();\r\n        this.os = os;\r\n    }\r\n}\r\n\r\nexport class System {\r\n    public name: string;\r\n    public version: string;\r\n    public build: string;\r\n    public lang: string;\r\n\r\n    constructor() {\r\n        // Note: below will be patched for official builds.\r\n        const SPEECHSDK_CLIENTSDK_VERSION = \"1.20.0\";\r\n\r\n        this.name = \"SpeechSDK\";\r\n        this.version = SPEECHSDK_CLIENTSDK_VERSION;\r\n        this.build = \"JavaScript\";\r\n        this.lang = \"JavaScript\";\r\n    }\r\n}\r\n\r\nexport class OS {\r\n    public platform: string;\r\n    public name: string;\r\n    public version: string;\r\n\r\n    constructor(platform: string, name: string, version: string) {\r\n        this.platform = platform;\r\n        this.name = name;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport class Device {\r\n    public manufacturer: string;\r\n    public model: string;\r\n    public version: string;\r\n\r\n    constructor(manufacturer: string, model: string, version: string) {\r\n        this.manufacturer = manufacturer;\r\n        this.model = model;\r\n        this.version = version;\r\n    }\r\n}\r\n\r\nexport interface ISpeechConfigAudio {\r\n    source?: ISpeechConfigAudioDevice;\r\n    playback?: ISpeechConfigAudioDevice;\r\n}\r\n\r\nexport interface ISpeechConfigAudioDevice {\r\n    manufacturer: string;\r\n    model: string;\r\n    connectivity: connectivity;\r\n    type: type;\r\n    samplerate: number;\r\n    bitspersample: number;\r\n    channelcount: number;\r\n}\r\n\r\nexport enum connectivity {\r\n    Bluetooth = \"Bluetooth\",\r\n    Wired = \"Wired\",\r\n    WiFi = \"WiFi\",\r\n    Cellular = \"Cellular\",\r\n    InBuilt = \"InBuilt\",\r\n    Unknown = \"Unknown\",\r\n}\r\n\r\nexport enum type {\r\n    Phone = \"Phone\",\r\n    Speaker = \"Speaker\",\r\n    Car = \"Car\",\r\n    Headset = \"Headset\",\r\n    Thermostat = \"Thermostat\",\r\n    Microphones = \"Microphones\",\r\n    Deskphone = \"Deskphone\",\r\n    RemoteControl = \"RemoteControl\",\r\n    Unknown = \"Unknown\",\r\n    File = \"File\",\r\n    Stream = \"Stream\",\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport { SpeechSynthesizer } from \"../sdk/Exports\";\r\n\r\n/**\r\n * Represents the JSON used in the synthesis.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SynthesisContext {\r\n    private privContext: { [section: string]: any } = {};\r\n    private privSpeechSynthesizer: SpeechSynthesizer;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n\r\n    constructor(speechSynthesizer: SpeechSynthesizer) {\r\n        this.privSpeechSynthesizer = speechSynthesizer;\r\n    }\r\n\r\n    /**\r\n     * Adds a section to the synthesis.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    public setSection(sectionName: string, value: any): void {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the audio output format for synthesis context generation.\r\n     * @param format {AudioOutputFormatImpl} the output format\r\n     */\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public toJSON(): string {\r\n\r\n        const synthesisSection: ISynthesisSection = this.buildSynthesisContext();\r\n        this.setSection(\"synthesis\", synthesisSection);\r\n\r\n        return JSON.stringify(this.privContext);\r\n    }\r\n\r\n    private buildSynthesisContext(): ISynthesisSection {\r\n        return {\r\n            audio: {\r\n                metadataOptions: {\r\n                    bookmarkEnabled: (!!this.privSpeechSynthesizer.bookmarkReached),\r\n                    sentenceBoundaryEnabled: false,\r\n                    visemeEnabled: (!!this.privSpeechSynthesizer.visemeReceived),\r\n                    wordBoundaryEnabled: (!!this.privSpeechSynthesizer.wordBoundary),\r\n                },\r\n                outputFormat: this.privAudioOutputFormat.requestAudioFormatString,\r\n            },\r\n            language: {\r\n                autoDetection: this.privSpeechSynthesizer.autoDetectSourceLanguage\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\ninterface ISynthesisSection {\r\n    audio: {\r\n        outputFormat: string,\r\n        metadataOptions: {\r\n            bookmarkEnabled: boolean,\r\n            wordBoundaryEnabled: boolean,\r\n            visemeEnabled: boolean,\r\n            sentenceBoundaryEnabled: boolean,\r\n        }\r\n    };\r\n    language: {\r\n        autoDetection: boolean\r\n    };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Represents the JSON used in the agent.config message sent to the speech service.\r\n */\r\nexport class AgentConfig {\r\n    private iPrivConfig: IAgentConfig;\r\n\r\n    public toJsonString(): string {\r\n        return JSON.stringify(this.iPrivConfig);\r\n    }\r\n\r\n    public get(): IAgentConfig {\r\n        return this.iPrivConfig;\r\n    }\r\n\r\n    /**\r\n     * Setter for the agent.config object.\r\n     * @param value a JSON serializable object.\r\n     */\r\n    public set(value: IAgentConfig): void {\r\n        this.iPrivConfig = value;\r\n    }\r\n}\r\n\r\nexport interface IAgentConfig {\r\n    botInfo: {\r\n        commType: string,\r\n        connectionId: string,\r\n        conversationId: string,\r\n        fromId: string\r\n        commandsCulture: string,\r\n        ttsAudioFormat: string\r\n    };\r\n    version: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be canceled.\r\n * @class CancellationReason\r\n */\r\nexport enum CancellationReason {\r\n    /**\r\n     * Indicates that an error occurred during speech recognition.\r\n     * @member CancellationReason.Error\r\n     */\r\n    Error,\r\n\r\n    /**\r\n     * Indicates that the end of the audio stream was reached.\r\n     * @member CancellationReason.EndOfStream\r\n     */\r\n    EndOfStream,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n *  Defines error code in case that CancellationReason is Error.\r\n *  Added in version 1.1.0.\r\n */\r\nexport enum CancellationErrorCode {\r\n    /**\r\n     * Indicates that no error occurred during speech recognition.\r\n     */\r\n    NoError,\r\n\r\n    /**\r\n     * Indicates an authentication error.\r\n     */\r\n    AuthenticationFailure,\r\n\r\n    /**\r\n     * Indicates that one or more recognition parameters are invalid.\r\n     */\r\n    BadRequestParameters,\r\n\r\n    /**\r\n     * Indicates that the number of parallel requests exceeded the number of allowed\r\n     * concurrent transcriptions for the subscription.\r\n     */\r\n    TooManyRequests,\r\n\r\n    /**\r\n     * Indicates a connection error.\r\n     */\r\n    ConnectionFailure,\r\n\r\n    /**\r\n     * Indicates a time-out error when waiting for response from service.\r\n     */\r\n    ServiceTimeout,\r\n\r\n    /**\r\n     * Indicates that an error is returned by the service.\r\n     */\r\n    ServiceError,\r\n\r\n    /**\r\n     * Indicates an unexpected runtime error.\r\n     */\r\n    RuntimeError,\r\n\r\n    /**\r\n     * Indicates an quota overrun on existing key.\r\n     */\r\n    Forbidden,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SpeechSynthesisResult } from \"./Exports\";\r\n\r\n/**\r\n * Defines contents of speech synthesis events.\r\n * @class SpeechSynthesisEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisEventArgs {\r\n    private readonly privResult: SpeechSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {SpeechSynthesisResult} result - The speech synthesis result.\r\n     */\r\n    public constructor(result: SpeechSynthesisResult) {\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the synthesis result.\r\n     * @member SpeechSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {SpeechSynthesisResult} the synthesis result.\r\n     */\r\n    public get result(): SpeechSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SynthesisResult } from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech synthesis.\r\n * @class SpeechSynthesisResult\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisResult extends SynthesisResult {\r\n    private privAudioData: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {number} audioData - The offset into the stream.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    constructor(resultId?: string, reason?: ResultReason,  audioData?: ArrayBuffer,\r\n                errorDetails?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, errorDetails, properties);\r\n        this.privAudioData = audioData;\r\n    }\r\n\r\n    /**\r\n     * The synthesized audio data\r\n     * @member SpeechSynthesisResult.prototype.audioData\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} The synthesized audio data.\r\n     */\r\n    public get audioData(): ArrayBuffer {\r\n        return this.privAudioData;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason } from \"./Exports\";\r\n\r\n/**\r\n * Base class for synthesis results\r\n * @class SynthesisResult\r\n * Added in version 1.20.0\r\n */\r\nexport class SynthesisResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privErrorDetails: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    constructor(resultId?: string, reason?: ResultReason, errorDetails?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member SynthesisResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member SynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful synthesis, provides details of the occurred error.\r\n     * @member SynthesisResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     *  The set of properties exposed in the result.\r\n     * @member SynthesisResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines the possible reasons a recognition result might be generated.\r\n * @class ResultReason\r\n */\r\nexport enum ResultReason {\r\n    /**\r\n     * Indicates speech could not be recognized. More details\r\n     * can be found in the NoMatchDetails object.\r\n     * @member ResultReason.NoMatch\r\n     */\r\n    NoMatch,\r\n\r\n    /**\r\n     * Indicates that the recognition was canceled. More details\r\n     * can be found using the CancellationDetails object.\r\n     * @member ResultReason.Canceled\r\n     */\r\n    Canceled,\r\n\r\n    /**\r\n     * Indicates the speech result contains hypothesis text.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizingSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains final text that has been recognized.\r\n     * Speech Recognition is now complete for this phrase.\r\n     * @member ResultReason.RecognizedSpeech\r\n     */\r\n    RecognizedSpeech,\r\n\r\n    /**\r\n     * Indicates the speech result contains a finalized acceptance of a provided keyword.\r\n     * Speech recognition will continue unless otherwise configured.\r\n     * @member ResultReason.RecognizedKeyword\r\n     */\r\n    RecognizedKeyword,\r\n\r\n    /**\r\n     * Indicates the intent result contains hypothesis text and intent.\r\n     * @member ResultReason.RecognizingIntent\r\n     */\r\n    RecognizingIntent,\r\n\r\n    /**\r\n     * Indicates the intent result contains final text and intent.\r\n     * Speech Recognition and Intent determination are now complete for this phrase.\r\n     * @member ResultReason.RecognizedIntent\r\n     */\r\n    RecognizedIntent,\r\n\r\n    /**\r\n     * Indicates the translation result contains hypothesis text and its translation(s).\r\n     * @member ResultReason.TranslatingSpeech\r\n     */\r\n    TranslatingSpeech,\r\n\r\n    /**\r\n     * Indicates the translation result contains final text and corresponding translation(s).\r\n     * Speech Recognition and Translation are now complete for this phrase.\r\n     * @member ResultReason.TranslatedSpeech\r\n     */\r\n    TranslatedSpeech,\r\n\r\n    /**\r\n     * Indicates the synthesized audio result contains a non-zero amount of audio data\r\n     * @member ResultReason.SynthesizingAudio\r\n     */\r\n    SynthesizingAudio,\r\n\r\n    /**\r\n     * Indicates the synthesized audio is now complete for this phrase.\r\n     * @member ResultReason.SynthesizingAudioCompleted\r\n     */\r\n    SynthesizingAudioCompleted,\r\n\r\n    /**\r\n     * Indicates the speech synthesis is now started\r\n     * @member ResultReason.SynthesizingAudioStarted\r\n     */\r\n    SynthesizingAudioStarted,\r\n\r\n    /**\r\n     * Indicates the voice profile is being enrolled and customers need to send more audio to create a voice profile.\r\n     * @member ResultReason.EnrollingVoiceProfile\r\n     */\r\n    EnrollingVoiceProfile,\r\n\r\n    /**\r\n     * Indicates the voice profile has been enrolled.\r\n     * @member ResultReason.EnrolledVoiceProfile\r\n     */\r\n    EnrolledVoiceProfile,\r\n\r\n    /**\r\n     * Indicates successful identification of some speakers.\r\n     * @member ResultReason.RecognizedSpeakers\r\n     */\r\n    RecognizedSpeakers,\r\n\r\n    /**\r\n     * Indicates successfully verified one speaker.\r\n     * @member ResultReason.RecognizedSpeaker\r\n     */\r\n    RecognizedSpeaker,\r\n\r\n    /**\r\n     * Indicates a voice profile has been reset successfully.\r\n     * @member ResultReason.ResetVoiceProfile\r\n     */\r\n    ResetVoiceProfile,\r\n\r\n    /**\r\n     * Indicates a voice profile has been deleted successfully.\r\n     * @member ResultReason.DeletedVoiceProfile\r\n     */\r\n    DeletedVoiceProfile,\r\n\r\n    /**\r\n     * Indicates synthesis voices list has been successfully retrieved.\r\n     * @member ResultReason.VoicesListRetrieved\r\n     */\r\n    VoicesListRetrieved,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport enum MetadataType {\r\n    WordBoundary = \"WordBoundary\",\r\n    Bookmark = \"Bookmark\",\r\n    Viseme = \"Viseme\"\r\n}\r\n\r\nexport interface ISynthesisMetadata {\r\n    Type: MetadataType;\r\n    Data: {\r\n        Offset: number;\r\n        text: {\r\n            Text: string;\r\n            Length: number;\r\n        };\r\n        Bookmark: string;\r\n        VisemeId: number;\r\n        AnimationChunk: string;\r\n        IsLastAnimation: boolean;\r\n    };\r\n}\r\n\r\n// audio.metadata\r\nexport interface ISynthesisAudioMetadata {\r\n    Metadata: ISynthesisMetadata[];\r\n}\r\n\r\nexport class SynthesisAudioMetadata implements ISynthesisAudioMetadata {\r\n    private privSynthesisAudioMetadata: ISynthesisAudioMetadata;\r\n\r\n    private constructor(json: string) {\r\n        this.privSynthesisAudioMetadata = JSON.parse(json);\r\n    }\r\n\r\n    public static fromJSON(json: string): SynthesisAudioMetadata {\r\n        return new SynthesisAudioMetadata(json);\r\n    }\r\n\r\n    public get Metadata(): ISynthesisMetadata[] {\r\n        return this.privSynthesisAudioMetadata.Metadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis word boundary event.\r\n * @class SpeechSynthesisWordBoundaryEventArgs\r\n * Added in version 1.11.0\r\n */\r\nexport class SpeechSynthesisWordBoundaryEventArgs {\r\n    private privAudioOffset: number;\r\n    private privText: string;\r\n    private privWordLength: number;\r\n    private privTextOffset: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} text - The text.\r\n     * @param {number} wordLength - The length of the word.\r\n     * @param {number} textOffset - The text offset.\r\n     */\r\n    public constructor(audioOffset: number, text: string, wordLength: number, textOffset: number) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privText = text;\r\n        this.privWordLength = wordLength;\r\n        this.privTextOffset = textOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the text of the word boundary event.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the text.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Specifies the word length\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.wordLength\r\n     * @function\r\n     * @public\r\n     * @returns {number} the word length\r\n     */\r\n    public get wordLength(): number {\r\n        return this.privWordLength;\r\n    }\r\n\r\n    /**\r\n     * Specifies the text offset.\r\n     * @member SpeechSynthesisWordBoundaryEventArgs.prototype.textOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the text offset.\r\n     */\r\n    public get textOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis bookmark event.\r\n * @class SpeechSynthesisBookmarkEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisBookmarkEventArgs {\r\n    private privAudioOffset: number;\r\n    private privText: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {string} text - The bookmark text.\r\n     */\r\n    public constructor(audioOffset: number, text: string) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privText = text;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the bookmark.\r\n     * @member SpeechSynthesisBookmarkEventArgs.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} the bookmark text.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines contents of speech synthesis viseme event.\r\n * @class SpeechSynthesisVisemeEventArgs\r\n * Added in version 1.16.0\r\n */\r\nexport class SpeechSynthesisVisemeEventArgs {\r\n    private privAudioOffset: number;\r\n    private privVisemeId: number;\r\n    private privAnimation: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} audioOffset - The audio offset.\r\n     * @param {number} visemeId - The viseme ID.\r\n     * @param {string} animation - The animation, could be in svg or other format.\r\n     */\r\n    public constructor(audioOffset: number, visemeId: number, animation: string) {\r\n        this.privAudioOffset = audioOffset;\r\n        this.privVisemeId = visemeId;\r\n        this.privAnimation = animation;\r\n    }\r\n\r\n    /**\r\n     * Specifies the audio offset.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.audioOffset\r\n     * @function\r\n     * @public\r\n     * @returns {number} the audio offset.\r\n     */\r\n    public get audioOffset(): number {\r\n        return this.privAudioOffset;\r\n    }\r\n\r\n    /**\r\n     * Specifies the viseme ID.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.visemeId\r\n     * @function\r\n     * @public\r\n     * @returns {number} the viseme ID.\r\n     */\r\n    public get visemeId(): number {\r\n        return this.privVisemeId;\r\n    }\r\n\r\n    /**\r\n     * Specifies the animation.\r\n     * @member SpeechSynthesisVisemeEventArgs.prototype.animation\r\n     * @function\r\n     * @public\r\n     * @returns {string} the animation, could be in svg or other format.\r\n     */\r\n    public get animation(): string {\r\n        return this.privAnimation;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines content for session events like SessionStarted/Stopped, SoundStarted/Stopped.\r\n * @class SessionEventArgs\r\n */\r\nexport class SessionEventArgs {\r\n    private privSessionId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(sessionId: string) {\r\n        this.privSessionId = sessionId;\r\n    }\r\n\r\n    /**\r\n     * Represents the session identifier.\r\n     * @member SessionEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Represents the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SessionEventArgs } from \"./Exports\";\r\n\r\n/**\r\n * Defines payload for session events like Speech Start/End Detected\r\n * @class\r\n */\r\nexport class RecognitionEventArgs extends SessionEventArgs {\r\n    private privOffset: number;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(offset: number, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privOffset = offset;\r\n    }\r\n\r\n    /**\r\n     * Represents the message offset\r\n     * @member RecognitionEventArgs.prototype.offset\r\n     * @function\r\n     * @public\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Define Speech Recognizer output formats.\r\n * @class OutputFormat\r\n */\r\nexport enum OutputFormat {\r\n    /**\r\n     * @member OutputFormat.Simple\r\n     */\r\n    Simple = 0,\r\n\r\n    /**\r\n     * @member OutputFormat.Detailed\r\n     */\r\n    Detailed,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IntentRecognitionResult, RecognitionEventArgs } from \"./Exports\";\r\n\r\n/**\r\n * Intent recognition result event arguments.\r\n * @class\r\n */\r\nexport class IntentRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: IntentRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param result - The result of the intent recognition.\r\n     * @param offset - The offset.\r\n     * @param sessionId - The session id.\r\n     */\r\n    public constructor(result: IntentRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Represents the intent recognition result.\r\n     * @member IntentRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {IntentRecognitionResult} Represents the intent recognition result.\r\n     */\r\n    public get result(): IntentRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason } from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class RecognitionResult\r\n */\r\nexport class RecognitionResult {\r\n    private privResultId: string;\r\n    private privReason: ResultReason;\r\n    private privText: string;\r\n    private privDuration: number;\r\n    private privOffset: number;\r\n    private privLanguage: string;\r\n    private privLanguageDetectionConfidence: string;\r\n    private privErrorDetails: string;\r\n    private privJson: string;\r\n    private privProperties: PropertyCollection;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    constructor(resultId?: string, reason?: ResultReason, text?: string, duration?: number,\r\n                offset?: number, language?: string, languageDetectionConfidence?: string, errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        this.privResultId = resultId;\r\n        this.privReason = reason;\r\n        this.privText = text;\r\n        this.privDuration = duration;\r\n        this.privOffset = offset;\r\n        this.privLanguage = language;\r\n        this.privLanguageDetectionConfidence = languageDetectionConfidence;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privJson = json;\r\n        this.privProperties = properties;\r\n    }\r\n\r\n    /**\r\n     * Specifies the result identifier.\r\n     * @member RecognitionResult.prototype.resultId\r\n     * @function\r\n     * @public\r\n     * @returns {string} Specifies the result identifier.\r\n     */\r\n    public get resultId(): string {\r\n        return this.privResultId;\r\n    }\r\n\r\n    /**\r\n     * Specifies status of the result.\r\n     * @member RecognitionResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} Specifies status of the result.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * Presents the recognized text in the result.\r\n     * @member RecognitionResult.prototype.text\r\n     * @function\r\n     * @public\r\n     * @returns {string} Presents the recognized text in the result.\r\n     */\r\n    public get text(): string {\r\n        return this.privText;\r\n    }\r\n\r\n    /**\r\n     * Duration of recognized speech in 100 nano second increments.\r\n     * @member RecognitionResult.prototype.duration\r\n     * @function\r\n     * @public\r\n     * @returns {number} Duration of recognized speech in 100 nano second increments.\r\n     */\r\n    public get duration(): number {\r\n        return this.privDuration;\r\n    }\r\n\r\n    /**\r\n     * Offset of recognized speech in 100 nano second increments.\r\n     * @member RecognitionResult.prototype.offset\r\n     * @function\r\n     * @public\r\n     * @returns {number} Offset of recognized speech in 100 nano second increments.\r\n     */\r\n    public get offset(): number {\r\n        return this.privOffset;\r\n    }\r\n\r\n    /**\r\n     * Primary Language detected.\r\n     * @member RecognitionResult.prototype.language\r\n     * @function\r\n     * @public\r\n     * @returns {string} language detected.\r\n     */\r\n    public get language(): string {\r\n        return this.privLanguage;\r\n    }\r\n\r\n    /**\r\n     * Primary Language detection confidence (Unknown, Low, Medium, High).\r\n     * @member RecognitionResult.prototype.languageDetectionConfidence\r\n     * @function\r\n     * @public\r\n     * @returns {string} detection confidence strength.\r\n     */\r\n    public get languageDetectionConfidence(): string {\r\n        return this.privLanguageDetectionConfidence;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member RecognitionResult.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} a brief description of an error.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n\r\n    /**\r\n     * A string containing Json serialized recognition result as it was received from the service.\r\n     * @member RecognitionResult.prototype.json\r\n     * @function\r\n     * @private\r\n     * @returns {string} Json serialized representation of the result.\r\n     */\r\n    public get json(): string {\r\n        return this.privJson;\r\n    }\r\n\r\n    /**\r\n     *  The set of properties exposed in the result.\r\n     * @member RecognitionResult.prototype.properties\r\n     * @function\r\n     * @public\r\n     * @returns {PropertyCollection} The set of properties exposed in the result.\r\n     */\r\n    public get properties(): PropertyCollection {\r\n        return this.privProperties;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, RecognitionResult, ResultReason } from \"./Exports\";\r\n\r\n/**\r\n * Defines result of speech recognition.\r\n * @class SpeechRecognitionResult\r\n */\r\nexport class SpeechRecognitionResult extends RecognitionResult {\r\n    private readonly privSpeakerId: string;\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @public\r\n     * @param {string} resultId - The result id.\r\n     * @param {ResultReason} reason - The reason.\r\n     * @param {string} text - The recognized text.\r\n     * @param {number} duration - The duration.\r\n     * @param {number} offset - The offset into the stream.\r\n     * @param {string} language - Primary Language detected, if provided.\r\n     * @param {string} languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param {string} speakerId - speaker id for conversation transcription, if provided.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {string} json - Additional Json, if provided.\r\n     * @param {PropertyCollection} properties - Additional properties, if provided.\r\n     */\r\n    public constructor(resultId?: string, reason?: ResultReason, text?: string,\r\n                       duration?: number, offset?: number, language?: string,\r\n                       languageDetectionConfidence?: string, speakerId?: string, errorDetails?: string,\r\n                       json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, errorDetails, json, properties);\r\n        this.privSpeakerId = speakerId;\r\n    }\r\n\r\n    /**\r\n     * speaker id from conversation transcription/id scenarios\r\n     * @member SpeechRecognitionResult.prototype.speakerId\r\n     * @function\r\n     * @public\r\n     * @returns {string} id of speaker in given result\r\n     */\r\n    public get speakerId(): string {\r\n        return this.privSpeakerId;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection, ResultReason, SpeechRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Intent recognition result.\r\n * @class\r\n */\r\nexport class IntentRecognitionResult extends SpeechRecognitionResult {\r\n    private privIntentId: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param intentId - The intent id.\r\n     * @param resultId - The result id.\r\n     * @param reason - The reason.\r\n     * @param text - The recognized text.\r\n     * @param duration - The duration.\r\n     * @param offset - The offset into the stream.\r\n     * @param language - Primary Language detected, if provided.\r\n     * @param languageDetectionConfidence - Primary Language confidence (\"Unknown,\" \"Low,\" \"Medium,\" \"High\"...), if provided.\r\n     * @param errorDetails - Error details, if provided.\r\n     * @param json - Additional Json, if provided.\r\n     * @param properties - Additional properties, if provided.\r\n     */\r\n    constructor(intentId?: string, resultId?: string, reason?: ResultReason, text?: string,\r\n                duration?: number, offset?: number, language?: string, languageDetectionConfidence?: string,\r\n                errorDetails?: string, json?: string, properties?: PropertyCollection) {\r\n        super(resultId, reason, text, duration, offset, language, languageDetectionConfidence, undefined, errorDetails, json, properties);\r\n\r\n        this.privIntentId = intentId;\r\n    }\r\n\r\n    /**\r\n     * A String that represents the intent identifier being recognized.\r\n     * @member IntentRecognitionResult.prototype.intentId\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the intent identifier being recognized.\r\n     */\r\n    public get intentId(): string {\r\n        return this.privIntentId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase\";\r\n\r\nexport class SpeechRecognitionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionEventArgs, TranslationRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Translation text result event arguments.\r\n * @class TranslationRecognitionEventArgs\r\n */\r\nexport class TranslationRecognitionEventArgs extends RecognitionEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationRecognitionResult} result - The translation recognition result.\r\n     * @param {number} offset - The offset.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationRecognitionResult, offset?: number, sessionId?: string) {\r\n        super(offset, sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SessionEventArgs, TranslationSynthesisResult } from \"./Exports\";\r\n\r\n/**\r\n * Translation Synthesis event arguments\r\n * @class TranslationSynthesisEventArgs\r\n */\r\nexport class TranslationSynthesisEventArgs extends SessionEventArgs {\r\n    private privResult: TranslationSynthesisResult;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {TranslationSynthesisResult} result - The translation synthesis result.\r\n     * @param {string} sessionId - The session id.\r\n     */\r\n    public constructor(result: TranslationSynthesisResult, sessionId?: string) {\r\n        super(sessionId);\r\n\r\n        this.privResult = result;\r\n    }\r\n\r\n    /**\r\n     * Specifies the translation synthesis result.\r\n     * @member TranslationSynthesisEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationSynthesisResult} Specifies the translation synthesis result.\r\n     */\r\n    public get result(): TranslationSynthesisResult {\r\n        return this.privResult;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ResultReason } from \"./ResultReason\";\r\n\r\n/**\r\n * Defines translation synthesis result, i.e. the voice output of the translated\r\n * text in the target language.\r\n * @class TranslationSynthesisResult\r\n */\r\nexport class TranslationSynthesisResult {\r\n    private privReason: ResultReason;\r\n    private privAudio: ArrayBuffer;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {ResultReason} reason - The synthesis reason.\r\n     * @param {ArrayBuffer} audio - The audio data.\r\n     */\r\n    constructor(reason: ResultReason, audio: ArrayBuffer) {\r\n        this.privReason = reason;\r\n        this.privAudio = audio;\r\n    }\r\n\r\n    /**\r\n     * Translated text in the target language.\r\n     * @member TranslationSynthesisResult.prototype.audio\r\n     * @function\r\n     * @public\r\n     * @returns {ArrayBuffer} Translated audio in the target language.\r\n     */\r\n    public get audio(): ArrayBuffer {\r\n        return this.privAudio;\r\n    }\r\n\r\n    /**\r\n     * The synthesis status.\r\n     * @member TranslationSynthesisResult.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {ResultReason} The synthesis status.\r\n     */\r\n    public get reason(): ResultReason {\r\n        return this.privReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Profanity option.\r\n * Added in version 1.7.0.\r\n */\r\nexport enum ProfanityOption {\r\n    Masked = 0,\r\n    Removed = 1,\r\n    Raw = 2\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport { ConnectionOpenResponse } from \"../common/ConnectionOpenResponse\";\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionClosedEvent,\r\n    ConnectionEvent,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    IDisposable,\r\n    IStreamChunk,\r\n    MessageType,\r\n    ServiceEvent,\r\n    Timeout\r\n} from \"../common/Exports\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    Recognizer,\r\n    SessionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport { Callback } from \"../sdk/Transcription/IConversation\";\r\nimport {\r\n    AgentConfig,\r\n    DynamicGrammarBuilder,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionMode,\r\n    RequestSession,\r\n    SpeechContext,\r\n    SpeechDetected,\r\n    type\r\n} from \"./Exports\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication,\r\n} from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport abstract class ServiceRecognizerBase implements IDisposable {\r\n    private privAuthentication: IAuthentication;\r\n    private privConnectionFactory: IConnectionFactory;\r\n\r\n    // A promise for a configured connection.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionConfigurationPromise: Promise<IConnection>;\r\n\r\n    // A promise for a connection, but one that has not had the speech context sent yet.\r\n    // Do not consume directly, call fetchConnection instead.\r\n    private privConnectionPromise: Promise<IConnection>;\r\n    private privAuthFetchEventId: string;\r\n    private privIsDisposed: boolean;\r\n    private privMustReportEndOfStream: boolean;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privServiceEvents: EventSource<ServiceEvent>;\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n    private privAgentConfig: AgentConfig;\r\n    private privServiceHasSentMessage: boolean;\r\n    private privActivityTemplate: string;\r\n    private privSetTimeout: (cb: () => void, delay: number) => number = setTimeout;\r\n    private privAudioSource: IAudioSource;\r\n    private privIsLiveAudio: boolean = false;\r\n    protected privSpeechContext: SpeechContext;\r\n    protected privRequestSession: RequestSession;\r\n    protected privConnectionId: string;\r\n    protected privRecognizerConfig: RecognizerConfig;\r\n    protected privRecognizer: Recognizer;\r\n    protected privSuccessCallback: (e: SpeechRecognitionResult) => void;\r\n    protected privErrorCallback: (e: string) => void;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: Recognizer) {\r\n\r\n        if (!authentication) {\r\n            throw new ArgumentNullError(\"authentication\");\r\n        }\r\n\r\n        if (!connectionFactory) {\r\n            throw new ArgumentNullError(\"connectionFactory\");\r\n        }\r\n\r\n        if (!audioSource) {\r\n            throw new ArgumentNullError(\"audioSource\");\r\n        }\r\n\r\n        if (!recognizerConfig) {\r\n            throw new ArgumentNullError(\"recognizerConfig\");\r\n        }\r\n\r\n        this.privMustReportEndOfStream = false;\r\n        this.privAuthentication = authentication;\r\n        this.privConnectionFactory = connectionFactory;\r\n        this.privAudioSource = audioSource;\r\n        this.privRecognizerConfig = recognizerConfig;\r\n        this.privIsDisposed = false;\r\n        this.privRecognizer = recognizer;\r\n        this.privRequestSession = new RequestSession(this.privAudioSource.id());\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privServiceEvents = new EventSource<ServiceEvent>();\r\n        this.privDynamicGrammar = new DynamicGrammarBuilder();\r\n        this.privSpeechContext = new SpeechContext(this.privDynamicGrammar);\r\n        this.privAgentConfig = new AgentConfig();\r\n        if (typeof (Blob) !== \"undefined\" && typeof (Worker) !== \"undefined\") {\r\n            this.privSetTimeout = Timeout.setTimeout;\r\n        }\r\n\r\n        this.connectionEvents.attach(async (connectionEvent: ConnectionEvent): Promise<void> => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                const connectionClosedEvent = connectionEvent as ConnectionClosedEvent;\r\n                if (connectionClosedEvent.statusCode === 1003 ||\r\n                    connectionClosedEvent.statusCode === 1007 ||\r\n                    connectionClosedEvent.statusCode === 1002 ||\r\n                    connectionClosedEvent.statusCode === 4000 ||\r\n                    this.privRequestSession.numConnectionAttempts > this.privRecognizerConfig.maxRetryCount\r\n                ) {\r\n                    await this.cancelRecognitionLocal(CancellationReason.Error,\r\n                        connectionClosedEvent.statusCode === 1007 ? CancellationErrorCode.BadRequestParameters : CancellationErrorCode.ConnectionFailure,\r\n                        connectionClosedEvent.reason + \" websocket error code: \" + connectionClosedEvent.statusCode);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public get audioSource(): IAudioSource {\r\n        return this.privAudioSource;\r\n    }\r\n\r\n    public get speechContext(): SpeechContext {\r\n        return this.privSpeechContext;\r\n    }\r\n\r\n    public get dynamicGrammar(): DynamicGrammarBuilder {\r\n        return this.privDynamicGrammar;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n\r\n    public set conversationTranslatorToken(token: string) {\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.ConversationTranslator_Token, token);\r\n    }\r\n\r\n    public set authentication(auth: IAuthentication) {\r\n        this.privAuthentication = this.authentication;\r\n    }\r\n\r\n    public isDisposed(): boolean {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        this.privIsDisposed = true;\r\n        if (this.privConnectionConfigurationPromise) {\r\n            try {\r\n                const connection: IConnection = await this.privConnectionConfigurationPromise;\r\n                await connection.dispose(reason);\r\n            } catch (error) {\r\n                // The connection is in a bad state. But we're trying to kill it, so...\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    public get connectionEvents(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    public get serviceEvents(): EventSource<ServiceEvent> {\r\n        return this.privServiceEvents;\r\n    }\r\n\r\n    public get recognitionMode(): RecognitionMode {\r\n        return this.privRecognizerConfig.recognitionMode;\r\n    }\r\n\r\n    protected recognizeOverride: (recoMode: RecognitionMode, sc: (e: SpeechRecognitionResult) => void, ec: (e: string) => void) => any = undefined;\r\n\r\n    public async recognize(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack: (e: string) => void,\r\n    ): Promise<void> {\r\n\r\n        if (this.recognizeOverride !== undefined) {\r\n            return this.recognizeOverride(recoMode, successCallback, errorCallBack);\r\n        }\r\n        // Clear the existing configuration promise to force a re-transmission of config and context.\r\n        this.privConnectionConfigurationPromise = null;\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallBack;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privAudioSource.events);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n        let audioNode: ReplayableAudioNode;\r\n\r\n        try {\r\n            const audioStreamNode: IAudioStreamNode = await this.audioSource.attach(this.privRequestSession.audioNodeId);\r\n            const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n            const deviceInfo: ISpeechConfigAudioDevice = await this.audioSource.deviceInfo;\r\n            this.privIsLiveAudio = deviceInfo.type && deviceInfo.type === type.Microphones;\r\n\r\n            audioNode = new ReplayableAudioNode(audioStreamNode, format.avgBytesPerSec);\r\n            await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n            this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        } catch (error) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n            throw error;\r\n        }\r\n\r\n        try {\r\n            await conPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error);\r\n            return;\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        const messageRetrievalPromise = this.receiveMessage();\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        audioSendPromise.catch(async (error: string) => {\r\n            await this.cancelRecognitionLocal(CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    public async stopRecognizing(): Promise<void> {\r\n        if (this.privRequestSession.isRecognizing) {\r\n            try {\r\n                await this.audioSource.turnOff();\r\n                await this.sendFinalAudio();\r\n                await this.privRequestSession.onStopRecognizing();\r\n                await this.privRequestSession.turnCompletionPromise;\r\n            } finally {\r\n                await this.privRequestSession.dispose();\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    public async connect(): Promise<void> {\r\n        await this.connectImpl();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public connectAsync(cb?: Callback, err?: Callback): void {\r\n        this.connectImpl().then((connection: IConnection): void => {\r\n            try {\r\n                if (!!cb) {\r\n                    cb();\r\n                }\r\n            } catch (e) {\r\n                if (!!err) {\r\n                    err(e);\r\n                }\r\n            }\r\n        }, (reason: any): void => {\r\n            try {\r\n                if (!!err) {\r\n                    err(reason);\r\n                }\r\n                /* tslint:disable:no-empty */\r\n            } catch (error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    protected disconnectOverride: () => Promise<void> = undefined;\r\n\r\n    public async disconnect(): Promise<void> {\r\n        await this.cancelRecognitionLocal(CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        if (this.disconnectOverride !== undefined) {\r\n            await this.disconnectOverride();\r\n        }\r\n\r\n        try {\r\n            await (await this.privConnectionPromise).dispose();\r\n        } catch (error) {\r\n\r\n        }\r\n\r\n        this.privConnectionPromise = null;\r\n    }\r\n\r\n    // Called when telemetry data is sent to the service.\r\n    // Used for testing Telemetry capture.\r\n    public static telemetryData: (json: string) => void;\r\n    public static telemetryDataEnabled: boolean = true;\r\n\r\n    public sendMessage(message: string): void { }\r\n\r\n    public async sendNetworkMessage(path: string, payload: string | ArrayBuffer): Promise<void> {\r\n        const type: MessageType = typeof payload === \"string\" ? MessageType.Text : MessageType.Binary;\r\n        const contentType: string = typeof payload === \"string\" ? \"application/json\" : \"\";\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        return connection.send(new SpeechConnectionMessage(type, path, this.privRequestSession.requestId, contentType, payload));\r\n    }\r\n\r\n    public set activityTemplate(messagePayload: string) { this.privActivityTemplate = messagePayload; }\r\n    public get activityTemplate(): string { return this.privActivityTemplate; }\r\n\r\n    protected abstract processTypeSpecificMessages(\r\n        connectionMessage: SpeechConnectionMessage,\r\n        successCallback?: (e: SpeechRecognitionResult) => void,\r\n        errorCallBack?: (e: string) => void): Promise<boolean>;\r\n\r\n    protected async sendTelemetryData(): Promise<void> {\r\n        const telemetryData = this.privRequestSession.getTelemetry();\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true ||\r\n            this.privIsDisposed ||\r\n            null === telemetryData) {\r\n            return;\r\n        }\r\n\r\n        if (!!ServiceRecognizerBase.telemetryData) {\r\n            try {\r\n                ServiceRecognizerBase.telemetryData(telemetryData);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"telemetry\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            telemetryData));\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected abstract cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void;\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognitionLocal(\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n\r\n            this.cancelRecognition(\r\n                this.privRequestSession.sessionId,\r\n                this.privRequestSession.requestId,\r\n                cancellationReason,\r\n                errorCode,\r\n                error);\r\n        }\r\n    }\r\n\r\n    protected receiveMessageOverride: () => Promise<void> = undefined;\r\n\r\n    protected async receiveMessage(): Promise<void> {\r\n        try {\r\n            if (this.privIsDisposed) {\r\n                // We're done.\r\n                return;\r\n            }\r\n\r\n            let connection = await this.fetchConnection();\r\n            const message = await connection.read();\r\n\r\n            if (this.receiveMessageOverride !== undefined) {\r\n                return this.receiveMessageOverride();\r\n            }\r\n\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!message) {\r\n                if (!this.privRequestSession.isRecognizing) {\r\n                    return;\r\n                } else {\r\n                    return this.receiveMessage();\r\n                }\r\n            }\r\n\r\n            this.privServiceHasSentMessage = true;\r\n            const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n            if (connectionMessage.requestId.toLowerCase() === this.privRequestSession.requestId.toLowerCase()) {\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        this.privMustReportEndOfStream = true;\r\n                        this.privRequestSession.onServiceTurnStartResponse();\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n                        let json: string;\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n                        // Only shrink the buffers for continuous recognition.\r\n                        // For single shot, the speech.phrase message will come after the speech.end and it should own buffer shrink.\r\n                        if (this.privRecognizerConfig.isContinuousRecognition) {\r\n                            this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\r\n                        }\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        await this.sendTelemetryData();\r\n                        if (this.privRequestSession.isSpeechEnded && this.privMustReportEndOfStream) {\r\n                            this.privMustReportEndOfStream = false;\r\n                            await this.cancelRecognitionLocal(CancellationReason.EndOfStream, CancellationErrorCode.NoError, undefined);\r\n                        }\r\n                        const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                        await this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition);\r\n                        if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                            if (!!this.privRecognizer.sessionStopped) {\r\n                                this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                            }\r\n                            return;\r\n                        } else {\r\n                            connection = await this.fetchConnection();\r\n                            await this.sendPrePayloadJSON(connection);\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        if (!await this.processTypeSpecificMessages(connectionMessage)) {\r\n                            // here are some messages that the derived class has not processed, dispatch them to connect class\r\n                            if (!!this.privServiceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            return this.receiveMessage();\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    protected sendSpeechContext = (connection: IConnection): Promise<void> => {\r\n        const speechContextJson = this.speechContext.toJSON();\r\n        this.privRequestSession.onSpeechContext();\r\n\r\n        if (speechContextJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.context\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechContextJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    protected sendPrePayloadJSONOverride: (connection: IConnection) => Promise<void> = undefined;\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendPrePayloadJSON(connection: IConnection): Promise<void> {\r\n        if (this.sendPrePayloadJSONOverride !== undefined) {\r\n            return this.sendPrePayloadJSONOverride(connection);\r\n        }\r\n\r\n        await this.sendSpeechContext(connection);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected async sendWaveHeader(connection: IConnection): Promise<void> {\r\n        const format: AudioStreamFormatImpl = await this.audioSource.format;\r\n        // this.writeBufferToConsole(format.header);\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Binary,\r\n            \"audio\",\r\n            this.privRequestSession.requestId,\r\n            \"audio/x-wav\",\r\n            format.header\r\n        ));\r\n    }\r\n\r\n    protected postConnectImplOverride: (connection: Promise<IConnection>) => Promise<IConnection> = undefined;\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    protected connectImpl(): Promise<IConnection> {\r\n        if (this.privConnectionPromise) {\r\n            return this.privConnectionPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionPromise = null;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.connectImpl();\r\n                }\r\n                return this.privConnectionPromise;\r\n            }, (error: string): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionPromise = null;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.connectImpl();\r\n            });\r\n        }\r\n\r\n        this.privConnectionPromise = this.retryableConnect();\r\n\r\n        // Attach an empty handler to allow the promise to run in the background while\r\n        // other startup events happen. It'll eventually be awaited on.\r\n        this.privConnectionPromise.catch(() => { });\r\n\r\n        if (this.postConnectImplOverride !== undefined) {\r\n            return this.postConnectImplOverride(this.privConnectionPromise);\r\n        }\r\n\r\n        return this.privConnectionPromise;\r\n    }\r\n\r\n    protected configConnectionOverride: (connection: IConnection) => Promise<IConnection> = undefined;\r\n\r\n    protected sendSpeechServiceConfig = (connection: IConnection, requestSession: RequestSession, SpeechServiceConfigJson: string): Promise<void> => {\r\n        // filter out anything that is not required for the service to work.\r\n        if (ServiceRecognizerBase.telemetryDataEnabled !== true) {\r\n            const withTelemetry = JSON.parse(SpeechServiceConfigJson);\r\n\r\n            const replacement: any = {\r\n                context: {\r\n                    system: withTelemetry.context.system,\r\n                },\r\n            };\r\n\r\n            SpeechServiceConfigJson = JSON.stringify(replacement);\r\n        }\r\n\r\n        if (this.privRecognizerConfig.parameters.getProperty(\"TranscriptionService_SingleChannel\", \"false\").toLowerCase() === \"true\") {\r\n            const json: { context: any } = JSON.parse(SpeechServiceConfigJson);\r\n            json.context.DisableReferenceChannel = \"True\";\r\n            json.context.MicSpec = \"1_0_0\";\r\n            SpeechServiceConfigJson = JSON.stringify(json);\r\n        }\r\n\r\n        if (SpeechServiceConfigJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.config\",\r\n                requestSession.requestId,\r\n                \"application/json\",\r\n                SpeechServiceConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    protected async fetchConnection(): Promise<IConnection> {\r\n        if (this.privConnectionConfigurationPromise) {\r\n            return this.privConnectionConfigurationPromise.then((connection: IConnection): Promise<IConnection> => {\r\n                if (connection.state() === ConnectionState.Disconnected) {\r\n                    this.privConnectionId = null;\r\n                    this.privConnectionConfigurationPromise = null;\r\n                    this.privServiceHasSentMessage = false;\r\n                    return this.fetchConnection();\r\n                }\r\n                return this.privConnectionConfigurationPromise;\r\n            }, (error: string): Promise<IConnection> => {\r\n                this.privConnectionId = null;\r\n                this.privConnectionConfigurationPromise = null;\r\n                this.privServiceHasSentMessage = false;\r\n                return this.fetchConnection();\r\n            });\r\n        }\r\n\r\n        this.privConnectionConfigurationPromise = this.configureConnection();\r\n        return await this.privConnectionConfigurationPromise;\r\n    }\r\n\r\n    protected async sendAudio(audioStreamNode: IAudioStreamNode): Promise<void> {\r\n        const audioFormat: AudioStreamFormatImpl = await this.audioSource.format;\r\n\r\n        // The time we last sent data to the service.\r\n        let nextSendTime: number = Date.now();\r\n\r\n        // Max amount to send before we start to throttle\r\n        const fastLaneSizeMs: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-TransmitLengthBeforThrottleMs\", \"5000\");\r\n        const maxSendUnthrottledBytes: number = audioFormat.avgBytesPerSec / 1000 * parseInt(fastLaneSizeMs, 10);\r\n        const startRecogNumber: number = this.privRequestSession.recogNumber;\r\n\r\n        const readAndUploadCycle = async (): Promise<void> => {\r\n            // If speech is done, stop sending audio.\r\n            if (!this.privIsDisposed &&\r\n                !this.privRequestSession.isSpeechEnded &&\r\n                this.privRequestSession.isRecognizing &&\r\n                this.privRequestSession.recogNumber === startRecogNumber) {\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const audioStreamChunk: IStreamChunk<ArrayBuffer> = await audioStreamNode.read();\r\n                // we have a new audio chunk to upload.\r\n                if (this.privRequestSession.isSpeechEnded) {\r\n                    // If service already recognized audio end then don't send any more audio\r\n                    return;\r\n                }\r\n\r\n                let payload: ArrayBuffer;\r\n                let sendDelay: number;\r\n\r\n                if (!audioStreamChunk || audioStreamChunk.isEnd) {\r\n                    payload = null;\r\n                    sendDelay = 0;\r\n                } else {\r\n                    payload = audioStreamChunk.buffer;\r\n\r\n                    this.privRequestSession.onAudioSent(payload.byteLength);\r\n\r\n                    if (maxSendUnthrottledBytes >= this.privRequestSession.bytesSent) {\r\n                        sendDelay = 0;\r\n                    } else {\r\n                        sendDelay = Math.max(0, nextSendTime - Date.now());\r\n                    }\r\n                }\r\n\r\n                if (0 !== sendDelay) {\r\n                    await this.delay(sendDelay);\r\n                }\r\n\r\n                if (payload !== null) {\r\n                    nextSendTime = Date.now() + (payload.byteLength * 1000 / (audioFormat.avgBytesPerSec * 2));\r\n                }\r\n\r\n                // Are we still alive?\r\n                if (!this.privIsDisposed &&\r\n                    !this.privRequestSession.isSpeechEnded &&\r\n                    this.privRequestSession.isRecognizing &&\r\n                    this.privRequestSession.recogNumber === startRecogNumber) {\r\n                    connection.send(\r\n                        new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, payload)\r\n                    ).catch(() => {\r\n                        this.privRequestSession.onServiceTurnEndResponse(this.privRecognizerConfig.isContinuousRecognition).catch(() => { });\r\n                    });\r\n\r\n                    if (!audioStreamChunk?.isEnd) {\r\n                        // this.writeBufferToConsole(payload);\r\n                        // Regardless of success or failure, schedule the next upload.\r\n                        // If the underlying connection was broken, the next cycle will\r\n                        // get a new connection and re-transmit missing audio automatically.\r\n                        return readAndUploadCycle();\r\n                    } else {\r\n                        // the audio stream has been closed, no need to schedule next\r\n                        // read-upload cycle.\r\n                        if (!this.privIsLiveAudio) {\r\n                            this.privRequestSession.onSpeechEnded();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        return readAndUploadCycle();\r\n    }\r\n\r\n    private async retryableConnect(): Promise<IConnection> {\r\n        let isUnAuthorized: boolean = false;\r\n\r\n        this.privAuthFetchEventId = createNoDashGuid();\r\n        const sessionId: string = this.privRequestSession.sessionId;\r\n        this.privConnectionId = (sessionId !== undefined) ? sessionId : createNoDashGuid();\r\n\r\n        this.privRequestSession.onPreConnectionStart(this.privAuthFetchEventId, this.privConnectionId);\r\n        let lastStatusCode: number = 0;\r\n        let lastReason: string = \"\";\r\n\r\n        while (this.privRequestSession.numConnectionAttempts <= this.privRecognizerConfig.maxRetryCount) {\r\n\r\n            // Get the auth information for the connection. This is a bit of overkill for the current API surface, but leaving the plumbing in place to be able to raise a developer-customer\r\n            // facing event when a connection fails to let them try and provide new auth information.\r\n            const authPromise = isUnAuthorized ? this.privAuthentication.fetchOnExpiry(this.privAuthFetchEventId) : this.privAuthentication.fetch(this.privAuthFetchEventId);\r\n            const auth: AuthInfo = await authPromise;\r\n\r\n            await this.privRequestSession.onAuthCompleted(false);\r\n\r\n            // Create the connection\r\n            const connection: IConnection = this.privConnectionFactory.create(this.privRecognizerConfig, auth, this.privConnectionId);\r\n            // Attach the telemetry handlers.\r\n            this.privRequestSession.listenForServiceTelemetry(connection.events);\r\n\r\n            // Attach to the underlying event. No need to hold onto the detach pointers as in the event the connection goes away,\r\n            // it'll stop sending events.\r\n            connection.events.attach((event: ConnectionEvent) => {\r\n                this.connectionEvents.onEvent(event);\r\n            });\r\n\r\n            const response: ConnectionOpenResponse = await connection.open();\r\n            // 200 == everything is fine.\r\n            if (response.statusCode === 200) {\r\n                await this.privRequestSession.onConnectionEstablishCompleted(response.statusCode);\r\n                return Promise.resolve(connection);\r\n            } else if (response.statusCode === 1006) {\r\n                isUnAuthorized = true;\r\n            }\r\n\r\n            lastStatusCode = response.statusCode;\r\n            lastReason = response.reason;\r\n\r\n            this.privRequestSession.onRetryConnection();\r\n        }\r\n\r\n        await this.privRequestSession.onConnectionEstablishCompleted(lastStatusCode, lastReason);\r\n        return Promise.reject(`Unable to contact server. StatusCode: ${lastStatusCode}, ${this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint)} Reason: ${lastReason}`);\r\n    }\r\n\r\n    private delay(delayMs: number): Promise<void> {\r\n        return new Promise((resolve: () => void, reject: (error: string) => void) => {\r\n            this.privSetTimeout(resolve, delayMs);\r\n        });\r\n    }\r\n\r\n    private writeBufferToConsole(buffer: ArrayBuffer): void {\r\n        let out: string = \"Buffer Size: \";\r\n        if (null === buffer) {\r\n            out += \"null\";\r\n        } else {\r\n            const readView: Uint8Array = new Uint8Array(buffer);\r\n            out += buffer.byteLength + \"\\r\\n\";\r\n            for (let i: number = 0; i < buffer.byteLength; i++) {\r\n                out += readView[i].toString(16).padStart(2, \"0\") + \" \";\r\n            }\r\n        }\r\n        // tslint:disable-next-line:no-console\r\n        console.info(out);\r\n    }\r\n\r\n    private async sendFinalAudio(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(MessageType.Binary, \"audio\", this.privRequestSession.requestId, null, null));\r\n        return;\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configureConnection(): Promise<IConnection> {\r\n        const connection: IConnection = await this.connectImpl();\r\n        if (this.configConnectionOverride !== undefined) {\r\n            return this.configConnectionOverride(connection);\r\n        }\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendPrePayloadJSON(connection);\r\n        return connection;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IDynamicGrammar,\r\n    IDynamicGrammarGeneric,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Responsible for building the object to be sent to the speech service to support dynamic grammars.\r\n * @class DynamicGrammarBuilder\r\n */\r\nexport class DynamicGrammarBuilder {\r\n\r\n    private privPhrases: string[];\r\n    private privGrammars: string[];\r\n\r\n    // Adds one more reference phrases to the dynamic grammar to send.\r\n    // All added phrases are generic phrases.\r\n    public addPhrase(phrase: string | string[]): void {\r\n        if (!this.privPhrases) {\r\n            this.privPhrases = [];\r\n        }\r\n\r\n        if (phrase instanceof Array) {\r\n            this.privPhrases = this.privPhrases.concat(phrase as string[]);\r\n        } else {\r\n            this.privPhrases.push(phrase as string);\r\n        }\r\n    }\r\n\r\n    // Clears all phrases stored in the current object.\r\n    public clearPhrases(): void {\r\n        this.privPhrases = undefined;\r\n    }\r\n\r\n    // Adds one or more reference grammars to the current grammar.\r\n    public addReferenceGrammar(grammar: string | string[]): void {\r\n        if (!this.privGrammars) {\r\n            this.privGrammars = [];\r\n        }\r\n\r\n        if (grammar instanceof Array) {\r\n            this.privGrammars = this.privGrammars.concat(grammar as string[]);\r\n        } else {\r\n            this.privGrammars.push(grammar as string);\r\n        }\r\n    }\r\n\r\n    // clears all grammars stored on the recognizer.\r\n    public clearGrammars(): void {\r\n        this.privGrammars = undefined;\r\n    }\r\n\r\n    // Generates an object that represents the dynamic grammar used by the Speech Service.\r\n    // This is done by building an object with the correct layout based on the phrases and reference grammars added to this instance\r\n    // of a DynamicGrammarBuilder\r\n    public generateGrammarObject(): IDynamicGrammar {\r\n        if (this.privGrammars === undefined && this.privPhrases === undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        const retObj: IDynamicGrammar = {};\r\n        retObj.ReferenceGrammars = this.privGrammars;\r\n\r\n        if (undefined !== this.privPhrases && 0 !== this.privPhrases.length) {\r\n            const retPhrases: IDynamicGrammarGeneric[] = [];\r\n\r\n            this.privPhrases.forEach((value: string, index: number, array: string[]): void => {\r\n                retPhrases.push({\r\n                    Text: value,\r\n                });\r\n            });\r\n\r\n            retObj.Groups = [{ Type: \"Generic\", Items: retPhrases }];\r\n        }\r\n\r\n        return retObj;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    DynamicGrammarBuilder,\r\n    IDynamicGrammar,\r\n} from \"./Exports\";\r\n\r\n/**\r\n * Represents the JSON used in the speech.context message sent to the speech service.\r\n * The dynamic grammar is always refreshed from the encapsulated dynamic grammar object.\r\n */\r\nexport class SpeechContext {\r\n    private privContext: { [section: string]: any } = {};\r\n    private privDynamicGrammar: DynamicGrammarBuilder;\r\n\r\n    constructor(dynamicGrammar: DynamicGrammarBuilder) {\r\n        this.privDynamicGrammar = dynamicGrammar;\r\n    }\r\n\r\n    /**\r\n     * Adds a section to the speech.context object.\r\n     * @param sectionName Name of the section to add.\r\n     * @param value JSON serializable object that represents the value.\r\n     */\r\n    public setSection(sectionName: string, value: any): void {\r\n        this.privContext[sectionName] = value;\r\n    }\r\n\r\n    /**\r\n     * @Internal\r\n     * This is only used by pronunciation assessment config.\r\n     * Do not use externally, object returned will change without warning or notice.\r\n     */\r\n    public setPronunciationAssessmentParams(params: string): void {\r\n        if (this.privContext.phraseDetection === undefined) {\r\n            this.privContext.phraseDetection = {\r\n                enrichment: {\r\n                    pronunciationAssessment: {}\r\n                }\r\n            };\r\n        }\r\n        this.privContext.phraseDetection.enrichment.pronunciationAssessment = JSON.parse(params);\r\n        if (this.privContext.phraseOutput === undefined) {\r\n            this.privContext.phraseOutput = {\r\n                detailed: {\r\n                    options: []\r\n                },\r\n                format: {}\r\n            };\r\n        }\r\n        this.privContext.phraseOutput.format = \"Detailed\";\r\n        this.privContext.phraseOutput.detailed.options.push(\"PronunciationAssessment\");\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(\"WordTimings\") === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(\"WordTimings\");\r\n        }\r\n        if (this.privContext.phraseOutput.detailed.options.indexOf(\"SNR\") === -1) {\r\n            this.privContext.phraseOutput.detailed.options.push(\"SNR\");\r\n        }\r\n    }\r\n\r\n    public toJSON(): string {\r\n\r\n        const dgi: IDynamicGrammar = this.privDynamicGrammar.generateGrammarObject();\r\n        this.setSection(\"dgi\", dgi);\r\n\r\n        const ret: string = JSON.stringify(this.privContext);\r\n        return ret;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// speech.endDetected\r\nexport interface ISpeechDetected {\r\n    Offset: number;\r\n}\r\n\r\nexport class SpeechDetected implements ISpeechDetected {\r\n    private privSpeechStartDetected: ISpeechDetected;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechStartDetected = JSON.parse(json);\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechDetected {\r\n        return new SpeechDetected(json);\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechStartDetected.Offset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n} from \"../common/Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    AuthInfo,\r\n    IAuthentication\r\n} from \"./IAuthentication\";\r\n\r\n/**\r\n * @class\r\n */\r\nexport class CognitiveSubscriptionKeyAuthentication implements IAuthentication {\r\n    private privAuthInfo: AuthInfo;\r\n\r\n    /**\r\n     * Creates and initializes an instance of the CognitiveSubscriptionKeyAuthentication class.\r\n     * @constructor\r\n     * @param {string} subscriptionKey - The subscription key\r\n     */\r\n    constructor(subscriptionKey: string) {\r\n        if (!subscriptionKey) {\r\n            throw new ArgumentNullError(\"subscriptionKey\");\r\n        }\r\n\r\n        this.privAuthInfo = new AuthInfo(HeaderNames.AuthKey, subscriptionKey);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    public fetch = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n\r\n    /**\r\n     * Fetches the subscription key.\r\n     * @member\r\n     * @function\r\n     * @public\r\n     * @param {string} authFetchEventId - The id to fetch.\r\n     */\r\n    public fetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return Promise.resolve(this.privAuthInfo);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError } from \"../common/Exports\";\r\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\r\n\r\nconst AuthHeader: string = \"Authorization\";\r\n\r\nexport class CognitiveTokenAuthentication implements IAuthentication {\r\n    private static privTokenPrefix: string = \"bearer \";\r\n    private privFetchCallback: (authFetchEventId: string) => Promise<string>;\r\n    private privFetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\r\n\r\n    constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\r\n        if (!fetchCallback) {\r\n            throw new ArgumentNullError(\"fetchCallback\");\r\n        }\r\n\r\n        if (!fetchOnExpiryCallback) {\r\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\r\n        }\r\n\r\n        this.privFetchCallback = fetchCallback;\r\n        this.privFetchOnExpiryCallback = fetchOnExpiryCallback;\r\n    }\r\n\r\n    public fetch = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return this.privFetchCallback(authFetchEventId).then((token: string) => new AuthInfo(AuthHeader, CognitiveTokenAuthentication.privTokenPrefix + token));\r\n    }\r\n\r\n    public fetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\r\n        return this.privFetchOnExpiryCallback(authFetchEventId).then((token: string) => new AuthInfo(AuthHeader, CognitiveTokenAuthentication.privTokenPrefix + token));\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    ForceDictationPropertyName,\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognitionMode,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class SpeechConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly interactiveRelativeUri: string = \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n    private readonly conversationRelativeUri: string = \"/speech/recognition/conversation/cognitiveservices/v1\";\r\n    private readonly dictationRelativeUri: string = \"/speech/recognition/dictation/cognitiveservices/v1\";\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".stt.speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        if (!endpoint || endpoint.search(QueryParameterNames.Format) === -1) {\r\n            queryParams[QueryParameterNames.Format] = config.parameters.getProperty(OutputFormatPropertyName, OutputFormat[OutputFormat.Simple]).toLowerCase();\r\n        }\r\n\r\n        if (config.autoDetectSourceLanguages !== undefined) {\r\n            queryParams[QueryParameterNames.EnableLanguageId] = \"true\";\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        if (!endpoint) {\r\n            switch (config.recognitionMode) {\r\n                case RecognitionMode.Conversation:\r\n                    if (config.parameters.getProperty(ForceDictationPropertyName, \"false\") === \"true\") {\r\n                        endpoint = host + this.dictationRelativeUri;\r\n                    } else {\r\n                        endpoint = host + this.conversationRelativeUri;\r\n                    }\r\n                    break;\r\n                case RecognitionMode.Dictation:\r\n                    endpoint = host + this.dictationRelativeUri;\r\n                    break;\r\n                default:\r\n                    endpoint = host + this.interactiveRelativeUri; // default is interactive\r\n                    break;\r\n            }\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionMessage,\r\n    Deferred,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\n\r\nconst CRLF: string = \"\\r\\n\";\r\n\r\nexport class WebsocketMessageFormatter implements IWebsocketMessageFormatter {\r\n\r\n    public toConnectionMessage = (message: RawWebsocketMessage): Promise<ConnectionMessage> => {\r\n        const deferral = new Deferred<ConnectionMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const textMessage: string = message.textContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: string = null;\r\n\r\n                if (textMessage) {\r\n                    const headerBodySplit = textMessage.split(\"\\r\\n\\r\\n\");\r\n                    if (headerBodySplit && headerBodySplit.length > 0) {\r\n                        headers = this.parseHeaders(headerBodySplit[0]);\r\n                        if (headerBodySplit.length > 1) {\r\n                            body = headerBodySplit[1];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const binaryMessage: ArrayBuffer = message.binaryContent;\r\n                let headers: IStringDictionary<string> = {};\r\n                let body: ArrayBuffer = null;\r\n\r\n                if (!binaryMessage || binaryMessage.byteLength < 2) {\r\n                    throw new Error(\"Invalid binary message format. Header length missing.\");\r\n                }\r\n\r\n                const dataView = new DataView(binaryMessage);\r\n                const headerLength = dataView.getInt16(0);\r\n\r\n                if (binaryMessage.byteLength < headerLength + 2) {\r\n                    throw new Error(\"Invalid binary message format. Header content missing.\");\r\n                }\r\n\r\n                let headersString = \"\";\r\n                for (let i = 0; i < headerLength; i++) {\r\n                    headersString += String.fromCharCode((dataView).getInt8(i + 2));\r\n                }\r\n\r\n                headers = this.parseHeaders(headersString);\r\n\r\n                if (binaryMessage.byteLength > headerLength + 2) {\r\n                    body = binaryMessage.slice(2 + headerLength);\r\n                }\r\n\r\n                deferral.resolve(new ConnectionMessage(message.messageType, body, headers, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. Error: ${e}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    public fromConnectionMessage = (message: ConnectionMessage): Promise<RawWebsocketMessage> => {\r\n        const deferral = new Deferred<RawWebsocketMessage>();\r\n\r\n        try {\r\n            if (message.messageType === MessageType.Text) {\r\n                const payload = `${this.makeHeaders(message)}${CRLF}${message.textBody ? message.textBody : \"\"}`;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Text, payload, message.id));\r\n\r\n            } else if (message.messageType === MessageType.Binary) {\r\n                const headersString = this.makeHeaders(message);\r\n                const content = message.binaryBody;\r\n\r\n                const headerBuffer = this.stringToArrayBuffer(headersString);\r\n                const headerInt8Array = new Int8Array(headerBuffer);\r\n                const headerLength = headerInt8Array.byteLength;\r\n\r\n                const payloadInt8Array = new Int8Array(2 + headerLength + (content ? content.byteLength : 0));\r\n                payloadInt8Array[0] = ((headerLength >> 8) & 0xff);\r\n                payloadInt8Array[1] = headerLength & 0xff;\r\n                payloadInt8Array.set(headerInt8Array, 2);\r\n\r\n                if (content) {\r\n                    const bodyInt8Array = new Int8Array(content);\r\n                    payloadInt8Array.set(bodyInt8Array, 2 + headerLength);\r\n                }\r\n\r\n                const payload: ArrayBuffer = payloadInt8Array.buffer;\r\n\r\n                deferral.resolve(new RawWebsocketMessage(MessageType.Binary, payload, message.id));\r\n            }\r\n        } catch (e) {\r\n            deferral.reject(`Error formatting the message. ${e}`);\r\n        }\r\n\r\n        return deferral.promise;\r\n    }\r\n\r\n    private makeHeaders = (message: ConnectionMessage): string => {\r\n        let headersString: string = \"\";\r\n\r\n        if (message.headers) {\r\n            for (const header in message.headers) {\r\n                if (header) {\r\n                    headersString += `${header}: ${message.headers[header]}${CRLF}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        return headersString;\r\n    }\r\n\r\n    private parseHeaders = (headersString: string): IStringDictionary<string> => {\r\n        const headers: IStringDictionary<string> = {};\r\n\r\n        if (headersString) {\r\n            const headerMatches = headersString.match(/[^\\r\\n]+/g);\r\n            if (headers) {\r\n                for (const header of headerMatches) {\r\n                    if (header) {\r\n                        const separatorIndex = header.indexOf(\":\");\r\n                        const headerName = separatorIndex > 0 ? header.substr(0, separatorIndex).trim().toLowerCase() : header;\r\n                        const headerValue =\r\n                            separatorIndex > 0 && header.length > (separatorIndex + 1) ?\r\n                                header.substr(separatorIndex + 1).trim() :\r\n                                \"\";\r\n\r\n                        headers[headerName] = headerValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return headers;\r\n    }\r\n\r\n    private stringToArrayBuffer = (str: string): ArrayBuffer => {\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new DataView(buffer);\r\n        for (let i = 0; i < str.length; i++) {\r\n            view.setUint8(i, str.charCodeAt(i));\r\n        }\r\n        return buffer;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IAudioSource } from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    SpeechRecognizer,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class SpeechServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privSpeechRecognizer: SpeechRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        speechRecognizer: SpeechRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, speechRecognizer);\r\n        this.privSpeechRecognizer = speechRecognizer;\r\n        if (recognizerConfig.autoDetectSourceLanguages !== undefined) {\r\n            const sourceLanguages: string[] = recognizerConfig.autoDetectSourceLanguages.split(\",\");\r\n            this.privSpeechContext.setSection(\"languageId\", {\r\n                languages: sourceLanguages,\r\n                onSuccess: { action: \"Recognize\" },\r\n                onUnknown: { action: \"None\" }\r\n            });\r\n            this.privSpeechContext.setSection(\"phraseOutput\", {\r\n                interimResults: {\r\n                    resultType: \"Auto\"\r\n                },\r\n                phraseResults: {\r\n                    resultType: \"Always\"\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined, // Speaker Id\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privSpeechRecognizer.recognizing) {\r\n                    try {\r\n                        this.privSpeechRecognizer.recognizing(this.privSpeechRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.RecognitionStatus === RecognitionStatus.Success ? detailed.NBest[0].Display : undefined,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                undefined, // Speaker Id\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privSpeechRecognizer.recognized) {\r\n                            try {\r\n                                this.privSpeechRecognizer.recognized(this.privSpeechRecognizer, event);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privSpeechRecognizer.canceled) {\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privSpeechRecognizer.canceled(this.privSpeechRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage } from \"./SimpleSpeechPhrase\";\r\n\r\n// speech.hypothesis\r\nexport interface ISpeechHypothesis {\r\n    Text: string;\r\n    Offset: number;\r\n    Duration: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport class SpeechHypothesis implements ISpeechHypothesis {\r\n    private privSpeechHypothesis: ISpeechHypothesis;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechHypothesis = JSON.parse(json);\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechHypothesis {\r\n        return new SpeechHypothesis(json);\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privSpeechHypothesis.Text;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechHypothesis.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSpeechHypothesis.Duration;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Language;\r\n    }\r\n\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privSpeechHypothesis.PrimaryLanguage === undefined ? undefined : this.privSpeechHypothesis.PrimaryLanguage.Confidence;\r\n    }\r\n\r\n    public get SpeakerId(): string {\r\n        return this.privSpeechHypothesis.SpeakerId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognitionStatus } from \"../Exports\";\r\n\r\n// speech.phrase\r\nexport interface ISimpleSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    DisplayText: string;\r\n    Offset?: number;\r\n    Duration?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPrimaryLanguage {\r\n    Language: string;\r\n    Confidence: string;\r\n}\r\n\r\nexport class SimpleSpeechPhrase implements ISimpleSpeechPhrase {\r\n    private privSimpleSpeechPhrase: ISimpleSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privSimpleSpeechPhrase = JSON.parse(json);\r\n        this.privSimpleSpeechPhrase.RecognitionStatus = (RecognitionStatus as any)[this.privSimpleSpeechPhrase.RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): SimpleSpeechPhrase {\r\n        return new SimpleSpeechPhrase(json);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privSimpleSpeechPhrase.RecognitionStatus;\r\n    }\r\n\r\n    public get DisplayText(): string {\r\n        return this.privSimpleSpeechPhrase.DisplayText;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSimpleSpeechPhrase.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSimpleSpeechPhrase.Duration;\r\n    }\r\n\r\n    public get Language(): string {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privSimpleSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privSimpleSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n\r\n    public get SpeakerId(): string {\r\n        return this.privSimpleSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * @class SynthesisStatus\r\n * @private\r\n */\r\nexport enum SynthesisStatus {\r\n    /**\r\n     * The response contains valid audio data.\r\n     * @member SynthesisStatus.Success\r\n     */\r\n    Success,\r\n\r\n    /**\r\n     * Indicates the end of audio data. No valid audio data is included in the message.\r\n     * @member SynthesisStatus.SynthesisEnd\r\n     */\r\n    SynthesisEnd,\r\n\r\n    /**\r\n     * Indicates an error occurred during synthesis data processing.\r\n     * @member SynthesisStatus.Error\r\n     */\r\n    Error,\r\n}\r\n\r\nexport enum RecognitionStatus {\r\n    Success,\r\n    NoMatch,\r\n    InitialSilenceTimeout,\r\n    BabbleTimeout,\r\n    Error,\r\n    EndOfDictation,\r\n    TooManyRequests,\r\n    BadRequest,\r\n    Forbidden,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ResultReason\r\n} from \"../sdk/Exports\";\r\nimport { RecognitionStatus } from \"./Exports\";\r\n\r\nexport class EnumTranslation {\r\n    public static implTranslateRecognitionResult(recognitionStatus: RecognitionStatus): ResultReason {\r\n        let reason = ResultReason.Canceled;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n                reason = ResultReason.RecognizedSpeech;\r\n                break;\r\n            case RecognitionStatus.NoMatch:\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.EndOfDictation:\r\n                reason = ResultReason.NoMatch;\r\n                break;\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = ResultReason.Canceled;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelResult(recognitionStatus: RecognitionStatus): CancellationReason {\r\n        let reason = CancellationReason.EndOfStream;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Success:\r\n            case RecognitionStatus.EndOfDictation:\r\n            case RecognitionStatus.NoMatch:\r\n                reason = CancellationReason.EndOfStream;\r\n                break;\r\n            case RecognitionStatus.InitialSilenceTimeout:\r\n            case RecognitionStatus.BabbleTimeout:\r\n            case RecognitionStatus.Error:\r\n            case RecognitionStatus.BadRequest:\r\n            case RecognitionStatus.Forbidden:\r\n            default:\r\n                reason = CancellationReason.Error;\r\n                break;\r\n        }\r\n        return reason;\r\n    }\r\n\r\n    public static implTranslateCancelErrorCode(recognitionStatus: RecognitionStatus): CancellationErrorCode {\r\n        let reason: CancellationErrorCode = CancellationErrorCode.NoError;\r\n        switch (recognitionStatus) {\r\n            case RecognitionStatus.Error:\r\n                reason = CancellationErrorCode.ServiceError;\r\n                break;\r\n            case RecognitionStatus.TooManyRequests:\r\n                reason = CancellationErrorCode.TooManyRequests;\r\n                break;\r\n            case RecognitionStatus.BadRequest:\r\n                reason = CancellationErrorCode.BadRequestParameters;\r\n                break;\r\n            case RecognitionStatus.Forbidden:\r\n                reason = CancellationErrorCode.Forbidden;\r\n                break;\r\n            default:\r\n                reason = CancellationErrorCode.NoError;\r\n                break;\r\n        }\r\n\r\n        return reason;\r\n\r\n    }\r\n\r\n    public static implTranslateErrorDetails(cancellationErrorCode: CancellationErrorCode): string {\r\n        let errorDetails: string = \"The speech service encountered an internal error and could not continue.\";\r\n        switch (cancellationErrorCode) {\r\n            case CancellationErrorCode.Forbidden:\r\n                errorDetails = \"The recognizer is using a free subscription that ran out of quota.\";\r\n                break;\r\n            case CancellationErrorCode.BadRequestParameters:\r\n                errorDetails = \"Invalid parameter or unsupported audio format in the request.\";\r\n                break;\r\n            case CancellationErrorCode.TooManyRequests:\r\n                errorDetails = \"The number of parallel requests exceeded the number of allowed concurrent transcriptions.\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return errorDetails;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IPrimaryLanguage, RecognitionStatus } from \"../Exports\";\r\n\r\n// speech.phrase for detailed\r\nexport interface IDetailedSpeechPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    NBest: IPhrase[];\r\n    Duration?: number;\r\n    Offset?: number;\r\n    PrimaryLanguage?: IPrimaryLanguage;\r\n    DisplayText?: string;\r\n    SpeakerId?: string;\r\n}\r\n\r\nexport interface IPhrase {\r\n    Confidence?: number;\r\n    Lexical: string;\r\n    ITN: string;\r\n    MaskedITN: string;\r\n    Display: string;\r\n    Words?: IWord[];\r\n}\r\n\r\nexport interface IWord {\r\n    Word: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class DetailedSpeechPhrase implements IDetailedSpeechPhrase {\r\n    private privDetailedSpeechPhrase: IDetailedSpeechPhrase;\r\n\r\n    private constructor(json: string) {\r\n        this.privDetailedSpeechPhrase = JSON.parse(json);\r\n        this.privDetailedSpeechPhrase.RecognitionStatus = (RecognitionStatus as any)[this.privDetailedSpeechPhrase.RecognitionStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): DetailedSpeechPhrase {\r\n        return new DetailedSpeechPhrase(json);\r\n    }\r\n\r\n    public getJsonWithCorrectedOffsets(baseOffset: number): string {\r\n        if (!!this.privDetailedSpeechPhrase.NBest) {\r\n            let firstWordOffset: number;\r\n            for (const phrase of this.privDetailedSpeechPhrase.NBest) {\r\n                if (!!phrase.Words && !!phrase.Words[0]) {\r\n                    firstWordOffset = phrase.Words[0].Offset;\r\n                    break;\r\n                }\r\n            }\r\n            if (!!firstWordOffset && firstWordOffset < baseOffset) {\r\n                const offset: number = baseOffset - firstWordOffset;\r\n                for (const details of this.privDetailedSpeechPhrase.NBest) {\r\n                    if (!!details.Words) {\r\n                        for (const word of details.Words) {\r\n                            word.Offset += offset;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return JSON.stringify(this.privDetailedSpeechPhrase);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privDetailedSpeechPhrase.RecognitionStatus;\r\n    }\r\n    public get NBest(): IPhrase[] {\r\n        return this.privDetailedSpeechPhrase.NBest;\r\n    }\r\n    public get Duration(): number {\r\n        return this.privDetailedSpeechPhrase.Duration;\r\n    }\r\n    public get Offset(): number {\r\n        return this.privDetailedSpeechPhrase.Offset;\r\n    }\r\n    public get Language(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Language;\r\n    }\r\n    public get LanguageDetectionConfidence(): string {\r\n        return this.privDetailedSpeechPhrase.PrimaryLanguage === undefined ? undefined : this.privDetailedSpeechPhrase.PrimaryLanguage.Confidence;\r\n    }\r\n    public get Text(): string {\r\n        return !!this.privDetailedSpeechPhrase.NBest && this.privDetailedSpeechPhrase.NBest[0] ? this.privDetailedSpeechPhrase.NBest[0].Display : this.privDetailedSpeechPhrase.DisplayText;\r\n    }\r\n    public get SpeakerId(): string {\r\n        return this.privDetailedSpeechPhrase.SpeakerId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\nexport class IntentConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_IntentRegion);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".sr.speech\" + hostSuffix);\r\n            endpoint = host + \"/speech/recognition/interactive/cognitiveservices/v1\";\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            format: \"simple\",\r\n            language: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n\r\n    private getSpeechRegionFromIntentRegion(intentRegion: string): string {\r\n        switch (intentRegion) {\r\n            case \"West US\":\r\n            case \"US West\":\r\n            case \"westus\":\r\n                return \"uswest\";\r\n            case \"West US 2\":\r\n            case \"US West 2\":\r\n            case \"westus2\":\r\n                return \"uswest2\";\r\n            case \"South Central US\":\r\n            case \"US South Central\":\r\n            case \"southcentralus\":\r\n                return \"ussouthcentral\";\r\n            case \"West Central US\":\r\n            case \"US West Central\":\r\n            case \"westcentralus\":\r\n                return \"uswestcentral\";\r\n            case \"East US\":\r\n            case \"US East\":\r\n            case \"eastus\":\r\n                return \"useast\";\r\n            case \"East US 2\":\r\n            case \"US East 2\":\r\n            case \"eastus2\":\r\n                return \"useast2\";\r\n            case \"West Europe\":\r\n            case \"Europe West\":\r\n            case \"westeurope\":\r\n                return \"europewest\";\r\n            case \"North Europe\":\r\n            case \"Europe North\":\r\n            case \"northeurope\":\r\n                return \"europenorth\";\r\n            case \"Brazil South\":\r\n            case \"South Brazil\":\r\n            case \"southbrazil\":\r\n                return \"brazilsouth\";\r\n            case \"Australia East\":\r\n            case \"East Australia\":\r\n            case \"eastaustralia\":\r\n                return \"australiaeast\";\r\n            case \"Southeast Asia\":\r\n            case \"Asia Southeast\":\r\n            case \"southeastasia\":\r\n                return \"asiasoutheast\";\r\n            case \"East Asia\":\r\n            case \"Asia East\":\r\n            case \"eastasia\":\r\n                return \"asiaeast\";\r\n            default:\r\n                return intentRegion;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { LanguageUnderstandingModelImpl } from \"../sdk/LanguageUnderstandingModel\";\r\n\r\n/**\r\n * @class AddedLmIntent\r\n */\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class AddedLmIntent {\r\n    public modelImpl: LanguageUnderstandingModelImpl;\r\n    public intentName: string;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param modelImpl - The model.\r\n     * @param intentName - The intent name.\r\n     */\r\n    public constructor(modelImpl: LanguageUnderstandingModelImpl, intentName: string) {\r\n        this.modelImpl = modelImpl;\r\n        this.intentName = intentName;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAudioSource,\r\n    MessageType,\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    IntentRecognitionCanceledEventArgs,\r\n    IntentRecognitionEventArgs,\r\n    IntentRecognitionResult,\r\n    IntentRecognizer,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    AddedLmIntent,\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    IntentResponse,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class IntentServiceRecognizer extends ServiceRecognizerBase {\r\n    private privIntentRecognizer: IntentRecognizer;\r\n    private privAddedLmIntents: { [id: string]: AddedLmIntent; };\r\n    private privIntentDataSent: boolean;\r\n    private privUmbrellaIntent: AddedLmIntent;\r\n    private privPendingIntentArgs: IntentRecognitionEventArgs;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        recognizer: IntentRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, recognizer);\r\n        this.privIntentRecognizer = recognizer;\r\n        this.privIntentDataSent = false;\r\n    }\r\n\r\n    public setIntents(addedIntents: { [id: string]: AddedLmIntent; }, umbrellaIntent: AddedLmIntent): void {\r\n        this.privAddedLmIntents = addedIntents;\r\n        this.privUmbrellaIntent = umbrellaIntent;\r\n        this.privIntentDataSent = true;\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: IntentRecognitionResult;\r\n        let ev: IntentRecognitionEventArgs;\r\n        let processed: boolean = false;\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n                const speechHypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingIntent,\r\n                    speechHypothesis.Text,\r\n                    speechHypothesis.Duration,\r\n                    speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                    speechHypothesis.Language,\r\n                    speechHypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(result.offset);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, speechHypothesis.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privIntentRecognizer.recognizing) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognizing(this.privIntentRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                result = new IntentRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus),\r\n                    simple.DisplayText,\r\n                    simple.Duration,\r\n                    simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                    simple.Language,\r\n                    simple.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                ev = new IntentRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                const sendEvent: () => void = () => {\r\n                    if (!!this.privIntentRecognizer.recognized) {\r\n                        try {\r\n                            this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                };\r\n\r\n                // If intent data was sent, the terminal result for this recognizer is an intent being found.\r\n                // If no intent data was sent, the terminal event is speech recognition being successful.\r\n                if (false === this.privIntentDataSent || ResultReason.NoMatch === ev.result.reason) {\r\n                    // Advance the buffers.\r\n                    this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n                    sendEvent();\r\n                } else {\r\n                    // Squirrel away the args, when the response event arrives it will build upon them\r\n                    // and then return\r\n                    this.privPendingIntentArgs = ev;\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"response\":\r\n                // Response from LUIS\r\n                ev = this.privPendingIntentArgs;\r\n                this.privPendingIntentArgs = undefined;\r\n\r\n                if (undefined === ev) {\r\n                    if (\"\" === connectionMessage.textBody) {\r\n                        // This condition happens if there is nothing but silence in the\r\n                        // audio sent to the service.\r\n                        return;\r\n                    }\r\n\r\n                    // Odd... Not sure this can happen\r\n                    ev = new IntentRecognitionEventArgs(new IntentRecognitionResult(), 0 /*TODO*/, this.privRequestSession.sessionId);\r\n                }\r\n\r\n                const intentResponse: IntentResponse = IntentResponse.fromJSON(connectionMessage.textBody);\r\n\r\n                // If LUIS didn't return anything, send the existing event, else\r\n                // modify it to show the match.\r\n                // See if the intent found is in the list of intents asked for.\r\n                let addedIntent: AddedLmIntent = this.privAddedLmIntents[intentResponse.topScoringIntent.intent];\r\n\r\n                if (this.privUmbrellaIntent !== undefined) {\r\n                    addedIntent = this.privUmbrellaIntent;\r\n                }\r\n\r\n                if (null !== intentResponse && addedIntent !== undefined) {\r\n                    const intentId = addedIntent.intentName === undefined ? intentResponse.topScoringIntent.intent : addedIntent.intentName;\r\n                    let reason = ev.result.reason;\r\n\r\n                    if (undefined !== intentId) {\r\n                        reason = ResultReason.RecognizedIntent;\r\n                    }\r\n\r\n                    // make sure, properties is set.\r\n                    const properties = (undefined !== ev.result.properties) ?\r\n                        ev.result.properties : new PropertyCollection();\r\n\r\n                    properties.setProperty(PropertyId.LanguageUnderstandingServiceResponse_JsonResult, connectionMessage.textBody);\r\n\r\n                    ev = new IntentRecognitionEventArgs(\r\n                        new IntentRecognitionResult(\r\n                            intentId,\r\n                            ev.result.resultId,\r\n                            reason,\r\n                            ev.result.text,\r\n                            ev.result.duration,\r\n                            ev.result.offset,\r\n                            undefined,\r\n                            undefined,\r\n                            ev.result.errorDetails,\r\n                            ev.result.json,\r\n                            properties),\r\n                        ev.offset,\r\n                        ev.sessionId);\r\n                }\r\n                this.privRequestSession.onPhraseRecognized(ev.offset + ev.result.duration);\r\n\r\n                if (!!this.privIntentRecognizer.recognized) {\r\n                    try {\r\n                        this.privIntentRecognizer.recognized(this.privIntentRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(ev.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privIntentRecognizer.canceled) {\r\n\r\n            const cancelEvent: IntentRecognitionCanceledEventArgs = new IntentRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privIntentRecognizer.canceled(this.privIntentRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: IntentRecognitionResult = new IntentRecognitionResult(\r\n                undefined, // Intent Id\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // LanguageDetectionConfidence\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// response\r\n\r\nexport interface IIntentResponse {\r\n    query: string;\r\n    topScoringIntent: ISingleIntent;\r\n    entities: IIntentEntity[];\r\n}\r\n\r\nexport interface IIntentEntity {\r\n    entity: string;\r\n    type: string;\r\n    startIndex: number;\r\n    endIndex: number;\r\n    score: number;\r\n}\r\n\r\nexport interface ISingleIntent {\r\n    intent: string;\r\n    score: number;\r\n}\r\n\r\nexport class IntentResponse implements IIntentResponse {\r\n    private privIntentResponse: IIntentResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privIntentResponse = JSON.parse(json);\r\n    }\r\n\r\n    public static fromJSON(json: string): IntentResponse {\r\n        return new IntentResponse(json);\r\n    }\r\n\r\n    public get query(): string {\r\n        return this.privIntentResponse.query;\r\n    }\r\n\r\n    public get topScoringIntent(): ISingleIntent {\r\n        return this.privIntentResponse.topScoringIntent;\r\n    }\r\n\r\n    public get entities(): IIntentEntity[] {\r\n        return this.privIntentResponse.entities;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationEventArgs } from \"./CancellationEventArgs\";\r\nimport { CancellationErrorCode, CancellationReason, IntentRecognitionEventArgs, IntentRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Define payload of intent recognition canceled result events.\r\n * @class IntentRecognitionCanceledEventArgs\r\n */\r\nexport class IntentRecognitionCanceledEventArgs extends IntentRecognitionEventArgs implements CancellationEventArgs {\r\n    private privReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {CancellationReason} result - The result of the intent recognition.\r\n     * @param {string} offset - The offset.\r\n     * @param {IntentRecognitionResult} sessionId - The session id.\r\n     */\r\n    public constructor(\r\n        reason: CancellationReason,\r\n        errorDetails: string,\r\n        errorCode: CancellationErrorCode,\r\n        result?: IntentRecognitionResult,\r\n        offset?: number,\r\n        sessionId?: string) {\r\n        super(result, offset, sessionId);\r\n\r\n        this.privReason = reason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member IntentRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Output format\r\n * @class VoiceProfileType\r\n */\r\nexport enum VoiceProfileType {\r\n\r\n    /**\r\n     * Text independent speaker identification\r\n     * @member VoiceProfileType.TextIndependentIdentification\r\n     */\r\n    TextIndependentIdentification,\r\n\r\n    /**\r\n     * Text dependent speaker verification\r\n     * @member VoiceProfileType.TextDependentVerification\r\n     */\r\n    TextDependentVerification,\r\n\r\n    /**\r\n     * Text independent speaker verification\r\n     * @member VoiceProfileType.TextIndependentVerification\r\n     */\r\n    TextIndependentVerification,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary,\r\n} from \"../common/Exports\";\r\nimport {\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    IConnectionFactory,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter,\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { QueryParameterNames } from \"./QueryParameterNames\";\r\n\r\nexport class TranslationConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".s2s.speech\" + hostSuffix);\r\n            endpoint = host + \"/speech/translation/cognitiveservices/v1\";\r\n        }\r\n\r\n        const queryParams: IStringDictionary<string> = {\r\n            from: config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage),\r\n            to: config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationToLanguages),\r\n        };\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n        this.setUrlParameter(\r\n            PropertyId.SpeechServiceResponse_TranslationRequestStablePartialResult,\r\n            QueryParameterNames.StableTranslation,\r\n            config,\r\n            queryParams,\r\n            endpoint\r\n        );\r\n\r\n        const voiceName: string = \"voice\";\r\n        const featureName: string = \"features\";\r\n\r\n        if (config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice, undefined) !== undefined) {\r\n            queryParams[voiceName] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_TranslationVoice);\r\n            queryParams[featureName] = \"texttospeech\";\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ConnectionEvent,\r\n    IAudioSource,\r\n    MessageType,\r\n    TranslationStatus,\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionResult,\r\n    TranslationRecognitionCanceledEventArgs,\r\n    TranslationRecognitionEventArgs,\r\n    TranslationRecognitionResult,\r\n    TranslationRecognizer,\r\n    Translations,\r\n    TranslationSynthesisEventArgs,\r\n    TranslationSynthesisResult,\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SynthesisStatus,\r\n    TranslationHypothesis,\r\n    TranslationPhrase,\r\n    TranslationSynthesisEnd,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { ITranslationPhrase } from \"./ServiceMessages/TranslationPhrase\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class TranslationServiceRecognizer extends ServiceRecognizerBase {\r\n    private privTranslationRecognizer: TranslationRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        translationRecognizer: TranslationRecognizer) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, translationRecognizer);\r\n        this.privTranslationRecognizer = translationRecognizer;\r\n        this.connectionEvents.attach(async (connectionEvent: ConnectionEvent): Promise<void> => {\r\n            if (connectionEvent.name === \"ConnectionEstablishedEvent\") {\r\n                this.privTranslationRecognizer.onConnection();\r\n            } else if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                await this.privTranslationRecognizer.onDisconnection();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        let processed: boolean = false;\r\n\r\n        const handleTranslationPhrase = async (translatedPhrase: TranslationPhrase): Promise<void> => {\r\n            this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset + translatedPhrase.Duration);\r\n\r\n            if (translatedPhrase.RecognitionStatus === RecognitionStatus.Success) {\r\n\r\n                // OK, the recognition was successful. How'd the translation do?\r\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(translatedPhrase, resultProps);\r\n                if (!!this.privTranslationRecognizer.recognized) {\r\n                    try {\r\n                        this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, result);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n\r\n                // report result to promise.\r\n                if (!!this.privSuccessCallback) {\r\n                    try {\r\n                        this.privSuccessCallback(result.result);\r\n                    } catch (e) {\r\n                        if (!!this.privErrorCallback) {\r\n                            this.privErrorCallback(e);\r\n                        }\r\n                    }\r\n                    // Only invoke the call back once.\r\n                    // and if it's successful don't invoke the\r\n                    // error after that.\r\n                    this.privSuccessCallback = undefined;\r\n                    this.privErrorCallback = undefined;\r\n                }\r\n            } else {\r\n                const reason: ResultReason = EnumTranslation.implTranslateRecognitionResult(translatedPhrase.RecognitionStatus);\r\n\r\n                const result = new TranslationRecognitionResult(\r\n                    undefined,\r\n                    this.privRequestSession.requestId,\r\n                    reason,\r\n                    translatedPhrase.Text,\r\n                    translatedPhrase.Duration,\r\n                    this.privRequestSession.currentTurnAudioOffset + translatedPhrase.Offset,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                if (reason === ResultReason.Canceled) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(translatedPhrase.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(translatedPhrase.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && reason === ResultReason.NoMatch && translatedPhrase.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        const ev = new TranslationRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privTranslationRecognizer.recognized) {\r\n                            try {\r\n                                this.privTranslationRecognizer.recognized(this.privTranslationRecognizer, ev);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // report result to promise.\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n            }\r\n\r\n        };\r\n\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"translation.hypothesis\":\r\n\r\n                const result: TranslationRecognitionEventArgs = this.fireEventForResult(TranslationHypothesis.fromJSON(connectionMessage.textBody), resultProps);\r\n                this.privRequestSession.onHypothesis(this.privRequestSession.currentTurnAudioOffset + result.offset);\r\n\r\n                if (!!this.privTranslationRecognizer.recognizing) {\r\n                    try {\r\n                        this.privTranslationRecognizer.recognizing(this.privTranslationRecognizer, result);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            case \"translation.response\":\r\n                const phrase: { SpeechPhrase: ITranslationPhrase } = JSON.parse(connectionMessage.textBody);\r\n                if (!!phrase.SpeechPhrase) {\r\n                    await handleTranslationPhrase(TranslationPhrase.fromTranslationResponse(phrase));\r\n                }\r\n                break;\r\n            case \"translation.phrase\":\r\n                await handleTranslationPhrase(TranslationPhrase.fromJSON(connectionMessage.textBody));\r\n                break;\r\n\r\n            case \"translation.synthesis\":\r\n                this.sendSynthesisAudio(connectionMessage.binaryBody, this.privRequestSession.sessionId);\r\n                processed = true;\r\n                break;\r\n\r\n            case \"translation.synthesis.end\":\r\n                const synthEnd: TranslationSynthesisEnd = TranslationSynthesisEnd.fromJSON(connectionMessage.textBody);\r\n\r\n                switch (synthEnd.SynthesisStatus) {\r\n                    case SynthesisStatus.Error:\r\n                        if (!!this.privTranslationRecognizer.synthesizing) {\r\n                            const result = new TranslationSynthesisResult(ResultReason.Canceled, undefined);\r\n                            const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, this.privRequestSession.sessionId);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n\r\n                        if (!!this.privTranslationRecognizer.canceled) {\r\n                            // And raise a canceled event to send the rich(er) error message back.\r\n                            const canceledResult: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                                this.privRequestSession.sessionId,\r\n                                CancellationReason.Error,\r\n                                synthEnd.FailureReason,\r\n                                CancellationErrorCode.ServiceError,\r\n                                null);\r\n\r\n                            try {\r\n                                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, canceledResult);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                        break;\r\n                    case SynthesisStatus.Success:\r\n                        this.sendSynthesisAudio(undefined, this.privRequestSession.sessionId);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privTranslationRecognizer.canceled) {\r\n\r\n            const cancelEvent: TranslationRecognitionCanceledEventArgs = new TranslationRecognitionCanceledEventArgs(\r\n                sessionId,\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined);\r\n\r\n            try {\r\n                this.privTranslationRecognizer.canceled(this.privTranslationRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: TranslationRecognitionResult = new TranslationRecognitionResult(\r\n                undefined, // Translations\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Druation\r\n                undefined, // Offset\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                /* tslint:disable:no-empty */\r\n                this.privSuccessCallback = undefined;\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: TranslationHypothesis | TranslationPhrase, properties: PropertyCollection): TranslationRecognitionEventArgs {\r\n        let translations: Translations;\r\n\r\n        if (undefined !== serviceResult.Translation.Translations) {\r\n            translations = new Translations();\r\n            for (const translation of serviceResult.Translation.Translations) {\r\n                translations.set(translation.Language, translation.Text || translation.DisplayText);\r\n            }\r\n        }\r\n\r\n        let resultReason: ResultReason;\r\n        if (serviceResult instanceof TranslationPhrase) {\r\n            if (serviceResult.Translation.TranslationStatus === TranslationStatus.Success) {\r\n                resultReason = ResultReason.TranslatedSpeech;\r\n            } else {\r\n                resultReason = ResultReason.RecognizedSpeech;\r\n            }\r\n        } else {\r\n            resultReason = ResultReason.TranslatingSpeech;\r\n        }\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new TranslationRecognitionResult(\r\n            translations,\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.Text,\r\n            serviceResult.Duration,\r\n            offset,\r\n            serviceResult.Translation.FailureReason,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new TranslationRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private sendSynthesisAudio(audio: ArrayBuffer, sessionId: string): void {\r\n        const reason = (undefined === audio) ? ResultReason.SynthesizingAudioCompleted : ResultReason.SynthesizingAudio;\r\n        const result = new TranslationSynthesisResult(reason, audio);\r\n        const retEvent: TranslationSynthesisEventArgs = new TranslationSynthesisEventArgs(result, sessionId);\r\n\r\n        if (!!this.privTranslationRecognizer.synthesizing) {\r\n            try {\r\n                this.privTranslationRecognizer.synthesizing(this.privTranslationRecognizer, retEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch (error) {\r\n                // Not going to let errors in the event handler\r\n                // trip things up.\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ITranslations } from \"../Exports\";\r\nimport { TranslationStatus } from \"../TranslationStatus\";\r\n\r\n// translation.hypothesis\r\nexport interface ITranslationHypothesis {\r\n    Duration: number;\r\n    Offset: number;\r\n    Text: string;\r\n    Translation: ITranslations;\r\n}\r\n\r\nexport class TranslationHypothesis implements ITranslationHypothesis {\r\n    private privTranslationHypothesis: ITranslationHypothesis;\r\n\r\n    private constructor(json: string) {\r\n        this.privTranslationHypothesis = JSON.parse(json);\r\n        this.privTranslationHypothesis.Translation.TranslationStatus = (TranslationStatus as any)[this.privTranslationHypothesis.Translation.TranslationStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationHypothesis {\r\n        return new TranslationHypothesis(json);\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privTranslationHypothesis.Duration;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privTranslationHypothesis.Offset;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privTranslationHypothesis.Text;\r\n    }\r\n\r\n    public get Translation(): ITranslations {\r\n        return this.privTranslationHypothesis.Translation;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Defines translation status.\r\n * @class TranslationStatus\r\n */\r\nexport enum TranslationStatus {\r\n    /**\r\n     * @member TranslationStatus.Success\r\n     */\r\n    Success = 0,\r\n\r\n    /**\r\n     * @member TranslationStatus.Error\r\n     */\r\n    Error,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Contracts } from \"../../sdk/Contracts\";\r\nimport { ITranslations, RecognitionStatus } from \"../Exports\";\r\nimport { TranslationStatus } from \"../TranslationStatus\";\r\n\r\n// translation.phrase\r\nexport interface ITranslationPhrase {\r\n    RecognitionStatus: RecognitionStatus;\r\n    Offset: number;\r\n    Duration: number;\r\n    Translation: ITranslations;\r\n    Text: string;\r\n    DisplayText?: string;\r\n}\r\n\r\nexport class TranslationPhrase implements ITranslationPhrase {\r\n    private privTranslationPhrase: ITranslationPhrase;\r\n\r\n    private constructor(phrase: ITranslationPhrase) {\r\n        this.privTranslationPhrase = phrase;\r\n        this.privTranslationPhrase.RecognitionStatus = (RecognitionStatus as any)[this.privTranslationPhrase.RecognitionStatus];\r\n        if (this.privTranslationPhrase.Translation !== undefined) {\r\n            this.privTranslationPhrase.Translation.TranslationStatus = (TranslationStatus as any)[this.privTranslationPhrase.Translation.TranslationStatus];\r\n        }\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationPhrase {\r\n        return new TranslationPhrase(JSON.parse(json));\r\n    }\r\n\r\n    public static fromTranslationResponse(translationResponse: { SpeechPhrase: ITranslationPhrase }): TranslationPhrase {\r\n        Contracts.throwIfNullOrUndefined(translationResponse, \"translationResponse\");\r\n        const phrase: ITranslationPhrase = translationResponse.SpeechPhrase;\r\n        translationResponse.SpeechPhrase = undefined;\r\n        phrase.Translation = (translationResponse as unknown as ITranslations);\r\n        phrase.Text = phrase.DisplayText;\r\n        return new TranslationPhrase(phrase);\r\n    }\r\n\r\n    public get RecognitionStatus(): RecognitionStatus {\r\n        return this.privTranslationPhrase.RecognitionStatus;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privTranslationPhrase.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privTranslationPhrase.Duration;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privTranslationPhrase.Text;\r\n    }\r\n\r\n    public get Translation(): ITranslations {\r\n        return this.privTranslationPhrase.Translation;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { SynthesisStatus } from \"../Exports\";\r\n\r\n// translation.synthesis.end\r\nexport interface ITranslationSynthesisEnd {\r\n    SynthesisStatus: SynthesisStatus;\r\n    FailureReason: string;\r\n}\r\n\r\nexport class TranslationSynthesisEnd implements ITranslationSynthesisEnd {\r\n    private privSynthesisEnd: ITranslationSynthesisEnd;\r\n\r\n    private constructor(json: string) {\r\n        this.privSynthesisEnd = JSON.parse(json);\r\n        this.privSynthesisEnd.SynthesisStatus = (SynthesisStatus as any)[this.privSynthesisEnd.SynthesisStatus];\r\n    }\r\n\r\n    public static fromJSON(json: string): TranslationSynthesisEnd {\r\n        return new TranslationSynthesisEnd(json);\r\n    }\r\n\r\n    public get SynthesisStatus(): SynthesisStatus {\r\n        return this.privSynthesisEnd.SynthesisStatus;\r\n    }\r\n\r\n    public get FailureReason(): string {\r\n        return this.privSynthesisEnd.FailureReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { CancellationErrorCode, CancellationReason, TranslationRecognitionResult } from \"./Exports\";\r\n\r\n/**\r\n * Define payload of speech recognition canceled result events.\r\n * @class TranslationRecognitionCanceledEventArgs\r\n */\r\nexport class TranslationRecognitionCanceledEventArgs {\r\n    private privResult: TranslationRecognitionResult;\r\n    private privSessionId: string;\r\n    private privCancelReason: CancellationReason;\r\n    private privErrorDetails: string;\r\n    private privErrorCode: CancellationErrorCode;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} sessionid - The session id.\r\n     * @param {CancellationReason} cancellationReason - The cancellation reason.\r\n     * @param {string} errorDetails - Error details, if provided.\r\n     * @param {TranslationRecognitionResult} result - The result.\r\n     */\r\n    public constructor(\r\n        sessionid: string,\r\n        cancellationReason: CancellationReason,\r\n        errorDetails: string,\r\n        errorCode: CancellationErrorCode,\r\n        result: TranslationRecognitionResult) {\r\n        this.privCancelReason = cancellationReason;\r\n        this.privErrorDetails = errorDetails;\r\n        this.privResult = result;\r\n        this.privSessionId = sessionid;\r\n        this.privErrorCode = errorCode;\r\n    }\r\n\r\n    /**\r\n     * Specifies the recognition result.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.result\r\n     * @function\r\n     * @public\r\n     * @returns {TranslationRecognitionResult} the recognition result.\r\n     */\r\n    public get result(): TranslationRecognitionResult {\r\n        return this.privResult;\r\n    }\r\n\r\n    /**\r\n     * Specifies the session identifier.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.sessionId\r\n     * @function\r\n     * @public\r\n     * @returns {string} the session identifier.\r\n     */\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    /**\r\n     * The reason the recognition was canceled.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.reason\r\n     * @function\r\n     * @public\r\n     * @returns {CancellationReason} Specifies the reason canceled.\r\n     */\r\n    public get reason(): CancellationReason {\r\n        return this.privCancelReason;\r\n    }\r\n\r\n    /**\r\n     * The error code in case of an unsuccessful recognition.\r\n     * Added in version 1.1.0.\r\n     * @return An error code that represents the error reason.\r\n     */\r\n    public get errorCode(): CancellationErrorCode {\r\n        return this.privErrorCode;\r\n    }\r\n\r\n    /**\r\n     * In case of an unsuccessful recognition, provides details of the occurred error.\r\n     * @member TranslationRecognitionCanceledEventArgs.prototype.errorDetails\r\n     * @function\r\n     * @public\r\n     * @returns {string} A String that represents the error details.\r\n     */\r\n    public get errorDetails(): string {\r\n        return this.privErrorDetails;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"./Exports\";\r\n\r\n/**\r\n * Represents collection of parameters and their values.\r\n * @class Translations\r\n */\r\nexport class Translations {\r\n    // Use an PropertyCollection internally, just wrapping it to hide the | enum syntax it has.\r\n    private privMap: PropertyCollection = new PropertyCollection();\r\n\r\n    /**\r\n     * Returns the parameter value in type String. The parameter must have the same type as String.\r\n     * Currently only String, int and bool are allowed.\r\n     * If the name is not available, the specified defaultValue is returned.\r\n     * @member Translations.prototype.get\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} def - The default value which is returned if the parameter is not available in the collection.\r\n     * @returns {string} value of the parameter.\r\n     */\r\n    public get(key: string, def?: string): string {\r\n        return this.privMap.getProperty(key, def);\r\n    }\r\n\r\n    /**\r\n     * Sets the String value of the parameter specified by name.\r\n     * @member Translations.prototype.set\r\n     * @function\r\n     * @public\r\n     * @param {string} key - The parameter name.\r\n     * @param {string} value - The value of the parameter.\r\n     */\r\n    public set(key: string, value: string): void {\r\n        this.privMap.setProperty(key, value);\r\n    }\r\n\r\n    /**\r\n     * Get the languages in the object in a String array.\r\n     * @member Translations.prototype.languages\r\n     * @function\r\n     * @public\r\n     * @returns {string[]} languages in translations object.\r\n     */\r\n    public get languages(): string[] {\r\n        return this.privMap.keys;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PullAudioOutputStream } from \"./Audio/AudioOutputStream\";\r\n\r\n/**\r\n * Defines contents of received message/events.\r\n * @class ActivityReceivedEventArgs\r\n */\r\nexport class ActivityReceivedEventArgs {\r\n    private privActivity: any;\r\n    private privAudioStream: PullAudioOutputStream;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {any} activity - The activity..\r\n     */\r\n    public constructor(activity: any, audioStream?: PullAudioOutputStream) {\r\n        this.privActivity = activity;\r\n        this.privAudioStream = audioStream;\r\n    }\r\n\r\n    /**\r\n     * Gets the received activity\r\n     * @member ActivityReceivedEventArgs.prototype.activity\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received activity.\r\n     */\r\n    public get activity(): any {\r\n        return this.privActivity;\r\n    }\r\n\r\n    public get audioStream(): PullAudioOutputStream {\r\n        return this.privAudioStream;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// speech.keyword\r\nexport interface ISpeechKeyword {\r\n    Status: string;\r\n    Text: string;\r\n    Offset: number;\r\n    Duration: number;\r\n}\r\n\r\nexport class SpeechKeyword implements ISpeechKeyword {\r\n    private privSpeechKeyword: ISpeechKeyword;\r\n\r\n    private constructor(json: string) {\r\n        this.privSpeechKeyword = JSON.parse(json);\r\n    }\r\n\r\n    public static fromJSON(json: string): SpeechKeyword {\r\n        return new SpeechKeyword(json);\r\n    }\r\n\r\n    public get Status(): string {\r\n        return this.privSpeechKeyword.Status;\r\n    }\r\n\r\n    public get Text(): string {\r\n        return this.privSpeechKeyword.Text;\r\n    }\r\n\r\n    public get Offset(): number {\r\n        return this.privSpeechKeyword.Offset;\r\n    }\r\n\r\n    public get Duration(): number {\r\n        return this.privSpeechKeyword.Duration;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"../sdk/Exports\";\r\nimport { Context } from \"./Exports\";\r\n\r\nexport class SpeakerRecognitionConfig {\r\n    private privParameters: PropertyCollection;\r\n    private privContext: Context;\r\n\r\n    constructor(\r\n        context: Context,\r\n        parameters: PropertyCollection) {\r\n        this.privContext = context ? context : new Context(null);\r\n        this.privParameters = parameters;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get Context(): Context {\r\n        return this.privContext;\r\n    }\r\n}\r\n","import {\r\n    IRequestOptions,\r\n    IRestResponse,\r\n    RestConfigBase,\r\n    RestMessageAdapter,\r\n    RestRequestType,\r\n} from \"../common.browser/Exports\";\r\nimport { IAudioSource } from \"../common/Exports\";\r\nimport {\r\n    PropertyId,\r\n    SpeakerIdentificationModel,\r\n    SpeakerVerificationModel,\r\n    VoiceProfile,\r\n    VoiceProfileType,\r\n} from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { SpeakerRecognitionConfig } from \"./Exports\";\r\n\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SpeakerIdMessageAdapter\r\n */\r\nexport class SpeakerIdMessageAdapter {\r\n    private privRestAdapter: RestMessageAdapter;\r\n    private privUri: string;\r\n    private privApiVersion: string;\r\n\r\n    public constructor(config: SpeakerRecognitionConfig) {\r\n\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.api.cognitive${hostSuffix}`);\r\n        }\r\n        this.privUri = `${endpoint}/speaker-recognition/{mode}/{dependency}/profiles`;\r\n\r\n        const options: IRequestOptions = RestConfigBase.requestOptions;\r\n        options.headers[RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n        this.privApiVersion = config.parameters.getProperty(PropertyId.SpeakerRecognition_Api_Version, \"2021-09-05\");\r\n\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n    }\r\n\r\n    /**\r\n     * Sends create profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of voice profile to create.\r\n     * @param {string} lang - language/locale of voice profile\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing id of created profile.\r\n     */\r\n    public createProfile(profileType: VoiceProfileType, lang: string):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profileType);\r\n        return this.privRestAdapter.request(RestRequestType.Post, uri, this.getQueryParams(), { locale: lang });\r\n    }\r\n\r\n    /**\r\n     * Sends create enrollment request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profileType - voice profile for which to create new enrollment.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public createEnrollment(profile: VoiceProfile, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \"/enrollments\";\r\n        return audioSource.blob.then<IRestResponse>((result: Blob | Buffer): Promise<IRestResponse> => {\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({ ignoreMinLength: \"true\" }), null, result);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends verification request to endpoint.\r\n     * @function\r\n     * @param {SpeakerVerificationModel} model - voice model to verify against.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public async verifySpeaker(model: SpeakerVerificationModel, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(model.voiceProfile.profileType) + \"/\" + model.voiceProfile.profileId + \":verify\";\r\n        try {\r\n            const result: Blob | Buffer = await audioSource.blob;\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({ ignoreMinLength: \"true\" }), null, result);\r\n        } catch (e) {\r\n            return Promise.resolve({ data: e } as IRestResponse);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends identification request to endpoint.\r\n     * @function\r\n     * @param {SpeakerIdentificationModel} model - voice profiles against which to identify.\r\n     * @param {IAudioSource} audioSource - audioSource from which to pull data to send\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to enrollment request.\r\n     */\r\n    public async identifySpeaker(model: SpeakerIdentificationModel, audioSource: IAudioSource):\r\n        Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(VoiceProfileType.TextIndependentIdentification) + \":identifySingleSpeaker\";\r\n        try {\r\n            const result: Blob | Buffer = await audioSource.blob;\r\n            return this.privRestAdapter.request(RestRequestType.File, uri, this.getQueryParams({ profileIds: model.voiceProfileIds, ignoreMinLength: \"true\" }), null, result);\r\n        } catch (e) {\r\n            return Promise.resolve({ data: e } as IRestResponse);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends profile status request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to check.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to status request\r\n     */\r\n    public getProfileStatus(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = `${this.getOperationUri(profile.profileType)}/${profile.profileId}`;\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\r\n    }\r\n\r\n    /**\r\n     * Sends get all profiles request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of profiles to return list of\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing all profiles\r\n     */\r\n    public getProfiles(profileType: VoiceProfileType): Promise<IRestResponse> {\r\n        const uri = this.getOperationUri(profileType);\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\r\n    }\r\n\r\n    /**\r\n     * Sends get activation/auth phrases request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfileType} profileType - type of profiles to return phrases for\r\n     * @param {string} lang - language/locale of voice profile\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} promised rest response containing list of valid phrases\r\n     */\r\n    public getPhrases(profileType: VoiceProfileType, lang: string): Promise<IRestResponse> {\r\n        const uri = `${this.getOperationUri(profileType)}`.replace(`profiles`, `phrases`) + \"/\" + lang;\r\n        return this.privRestAdapter.request(RestRequestType.Get, uri, this.getQueryParams());\r\n    }\r\n\r\n    /**\r\n     * Sends delete profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to delete.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to deletion request\r\n     */\r\n    public deleteProfile(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId;\r\n        return this.privRestAdapter.request(RestRequestType.Delete, uri, this.getQueryParams());\r\n    }\r\n\r\n    /**\r\n     * Sends reset profile request to endpoint.\r\n     * @function\r\n     * @param {VoiceProfile} profile - voice profile to reset enrollments for.\r\n     * @public\r\n     * @returns {Promise<IRestResponse>} rest response to reset request\r\n     */\r\n    public resetProfile(profile: VoiceProfile): Promise<IRestResponse> {\r\n\r\n        const uri = this.getOperationUri(profile.profileType) + \"/\" + profile.profileId + \":reset\";\r\n        return this.privRestAdapter.request(RestRequestType.Post, uri, this.getQueryParams());\r\n    }\r\n\r\n    private getOperationUri(profileType: VoiceProfileType): string {\r\n\r\n        const mode = profileType === VoiceProfileType.TextIndependentIdentification ? \"identification\" : \"verification\";\r\n        const dependency = profileType === VoiceProfileType.TextDependentVerification ? \"text-dependent\" : \"text-independent\";\r\n        return this.privUri.replace(\"{mode}\", mode).replace(\"{dependency}\", dependency);\r\n    }\r\n\r\n    private getQueryParams(params: any = {}): any {\r\n\r\n        params[RestConfigBase.configParams.apiVersion] = this.privApiVersion;\r\n        return params;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    OutputFormatPropertyName,\r\n} from \"../common.speech/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport {\r\n    OutputFormat,\r\n    PropertyId\r\n} from \"../sdk/Exports\";\r\nimport {\r\n    ConnectionFactoryBase\r\n} from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    RecognizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class TranscriberConnectionFactory extends ConnectionFactoryBase {\r\n\r\n    private readonly multiaudioRelativeUri: string = \"/speech/recognition/multiaudio\";\r\n\r\n    public create = (\r\n        config: RecognizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"centralus\");\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const hostDefault: string = \"wss://transcribe.\" + region + \".cts.speech\" + hostSuffix + this.multiaudioRelativeUri;\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, hostDefault);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        const endpointId: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const language: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, undefined);\r\n\r\n        if (endpointId) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.CustomSpeechDeploymentId) === -1) {\r\n                queryParams[QueryParameterNames.CustomSpeechDeploymentId] = endpointId;\r\n            }\r\n        } else if (language) {\r\n            if (!endpoint || endpoint.search(QueryParameterNames.Language) === -1) {\r\n                queryParams[QueryParameterNames.Language] = language;\r\n            }\r\n        }\r\n\r\n        this.setCommonUrlParams(config, queryParams, endpoint);\r\n        if (!endpoint) {\r\n            endpoint = host;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromRecognizerConfig(config), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    IAudioSource,\r\n    IConnection,\r\n    MessageType\r\n} from \"../common/Exports\";\r\nimport {\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    ConversationTranscriptionCanceledEventArgs,\r\n    OutputFormat,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    ResultReason,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n} from \"../sdk/Exports\";\r\nimport { ConversationInfo } from \"../sdk/Transcription/Exports\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    DetailedSpeechPhrase,\r\n    EnumTranslation,\r\n    OutputFormatPropertyName,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechHypothesis,\r\n    TranscriberRecognizer\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport class TranscriptionServiceRecognizer extends ServiceRecognizerBase {\r\n\r\n    private privTranscriberRecognizer: TranscriberRecognizer;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        transcriber: TranscriberRecognizer) {\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, transcriber);\r\n        this.privTranscriberRecognizer = transcriber;\r\n        this.sendPrePayloadJSONOverride = this.sendTranscriptionStartJSON;\r\n    }\r\n\r\n    public async sendSpeechEventAsync(info: ConversationInfo, command: string): Promise<void> {\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            const connection: IConnection = await this.fetchConnection();\r\n            await this.sendSpeechEvent(connection, this.createSpeechEventPayload(info, command));\r\n        }\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        let result: SpeechRecognitionResult;\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        let processed: boolean = false;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.hypothesis\":\r\n            case \"speech.fragment\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    hypothesis.SpeakerId,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privTranscriberRecognizer.recognizing) {\r\n                    try {\r\n                        this.privTranscriberRecognizer.recognizing(this.privTranscriberRecognizer, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.phrase\":\r\n                const simple: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(simple.RecognitionStatus);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + simple.Offset + simple.Duration);\r\n\r\n                if (ResultReason.Canceled === resultReason) {\r\n                    const cancelReason: CancellationReason = EnumTranslation.implTranslateCancelResult(simple.RecognitionStatus);\r\n                    const cancellationErrorCode: CancellationErrorCode = EnumTranslation.implTranslateCancelErrorCode(simple.RecognitionStatus);\r\n\r\n                    await this.cancelRecognitionLocal(\r\n                        cancelReason,\r\n                        cancellationErrorCode,\r\n                        EnumTranslation.implTranslateErrorDetails(cancellationErrorCode));\r\n\r\n                } else {\r\n                    if (!(this.privRequestSession.isSpeechEnded && resultReason === ResultReason.NoMatch && simple.RecognitionStatus !== RecognitionStatus.InitialSilenceTimeout)) {\r\n                        if (this.privRecognizerConfig.parameters.getProperty(OutputFormatPropertyName) === OutputFormat[OutputFormat.Simple]) {\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                simple.DisplayText,\r\n                                simple.Duration,\r\n                                simple.Offset + this.privRequestSession.currentTurnAudioOffset,\r\n                                simple.Language,\r\n                                simple.LanguageDetectionConfidence,\r\n                                simple.SpeakerId,\r\n                                undefined,\r\n                                connectionMessage.textBody,\r\n                                resultProps);\r\n                        } else {\r\n                            const detailed: DetailedSpeechPhrase = DetailedSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n                            const totalOffset: number = detailed.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n                            const offsetCorrectedJson: string = detailed.getJsonWithCorrectedOffsets(totalOffset);\r\n\r\n                            result = new SpeechRecognitionResult(\r\n                                this.privRequestSession.requestId,\r\n                                resultReason,\r\n                                detailed.Text,\r\n                                detailed.Duration,\r\n                                totalOffset,\r\n                                detailed.Language,\r\n                                detailed.LanguageDetectionConfidence,\r\n                                detailed.SpeakerId,\r\n                                undefined,\r\n                                offsetCorrectedJson,\r\n                                resultProps);\r\n                        }\r\n\r\n                        const event: SpeechRecognitionEventArgs = new SpeechRecognitionEventArgs(result, result.offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privTranscriberRecognizer.recognized) {\r\n                            try {\r\n                                this.privTranscriberRecognizer.recognized(this.privTranscriberRecognizer, event);\r\n                                /* tslint:disable:no-empty */\r\n                            } catch (error) {\r\n                                // Not going to let errors in the event handler\r\n                                // trip things up.\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!!this.privSuccessCallback) {\r\n                        try {\r\n                            this.privSuccessCallback(result);\r\n                        } catch (e) {\r\n                            if (!!this.privErrorCallback) {\r\n                                this.privErrorCallback(e);\r\n                            }\r\n                        }\r\n                        // Only invoke the call back once.\r\n                        // and if it's successful don't invoke the\r\n                        // error after that.\r\n                        this.privSuccessCallback = undefined;\r\n                        this.privErrorCallback = undefined;\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): void {\r\n\r\n        const properties: PropertyCollection = new PropertyCollection();\r\n        properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n        if (!!this.privTranscriberRecognizer.canceled) {\r\n            const cancelEvent: ConversationTranscriptionCanceledEventArgs = new ConversationTranscriptionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n            try {\r\n                this.privTranscriberRecognizer.canceled(this.privTranscriberRecognizer, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n\r\n        if (!!this.privSuccessCallback) {\r\n            const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                requestId,\r\n                ResultReason.Canceled,\r\n                undefined, // Text\r\n                undefined, // Duration\r\n                undefined, // Offset\r\n                undefined, // Language\r\n                undefined, // Language Detection Confidence\r\n                undefined, // Speaker Id\r\n                error,\r\n                undefined, // Json\r\n                properties);\r\n            try {\r\n                this.privSuccessCallback(result);\r\n                this.privSuccessCallback = undefined;\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n        }\r\n    }\r\n\r\n    // Encapsulated for derived service recognizers that need to send additional JSON\r\n    protected async sendTranscriptionStartJSON(connection: IConnection): Promise<void> {\r\n        await this.sendSpeechContext(connection);\r\n        const info: ConversationInfo = this.privTranscriberRecognizer.getConversationInfo();\r\n        const payload: { [id: string]: any } = this.createSpeechEventPayload(info, \"start\");\r\n        await this.sendSpeechEvent(connection, payload);\r\n        await this.sendWaveHeader(connection);\r\n        return;\r\n    }\r\n\r\n    protected sendSpeechEvent = (connection: IConnection, payload: { [id: string]: any }): Promise<void> => {\r\n        const speechEventJson = JSON.stringify(payload);\r\n\r\n        if (speechEventJson) {\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"speech.event\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                speechEventJson));\r\n        }\r\n        return;\r\n    }\r\n\r\n    private createSpeechEventPayload(info: ConversationInfo, command: string): { [id: string]: any } {\r\n        const meeting: string = \"meeting\";\r\n        const eventDict: { [id: string]: any } = { id: meeting, name: command, meeting: info.conversationProperties };\r\n        const idString: string = \"id\";\r\n        const attendees: string = \"attendees\";\r\n        const record: string = \"record\";\r\n        eventDict[meeting][idString] = info.id;\r\n        eventDict[meeting][attendees] = info.participants;\r\n        eventDict[meeting][record] = info.conversationProperties.audiorecording === \"on\" ? \"true\" : \"false\";\r\n        return eventDict;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    CancellationEventArgsBase,\r\n} from \"./CancellationEventArgsBase\";\r\n\r\n/**\r\n * Defines content of a RecognitionErrorEvent.\r\n * @class ConversationTranscriptionCanceledEventArgs\r\n */\r\nexport class ConversationTranscriptionCanceledEventArgs extends CancellationEventArgsBase {\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ProxyInfo,\r\n    WebsocketConnection, WebsocketMessageAdapter,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    IConnection,\r\n    IStringDictionary\r\n} from \"../common/Exports\";\r\nimport { PropertyId } from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport {\r\n    AuthInfo,\r\n    SynthesizerConfig,\r\n    WebsocketMessageFormatter\r\n} from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { ISynthesisConnectionFactory } from \"./ISynthesisConnectionFactory\";\r\nimport {\r\n    QueryParameterNames\r\n} from \"./QueryParameterNames\";\r\n\r\nexport class SpeechSynthesisConnectionFactory implements ISynthesisConnectionFactory {\r\n\r\n    private readonly synthesisUri: string = \"/cognitiveservices/websocket/v1\";\r\n\r\n    public create = (\r\n        config: SynthesizerConfig,\r\n        authInfo: AuthInfo,\r\n        connectionId?: string): IConnection => {\r\n\r\n        let endpoint: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, undefined);\r\n        const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n        const endpointId = config.parameters.getProperty(PropertyId.SpeechServiceConnection_EndpointId, undefined);\r\n        const hostPrefix = (endpointId === undefined) ? \"tts\" : \"voice\";\r\n        const host: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, \"wss://\" + region + \".\" + hostPrefix + \".speech\" + hostSuffix);\r\n\r\n        const queryParams: IStringDictionary<string> = {};\r\n\r\n        if (!endpoint) {\r\n            endpoint = host + this.synthesisUri;\r\n        }\r\n\r\n        const headers: IStringDictionary<string> = {};\r\n        if (authInfo.token !== undefined && authInfo.token !== \"\") {\r\n            headers[authInfo.headerName] = authInfo.token;\r\n        }\r\n        headers[HeaderNames.ConnectionId] = connectionId;\r\n        if (endpointId !== undefined) {\r\n            headers[QueryParameterNames.CustomVoiceDeploymentId] = endpointId;\r\n        }\r\n\r\n        config.parameters.setProperty(PropertyId.SpeechServiceConnection_Url, endpoint);\r\n\r\n        const enableCompression: boolean = config.parameters.getProperty(\"SPEECH-EnableWebsocketCompression\", \"false\") === \"true\";\r\n        return new WebsocketConnection(endpoint, queryParams, headers, new WebsocketMessageFormatter(), ProxyInfo.fromParameters(config.parameters), enableCompression, connectionId);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { PropertyCollection } from \"../sdk/Exports\";\r\nimport {Context, SpeechServiceConfig} from \"./Exports\";\r\n\r\nexport enum SynthesisServiceType {\r\n    Standard,\r\n    Custom,\r\n}\r\n\r\nexport class SynthesizerConfig {\r\n    private privSynthesisServiceType: SynthesisServiceType = SynthesisServiceType.Standard;\r\n    private privSpeechServiceConfig: SpeechServiceConfig;\r\n    private privParameters: PropertyCollection;\r\n\r\n    constructor(\r\n        speechServiceConfig: SpeechServiceConfig,\r\n        parameters: PropertyCollection) {\r\n        this.privSpeechServiceConfig = speechServiceConfig ? speechServiceConfig : new SpeechServiceConfig(new Context(null));\r\n        this.privParameters = parameters;\r\n    }\r\n\r\n    public get parameters(): PropertyCollection {\r\n        return this.privParameters;\r\n    }\r\n\r\n    public get synthesisServiceType(): SynthesisServiceType {\r\n        return this.privSynthesisServiceType;\r\n    }\r\n\r\n    public set synthesisServiceType(value: SynthesisServiceType) {\r\n        this.privSynthesisServiceType = value;\r\n    }\r\n\r\n    public get SpeechServiceConfig(): SpeechServiceConfig {\r\n        return this.privSpeechServiceConfig;\r\n    }\r\n}\r\n","import {\r\n    IRequestOptions,\r\n    IRestResponse,\r\n    RestConfigBase,\r\n    RestMessageAdapter,\r\n    RestRequestType,\r\n} from \"../common.browser/Exports\";\r\nimport {\r\n    PropertyId,\r\n} from \"../sdk/Exports\";\r\nimport { ConnectionFactoryBase } from \"./ConnectionFactoryBase\";\r\nimport { SynthesizerConfig } from \"./Exports\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\n\r\n/**\r\n * Implements methods for speaker recognition classes, sending requests to endpoint\r\n * and parsing response into expected format\r\n * @class SynthesisRestAdapter\r\n */\r\nexport class SynthesisRestAdapter {\r\n    private privRestAdapter: RestMessageAdapter;\r\n    private privUri: string;\r\n\r\n    public constructor(config: SynthesizerConfig) {\r\n\r\n        let endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Endpoint, undefined);\r\n        if (!endpoint) {\r\n            const region: string = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Region, \"westus\");\r\n            const hostSuffix: string = ConnectionFactoryBase.getHostSuffix(region);\r\n            endpoint = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Host, `https://${region}.tts.speech${hostSuffix}`);\r\n        }\r\n        this.privUri = `${endpoint}/cognitiveservices/voices/list`;\r\n\r\n        const options: IRequestOptions = RestConfigBase.requestOptions;\r\n        options.headers[RestConfigBase.configParams.subscriptionKey] = config.parameters.getProperty(PropertyId.SpeechServiceConnection_Key, undefined);\r\n\r\n        this.privRestAdapter = new RestMessageAdapter(options);\r\n    }\r\n\r\n    /**\r\n     * Sends list voices request to endpoint.\r\n     * @function\r\n     * @public\r\n     * @param connectionId - guid for connectionId\r\n     * @returns {Promise<IRestResponse>} rest response to status request\r\n     */\r\n    public getVoicesList(connectionId: string): Promise<IRestResponse> {\r\n        this.privRestAdapter.setHeaders(HeaderNames.ConnectionId, connectionId);\r\n        return this.privRestAdapter.request(RestRequestType.Get, this.privUri);\r\n    }\r\n\r\n}\r\n","import { Children, cloneElement } from 'react';\nimport { getName } from './utils.js';\n\nvar cloneChildren = function cloneChildren(children, startIndex, inRadioGroup) {\n  if (startIndex === void 0) {\n    startIndex = 0;\n  }\n\n  var index = startIndex;\n  var descendOverflow = false;\n  var items = Children.map(children, function (child) {\n    if (child == null) return null;\n    if (!child.type) return child;\n    var name = getName(child.type);\n\n    switch (name) {\n      case 'MenuItem':\n        {\n          if (inRadioGroup) {\n            var props = {\n              type: 'radio'\n            };\n            if (!child.props.disabled) props.index = index++;\n            return /*#__PURE__*/cloneElement(child, props);\n          }\n        }\n\n      case 'SubMenu':\n      case 'FocusableItem':\n        return child.props.disabled ? child : /*#__PURE__*/cloneElement(child, {\n          index: index++\n        });\n\n      default:\n        {\n          var innerChildren = child.props.children;\n          if (innerChildren === null || typeof innerChildren !== 'object') return child;\n          var desc = cloneChildren(innerChildren, index, inRadioGroup || name === 'MenuRadioGroup');\n          index = desc.index;\n\n          if (name === 'MenuGroup') {\n            var takeOverflow = !!child.props.takeOverflow;\n            var descOverflow = desc.descendOverflow;\n\n            if (process.env.NODE_ENV !== 'production' && (descendOverflow === descOverflow ? descOverflow : takeOverflow)) {\n              throw new Error('[React-Menu] Only one MenuGroup in a menu is allowed to have takeOverflow prop.');\n            }\n\n            descendOverflow = descendOverflow || descOverflow || takeOverflow;\n          }\n\n          return /*#__PURE__*/cloneElement(child, {\n            children: desc.items\n          });\n        }\n    }\n  });\n  return {\n    items: items,\n    index: index,\n    descendOverflow: descendOverflow\n  };\n};\n\nexport { cloneChildren };\n","import { placeArrowVertical } from './placeArrowVertical.js';\n\nvar placeLeftorRight = function placeLeftorRight(_ref) {\n  var anchorRect = _ref.anchorRect,\n      containerRect = _ref.containerRect,\n      menuRect = _ref.menuRect,\n      placeLeftorRightY = _ref.placeLeftorRightY,\n      placeLeftX = _ref.placeLeftX,\n      placeRightX = _ref.placeRightX,\n      getLeftOverflow = _ref.getLeftOverflow,\n      getRightOverflow = _ref.getRightOverflow,\n      confineHorizontally = _ref.confineHorizontally,\n      confineVertically = _ref.confineVertically,\n      arrowRef = _ref.arrowRef,\n      arrow = _ref.arrow,\n      direction = _ref.direction,\n      position = _ref.position;\n  var computedDirection = direction;\n  var y = placeLeftorRightY;\n\n  if (position !== 'initial') {\n    y = confineVertically(y);\n\n    if (position === 'anchor') {\n      y = Math.min(y, anchorRect.bottom - containerRect.top);\n      y = Math.max(y, anchorRect.top - containerRect.top - menuRect.height);\n    }\n  }\n\n  var x, leftOverflow, rightOverflow;\n\n  if (computedDirection === 'left') {\n    x = placeLeftX;\n\n    if (position !== 'initial') {\n      leftOverflow = getLeftOverflow(x);\n\n      if (leftOverflow < 0) {\n        rightOverflow = getRightOverflow(placeRightX);\n\n        if (rightOverflow <= 0 || -leftOverflow > rightOverflow) {\n          x = placeRightX;\n          computedDirection = 'right';\n        }\n      }\n    }\n  } else {\n    x = placeRightX;\n\n    if (position !== 'initial') {\n      rightOverflow = getRightOverflow(x);\n\n      if (rightOverflow > 0) {\n        leftOverflow = getLeftOverflow(placeLeftX);\n\n        if (leftOverflow >= 0 || -leftOverflow < rightOverflow) {\n          x = placeLeftX;\n          computedDirection = 'left';\n        }\n      }\n    }\n  }\n\n  if (position === 'auto') x = confineHorizontally(x);\n  var arrowY = arrow ? placeArrowVertical({\n    menuY: y,\n    arrowRef: arrowRef,\n    anchorRect: anchorRect,\n    containerRect: containerRect,\n    menuRect: menuRect\n  }) : undefined;\n  return {\n    arrowY: arrowY,\n    x: x,\n    y: y,\n    computedDirection: computedDirection\n  };\n};\n\nexport { placeLeftorRight };\n","var placeArrowVertical = function placeArrowVertical(_ref) {\n  var arrowRef = _ref.arrowRef,\n      menuY = _ref.menuY,\n      anchorRect = _ref.anchorRect,\n      containerRect = _ref.containerRect,\n      menuRect = _ref.menuRect;\n  var y = anchorRect.top - containerRect.top - menuY + anchorRect.height / 2;\n  var offset = arrowRef.current.offsetHeight * 1.25;\n  y = Math.max(offset, y);\n  y = Math.min(y, menuRect.height - offset);\n  return y;\n};\n\nexport { placeArrowVertical };\n","import { placeArrowHorizontal } from './placeArrowHorizontal.js';\n\nvar placeToporBottom = function placeToporBottom(_ref) {\n  var anchorRect = _ref.anchorRect,\n      containerRect = _ref.containerRect,\n      menuRect = _ref.menuRect,\n      placeToporBottomX = _ref.placeToporBottomX,\n      placeTopY = _ref.placeTopY,\n      placeBottomY = _ref.placeBottomY,\n      getTopOverflow = _ref.getTopOverflow,\n      getBottomOverflow = _ref.getBottomOverflow,\n      confineHorizontally = _ref.confineHorizontally,\n      confineVertically = _ref.confineVertically,\n      arrowRef = _ref.arrowRef,\n      arrow = _ref.arrow,\n      direction = _ref.direction,\n      position = _ref.position;\n  var computedDirection = direction === 'top' ? 'top' : 'bottom';\n  var x = placeToporBottomX;\n\n  if (position !== 'initial') {\n    x = confineHorizontally(x);\n\n    if (position === 'anchor') {\n      x = Math.min(x, anchorRect.right - containerRect.left);\n      x = Math.max(x, anchorRect.left - containerRect.left - menuRect.width);\n    }\n  }\n\n  var y, topOverflow, bottomOverflow;\n\n  if (computedDirection === 'top') {\n    y = placeTopY;\n\n    if (position !== 'initial') {\n      topOverflow = getTopOverflow(y);\n\n      if (topOverflow < 0) {\n        bottomOverflow = getBottomOverflow(placeBottomY);\n\n        if (bottomOverflow <= 0 || -topOverflow > bottomOverflow) {\n          y = placeBottomY;\n          computedDirection = 'bottom';\n        }\n      }\n    }\n  } else {\n    y = placeBottomY;\n\n    if (position !== 'initial') {\n      bottomOverflow = getBottomOverflow(y);\n\n      if (bottomOverflow > 0) {\n        topOverflow = getTopOverflow(placeTopY);\n\n        if (topOverflow >= 0 || -topOverflow < bottomOverflow) {\n          y = placeTopY;\n          computedDirection = 'top';\n        }\n      }\n    }\n  }\n\n  if (position === 'auto') y = confineVertically(y);\n  var arrowX = arrow ? placeArrowHorizontal({\n    menuX: x,\n    arrowRef: arrowRef,\n    anchorRect: anchorRect,\n    containerRect: containerRect,\n    menuRect: menuRect\n  }) : undefined;\n  return {\n    arrowX: arrowX,\n    x: x,\n    y: y,\n    computedDirection: computedDirection\n  };\n};\n\nexport { placeToporBottom };\n","var placeArrowHorizontal = function placeArrowHorizontal(_ref) {\n  var arrowRef = _ref.arrowRef,\n      menuX = _ref.menuX,\n      anchorRect = _ref.anchorRect,\n      containerRect = _ref.containerRect,\n      menuRect = _ref.menuRect;\n  var x = anchorRect.left - containerRect.left - menuX + anchorRect.width / 2;\n  var offset = arrowRef.current.offsetWidth * 1.25;\n  x = Math.max(offset, x);\n  x = Math.min(x, menuRect.width - offset);\n  return x;\n};\n\nexport { placeArrowHorizontal };\n","import { useLayoutEffect, useEffect } from 'react';\n\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? useLayoutEffect : useEffect;\n\nexport { useIsomorphicLayoutEffect as useLayoutEffect };\n","import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useState, useContext, useRef, useMemo, useReducer, useCallback, useEffect } from 'react';\nimport { flushSync } from 'react-dom';\nimport { SettingsContext, MenuListContext, initialHoverIndex, HoverIndexActionTypes, MenuListItemContext, HoverIndexContext, Keys, menuClass, CloseReason, FocusPositions, menuArrowClass, SubmenuActionTypes } from '../utils/constants.js';\nimport { cloneChildren } from '../utils/cloneChildren.js';\nimport { getScrollAncestor, floatEqual, attachHandlerProps, commonProps, isMenuOpen, getTransition, safeCall, batchedUpdates } from '../utils/utils.js';\nimport { getPositionHelpers } from '../positionUtils/getPositionHelpers.js';\nimport { positionContextMenu } from '../positionUtils/positionContextMenu.js';\nimport { positionMenu } from '../positionUtils/positionMenu.js';\nimport { useLayoutEffect as useIsomorphicLayoutEffect } from '../hooks/useIsomorphicLayoutEffect.js';\nimport { useBEM } from '../hooks/useBEM.js';\nimport { useFlatStyles } from '../hooks/useFlatStyles.js';\nimport { useCombinedRef } from '../hooks/useCombinedRef.js';\n\nvar _excluded = [\"ariaLabel\", \"menuClassName\", \"menuStyles\", \"arrowClassName\", \"arrowStyles\", \"anchorPoint\", \"anchorRef\", \"containerRef\", \"externalRef\", \"parentScrollingRef\", \"arrow\", \"align\", \"direction\", \"position\", \"overflow\", \"repositionFlag\", \"captureFocus\", \"state\", \"endTransition\", \"isDisabled\", \"menuItemFocus\", \"offsetX\", \"offsetY\", \"children\", \"onClose\"];\nvar MenuList = function MenuList(_ref) {\n  var ariaLabel = _ref.ariaLabel,\n      menuClassName = _ref.menuClassName,\n      menuStyles = _ref.menuStyles,\n      arrowClassName = _ref.arrowClassName,\n      arrowStyles = _ref.arrowStyles,\n      anchorPoint = _ref.anchorPoint,\n      anchorRef = _ref.anchorRef,\n      containerRef = _ref.containerRef,\n      externalRef = _ref.externalRef,\n      parentScrollingRef = _ref.parentScrollingRef,\n      arrow = _ref.arrow,\n      align = _ref.align,\n      direction = _ref.direction,\n      position = _ref.position,\n      overflow = _ref.overflow,\n      repositionFlag = _ref.repositionFlag,\n      _ref$captureFocus = _ref.captureFocus,\n      captureFocus = _ref$captureFocus === void 0 ? true : _ref$captureFocus,\n      state = _ref.state,\n      endTransition = _ref.endTransition,\n      isDisabled = _ref.isDisabled,\n      menuItemFocus = _ref.menuItemFocus,\n      offsetX = _ref.offsetX,\n      offsetY = _ref.offsetY,\n      children = _ref.children,\n      onClose = _ref.onClose,\n      restProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var _useState = useState({\n    x: 0,\n    y: 0\n  }),\n      menuPosition = _useState[0],\n      setMenuPosition = _useState[1];\n\n  var _useState2 = useState({}),\n      arrowPosition = _useState2[0],\n      setArrowPosition = _useState2[1];\n\n  var _useState3 = useState(),\n      overflowData = _useState3[0],\n      setOverflowData = _useState3[1];\n\n  var _useState4 = useState(direction),\n      expandedDirection = _useState4[0],\n      setExpandedDirection = _useState4[1];\n\n  var _useContext = useContext(SettingsContext),\n      transition = _useContext.transition,\n      boundingBoxRef = _useContext.boundingBoxRef,\n      boundingBoxPadding = _useContext.boundingBoxPadding,\n      rootMenuRef = _useContext.rootMenuRef,\n      rootAnchorRef = _useContext.rootAnchorRef,\n      scrollingRef = _useContext.scrollingRef,\n      anchorScrollingRef = _useContext.anchorScrollingRef,\n      reposition = _useContext.reposition,\n      viewScroll = _useContext.viewScroll;\n\n  var reposFlag = useContext(MenuListContext).reposSubmenu || repositionFlag;\n  var menuRef = useRef(null);\n  var arrowRef = useRef(null);\n  var prevOpen = useRef(false);\n  var latestMenuSize = useRef({\n    width: 0,\n    height: 0\n  });\n  var latestHandlePosition = useRef(function () {});\n  var isOpen = isMenuOpen(state);\n  var openTransition = getTransition(transition, 'open');\n  var closeTransition = getTransition(transition, 'close');\n\n  var _useMemo = useMemo(function () {\n    return cloneChildren(children);\n  }, [children]),\n      menuItems = _useMemo.items,\n      menuItemsCount = _useMemo.index,\n      descendOverflow = _useMemo.descendOverflow;\n\n  var reducer = function reducer(_ref2, action) {\n    var hoverIndex = _ref2.hoverIndex,\n        openSubmenuCount = _ref2.openSubmenuCount;\n    return {\n      hoverIndex: hoverIndexReducer(hoverIndex, action, menuItemsCount),\n      openSubmenuCount: submenuCountReducer(openSubmenuCount, action)\n    };\n  };\n\n  var _useReducer = useReducer(reducer, {\n    hoverIndex: initialHoverIndex,\n    openSubmenuCount: 0\n  }),\n      _useReducer$ = _useReducer[0],\n      hoverIndex = _useReducer$.hoverIndex,\n      openSubmenuCount = _useReducer$.openSubmenuCount,\n      dispatch = _useReducer[1];\n\n  var _useReducer2 = useReducer(function (c) {\n    return c + 1;\n  }, 1),\n      reposSubmenu = _useReducer2[0],\n      forceReposSubmenu = _useReducer2[1];\n\n  var handleKeyDown = function handleKeyDown(e) {\n    var handled = false;\n\n    switch (e.key) {\n      case Keys.HOME:\n        dispatch({\n          type: HoverIndexActionTypes.FIRST\n        });\n        handled = true;\n        break;\n\n      case Keys.END:\n        dispatch({\n          type: HoverIndexActionTypes.LAST\n        });\n        handled = true;\n        break;\n\n      case Keys.UP:\n        dispatch({\n          type: HoverIndexActionTypes.DECREASE\n        });\n        handled = true;\n        break;\n\n      case Keys.DOWN:\n        dispatch({\n          type: HoverIndexActionTypes.INCREASE\n        });\n        handled = true;\n        break;\n\n      case Keys.SPACE:\n        if (e.target && e.target.className.indexOf(menuClass) !== -1) {\n          e.preventDefault();\n        }\n\n        break;\n    }\n\n    if (handled) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  };\n\n  var handleAnimationEnd = function handleAnimationEnd() {\n    if (state === 'closing') {\n      setOverflowData();\n    }\n\n    safeCall(endTransition);\n  };\n\n  var handlePosition = useCallback(function () {\n    if (!containerRef.current) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error('[React-Menu] Menu cannot be positioned properly as container ref is null. If you initialise isOpen prop to true for ControlledMenu, please see this link for a solution: https://github.com/szhsin/react-menu/issues/2#issuecomment-719166062');\n      }\n\n      return;\n    }\n\n    if (!scrollingRef.current) {\n      scrollingRef.current = boundingBoxRef ? boundingBoxRef.current : getScrollAncestor(rootMenuRef.current);\n    }\n\n    var positionHelpers = getPositionHelpers({\n      menuRef: menuRef,\n      containerRef: containerRef,\n      scrollingRef: scrollingRef,\n      boundingBoxPadding: boundingBoxPadding\n    });\n    var menuRect = positionHelpers.menuRect;\n    var results = {\n      computedDirection: 'bottom'\n    };\n\n    if (anchorPoint) {\n      results = positionContextMenu({\n        positionHelpers: positionHelpers,\n        anchorPoint: anchorPoint\n      });\n    } else if (anchorRef) {\n      results = positionMenu({\n        arrow: arrow,\n        align: align,\n        direction: direction,\n        offsetX: offsetX,\n        offsetY: offsetY,\n        position: position,\n        anchorRef: anchorRef,\n        arrowRef: arrowRef,\n        positionHelpers: positionHelpers\n      });\n    }\n\n    var _results = results,\n        arrowX = _results.arrowX,\n        arrowY = _results.arrowY,\n        x = _results.x,\n        y = _results.y,\n        computedDirection = _results.computedDirection;\n    var menuHeight = menuRect.height;\n\n    if (overflow !== 'visible') {\n      var getTopOverflow = positionHelpers.getTopOverflow,\n          getBottomOverflow = positionHelpers.getBottomOverflow;\n\n      var height, _overflowAmt;\n\n      var prevHeight = latestMenuSize.current.height;\n      var bottomOverflow = getBottomOverflow(y);\n\n      if (bottomOverflow > 0 || floatEqual(bottomOverflow, 0) && floatEqual(menuHeight, prevHeight)) {\n        height = menuHeight - bottomOverflow;\n        _overflowAmt = bottomOverflow;\n      } else {\n        var topOverflow = getTopOverflow(y);\n\n        if (topOverflow < 0 || floatEqual(topOverflow, 0) && floatEqual(menuHeight, prevHeight)) {\n          height = menuHeight + topOverflow;\n          _overflowAmt = 0 - topOverflow;\n          if (height >= 0) y -= topOverflow;\n        }\n      }\n\n      if (height >= 0) {\n        menuHeight = height;\n        setOverflowData({\n          height: height,\n          overflowAmt: _overflowAmt\n        });\n      } else {\n        setOverflowData();\n      }\n    }\n\n    if (arrow) setArrowPosition({\n      x: arrowX,\n      y: arrowY\n    });\n    setMenuPosition({\n      x: x,\n      y: y\n    });\n    setExpandedDirection(computedDirection);\n    latestMenuSize.current = {\n      width: menuRect.width,\n      height: menuHeight\n    };\n  }, [arrow, align, boundingBoxPadding, direction, offsetX, offsetY, position, overflow, anchorPoint, anchorRef, containerRef, boundingBoxRef, rootMenuRef, scrollingRef]);\n  useIsomorphicLayoutEffect(function () {\n    if (isOpen) {\n      handlePosition();\n      if (prevOpen.current) forceReposSubmenu();\n    }\n\n    prevOpen.current = isOpen;\n    latestHandlePosition.current = handlePosition;\n  }, [isOpen, handlePosition, reposFlag]);\n  useIsomorphicLayoutEffect(function () {\n    if (overflowData && !descendOverflow) menuRef.current.scrollTop = 0;\n  }, [overflowData, descendOverflow]);\n  useEffect(function () {\n    if (!isOpen) return;\n\n    if (!anchorScrollingRef.current && rootAnchorRef && rootAnchorRef.current.tagName) {\n      anchorScrollingRef.current = getScrollAncestor(rootAnchorRef.current);\n    }\n\n    var scrollCurrent = scrollingRef.current;\n    var menuScroll = scrollCurrent && scrollCurrent.addEventListener ? scrollCurrent : window;\n    var anchorScroll = anchorScrollingRef.current || menuScroll;\n    var scroll = viewScroll;\n    if (anchorScroll !== menuScroll && scroll === 'initial') scroll = 'auto';\n    if (scroll === 'initial') return;\n    if (scroll === 'auto' && overflow !== 'visible') scroll = 'close';\n\n    var handleScroll = function handleScroll() {\n      if (scroll === 'auto') {\n        batchedUpdates(handlePosition);\n      } else {\n        safeCall(onClose, {\n          reason: CloseReason.SCROLL\n        });\n      }\n    };\n\n    var scrollObservers = anchorScroll !== menuScroll && viewScroll !== 'initial' ? [anchorScroll, menuScroll] : [anchorScroll];\n    scrollObservers.forEach(function (o) {\n      return o.addEventListener('scroll', handleScroll);\n    });\n    return function () {\n      return scrollObservers.forEach(function (o) {\n        return o.removeEventListener('scroll', handleScroll);\n      });\n    };\n  }, [rootAnchorRef, anchorScrollingRef, scrollingRef, isOpen, overflow, onClose, viewScroll, handlePosition]);\n  var hasOverflow = !!overflowData && overflowData.overflowAmt > 0;\n  useEffect(function () {\n    if (hasOverflow || !isOpen || !parentScrollingRef) return;\n\n    var handleScroll = function handleScroll() {\n      return batchedUpdates(handlePosition);\n    };\n\n    var parentScroll = parentScrollingRef.current;\n    parentScroll.addEventListener('scroll', handleScroll);\n    return function () {\n      return parentScroll.removeEventListener('scroll', handleScroll);\n    };\n  }, [isOpen, hasOverflow, parentScrollingRef, handlePosition]);\n  useEffect(function () {\n    if (typeof ResizeObserver !== 'function' || reposition === 'initial') return;\n    var resizeObserver = new ResizeObserver(function (_ref3) {\n      var entry = _ref3[0];\n      var borderBoxSize = entry.borderBoxSize,\n          target = entry.target;\n      var width, height;\n\n      if (borderBoxSize) {\n        var _ref4 = borderBoxSize[0] || borderBoxSize,\n            inlineSize = _ref4.inlineSize,\n            blockSize = _ref4.blockSize;\n\n        width = inlineSize;\n        height = blockSize;\n      } else {\n        var borderRect = target.getBoundingClientRect();\n        width = borderRect.width;\n        height = borderRect.height;\n      }\n\n      if (width === 0 || height === 0) return;\n      if (floatEqual(width, latestMenuSize.current.width, 1) && floatEqual(height, latestMenuSize.current.height, 1)) return;\n      flushSync(function () {\n        latestHandlePosition.current();\n        forceReposSubmenu();\n      });\n    });\n    var observeTarget = menuRef.current;\n    resizeObserver.observe(observeTarget, {\n      box: 'border-box'\n    });\n    return function () {\n      return resizeObserver.unobserve(observeTarget);\n    };\n  }, [reposition]);\n  useEffect(function () {\n    if (!isOpen) {\n      dispatch({\n        type: HoverIndexActionTypes.RESET\n      });\n      if (!closeTransition) setOverflowData();\n      return;\n    }\n\n    var _ref5 = menuItemFocus || {},\n        position = _ref5.position,\n        alwaysUpdate = _ref5.alwaysUpdate;\n\n    var setItemFocus = function setItemFocus() {\n      if (position === FocusPositions.FIRST) {\n        dispatch({\n          type: HoverIndexActionTypes.FIRST\n        });\n      } else if (position === FocusPositions.LAST) {\n        dispatch({\n          type: HoverIndexActionTypes.LAST\n        });\n      } else if (position >= 0 && position < menuItemsCount) {\n        dispatch({\n          type: HoverIndexActionTypes.SET,\n          index: position\n        });\n      }\n    };\n\n    if (alwaysUpdate) {\n      setItemFocus();\n    } else if (captureFocus) {\n      var id = setTimeout(function () {\n        if (menuRef.current && !menuRef.current.contains(document.activeElement)) {\n          menuRef.current.focus();\n          setItemFocus();\n        }\n      }, openTransition ? 170 : 100);\n      return function () {\n        return clearTimeout(id);\n      };\n    }\n  }, [openTransition, closeTransition, captureFocus, isOpen, menuItemFocus, menuItemsCount]);\n  var isSubmenuOpen = openSubmenuCount > 0;\n  var itemContext = useMemo(function () {\n    return {\n      parentMenuRef: menuRef,\n      parentOverflow: overflow,\n      isParentOpen: isOpen,\n      isSubmenuOpen: isSubmenuOpen,\n      dispatch: dispatch\n    };\n  }, [isOpen, isSubmenuOpen, overflow]);\n  var maxHeight, overflowAmt;\n\n  if (overflowData) {\n    descendOverflow ? overflowAmt = overflowData.overflowAmt : maxHeight = overflowData.height;\n  }\n\n  var listContext = useMemo(function () {\n    return {\n      reposSubmenu: reposSubmenu,\n      overflow: overflow,\n      overflowAmt: overflowAmt\n    };\n  }, [reposSubmenu, overflow, overflowAmt]);\n  var overflowStyles = maxHeight >= 0 ? {\n    maxHeight: maxHeight,\n    overflow: overflow\n  } : undefined;\n  var modifiers = useMemo(function () {\n    return {\n      state: state,\n      dir: expandedDirection\n    };\n  }, [state, expandedDirection]);\n  var arrowModifiers = useMemo(function () {\n    return Object.freeze({\n      dir: expandedDirection\n    });\n  }, [expandedDirection]);\n\n  var _arrowClass = useBEM({\n    block: menuClass,\n    element: menuArrowClass,\n    modifiers: arrowModifiers,\n    className: arrowClassName\n  });\n\n  var _arrowStyles = useFlatStyles(arrowStyles, arrowModifiers);\n\n  var handlers = attachHandlerProps({\n    onKeyDown: handleKeyDown,\n    onAnimationEnd: handleAnimationEnd\n  }, restProps);\n  return /*#__PURE__*/React.createElement(\"ul\", _extends({\n    role: \"menu\",\n    \"aria-label\": ariaLabel\n  }, commonProps(isDisabled), restProps, handlers, {\n    ref: useCombinedRef(externalRef, menuRef),\n    className: useBEM({\n      block: menuClass,\n      modifiers: modifiers,\n      className: menuClassName\n    }),\n    style: _extends({}, useFlatStyles(menuStyles, modifiers), overflowStyles, {\n      left: menuPosition.x,\n      top: menuPosition.y\n    })\n  }), arrow && /*#__PURE__*/React.createElement(\"div\", {\n    className: _arrowClass,\n    style: _extends({}, _arrowStyles, {\n      left: arrowPosition.x,\n      top: arrowPosition.y\n    }),\n    ref: arrowRef\n  }), /*#__PURE__*/React.createElement(MenuListContext.Provider, {\n    value: listContext\n  }, /*#__PURE__*/React.createElement(MenuListItemContext.Provider, {\n    value: itemContext\n  }, /*#__PURE__*/React.createElement(HoverIndexContext.Provider, {\n    value: hoverIndex\n  }, menuItems))));\n};\n\nfunction hoverIndexReducer(state, _ref6, menuItemsCount) {\n  var type = _ref6.type,\n      index = _ref6.index;\n\n  switch (type) {\n    case HoverIndexActionTypes.RESET:\n      return initialHoverIndex;\n\n    case HoverIndexActionTypes.SET:\n      return index;\n\n    case HoverIndexActionTypes.UNSET:\n      return state === index ? initialHoverIndex : state;\n\n    case HoverIndexActionTypes.DECREASE:\n      {\n        var i = state;\n        i--;\n        if (i < 0) i = menuItemsCount - 1;\n        return i;\n      }\n\n    case HoverIndexActionTypes.INCREASE:\n      {\n        var _i = state;\n        _i++;\n        if (_i >= menuItemsCount) _i = 0;\n        return _i;\n      }\n\n    case HoverIndexActionTypes.FIRST:\n      return menuItemsCount > 0 ? 0 : initialHoverIndex;\n\n    case HoverIndexActionTypes.LAST:\n      return menuItemsCount > 0 ? menuItemsCount - 1 : initialHoverIndex;\n\n    default:\n      return state;\n  }\n}\n\nfunction submenuCountReducer(state, _ref7) {\n  var type = _ref7.type;\n\n  switch (type) {\n    case SubmenuActionTypes.OPEN:\n      return state + 1;\n\n    case SubmenuActionTypes.CLOSE:\n      return Math.max(state - 1, 0);\n\n    default:\n      return state;\n  }\n}\n\nexport { MenuList };\n","import { parsePadding } from '../utils/utils.js';\n\nvar getPositionHelpers = function getPositionHelpers(_ref) {\n  var menuRef = _ref.menuRef,\n      containerRef = _ref.containerRef,\n      scrollingRef = _ref.scrollingRef,\n      boundingBoxPadding = _ref.boundingBoxPadding;\n  var menuRect = menuRef.current.getBoundingClientRect();\n  var containerRect = containerRef.current.getBoundingClientRect();\n  var boundingRect = scrollingRef.current === window ? {\n    left: 0,\n    top: 0,\n    right: document.documentElement.clientWidth,\n    bottom: window.innerHeight\n  } : scrollingRef.current.getBoundingClientRect();\n  var padding = parsePadding(boundingBoxPadding);\n\n  var getLeftOverflow = function getLeftOverflow(x) {\n    return x + containerRect.left - boundingRect.left - padding.left;\n  };\n\n  var getRightOverflow = function getRightOverflow(x) {\n    return x + containerRect.left + menuRect.width - boundingRect.right + padding.right;\n  };\n\n  var getTopOverflow = function getTopOverflow(y) {\n    return y + containerRect.top - boundingRect.top - padding.top;\n  };\n\n  var getBottomOverflow = function getBottomOverflow(y) {\n    return y + containerRect.top + menuRect.height - boundingRect.bottom + padding.bottom;\n  };\n\n  var confineHorizontally = function confineHorizontally(x) {\n    var leftOverflow = getLeftOverflow(x);\n\n    if (leftOverflow < 0) {\n      x -= leftOverflow;\n    } else {\n      var rightOverflow = getRightOverflow(x);\n\n      if (rightOverflow > 0) {\n        x -= rightOverflow;\n        leftOverflow = getLeftOverflow(x);\n        if (leftOverflow < 0) x -= leftOverflow;\n      }\n    }\n\n    return x;\n  };\n\n  var confineVertically = function confineVertically(y) {\n    var topOverflow = getTopOverflow(y);\n\n    if (topOverflow < 0) {\n      y -= topOverflow;\n    } else {\n      var bottomOverflow = getBottomOverflow(y);\n\n      if (bottomOverflow > 0) {\n        y -= bottomOverflow;\n        topOverflow = getTopOverflow(y);\n        if (topOverflow < 0) y -= topOverflow;\n      }\n    }\n\n    return y;\n  };\n\n  return {\n    menuRect: menuRect,\n    containerRect: containerRect,\n    getLeftOverflow: getLeftOverflow,\n    getRightOverflow: getRightOverflow,\n    getTopOverflow: getTopOverflow,\n    getBottomOverflow: getBottomOverflow,\n    confineHorizontally: confineHorizontally,\n    confineVertically: confineVertically\n  };\n};\n\nexport { getPositionHelpers };\n","var positionContextMenu = function positionContextMenu(_ref) {\n  var positionHelpers = _ref.positionHelpers,\n      anchorPoint = _ref.anchorPoint;\n  var menuRect = positionHelpers.menuRect,\n      containerRect = positionHelpers.containerRect,\n      getLeftOverflow = positionHelpers.getLeftOverflow,\n      getRightOverflow = positionHelpers.getRightOverflow,\n      getTopOverflow = positionHelpers.getTopOverflow,\n      getBottomOverflow = positionHelpers.getBottomOverflow,\n      confineHorizontally = positionHelpers.confineHorizontally,\n      confineVertically = positionHelpers.confineVertically;\n  var x, y;\n  x = anchorPoint.x - containerRect.left;\n  y = anchorPoint.y - containerRect.top;\n  var rightOverflow = getRightOverflow(x);\n\n  if (rightOverflow > 0) {\n    var adjustedX = x - menuRect.width;\n    var leftOverflow = getLeftOverflow(adjustedX);\n\n    if (leftOverflow >= 0 || -leftOverflow < rightOverflow) {\n      x = adjustedX;\n    }\n\n    x = confineHorizontally(x);\n  }\n\n  var computedDirection = 'bottom';\n  var bottomOverflow = getBottomOverflow(y);\n\n  if (bottomOverflow > 0) {\n    var adjustedY = y - menuRect.height;\n    var topOverflow = getTopOverflow(adjustedY);\n\n    if (topOverflow >= 0 || -topOverflow < bottomOverflow) {\n      y = adjustedY;\n      computedDirection = 'top';\n    }\n\n    y = confineVertically(y);\n  }\n\n  return {\n    x: x,\n    y: y,\n    computedDirection: computedDirection\n  };\n};\n\nexport { positionContextMenu };\n","import { extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { placeLeftorRight } from './placeLeftorRight.js';\nimport { placeToporBottom } from './placeToporBottom.js';\n\nvar positionMenu = function positionMenu(_ref) {\n  var arrow = _ref.arrow,\n      align = _ref.align,\n      direction = _ref.direction,\n      offsetX = _ref.offsetX,\n      offsetY = _ref.offsetY,\n      position = _ref.position,\n      anchorRef = _ref.anchorRef,\n      arrowRef = _ref.arrowRef,\n      positionHelpers = _ref.positionHelpers;\n  var menuRect = positionHelpers.menuRect,\n      containerRect = positionHelpers.containerRect;\n  var horizontalOffset = offsetX;\n  var verticalOffset = offsetY;\n\n  if (arrow) {\n    if (direction === 'left' || direction === 'right') {\n      horizontalOffset += arrowRef.current.offsetWidth;\n    } else {\n      verticalOffset += arrowRef.current.offsetHeight;\n    }\n  }\n\n  var anchorRect = anchorRef.current.getBoundingClientRect();\n  var placeLeftX = anchorRect.left - containerRect.left - menuRect.width - horizontalOffset;\n  var placeRightX = anchorRect.right - containerRect.left + horizontalOffset;\n  var placeTopY = anchorRect.top - containerRect.top - menuRect.height - verticalOffset;\n  var placeBottomY = anchorRect.bottom - containerRect.top + verticalOffset;\n  var placeToporBottomX, placeLeftorRightY;\n\n  if (align === 'end') {\n    placeToporBottomX = anchorRect.right - containerRect.left - menuRect.width;\n    placeLeftorRightY = anchorRect.bottom - containerRect.top - menuRect.height;\n  } else if (align === 'center') {\n    placeToporBottomX = anchorRect.left - containerRect.left - (menuRect.width - anchorRect.width) / 2;\n    placeLeftorRightY = anchorRect.top - containerRect.top - (menuRect.height - anchorRect.height) / 2;\n  } else {\n    placeToporBottomX = anchorRect.left - containerRect.left;\n    placeLeftorRightY = anchorRect.top - containerRect.top;\n  }\n\n  placeToporBottomX += horizontalOffset;\n  placeLeftorRightY += verticalOffset;\n\n  var options = _extends({}, positionHelpers, {\n    anchorRect: anchorRect,\n    placeLeftX: placeLeftX,\n    placeRightX: placeRightX,\n    placeLeftorRightY: placeLeftorRightY,\n    placeTopY: placeTopY,\n    placeBottomY: placeBottomY,\n    placeToporBottomX: placeToporBottomX,\n    arrowRef: arrowRef,\n    arrow: arrow,\n    direction: direction,\n    position: position\n  });\n\n  switch (direction) {\n    case 'left':\n    case 'right':\n      return placeLeftorRight(options);\n\n    case 'top':\n    case 'bottom':\n    default:\n      return placeToporBottom(options);\n  }\n};\n\nexport { positionMenu };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n// response\r\n\r\nexport interface IActivityPayloadResponse {\r\n    conversationId: string;\r\n    messageDataStreamType: number;\r\n    messagePayload: any;\r\n    version: number;\r\n}\r\n\r\nexport class ActivityPayloadResponse implements IActivityPayloadResponse {\r\n    private privActivityResponse: IActivityPayloadResponse;\r\n\r\n    private constructor(json: string) {\r\n        this.privActivityResponse = JSON.parse(json);\r\n    }\r\n\r\n    public static fromJSON(json: string): ActivityPayloadResponse {\r\n        return new ActivityPayloadResponse(json);\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privActivityResponse.conversationId;\r\n    }\r\n\r\n    public get messageDataStreamType(): number {\r\n        return this.privActivityResponse.messageDataStreamType;\r\n    }\r\n\r\n    public get messagePayload(): any {\r\n        return this.privActivityResponse.messagePayload;\r\n    }\r\n\r\n    public get version(): number {\r\n        return this.privActivityResponse.version;\r\n    }\r\n}\r\n\r\nexport enum MessageDataStreamType {\r\n    None = 0,\r\n    TextToSpeechAudio = 1,\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { AgentConfig } from \"../common.speech/Exports\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class DialogEvent extends PlatformEvent {\r\n\r\n    constructor(eventName: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n    }\r\n}\r\n\r\nexport class SendingAgentContextMessageEvent extends DialogEvent {\r\n    private privAgentConfig: AgentConfig;\r\n\r\n    constructor(agentConfig: AgentConfig) {\r\n        super(\"SendingAgentContextMessageEvent\");\r\n        this.privAgentConfig = agentConfig;\r\n    }\r\n\r\n    public get agentConfig(): AgentConfig {\r\n        return this.privAgentConfig;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport { AudioOutputStream, PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager\";\r\nimport { ActivityPayloadResponse, MessageDataStreamType } from \"./ServiceMessages/ActivityResponsePayload\";\r\n\r\nexport class DialogServiceTurnState {\r\n    private privRequestId: string;\r\n    private privIsCompleted: boolean;\r\n    private privAudioStream: PullAudioOutputStreamImpl;\r\n    private privTimeoutToken: any;\r\n    private privTurnManager: DialogServiceTurnStateManager;\r\n\r\n    constructor(manager: DialogServiceTurnStateManager, requestId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privIsCompleted = false;\r\n        this.privAudioStream = null;\r\n        this.privTurnManager = manager;\r\n        this.resetTurnEndTimeout();\r\n        // tslint:disable-next-line:no-console\r\n        // console.info(\"DialogServiceTurnState debugturn start:\" + this.privRequestId);\r\n    }\r\n\r\n    public get audioStream(): PullAudioOutputStreamImpl {\r\n        // Called when is needed to stream.\r\n        this.resetTurnEndTimeout();\r\n        return this.privAudioStream;\r\n    }\r\n\r\n    public processActivityPayload(payload: ActivityPayloadResponse, audioFormat?: AudioOutputFormatImpl): PullAudioOutputStreamImpl {\r\n        if (payload.messageDataStreamType === MessageDataStreamType.TextToSpeechAudio) {\r\n            this.privAudioStream = AudioOutputStream.createPullStream() as PullAudioOutputStreamImpl;\r\n            this.privAudioStream.format = (audioFormat !== undefined) ? audioFormat : AudioOutputFormatImpl.getDefaultOutputFormat();\r\n            // tslint:disable-next-line:no-console\r\n            // console.info(\"Audio start debugturn:\" + this.privRequestId);\r\n        }\r\n        return this.privAudioStream;\r\n    }\r\n\r\n    public endAudioStream(): void {\r\n        if (this.privAudioStream !== null && !this.privAudioStream.isClosed) {\r\n            this.privAudioStream.close();\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            clearTimeout(this.privTimeoutToken);\r\n        }\r\n        this.endAudioStream();\r\n    }\r\n\r\n    private resetTurnEndTimeout(): void {\r\n        if (this.privTimeoutToken !== undefined) {\r\n            clearTimeout(this.privTimeoutToken);\r\n        }\r\n        // tslint:disable-next-line:no-console\r\n        // console.info(\"Timeout reset debugturn:\" + this.privRequestId);\r\n\r\n        this.privTimeoutToken = setTimeout((): void => {\r\n            // tslint:disable-next-line:no-console\r\n            // console.info(\"Timeout complete debugturn:\" + this.privRequestId);\r\n\r\n            this.privTurnManager.CompleteTurn(this.privRequestId);\r\n            return;\r\n        }, 2000);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"../common/Error\";\r\nimport { AudioOutputStream, PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\r\nimport { DialogServiceTurnState } from \"./DialogServiceTurnState\";\r\nimport { ActivityPayloadResponse } from \"./ServiceMessages/ActivityResponsePayload\";\r\n\r\nexport class DialogServiceTurnStateManager {\r\n    private privTurnMap: Map<string, DialogServiceTurnState>;\r\n\r\n    constructor() {\r\n        this.privTurnMap = new Map<string, DialogServiceTurnState>();\r\n        return;\r\n    }\r\n\r\n    public StartTurn(id: string): DialogServiceTurnState {\r\n        if (this.privTurnMap.has(id)) {\r\n            throw new InvalidOperationError(\"Service error: There is already a turn with id:\" + id);\r\n        }\r\n        const turnState: DialogServiceTurnState = new DialogServiceTurnState(this, id);\r\n        this.privTurnMap.set(id, turnState);\r\n        return this.privTurnMap.get(id);\r\n    }\r\n\r\n    public GetTurn(id: string): DialogServiceTurnState {\r\n        return this.privTurnMap.get(id);\r\n    }\r\n\r\n    public CompleteTurn(id: string): DialogServiceTurnState {\r\n        if (!this.privTurnMap.has(id)) {\r\n            throw new InvalidOperationError(\"Service error: Received turn end for an unknown turn id:\" + id);\r\n        }\r\n        const turnState = this.privTurnMap.get(id);\r\n        turnState.complete();\r\n        this.privTurnMap.delete(id);\r\n        return turnState;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ReplayableAudioNode\r\n} from \"../common.browser/Exports\";\r\nimport { SendingAgentContextMessageEvent } from \"../common/DialogEvents\";\r\nimport {\r\n    BackgroundEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    createGuid,\r\n    createNoDashGuid,\r\n    Deferred,\r\n    DialogEvent,\r\n    Events,\r\n    EventSource,\r\n    IAudioSource,\r\n    IAudioStreamNode,\r\n    IConnection,\r\n    MessageType,\r\n    ServiceEvent,\r\n} from \"../common/Exports\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\r\nimport { AudioStreamFormatImpl } from \"../sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    ActivityReceivedEventArgs,\r\n    CancellationErrorCode,\r\n    CancellationReason,\r\n    DialogServiceConfig,\r\n    DialogServiceConnector,\r\n    PropertyCollection,\r\n    PropertyId,\r\n    RecognitionEventArgs,\r\n    ResultReason,\r\n    SessionEventArgs,\r\n    SpeechRecognitionCanceledEventArgs,\r\n    SpeechRecognitionEventArgs,\r\n    SpeechRecognitionResult,\r\n    TurnStatusReceivedEventArgs,\r\n} from \"../sdk/Exports\";\r\nimport { DialogServiceTurnStateManager } from \"./DialogServiceTurnStateManager\";\r\nimport {\r\n    CancellationErrorCodePropertyName,\r\n    EnumTranslation,\r\n    ISpeechConfigAudioDevice,\r\n    RecognitionStatus,\r\n    ServiceRecognizerBase,\r\n    SimpleSpeechPhrase,\r\n    SpeechDetected,\r\n    SpeechHypothesis,\r\n    SpeechKeyword,\r\n} from \"./Exports\";\r\nimport { IAuthentication } from \"./IAuthentication\";\r\nimport { IConnectionFactory } from \"./IConnectionFactory\";\r\nimport { RecognitionMode, RecognizerConfig } from \"./RecognizerConfig\";\r\nimport { ActivityPayloadResponse } from \"./ServiceMessages/ActivityResponsePayload\";\r\nimport { SpeechConnectionMessage } from \"./SpeechConnectionMessage.Internal\";\r\n\r\nexport class DialogServiceAdapter extends ServiceRecognizerBase {\r\n    private privDialogServiceConnector: DialogServiceConnector;\r\n\r\n    private privDialogAudioSource: IAudioSource;\r\n\r\n    private privConnectionLoop: Promise<void>;\r\n    private terminateMessageLoop: boolean;\r\n    private agentConfigSent: boolean;\r\n    private privLastResult: SpeechRecognitionResult;\r\n    private privEvents: EventSource<DialogEvent>;\r\n\r\n    // Turns are of two kinds:\r\n    // 1: SR turns, end when the SR result is returned and then turn end.\r\n    // 2: Service turns where an activity is sent by the service along with the audio.\r\n    private privTurnStateManager: DialogServiceTurnStateManager;\r\n\r\n    public constructor(\r\n        authentication: IAuthentication,\r\n        connectionFactory: IConnectionFactory,\r\n        audioSource: IAudioSource,\r\n        recognizerConfig: RecognizerConfig,\r\n        dialogServiceConnector: DialogServiceConnector) {\r\n\r\n        super(authentication, connectionFactory, audioSource, recognizerConfig, dialogServiceConnector);\r\n\r\n        this.privEvents = new EventSource<DialogEvent>();\r\n        this.privDialogServiceConnector = dialogServiceConnector;\r\n        this.receiveMessageOverride = this.receiveDialogMessageOverride;\r\n        this.privTurnStateManager = new DialogServiceTurnStateManager();\r\n        this.recognizeOverride = this.listenOnce;\r\n        this.postConnectImplOverride = this.dialogConnectImpl;\r\n        this.configConnectionOverride = this.configConnection;\r\n        this.disconnectOverride = this.privDisconnect;\r\n        this.privDialogAudioSource = audioSource;\r\n\r\n        this.agentConfigSent = false;\r\n        this.privLastResult = null;\r\n        this.connectionEvents.attach(async (connectionEvent: ConnectionEvent): Promise<void> => {\r\n            if (connectionEvent.name === \"ConnectionClosedEvent\") {\r\n                this.terminateMessageLoop = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async sendMessage(message: string): Promise<void> {\r\n        const interactionGuid: string = createGuid();\r\n        const requestId: string = createNoDashGuid();\r\n\r\n        const agentMessage: any = {\r\n            context: {\r\n                interactionId: interactionGuid\r\n            },\r\n            messagePayload: JSON.parse(message),\r\n            version: 0.5\r\n        };\r\n\r\n        const agentMessageJson = JSON.stringify(agentMessage);\r\n        const connection: IConnection = await this.fetchConnection();\r\n        await connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"agent\",\r\n            requestId,\r\n            \"application/json\",\r\n            agentMessageJson));\r\n\r\n    }\r\n\r\n    protected async privDisconnect(): Promise<void> {\r\n        await this.cancelRecognition(this.privRequestSession.sessionId,\r\n            this.privRequestSession.requestId,\r\n            CancellationReason.Error,\r\n            CancellationErrorCode.NoError,\r\n            \"Disconnecting\");\r\n\r\n        this.terminateMessageLoop = true;\r\n        this.agentConfigSent = false;\r\n        return;\r\n    }\r\n\r\n    protected async processTypeSpecificMessages(connectionMessage: SpeechConnectionMessage): Promise<boolean> {\r\n\r\n        const resultProps: PropertyCollection = new PropertyCollection();\r\n        if (connectionMessage.messageType === MessageType.Text) {\r\n            resultProps.setProperty(PropertyId.SpeechServiceResponse_JsonResult, connectionMessage.textBody);\r\n        }\r\n\r\n        let result: SpeechRecognitionResult;\r\n        let processed: boolean;\r\n\r\n        switch (connectionMessage.path.toLowerCase()) {\r\n            case \"speech.phrase\":\r\n                const speechPhrase: SimpleSpeechPhrase = SimpleSpeechPhrase.fromJSON(connectionMessage.textBody);\r\n\r\n                this.privRequestSession.onPhraseRecognized(this.privRequestSession.currentTurnAudioOffset + speechPhrase.Offset + speechPhrase.Duration);\r\n\r\n                if (speechPhrase.RecognitionStatus !== RecognitionStatus.TooManyRequests && speechPhrase.RecognitionStatus !== RecognitionStatus.Error) {\r\n                    const args: SpeechRecognitionEventArgs = this.fireEventForResult(speechPhrase, resultProps);\r\n                    this.privLastResult = args.result;\r\n\r\n                    if (!!this.privDialogServiceConnector.recognized) {\r\n                        try {\r\n                            this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, args);\r\n                            /* tslint:disable:no-empty */\r\n                        } catch (error) {\r\n                            // Not going to let errors in the event handler\r\n                            // trip things up.\r\n                        }\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.hypothesis\":\r\n                const hypothesis: SpeechHypothesis = SpeechHypothesis.fromJSON(connectionMessage.textBody);\r\n                const offset: number = hypothesis.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    ResultReason.RecognizingSpeech,\r\n                    hypothesis.Text,\r\n                    hypothesis.Duration,\r\n                    offset,\r\n                    hypothesis.Language,\r\n                    hypothesis.LanguageDetectionConfidence,\r\n                    undefined,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                this.privRequestSession.onHypothesis(offset);\r\n\r\n                const ev = new SpeechRecognitionEventArgs(result, hypothesis.Duration, this.privRequestSession.sessionId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognizing) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognizing(this.privDialogServiceConnector, ev);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"speech.keyword\":\r\n                const keyword: SpeechKeyword = SpeechKeyword.fromJSON(connectionMessage.textBody);\r\n\r\n                result = new SpeechRecognitionResult(\r\n                    this.privRequestSession.requestId,\r\n                    keyword.Status === \"Accepted\" ? ResultReason.RecognizedKeyword : ResultReason.NoMatch,\r\n                    keyword.Text,\r\n                    keyword.Duration,\r\n                    keyword.Offset,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    undefined,\r\n                    connectionMessage.textBody,\r\n                    resultProps);\r\n\r\n                if (keyword.Status !== \"Accepted\") {\r\n                    this.privLastResult = result;\r\n                }\r\n\r\n                const event = new SpeechRecognitionEventArgs(result, result.duration, result.resultId);\r\n\r\n                if (!!this.privDialogServiceConnector.recognized) {\r\n                    try {\r\n                        this.privDialogServiceConnector.recognized(this.privDialogServiceConnector, event);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n            case \"audio\":\r\n                {\r\n                    const audioRequestId = connectionMessage.requestId.toUpperCase();\r\n                    const turn = this.privTurnStateManager.GetTurn(audioRequestId);\r\n                    try {\r\n                        // Empty binary message signals end of stream.\r\n                        if (!connectionMessage.binaryBody) {\r\n                            turn.endAudioStream();\r\n                        } else {\r\n                            turn.audioStream.write(connectionMessage.binaryBody);\r\n                        }\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            case \"response\":\r\n                {\r\n                    this.handleResponseMessage(connectionMessage);\r\n\r\n                }\r\n                processed = true;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        return processed;\r\n    }\r\n\r\n    // Cancels recognition.\r\n    protected async cancelRecognition(\r\n        sessionId: string,\r\n        requestId: string,\r\n        cancellationReason: CancellationReason,\r\n        errorCode: CancellationErrorCode,\r\n        error: string): Promise<void> {\r\n\r\n        this.terminateMessageLoop = true;\r\n\r\n        if (!!this.privRequestSession.isRecognizing) {\r\n            await this.privRequestSession.onStopRecognizing();\r\n        }\r\n\r\n        if (!!this.privDialogServiceConnector.canceled) {\r\n            const properties: PropertyCollection = new PropertyCollection();\r\n            properties.setProperty(CancellationErrorCodePropertyName, CancellationErrorCode[errorCode]);\r\n\r\n            const cancelEvent: SpeechRecognitionCanceledEventArgs = new SpeechRecognitionCanceledEventArgs(\r\n                cancellationReason,\r\n                error,\r\n                errorCode,\r\n                undefined,\r\n                sessionId);\r\n\r\n            try {\r\n                this.privDialogServiceConnector.canceled(this.privDialogServiceConnector, cancelEvent);\r\n                /* tslint:disable:no-empty */\r\n            } catch { }\r\n\r\n            if (!!this.privSuccessCallback) {\r\n                const result: SpeechRecognitionResult = new SpeechRecognitionResult(\r\n                    undefined, // ResultId\r\n                    ResultReason.Canceled,\r\n                    undefined, // Text\r\n                    undefined, // Duration\r\n                    undefined, // Offset\r\n                    undefined, // Language\r\n                    undefined, // Language Detection Confidence\r\n                    undefined, // Speaker Id\r\n                    error,\r\n                    undefined, // Json\r\n                    properties);\r\n                try {\r\n                    this.privSuccessCallback(result);\r\n                    this.privSuccessCallback = undefined;\r\n                    /* tslint:disable:no-empty */\r\n                } catch { }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected async listenOnce(\r\n        recoMode: RecognitionMode,\r\n        successCallback: (e: SpeechRecognitionResult) => void,\r\n        errorCallback: (e: string) => void\r\n    ): Promise<void> {\r\n        this.privRecognizerConfig.recognitionMode = recoMode;\r\n\r\n        this.privSuccessCallback = successCallback;\r\n        this.privErrorCallback = errorCallback;\r\n\r\n        this.privRequestSession.startNewRecognition();\r\n        this.privRequestSession.listenForServiceTelemetry(this.privDialogAudioSource.events);\r\n\r\n        this.privRecognizerConfig.parameters.setProperty(PropertyId.Speech_SessionId, this.privRequestSession.sessionId);\r\n\r\n        // Start the connection to the service. The promise this will create is stored and will be used by configureConnection().\r\n        const conPromise: Promise<IConnection> = this.connectImpl();\r\n\r\n        const preAudioPromise: Promise<void> = this.sendPreAudioMessages();\r\n\r\n        const node: IAudioStreamNode = await this.privDialogAudioSource.attach(this.privRequestSession.audioNodeId);\r\n        const format: AudioStreamFormatImpl = await this.privDialogAudioSource.format;\r\n        const deviceInfo: ISpeechConfigAudioDevice = await this.privDialogAudioSource.deviceInfo;\r\n\r\n        const audioNode = new ReplayableAudioNode(node, format.avgBytesPerSec);\r\n        await this.privRequestSession.onAudioSourceAttachCompleted(audioNode, false);\r\n\r\n        this.privRecognizerConfig.SpeechServiceConfig.Context.audio = { source: deviceInfo };\r\n\r\n        try {\r\n            await conPromise;\r\n            await preAudioPromise;\r\n        } catch (error) {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.ConnectionFailure, error);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const sessionStartEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n\r\n        if (!!this.privRecognizer.sessionStarted) {\r\n            this.privRecognizer.sessionStarted(this.privRecognizer, sessionStartEventArgs);\r\n        }\r\n\r\n        const audioSendPromise = this.sendAudio(audioNode);\r\n\r\n        // /* tslint:disable:no-empty */\r\n        audioSendPromise.then(() => { /*add? return true;*/ }, async (error: string) => {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        });\r\n    }\r\n\r\n    // Establishes a websocket connection to the end point.\r\n    private dialogConnectImpl(connection: Promise<IConnection>): Promise<IConnection> {\r\n        this.privConnectionLoop = this.startMessageLoop();\r\n        return connection;\r\n    }\r\n\r\n    private receiveDialogMessageOverride(): Promise<void> {\r\n\r\n        // we won't rely on the cascading promises of the connection since we want to continually be available to receive messages\r\n        const communicationCustodian: Deferred<void> = new Deferred<void>();\r\n\r\n        const loop = async (): Promise<void> => {\r\n            try {\r\n                const isDisposed: boolean = this.isDisposed();\r\n                const terminateMessageLoop = (!this.isDisposed() && this.terminateMessageLoop);\r\n                if (isDisposed || terminateMessageLoop) {\r\n                    // We're done.\r\n                    communicationCustodian.resolve(undefined);\r\n                    return;\r\n                }\r\n\r\n                const connection: IConnection = await this.fetchConnection();\r\n                const message: ConnectionMessage = await connection.read();\r\n\r\n                if (!message) {\r\n                    return loop();\r\n                }\r\n\r\n                const connectionMessage = SpeechConnectionMessage.fromConnectionMessage(message);\r\n\r\n                switch (connectionMessage.path.toLowerCase()) {\r\n                    case \"turn.start\":\r\n                        {\r\n                            const turnRequestId = connectionMessage.requestId.toUpperCase();\r\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\r\n\r\n                            // turn started by the service\r\n                            if (turnRequestId !== audioSessionReqId) {\r\n                                this.privTurnStateManager.StartTurn(turnRequestId);\r\n                            } else {\r\n                                this.privRequestSession.onServiceTurnStartResponse();\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    case \"speech.startdetected\":\r\n                        const speechStartDetected: SpeechDetected = SpeechDetected.fromJSON(connectionMessage.textBody);\r\n\r\n                        const speechStartEventArgs = new RecognitionEventArgs(speechStartDetected.Offset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.speechStartDetected) {\r\n                            this.privRecognizer.speechStartDetected(this.privRecognizer, speechStartEventArgs);\r\n                        }\r\n\r\n                        break;\r\n\r\n                    case \"speech.enddetected\":\r\n\r\n                        let json: string;\r\n\r\n                        if (connectionMessage.textBody.length > 0) {\r\n                            json = connectionMessage.textBody;\r\n                        } else {\r\n                            // If the request was empty, the JSON returned is empty.\r\n                            json = \"{ Offset: 0 }\";\r\n                        }\r\n\r\n                        const speechStopDetected: SpeechDetected = SpeechDetected.fromJSON(json);\r\n\r\n                        this.privRequestSession.onServiceRecognized(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset);\r\n\r\n                        const speechStopEventArgs = new RecognitionEventArgs(speechStopDetected.Offset + this.privRequestSession.currentTurnAudioOffset, this.privRequestSession.sessionId);\r\n\r\n                        if (!!this.privRecognizer.speechEndDetected) {\r\n                            this.privRecognizer.speechEndDetected(this.privRecognizer, speechStopEventArgs);\r\n                        }\r\n                        break;\r\n\r\n                    case \"turn.end\":\r\n                        {\r\n                            const turnEndRequestId = connectionMessage.requestId.toUpperCase();\r\n\r\n                            const audioSessionReqId = this.privRequestSession.requestId.toUpperCase();\r\n\r\n                            // turn started by the service\r\n                            if (turnEndRequestId !== audioSessionReqId) {\r\n                                this.privTurnStateManager.CompleteTurn(turnEndRequestId);\r\n                            } else {\r\n                                // Audio session turn\r\n\r\n                                const sessionStopEventArgs: SessionEventArgs = new SessionEventArgs(this.privRequestSession.sessionId);\r\n                                await this.privRequestSession.onServiceTurnEndResponse(false);\r\n\r\n                                if (!this.privRecognizerConfig.isContinuousRecognition || this.privRequestSession.isSpeechEnded || !this.privRequestSession.isRecognizing) {\r\n                                    if (!!this.privRecognizer.sessionStopped) {\r\n                                        this.privRecognizer.sessionStopped(this.privRecognizer, sessionStopEventArgs);\r\n                                    }\r\n                                }\r\n\r\n                                // report result to promise.\r\n                                if (!!this.privSuccessCallback && this.privLastResult) {\r\n                                    try {\r\n                                        this.privSuccessCallback(this.privLastResult);\r\n                                        this.privLastResult = null;\r\n                                    } catch (e) {\r\n                                        if (!!this.privErrorCallback) {\r\n                                            this.privErrorCallback(e);\r\n                                        }\r\n                                    }\r\n                                    // Only invoke the call back once.\r\n                                    // and if it's successful don't invoke the\r\n                                    // error after that.\r\n                                    this.privSuccessCallback = undefined;\r\n                                    this.privErrorCallback = undefined;\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        if (!this.processTypeSpecificMessages(connectionMessage)) {\r\n                            if (!!this.serviceEvents) {\r\n                                this.serviceEvents.onEvent(new ServiceEvent(connectionMessage.path.toLowerCase(), connectionMessage.textBody));\r\n                            }\r\n                        }\r\n                }\r\n                const ret: Promise<void> = loop();\r\n\r\n                return ret;\r\n            } catch (error) {\r\n                this.terminateMessageLoop = true;\r\n                communicationCustodian.resolve();\r\n            }\r\n        };\r\n\r\n        loop().catch((reason: string): void => {\r\n            Events.instance.onEvent(new BackgroundEvent(reason));\r\n        });\r\n\r\n        return communicationCustodian.promise;\r\n    }\r\n\r\n    private async startMessageLoop(): Promise<void> {\r\n\r\n        this.terminateMessageLoop = false;\r\n\r\n        try {\r\n            await this.receiveDialogMessageOverride();\r\n        } catch (error) {\r\n            await this.cancelRecognition(this.privRequestSession.sessionId, this.privRequestSession.requestId, CancellationReason.Error, CancellationErrorCode.RuntimeError, error);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // Takes an established websocket connection to the endpoint and sends speech configuration information.\r\n    private async configConnection(connection: IConnection): Promise<IConnection> {\r\n        if (this.terminateMessageLoop) {\r\n            this.terminateMessageLoop = false;\r\n            return Promise.reject(`Connection to service terminated.`);\r\n        }\r\n\r\n        await this.sendSpeechServiceConfig(connection, this.privRequestSession, this.privRecognizerConfig.SpeechServiceConfig.serialize());\r\n        await this.sendAgentConfig(connection);\r\n        return connection;\r\n    }\r\n\r\n    private async sendPreAudioMessages(): Promise<void> {\r\n        const connection: IConnection = await this.fetchConnection();\r\n        this.addKeywordContextData();\r\n        await this.sendSpeechContext(connection);\r\n        await this.sendAgentContext(connection);\r\n        await this.sendWaveHeader(connection);\r\n    }\r\n\r\n    private sendAgentConfig = (connection: IConnection): Promise<void> => {\r\n        if (this.agentConfig && !this.agentConfigSent) {\r\n\r\n            if (this.privRecognizerConfig\r\n                .parameters\r\n                .getProperty(PropertyId.Conversation_DialogType) === DialogServiceConfig.DialogTypes.CustomCommands) {\r\n                const config = this.agentConfig.get();\r\n                config.botInfo.commandsCulture = this.privRecognizerConfig.parameters.getProperty(PropertyId.SpeechServiceConnection_RecoLanguage, \"en-us\");\r\n                this.agentConfig.set(config);\r\n            }\r\n            this.onEvent(new SendingAgentContextMessageEvent(this.agentConfig));\r\n\r\n            const agentConfigJson = this.agentConfig.toJsonString();\r\n\r\n            // guard against sending this multiple times on one connection\r\n            this.agentConfigSent = true;\r\n\r\n            return connection.send(new SpeechConnectionMessage(\r\n                MessageType.Text,\r\n                \"agent.config\",\r\n                this.privRequestSession.requestId,\r\n                \"application/json\",\r\n                agentConfigJson));\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    private sendAgentContext = (connection: IConnection): Promise<void> => {\r\n        const guid: string = createGuid();\r\n\r\n        const speechActivityTemplate = this.privDialogServiceConnector.properties.getProperty(PropertyId.Conversation_Speech_Activity_Template);\r\n\r\n        const agentContext: any = {\r\n            channelData: \"\",\r\n            context: {\r\n                interactionId: guid\r\n            },\r\n            messagePayload: typeof speechActivityTemplate === undefined ? undefined : speechActivityTemplate,\r\n            version: 0.5\r\n        };\r\n\r\n        const agentContextJson = JSON.stringify(agentContext);\r\n\r\n        return connection.send(new SpeechConnectionMessage(\r\n            MessageType.Text,\r\n            \"speech.agent.context\",\r\n            this.privRequestSession.requestId,\r\n            \"application/json\",\r\n            agentContextJson));\r\n    }\r\n\r\n    private fireEventForResult(serviceResult: SimpleSpeechPhrase, properties: PropertyCollection): SpeechRecognitionEventArgs {\r\n        const resultReason: ResultReason = EnumTranslation.implTranslateRecognitionResult(serviceResult.RecognitionStatus);\r\n\r\n        const offset: number = serviceResult.Offset + this.privRequestSession.currentTurnAudioOffset;\r\n\r\n        const result = new SpeechRecognitionResult(\r\n            this.privRequestSession.requestId,\r\n            resultReason,\r\n            serviceResult.DisplayText,\r\n            serviceResult.Duration,\r\n            offset,\r\n            serviceResult.Language,\r\n            serviceResult.LanguageDetectionConfidence,\r\n            undefined,\r\n            undefined,\r\n            JSON.stringify(serviceResult),\r\n            properties);\r\n\r\n        const ev = new SpeechRecognitionEventArgs(result, offset, this.privRequestSession.sessionId);\r\n        return ev;\r\n    }\r\n\r\n    private handleResponseMessage = (responseMessage: SpeechConnectionMessage): void => {\r\n        // \"response\" messages can contain either \"message\" (activity) or \"MessageStatus\" data. Fire the appropriate\r\n        // event according to the message type that's specified.\r\n        const responsePayload = JSON.parse(responseMessage.textBody);\r\n        switch (responsePayload.messageType.toLowerCase()) {\r\n            case \"message\":\r\n                const responseRequestId = responseMessage.requestId.toUpperCase();\r\n                const activityPayload: ActivityPayloadResponse = ActivityPayloadResponse.fromJSON(responseMessage.textBody);\r\n                const turn = this.privTurnStateManager.GetTurn(responseRequestId);\r\n\r\n                // update the conversation Id\r\n                if (activityPayload.conversationId) {\r\n                    const updateAgentConfig = this.agentConfig.get();\r\n                    updateAgentConfig.botInfo.conversationId = activityPayload.conversationId;\r\n                    this.agentConfig.set(updateAgentConfig);\r\n                }\r\n\r\n                const pullAudioOutputStream: PullAudioOutputStreamImpl = turn.processActivityPayload(\r\n                    activityPayload,\r\n                    AudioOutputFormatImpl.fromSpeechSynthesisOutputFormatString(this.privDialogServiceConnector.properties.getProperty(PropertyId.SpeechServiceConnection_SynthOutputFormat, undefined)));\r\n                const activity = new ActivityReceivedEventArgs(activityPayload.messagePayload, pullAudioOutputStream);\r\n                if (!!this.privDialogServiceConnector.activityReceived) {\r\n                    try {\r\n                        this.privDialogServiceConnector.activityReceived(this.privDialogServiceConnector, activity);\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            case \"messagestatus\":\r\n                if (!!this.privDialogServiceConnector.turnStatusReceived) {\r\n                    try {\r\n                        this.privDialogServiceConnector.turnStatusReceived(\r\n                            this.privDialogServiceConnector,\r\n                            new TurnStatusReceivedEventArgs(responseMessage.textBody));\r\n                        /* tslint:disable:no-empty */\r\n                    } catch (error) {\r\n                        // Not going to let errors in the event handler\r\n                        // trip things up.\r\n                    }\r\n                }\r\n                break;\r\n\r\n            default:\r\n                Events.instance.onEvent(\r\n                    new BackgroundEvent(`Unexpected response of type ${responsePayload.messageType}. Ignoring.`));\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onEvent(event: DialogEvent): void {\r\n        this.privEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private addKeywordContextData(): void {\r\n        const keywordPropertyValue: string = this.privRecognizerConfig.parameters.getProperty(\"SPEECH-KeywordsToDetect\");\r\n        if (keywordPropertyValue === undefined) {\r\n            return;\r\n        }\r\n\r\n        const keywordOffsetPropertyValue: string = this.privRecognizerConfig.parameters\r\n            .getProperty(\"SPEECH-KeywordsToDetect-Offsets\");\r\n        const keywordDurationPropertyValue: string = this.privRecognizerConfig.parameters\r\n            .getProperty(\"SPEECH-KeywordsToDetect-Durations\");\r\n\r\n        const keywords = keywordPropertyValue.split(\";\");\r\n        const keywordOffsets = keywordOffsetPropertyValue === undefined ? [] : keywordOffsetPropertyValue.split(\";\");\r\n        const keywordDurations = keywordDurationPropertyValue === undefined ? [] : keywordDurationPropertyValue.split(\";\");\r\n\r\n        const keywordDefinitionArray = [];\r\n        for (let i = 0; i < keywords.length; i++) {\r\n            const definition: { [section: string]: any } = {};\r\n            definition.text = keywords[i];\r\n            if (i < keywordOffsets.length) {\r\n                definition.offset = Number(keywordOffsets[i]);\r\n            }\r\n            if (i < keywordDurations.length) {\r\n                definition.duration = Number(keywordDurations[i]);\r\n            }\r\n            keywordDefinitionArray.push(definition);\r\n        }\r\n\r\n        this.speechContext.setSection(\"invocationSource\", \"VoiceActivationWithKeyword\");\r\n        this.speechContext.setSection(\"keywordDetection\", [{\r\n            clientDetectedKeywords: keywordDefinitionArray,\r\n            onReject: { action: \"EndOfTurn\" },\r\n            type: \"startTrigger\"\r\n        }]);\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport interface ITurnStatusResponsePayload {\r\n    interactionId: string;\r\n    conversationId: string;\r\n    statusCode: any;\r\n}\r\n\r\nexport class TurnStatusResponsePayload implements ITurnStatusResponsePayload {\r\n    private privMessageStatusResponse: ITurnStatusResponsePayload;\r\n\r\n    private constructor(json: string) {\r\n        this.privMessageStatusResponse = JSON.parse(json);\r\n    }\r\n\r\n    public static fromJSON(json: string): TurnStatusResponsePayload {\r\n        return new TurnStatusResponsePayload(json);\r\n    }\r\n\r\n    public get interactionId(): string {\r\n        return this.privMessageStatusResponse.interactionId;\r\n    }\r\n\r\n    public get conversationId(): string {\r\n        return this.privMessageStatusResponse.conversationId;\r\n    }\r\n\r\n    public get statusCode(): any {\r\n        // Payloads may contain a limited set of textual representations or a numeric status\r\n        // code. The textual values are here converted into numeric ones.\r\n        switch (this.privMessageStatusResponse.statusCode) {\r\n            case \"Success\":\r\n                return 200;\r\n            case \"Failed\":\r\n                return 400;\r\n            case \"TimedOut\":\r\n                return 429;\r\n            default:\r\n                return this.privMessageStatusResponse.statusCode;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ITurnStatusResponsePayload,\r\n    TurnStatusResponsePayload\r\n    } from \"../common.speech/ServiceMessages/TurnStatusPayload\";\r\n\r\n/**\r\n * Defines contents of received message/events.\r\n * @class TurnStatusReceivedEventArgs\r\n */\r\nexport class TurnStatusReceivedEventArgs {\r\n    private privTurnStatus: ITurnStatusResponsePayload;\r\n\r\n    /**\r\n     * Creates and initializes an instance of this class.\r\n     * @constructor\r\n     * @param {string} turnStatus - The JSON-encoded turn status message.\r\n     */\r\n    public constructor(turnStatus: string) {\r\n        this.privTurnStatus = TurnStatusResponsePayload.fromJSON(turnStatus);\r\n    }\r\n\r\n    /**\r\n     * Gets the interaction identifier associated with this turn status event.\r\n     * @member TurnStatusReceivedEventArgs.prototype.interactionId\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received interaction id.\r\n     */\r\n    public get interactionId(): any {\r\n        return this.privTurnStatus.interactionId;\r\n    }\r\n\r\n    /**\r\n     * Gets the conversation identifier associated with this turn status event.\r\n     * @member TurnStatusReceivedEventArgs.prototype.conversationId\r\n     * @function\r\n     * @public\r\n     * @returns {any} the received conversation id.\r\n     */\r\n    public get conversationId(): any {\r\n        return this.privTurnStatus.conversationId;\r\n    }\r\n\r\n    /**\r\n     * Gets the received turn status code.\r\n     * @member TurnStatusReceivedEventArgs.prototype.statusCode\r\n     * @function\r\n     * @public\r\n     * @returns {number} the received turn status.\r\n     */\r\n    public get statusCode(): number {\r\n        return this.privTurnStatus.statusCode;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { EventType, PlatformEvent } from \"../common/Exports\";\r\n\r\nexport class SpeechSynthesisEvent extends PlatformEvent {\r\n    private privRequestId: string;\r\n\r\n    constructor(eventName: string, requestId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n\r\n        this.privRequestId = requestId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n}\r\n\r\nexport class SynthesisTriggeredEvent extends SpeechSynthesisEvent {\r\n    private privSessionAudioDestinationId: string;\r\n    private privTurnAudioDestinationId: string;\r\n\r\n    constructor(requestId: string, sessionAudioDestinationId: string, turnAudioDestinationId: string) {\r\n        super(\"SynthesisTriggeredEvent\", requestId);\r\n\r\n        this.privSessionAudioDestinationId = sessionAudioDestinationId;\r\n        this.privTurnAudioDestinationId = turnAudioDestinationId;\r\n    }\r\n\r\n    public get audioSessionDestinationId(): string {\r\n        return this.privSessionAudioDestinationId;\r\n    }\r\n\r\n    public get audioTurnDestinationId(): string {\r\n        return this.privTurnAudioDestinationId;\r\n    }\r\n}\r\n\r\nexport class ConnectingToSynthesisServiceEvent extends SpeechSynthesisEvent {\r\n    private privAuthFetchEventId: string;\r\n\r\n    constructor(requestId: string, authFetchEventId: string) {\r\n        super(\"ConnectingToSynthesisServiceEvent\", requestId);\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n\r\nexport class SynthesisStartedEvent extends SpeechSynthesisEvent {\r\n    private privAuthFetchEventId: string;\r\n\r\n    constructor(requestId: string, authFetchEventId: string) {\r\n        super(\"SynthesisStartedEvent\", requestId);\r\n\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n    }\r\n\r\n    public get authFetchEventId(): string {\r\n        return this.privAuthFetchEventId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events, IAudioDestination\r\n} from \"../common/Exports\";\r\nimport { AudioOutputFormatImpl } from \"../sdk/Audio/AudioOutputFormat\";\r\nimport { PullAudioOutputStreamImpl } from \"../sdk/Audio/AudioOutputStream\";\r\nimport { ISynthesisMetadata } from \"./ServiceMessages/SynthesisAudioMetadata\";\r\nimport { SynthesisAdapterBase } from \"./SynthesisAdapterBase\";\r\nimport {\r\n    ConnectingToSynthesisServiceEvent,\r\n    SpeechSynthesisEvent,\r\n    SynthesisStartedEvent,\r\n    SynthesisTriggeredEvent,\r\n} from \"./SynthesisEvents\";\r\n\r\nexport interface ISynthesisResponseContext {\r\n    serviceTag: string;\r\n}\r\n\r\nexport interface ISynthesisResponseAudio {\r\n    type: string;\r\n    streamId: string;\r\n}\r\n\r\nexport interface ISynthesisResponse {\r\n    context: ISynthesisResponseContext;\r\n    audio: ISynthesisResponseAudio;\r\n}\r\n\r\nexport class SynthesisTurn {\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get streamId(): string {\r\n        return this.privStreamId;\r\n    }\r\n\r\n    public set streamId(value: string) {\r\n        this.privStreamId = value;\r\n    }\r\n\r\n    public get audioOutputFormat(): AudioOutputFormatImpl {\r\n        return this.privAudioOutputFormat;\r\n    }\r\n\r\n    public set audioOutputFormat(format: AudioOutputFormatImpl) {\r\n        this.privAudioOutputFormat = format;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSynthesisEnded(): boolean {\r\n        return this.privIsSynthesisEnded;\r\n    }\r\n\r\n    public get isSynthesizing(): boolean {\r\n        return this.privIsSynthesizing;\r\n    }\r\n\r\n    public get currentTextOffset(): number {\r\n        return this.privTextOffset;\r\n    }\r\n\r\n    // The number of bytes received for current turn\r\n    public get bytesReceived(): number {\r\n        return this.privBytesReceived;\r\n    }\r\n\r\n    private privIsDisposed: boolean = false;\r\n    private privAuthFetchEventId: string;\r\n    private privIsSynthesizing: boolean = false;\r\n    private privIsSynthesisEnded: boolean = false;\r\n    private privBytesReceived: number = 0;\r\n    private privRequestId: string;\r\n    private privStreamId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privAudioOutputFormat: AudioOutputFormatImpl;\r\n    private privAudioOutputStream: PullAudioOutputStreamImpl;\r\n    private privReceivedAudio: ArrayBuffer;\r\n    private privReceivedAudioWithHeader: ArrayBuffer;\r\n    private privTextOffset: number = 0;\r\n    private privNextSearchTextIndex: number = 0;\r\n    private privPartialVisemeAnimation: string;\r\n    private privRawText: string;\r\n    private privIsSSML: boolean;\r\n    private privTurnAudioDestination: IAudioDestination;\r\n\r\n    constructor() {\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public async getAllReceivedAudio(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudio) {\r\n            return Promise.resolve(this.privReceivedAudio);\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        await this.readAllAudioFromStream();\r\n        return Promise.resolve(this.privReceivedAudio);\r\n    }\r\n\r\n    public async getAllReceivedAudioWithHeader(): Promise<ArrayBuffer> {\r\n        if (!!this.privReceivedAudioWithHeader) {\r\n            return this.privReceivedAudioWithHeader;\r\n        }\r\n        if (!this.privIsSynthesisEnded) {\r\n            return null;\r\n        }\r\n        if (this.audioOutputFormat.hasHeader) {\r\n            const audio: ArrayBuffer = await this.getAllReceivedAudio();\r\n            this.privReceivedAudioWithHeader = SynthesisAdapterBase.addHeader(audio, this.audioOutputFormat);\r\n            return this.privReceivedAudioWithHeader;\r\n        } else {\r\n            return this.getAllReceivedAudio();\r\n        }\r\n    }\r\n\r\n    public startNewSynthesis(requestId: string, rawText: string, isSSML: boolean, audioDestination?: IAudioDestination): void {\r\n        this.privIsSynthesisEnded = false;\r\n        this.privIsSynthesizing = true;\r\n        this.privRequestId = requestId;\r\n        this.privRawText = rawText;\r\n        this.privIsSSML = isSSML;\r\n        this.privAudioOutputStream = new PullAudioOutputStreamImpl();\r\n        this.privAudioOutputStream.format = this.privAudioOutputFormat;\r\n        this.privReceivedAudio = null;\r\n        this.privReceivedAudioWithHeader = null;\r\n        this.privBytesReceived = 0;\r\n        this.privTextOffset = 0;\r\n        this.privNextSearchTextIndex = 0;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        if (audioDestination !== undefined) {\r\n            this.privTurnAudioDestination = audioDestination;\r\n            this.privTurnAudioDestination.format = this.privAudioOutputFormat;\r\n        }\r\n        this.onEvent(new SynthesisTriggeredEvent(this.requestId, undefined, audioDestination === undefined ? undefined : audioDestination.id()));\r\n    }\r\n\r\n    public onPreConnectionStart = (authFetchEventId: string, connectionId: string): void => {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.onEvent(new ConnectingToSynthesisServiceEvent(this.privRequestId, this.privAuthFetchEventId));\r\n    }\r\n\r\n    public onAuthCompleted = (isError: boolean, error?: string): void => {\r\n        if (isError) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onConnectionEstablishCompleted = (statusCode: number, reason?: string): void => {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new SynthesisStartedEvent(this.requestId, this.privAuthFetchEventId));\r\n            this.privBytesReceived = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            this.onComplete();\r\n        }\r\n    }\r\n\r\n    public onServiceResponseMessage = (responseJson: string): void => {\r\n        const response: ISynthesisResponse = JSON.parse(responseJson);\r\n        this.streamId = response.audio.streamId;\r\n    }\r\n\r\n    public onServiceTurnEndResponse = (): void => {\r\n        this.privInTurn = false;\r\n        this.privTurnDeferral.resolve();\r\n        this.onComplete();\r\n    }\r\n\r\n    public onServiceTurnStartResponse = (): void => {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            /* tslint:disable:no-empty */\r\n            this.privTurnDeferral.promise.then().catch(() => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public onAudioChunkReceived(data: ArrayBuffer): void {\r\n        if (this.isSynthesizing) {\r\n            this.privAudioOutputStream.write(data);\r\n            this.privBytesReceived += data.byteLength;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.write(data);\r\n            }\r\n        }\r\n    }\r\n\r\n    public onWordBoundaryEvent(text: string): void {\r\n        this.updateTextOffset(text);\r\n    }\r\n\r\n    public onVisemeMetadataReceived(metadata: ISynthesisMetadata): void {\r\n        if (metadata.Data.AnimationChunk !== undefined) {\r\n            this.privPartialVisemeAnimation += metadata.Data.AnimationChunk;\r\n        }\r\n    }\r\n\r\n    public dispose = (error?: string): void => {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n        }\r\n    }\r\n\r\n    public onStopSynthesizing(): void {\r\n        this.onComplete();\r\n    }\r\n\r\n    /**\r\n     * Gets the viseme animation string (merged from animation chunk), and clears the internal\r\n     * partial animation.\r\n     */\r\n    public getAndClearVisemeAnimation(): string {\r\n        const animation: string = this.privPartialVisemeAnimation;\r\n        this.privPartialVisemeAnimation = \"\";\r\n        return animation;\r\n    }\r\n\r\n    protected onEvent = (event: SpeechSynthesisEvent): void => {\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private updateTextOffset(text: string): void {\r\n        if (this.privTextOffset >= 0) {\r\n            this.privTextOffset = this.privRawText.indexOf(text, this.privNextSearchTextIndex);\r\n            if (this.privTextOffset >= 0) {\r\n                this.privNextSearchTextIndex = this.privTextOffset + text.length;\r\n            }\r\n            if (this.privIsSSML) {\r\n                if (this.privRawText.indexOf(\"<\", this.privTextOffset + 1) > this.privRawText.indexOf(\">\", this.privTextOffset + 1)) {\r\n                    this.updateTextOffset(text);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private onComplete = (): void => {\r\n        if (this.privIsSynthesizing) {\r\n            this.privIsSynthesizing = false;\r\n            this.privIsSynthesisEnded = true;\r\n            this.privAudioOutputStream.close();\r\n            this.privInTurn = false;\r\n            if (this.privTurnAudioDestination !== undefined) {\r\n                this.privTurnAudioDestination.close();\r\n                this.privTurnAudioDestination = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    private async readAllAudioFromStream(): Promise<void> {\r\n        if (this.privIsSynthesisEnded) {\r\n            this.privReceivedAudio = new ArrayBuffer(this.bytesReceived);\r\n            try {\r\n                await this.privAudioOutputStream.read(this.privReceivedAudio);\r\n            } catch (e) {\r\n                this.privReceivedAudio = new ArrayBuffer(0);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport {\r\n    AudioSourceErrorEvent,\r\n    AudioStreamNodeAttachedEvent,\r\n    AudioStreamNodeAttachingEvent,\r\n    AudioStreamNodeDetachedEvent,\r\n    AudioStreamNodeErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEstablishErrorEvent,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionStartEvent,\r\n    IEventListener,\r\n    IStringDictionary,\r\n    PlatformEvent,\r\n} from \"../common/Exports\";\r\nimport { ConnectingToServiceEvent, RecognitionTriggeredEvent } from \"./RecognitionEvents\";\r\n\r\nexport interface ITelemetry {\r\n    Metrics: IMetric[];\r\n    ReceivedMessages: IStringDictionary<string[]>;\r\n}\r\n\r\nexport interface IMetric {\r\n    End?: string;\r\n    Error?: string;\r\n    Id?: string;\r\n    Name?: string;\r\n    Start?: string;\r\n    PhraseLatencyMs?: number[];\r\n    FirstHypothesisLatencyMs?: number[];\r\n}\r\n\r\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\r\n    private privIsDisposed: boolean = false;\r\n\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n\r\n    private privListeningTriggerMetric: IMetric = null;\r\n    private privMicMetric: IMetric = null;\r\n    private privConnectionEstablishMetric: IMetric = null;\r\n\r\n    private privMicStartTime: string;\r\n\r\n    private privConnectionId: string;\r\n    private privConnectionStartTime: string;\r\n\r\n    private privReceivedMessages: IStringDictionary<string[]>;\r\n    private privPhraseLatencies: number[];\r\n    private privHypothesisLatencies: number[];\r\n\r\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\r\n        this.privRequestId = requestId;\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privAudioNodeId = audioNodeId;\r\n\r\n        this.privReceivedMessages = {};\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n    }\r\n\r\n    public phraseReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privPhraseLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public hypothesisReceived(audioReceivedTime: number): void {\r\n        if (audioReceivedTime > 0) { // 0 indicates the time is unknown. Drop it.\r\n            this.privHypothesisLatencies.push(Date.now() - audioReceivedTime);\r\n        }\r\n    }\r\n\r\n    public onEvent = (e: PlatformEvent): void => {\r\n        if (this.privIsDisposed) {\r\n            return;\r\n        }\r\n\r\n        if (e instanceof RecognitionTriggeredEvent && e.requestId === this.privRequestId) {\r\n            this.privListeningTriggerMetric = {\r\n                End: e.eventTime,\r\n                Name: \"ListeningTrigger\",\r\n                Start: e.eventTime,\r\n            };\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachingEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeAttachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            this.privMicStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof AudioSourceErrorEvent && e.audioSourceId === this.privAudioSourceId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeErrorEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Error: e.error,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof AudioStreamNodeDetachedEvent && e.audioSourceId === this.privAudioSourceId && e.audioNodeId === this.privAudioNodeId) {\r\n            if (!this.privMicMetric) {\r\n                this.privMicMetric = {\r\n                    End: e.eventTime,\r\n                    Name: \"Microphone\",\r\n                    Start: this.privMicStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectingToServiceEvent && e.requestId === this.privRequestId) {\r\n            this.privConnectionId = e.sessionId;\r\n        }\r\n\r\n        if (e instanceof ConnectionStartEvent && e.connectionId === this.privConnectionId) {\r\n            this.privConnectionStartTime = e.eventTime;\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishedEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionEstablishErrorEvent && e.connectionId === this.privConnectionId) {\r\n            if (!this.privConnectionEstablishMetric) {\r\n                this.privConnectionEstablishMetric = {\r\n                    End: e.eventTime,\r\n                    Error: this.getConnectionError(e.statusCode),\r\n                    Id: this.privConnectionId,\r\n                    Name: \"Connection\",\r\n                    Start: this.privConnectionStartTime,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (e instanceof ConnectionMessageReceivedEvent && e.connectionId === this.privConnectionId) {\r\n            if (e.message && e.message.headers && e.message.headers.path) {\r\n                if (!this.privReceivedMessages[e.message.headers.path]) {\r\n                    this.privReceivedMessages[e.message.headers.path] = new Array<string>();\r\n                }\r\n                const maxMessagesToSend = 50;\r\n                if (this.privReceivedMessages[e.message.headers.path].length < maxMessagesToSend) {\r\n                    this.privReceivedMessages[e.message.headers.path].push(e.networkReceivedTime);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public getTelemetry = (): string => {\r\n        const metrics = new Array<IMetric>();\r\n\r\n        if (this.privListeningTriggerMetric) {\r\n            metrics.push(this.privListeningTriggerMetric);\r\n        }\r\n\r\n        if (this.privMicMetric) {\r\n            metrics.push(this.privMicMetric);\r\n        }\r\n\r\n        if (this.privConnectionEstablishMetric) {\r\n            metrics.push(this.privConnectionEstablishMetric);\r\n        }\r\n\r\n        if (this.privPhraseLatencies.length > 0) {\r\n            metrics.push({\r\n                PhraseLatencyMs: this.privPhraseLatencies,\r\n            });\r\n        }\r\n\r\n        if (this.privHypothesisLatencies.length > 0) {\r\n            metrics.push({\r\n                FirstHypothesisLatencyMs: this.privHypothesisLatencies,\r\n            });\r\n        }\r\n\r\n        const telemetry: ITelemetry = {\r\n            Metrics: metrics,\r\n            ReceivedMessages: this.privReceivedMessages,\r\n        };\r\n\r\n        const json = JSON.stringify(telemetry);\r\n\r\n        // We dont want to send the same telemetry again. So clean those out.\r\n        this.privReceivedMessages = {};\r\n        this.privListeningTriggerMetric = null;\r\n        this.privMicMetric = null;\r\n        this.privConnectionEstablishMetric = null;\r\n        this.privPhraseLatencies = [];\r\n        this.privHypothesisLatencies = [];\r\n        return json;\r\n    }\r\n\r\n    // Determines if there are any telemetry events to send to the service.\r\n    public get hasTelemetry(): boolean {\r\n        return (Object.keys(this.privReceivedMessages).length !== 0 ||\r\n            this.privListeningTriggerMetric !== null ||\r\n            this.privMicMetric !== null ||\r\n            this.privConnectionEstablishMetric !== null ||\r\n            this.privPhraseLatencies.length !== 0 ||\r\n            this.privHypothesisLatencies.length !== 0);\r\n    }\r\n\r\n    public dispose = (): void => {\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    private getConnectionError = (statusCode: number): string => {\r\n        /*\r\n        -- Websocket status codes --\r\n        NormalClosure = 1000,\r\n        EndpointUnavailable = 1001,\r\n        ProtocolError = 1002,\r\n        InvalidMessageType = 1003,\r\n        Empty = 1005,\r\n        InvalidPayloadData = 1007,\r\n        PolicyViolation = 1008,\r\n        MessageTooBig = 1009,\r\n        MandatoryExtension = 1010,\r\n        InternalServerError = 1011\r\n        */\r\n\r\n        switch (statusCode) {\r\n            case 400:\r\n            case 1002:\r\n            case 1003:\r\n            case 1005:\r\n            case 1007:\r\n            case 1008:\r\n            case 1009: return \"BadRequest\";\r\n            case 401: return \"Unauthorized\";\r\n            case 403: return \"Forbidden\";\r\n            case 503:\r\n            case 1001: return \"ServerUnavailable\";\r\n            case 500:\r\n            case 1011: return \"ServerError\";\r\n            case 408:\r\n            case 504: return \"Timeout\";\r\n            default: return \"statuscode:\" + statusCode.toString();\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { Z_NO_COMPRESSION } from \"zlib\";\r\nimport { ReplayableAudioNode } from \"../common.browser/Exports\";\r\nimport {\r\n    createNoDashGuid,\r\n    Deferred,\r\n    Events,\r\n    IDetachable,\r\n    IEventSource,\r\n    PlatformEvent\r\n} from \"../common/Exports\";\r\nimport {\r\n    ConnectingToServiceEvent,\r\n    ListeningStartedEvent,\r\n    RecognitionStartedEvent,\r\n    RecognitionTriggeredEvent,\r\n    SpeechRecognitionEvent,\r\n} from \"./RecognitionEvents\";\r\nimport { ServiceTelemetryListener } from \"./ServiceTelemetryListener.Internal\";\r\n\r\nexport class RequestSession {\r\n    private privIsDisposed: boolean = false;\r\n    private privServiceTelemetryListener: ServiceTelemetryListener;\r\n    private privDetachables: IDetachable[] = new Array<IDetachable>();\r\n    private privRequestId: string;\r\n    private privAudioSourceId: string;\r\n    private privAudioNodeId: string;\r\n    private privAudioNode: ReplayableAudioNode;\r\n    private privAuthFetchEventId: string;\r\n    private privIsAudioNodeDetached: boolean = false;\r\n    private privIsRecognizing: boolean = false;\r\n    private privIsSpeechEnded: boolean = false;\r\n    private privTurnStartAudioOffset: number = 0;\r\n    private privLastRecoOffset: number = 0;\r\n    private privHypothesisReceived: boolean = false;\r\n    private privBytesSent: number = 0;\r\n    private privRecogNumber: number = 0;\r\n    private privSessionId: string;\r\n    private privTurnDeferral: Deferred<void>;\r\n    private privInTurn: boolean = false;\r\n    private privConnectionAttempts: number = 0;\r\n\r\n    constructor(audioSourceId: string) {\r\n        this.privAudioSourceId = audioSourceId;\r\n        this.privRequestId = createNoDashGuid();\r\n        this.privAudioNodeId = createNoDashGuid();\r\n        this.privTurnDeferral = new Deferred<void>();\r\n\r\n        // We're not in a turn, so resolve.\r\n        this.privTurnDeferral.resolve();\r\n    }\r\n\r\n    public get sessionId(): string {\r\n        return this.privSessionId;\r\n    }\r\n\r\n    public get requestId(): string {\r\n        return this.privRequestId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n\r\n    public get turnCompletionPromise(): Promise<void> {\r\n        return this.privTurnDeferral.promise;\r\n    }\r\n\r\n    public get isSpeechEnded(): boolean {\r\n        return this.privIsSpeechEnded;\r\n    }\r\n\r\n    public get isRecognizing(): boolean {\r\n        return this.privIsRecognizing;\r\n    }\r\n\r\n    public get currentTurnAudioOffset(): number {\r\n        return this.privTurnStartAudioOffset;\r\n    }\r\n\r\n    public get recogNumber(): number {\r\n        return this.privRecogNumber;\r\n    }\r\n\r\n    public get numConnectionAttempts(): number {\r\n        return this.privConnectionAttempts;\r\n    }\r\n\r\n    // The number of bytes sent for the current connection.\r\n    // Counter is reset to 0 each time a connection is established.\r\n    public get bytesSent(): number {\r\n        return this.privBytesSent;\r\n    }\r\n    public listenForServiceTelemetry(eventSource: IEventSource<PlatformEvent>): void {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privDetachables.push(eventSource.attachListener(this.privServiceTelemetryListener));\r\n        }\r\n    }\r\n\r\n    public startNewRecognition(): void {\r\n        this.privIsSpeechEnded = false;\r\n        this.privIsRecognizing = true;\r\n        this.privTurnStartAudioOffset = 0;\r\n        this.privLastRecoOffset = 0;\r\n        this.privRecogNumber++;\r\n        this.privServiceTelemetryListener = new ServiceTelemetryListener(this.privRequestId, this.privAudioSourceId, this.privAudioNodeId);\r\n        this.onEvent(new RecognitionTriggeredEvent(this.requestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n    }\r\n\r\n    public async onAudioSourceAttachCompleted(audioNode: ReplayableAudioNode, isError: boolean, error?: string): Promise<void> {\r\n        this.privAudioNode = audioNode;\r\n        this.privIsAudioNodeDetached = false;\r\n\r\n        if (isError) {\r\n            await this.onComplete();\r\n        } else {\r\n            this.onEvent(new ListeningStartedEvent(this.privRequestId, this.privSessionId, this.privAudioSourceId, this.privAudioNodeId));\r\n        }\r\n    }\r\n\r\n    public onPreConnectionStart = (authFetchEventId: string, connectionId: string): void => {\r\n        this.privAuthFetchEventId = authFetchEventId;\r\n        this.privSessionId = connectionId;\r\n        this.onEvent(new ConnectingToServiceEvent(this.privRequestId, this.privAuthFetchEventId, this.privSessionId));\r\n    }\r\n\r\n    public async onAuthCompleted(isError: boolean, error?: string): Promise<void> {\r\n        if (isError) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    public async onConnectionEstablishCompleted(statusCode: number, reason?: string): Promise<void> {\r\n        if (statusCode === 200) {\r\n            this.onEvent(new RecognitionStartedEvent(this.requestId, this.privAudioSourceId, this.privAudioNodeId, this.privAuthFetchEventId, this.privSessionId));\r\n            if (!!this.privAudioNode) {\r\n                this.privAudioNode.replay();\r\n            }\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privBytesSent = 0;\r\n            return;\r\n        } else if (statusCode === 403) {\r\n            await this.onComplete();\r\n        }\r\n    }\r\n\r\n    public async onServiceTurnEndResponse(continuousRecognition: boolean): Promise<void> {\r\n        this.privTurnDeferral.resolve();\r\n\r\n        if (!continuousRecognition || this.isSpeechEnded) {\r\n            await this.onComplete();\r\n            this.privInTurn = false;\r\n        } else {\r\n            // Start a new request set.\r\n            this.privTurnStartAudioOffset = this.privLastRecoOffset;\r\n            this.privAudioNode.replay();\r\n        }\r\n    }\r\n\r\n    public onSpeechContext = (): void => {\r\n        this.privRequestId = createNoDashGuid();\r\n    }\r\n\r\n    public onServiceTurnStartResponse = (): void => {\r\n        if (!!this.privTurnDeferral && !!this.privInTurn) {\r\n            // What? How are we starting a turn with another not done?\r\n            this.privTurnDeferral.reject(\"Another turn started before current completed.\");\r\n            // Avoid UnhandledPromiseRejection if privTurnDeferral is not being awaited\r\n            /* tslint:disable:no-empty */\r\n            this.privTurnDeferral.promise.then().catch(() => { });\r\n        }\r\n        this.privInTurn = true;\r\n        this.privTurnDeferral = new Deferred<void>();\r\n    }\r\n\r\n    public onHypothesis(offset: number): void {\r\n        if (!this.privHypothesisReceived) {\r\n            this.privHypothesisReceived = true;\r\n            this.privServiceTelemetryListener.hypothesisReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        }\r\n    }\r\n\r\n    public onPhraseRecognized(offset: number): void {\r\n        this.privServiceTelemetryListener.phraseReceived(this.privAudioNode.findTimeAtOffset(offset));\r\n        this.onServiceRecognized(offset);\r\n    }\r\n\r\n    public onServiceRecognized(offset: number): void {\r\n        this.privLastRecoOffset = offset;\r\n        this.privHypothesisReceived = false;\r\n        this.privAudioNode.shrinkBuffers(offset);\r\n        this.privConnectionAttempts = 0;\r\n    }\r\n\r\n    public onAudioSent(bytesSent: number): void {\r\n        this.privBytesSent += bytesSent;\r\n    }\r\n\r\n    public onRetryConnection(): void {\r\n        this.privConnectionAttempts++;\r\n    }\r\n\r\n    public async dispose(error?: string): Promise<void> {\r\n        if (!this.privIsDisposed) {\r\n            // we should have completed by now. If we did not its an unknown error.\r\n            this.privIsDisposed = true;\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            this.privServiceTelemetryListener?.dispose();\r\n            this.privIsRecognizing = false;\r\n        }\r\n    }\r\n\r\n    public getTelemetry = (): string => {\r\n        if (this.privServiceTelemetryListener.hasTelemetry) {\r\n            return this.privServiceTelemetryListener.getTelemetry();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public async onStopRecognizing(): Promise<void> {\r\n        await this.onComplete();\r\n    }\r\n\r\n    // Should be called with the audioNode for this session has indicated that it is out of speech.\r\n    public onSpeechEnded(): void {\r\n        this.privIsSpeechEnded = true;\r\n    }\r\n\r\n    protected onEvent = (event: SpeechRecognitionEvent): void => {\r\n        if (!!this.privServiceTelemetryListener) {\r\n            this.privServiceTelemetryListener.onEvent(event);\r\n        }\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private async onComplete(): Promise<void> {\r\n        if (!!this.privIsRecognizing) {\r\n            this.privIsRecognizing = false;\r\n            await this.detachAudioNode();\r\n        }\r\n    }\r\n\r\n    private async detachAudioNode(): Promise<void> {\r\n        if (!this.privIsAudioNodeDetached) {\r\n            this.privIsAudioNodeDetached = true;\r\n            if (this.privAudioNode) {\r\n                await this.privAudioNode.detach();\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { S as SUPPORT, C as ConfigResolverMap, _ as _objectSpread2, a as _defineProperty, t as toDomEventType, i as isTouch, b as touchIds, E as EngineMap, c as chain, d as toHandlerProp } from './actions-ef87abaa.esm.js';\nimport './maths-b2a210f4.esm.js';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nconst identity = v => v;\nconst sharedConfigResolver = {\n  target(value) {\n    if (value) {\n      return () => 'current' in value ? value.current : value;\n    }\n\n    return undefined;\n  },\n\n  enabled(value = true) {\n    return value;\n  },\n\n  window(value = SUPPORT.isBrowser ? window : undefined) {\n    return value;\n  },\n\n  eventOptions({\n    passive = true,\n    capture = false\n  } = {}) {\n    return {\n      passive,\n      capture\n    };\n  },\n\n  transform(value = identity) {\n    return value;\n  }\n\n};\n\nconst _excluded = [\"target\", \"eventOptions\", \"window\", \"enabled\", \"transform\"];\nfunction resolveWith(config = {}, resolvers) {\n  const result = {};\n\n  for (const [key, resolver] of Object.entries(resolvers)) switch (typeof resolver) {\n    case 'function':\n      result[key] = resolver.call(result, config[key], key, config);\n      break;\n\n    case 'object':\n      result[key] = resolveWith(config[key], resolver);\n      break;\n\n    case 'boolean':\n      if (resolver) result[key] = config[key];\n      break;\n  }\n\n  return result;\n}\nfunction parse(config, gestureKey) {\n  const _ref = config,\n        {\n    target,\n    eventOptions,\n    window,\n    enabled,\n    transform\n  } = _ref,\n        rest = _objectWithoutProperties(_ref, _excluded);\n\n  const _config = {\n    shared: resolveWith({\n      target,\n      eventOptions,\n      window,\n      enabled,\n      transform\n    }, sharedConfigResolver)\n  };\n\n  if (gestureKey) {\n    const resolver = ConfigResolverMap.get(gestureKey);\n    _config[gestureKey] = resolveWith(_objectSpread2({\n      shared: _config.shared\n    }, rest), resolver);\n  } else {\n    for (const key in rest) {\n      const resolver = ConfigResolverMap.get(key);\n\n      if (resolver) {\n        _config[key] = resolveWith(_objectSpread2({\n          shared: _config.shared\n        }, rest[key]), resolver);\n      } else if (process.env.NODE_ENV === 'development') {\n        if (!['drag', 'pinch', 'scroll', 'wheel', 'move', 'hover'].includes(key)) {\n          if (key === 'domTarget') {\n            throw Error(`[@use-gesture]: \\`domTarget\\` option has been renamed to \\`target\\`.`);\n          }\n\n          console.warn(`[@use-gesture]: Unknown config key \\`${key}\\` was used. Please read the documentation for further information.`);\n        }\n      }\n    }\n  }\n\n  return _config;\n}\n\nclass EventStore {\n  constructor(ctrl) {\n    _defineProperty(this, \"_listeners\", []);\n\n    this._ctrl = ctrl;\n  }\n\n  add(element, device, action, handler, options) {\n    const type = toDomEventType(device, action);\n\n    const eventOptions = _objectSpread2(_objectSpread2({}, this._ctrl.config.shared.eventOptions), options);\n\n    element.addEventListener(type, handler, eventOptions);\n\n    this._listeners.push(() => element.removeEventListener(type, handler, eventOptions));\n  }\n\n  clean() {\n    this._listeners.forEach(remove => remove());\n\n    this._listeners = [];\n  }\n\n}\n\nclass TimeoutStore {\n  constructor() {\n    _defineProperty(this, \"_timeouts\", new Map());\n  }\n\n  add(key, callback, ms = 140, ...args) {\n    this.remove(key);\n\n    this._timeouts.set(key, window.setTimeout(callback, ms, ...args));\n  }\n\n  remove(key) {\n    const timeout = this._timeouts.get(key);\n\n    if (timeout) window.clearTimeout(timeout);\n  }\n\n  clean() {\n    this._timeouts.forEach(timeout => void window.clearTimeout(timeout));\n\n    this._timeouts.clear();\n  }\n\n}\n\nclass Controller {\n  constructor(handlers) {\n    _defineProperty(this, \"gestures\", new Set());\n\n    _defineProperty(this, \"_targetEventStore\", new EventStore(this));\n\n    _defineProperty(this, \"gestureEventStores\", {});\n\n    _defineProperty(this, \"gestureTimeoutStores\", {});\n\n    _defineProperty(this, \"handlers\", {});\n\n    _defineProperty(this, \"config\", {});\n\n    _defineProperty(this, \"pointerIds\", new Set());\n\n    _defineProperty(this, \"touchIds\", new Set());\n\n    _defineProperty(this, \"state\", {\n      shared: {\n        shiftKey: false,\n        metaKey: false,\n        ctrlKey: false,\n        altKey: false\n      }\n    });\n\n    resolveGestures(this, handlers);\n  }\n\n  setEventIds(event) {\n    if (isTouch(event)) {\n      this.touchIds = new Set(touchIds(event));\n    } else if ('pointerId' in event) {\n      if (event.type === 'pointerup') this.pointerIds.delete(event.pointerId);else this.pointerIds.add(event.pointerId);\n    }\n  }\n\n  applyHandlers(handlers, nativeHandlers) {\n    this.handlers = handlers;\n    this.nativeHandlers = nativeHandlers;\n  }\n\n  applyConfig(config, gestureKey) {\n    this.config = parse(config, gestureKey);\n  }\n\n  clean() {\n    this._targetEventStore.clean();\n\n    for (const key of this.gestures) {\n      this.gestureEventStores[key].clean();\n      this.gestureTimeoutStores[key].clean();\n    }\n  }\n\n  effect() {\n    if (this.config.shared.target) this.bind();\n    return () => this._targetEventStore.clean();\n  }\n\n  bind(...args) {\n    const sharedConfig = this.config.shared;\n    const eventOptions = sharedConfig.eventOptions;\n    const props = {};\n    let target;\n\n    if (sharedConfig.target) {\n      target = sharedConfig.target();\n      if (!target) return;\n    }\n\n    const bindFunction = bindToProps(props, eventOptions, !!target);\n\n    if (sharedConfig.enabled) {\n      for (const gestureKey of this.gestures) {\n        if (this.config[gestureKey].enabled) {\n          const Engine = EngineMap.get(gestureKey);\n          new Engine(this, args, gestureKey).bind(bindFunction);\n        }\n      }\n\n      for (const eventKey in this.nativeHandlers) {\n        bindFunction(eventKey, '', event => this.nativeHandlers[eventKey](_objectSpread2(_objectSpread2({}, this.state.shared), {}, {\n          event,\n          args\n        })), undefined, true);\n      }\n    }\n\n    for (const handlerProp in props) {\n      props[handlerProp] = chain(...props[handlerProp]);\n    }\n\n    if (!target) return props;\n\n    for (const handlerProp in props) {\n      let eventKey = handlerProp.substr(2).toLowerCase();\n      const capture = !!~eventKey.indexOf('capture');\n      const passive = !!~eventKey.indexOf('passive');\n      if (capture || passive) eventKey = eventKey.replace(/capture|passive/g, '');\n\n      this._targetEventStore.add(target, eventKey, '', props[handlerProp], {\n        capture,\n        passive\n      });\n    }\n  }\n\n}\n\nfunction setupGesture(ctrl, gestureKey) {\n  ctrl.gestures.add(gestureKey);\n  ctrl.gestureEventStores[gestureKey] = new EventStore(ctrl);\n  ctrl.gestureTimeoutStores[gestureKey] = new TimeoutStore();\n}\n\nfunction resolveGestures(ctrl, internalHandlers) {\n  if (internalHandlers.drag) setupGesture(ctrl, 'drag');\n  if (internalHandlers.wheel) setupGesture(ctrl, 'wheel');\n  if (internalHandlers.scroll) setupGesture(ctrl, 'scroll');\n  if (internalHandlers.move) setupGesture(ctrl, 'move');\n  if (internalHandlers.pinch) setupGesture(ctrl, 'pinch');\n  if (internalHandlers.hover) setupGesture(ctrl, 'hover');\n}\n\nconst bindToProps = (props, eventOptions, withPassiveOption) => (device, action, handler, options = {}, isNative = false) => {\n  var _options$capture, _options$passive;\n\n  const capture = (_options$capture = options.capture) !== null && _options$capture !== void 0 ? _options$capture : eventOptions.capture;\n  const passive = (_options$passive = options.passive) !== null && _options$passive !== void 0 ? _options$passive : eventOptions.passive;\n  let handlerProp = isNative ? device : toHandlerProp(device, action, capture);\n  if (withPassiveOption && passive) handlerProp += 'Passive';\n  props[handlerProp] = props[handlerProp] || [];\n  props[handlerProp].push(handler);\n};\n\nconst RE_NOT_NATIVE = /^on(Drag|Wheel|Scroll|Move|Pinch|Hover)/;\n\nfunction sortHandlers(_handlers) {\n  const native = {};\n  const handlers = {};\n  const actions = new Set();\n\n  for (let key in _handlers) {\n    if (RE_NOT_NATIVE.test(key)) {\n      actions.add(RegExp.lastMatch);\n      handlers[key] = _handlers[key];\n    } else {\n      native[key] = _handlers[key];\n    }\n  }\n\n  return [handlers, native, actions];\n}\n\nfunction registerGesture(actions, handlers, handlerKey, key, internalHandlers, config) {\n  if (!actions.has(handlerKey)) return;\n\n  if (!EngineMap.has(key)) {\n    if (process.env.NODE_ENV === 'development') {\n      console.warn(`[@use-gesture]: You've created a custom handler that that uses the \\`${key}\\` gesture but isn't properly configured.\\n\\nPlease add \\`${key}Action\\` when creating your handler.`);\n    }\n\n    return;\n  }\n\n  const startKey = handlerKey + 'Start';\n  const endKey = handlerKey + 'End';\n\n  const fn = state => {\n    let memo = undefined;\n    if (state.first && startKey in handlers) handlers[startKey](state);\n    if (handlerKey in handlers) memo = handlers[handlerKey](state);\n    if (state.last && endKey in handlers) handlers[endKey](state);\n    return memo;\n  };\n\n  internalHandlers[key] = fn;\n  config[key] = config[key] || {};\n}\n\nfunction parseMergedHandlers(mergedHandlers, mergedConfig) {\n  const [handlers, nativeHandlers, actions] = sortHandlers(mergedHandlers);\n  const internalHandlers = {};\n  registerGesture(actions, handlers, 'onDrag', 'drag', internalHandlers, mergedConfig);\n  registerGesture(actions, handlers, 'onWheel', 'wheel', internalHandlers, mergedConfig);\n  registerGesture(actions, handlers, 'onScroll', 'scroll', internalHandlers, mergedConfig);\n  registerGesture(actions, handlers, 'onPinch', 'pinch', internalHandlers, mergedConfig);\n  registerGesture(actions, handlers, 'onMove', 'move', internalHandlers, mergedConfig);\n  registerGesture(actions, handlers, 'onHover', 'hover', internalHandlers, mergedConfig);\n  return {\n    handlers: internalHandlers,\n    config: mergedConfig,\n    nativeHandlers\n  };\n}\n\nexport { Controller, parseMergedHandlers };\n","import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { memo, forwardRef } from 'react';\nimport { useBEM } from '../hooks/useBEM.js';\nimport { menuClass, menuHeaderClass } from '../utils/constants.js';\nimport { useFlatStyles } from '../hooks/useFlatStyles.js';\nimport { stylePropTypes } from '../utils/propTypes.js';\n\nvar _excluded = [\"className\", \"styles\"];\nvar MenuHeader = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function MenuHeader(_ref, externalRef) {\n  var className = _ref.className,\n      styles = _ref.styles,\n      restProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"li\", _extends({\n    role: \"presentation\"\n  }, restProps, {\n    ref: externalRef,\n    className: useBEM({\n      block: menuClass,\n      element: menuHeaderClass,\n      className: className\n    }),\n    style: useFlatStyles(styles)\n  }));\n}));\nprocess.env.NODE_ENV !== \"production\" ? MenuHeader.propTypes = /*#__PURE__*/_extends({}, /*#__PURE__*/stylePropTypes()) : void 0;\n\nexport { MenuHeader };\n","import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { memo, forwardRef } from 'react';\nimport { useBEM } from '../hooks/useBEM.js';\nimport { menuClass, menuDividerClass } from '../utils/constants.js';\nimport { useFlatStyles } from '../hooks/useFlatStyles.js';\nimport { stylePropTypes } from '../utils/propTypes.js';\n\nvar _excluded = [\"className\", \"styles\"];\nvar MenuDivider = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function MenuDivider(_ref, externalRef) {\n  var className = _ref.className,\n      styles = _ref.styles,\n      restProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"li\", _extends({\n    role: \"separator\"\n  }, restProps, {\n    ref: externalRef,\n    className: useBEM({\n      block: menuClass,\n      element: menuDividerClass,\n      className: className\n    }),\n    style: useFlatStyles(styles)\n  }));\n}));\nprocess.env.NODE_ENV !== \"production\" ? MenuDivider.propTypes = /*#__PURE__*/_extends({}, /*#__PURE__*/stylePropTypes()) : void 0;\n\nexport { MenuDivider };\n","const MediaStreamTrackControllerFactory = require(\"./MediaStreamTrackControllerFactory\");\nconst { PhantomCollection } = require(\"phantom-core\");\nconst {\n  /** @export */\n  EVT_UPDATED,\n  /** @export */\n  EVT_DESTROYED,\n\n  /** @export */\n  EVT_CHILD_INSTANCE_ADDED,\n  /** @export */\n  EVT_CHILD_INSTANCE_REMOVED,\n} = PhantomCollection;\n\n/**\n * Maintains a collection of MediaStreamTrackControllerFactory instances.\n */\nmodule.exports = class MediaStreamTrackControllerFactoryCollection extends (\n  PhantomCollection\n) {\n  /**\n   * Adds the MediaStreamTrackControllerFactory instance to the collection.\n   *\n   * @param {MediaStreamTrackControllerFactory} factory\n   * @return {void}\n   */\n  addChild(factory) {\n    if (!(factory instanceof MediaStreamTrackControllerFactory)) {\n      throw new TypeError(\"factory is not a MediaStreamTrackControllerFactory\");\n    }\n\n    return super.addChild(factory);\n  }\n\n  /**\n   * Alias for this.addChild(factory).\n   *\n   * @param {MediaStreamTrackControllerFactory} factory\n   * @return {void}\n   */\n  addTrackControllerFactory(factory) {\n    return this.addChild(factory);\n  }\n\n  /**\n   * Removes the given MediaStreamTrackControllerFactory instance from the\n   * collection.\n   *\n   * @param {MediaStreamTrackControllerFactory} factory\n   * @return {void}\n   */\n  removeTrackControllerFactory(factory) {\n    return this.removeChild(factory);\n  }\n\n  /**\n   * Retrieves the MediaStreamTrackControllerFactory children of the\n   * collection.\n   *\n   * @return {MediaStreamTrackControllerFactory[]}\n   */\n  getTrackControllerFactories() {\n    return this.getChildren();\n  }\n\n  /**\n   * Retrieves associated AudioMediaStreamTrackController instances for this\n   * collection.\n   *\n   * FIXME: This Typedef doesn't seem to be working for comments\n   * @typedef {import('./audio/AudioMediaStreamTrackController').default} AudioMediaStreamTrackController\n   *\n   * @return {AudioMediaStreamTrackController[]}\n   */\n  getAudioTrackControllers() {\n    return this.getChildren()\n      .map(factory => factory.getAudioTrackControllers())\n      .flat();\n  }\n\n  /**\n   * Set the audio mute state of the current MediaStreamTrackControllerFactory\n   * children.\n   *\n   * NOTE: Factory instances added after muting will not be muted by default.\n   *\n   * @param {boolean} isAudioMuted\n   * @return {Promise<void>}\n   */\n  async setIsAudioMuted(isAudioMuted) {\n    const audioTrackControllers = this.getAudioTrackControllers();\n\n    await Promise.all(\n      audioTrackControllers.map(controller =>\n        controller.setIsMuted(isAudioMuted)\n      )\n    );\n  }\n\n  /**\n   * Mutes the audio of the current MediaStreamTrackControllerFactory\n   * children.\n   *\n   * NOTE: Factory instances added after muting will not be muted by default.\n   *\n   * @return {Promise<void>}\n   */\n  async muteAudio() {\n    return this.setIsAudioMuted(true);\n  }\n\n  /**\n   * Unmutes the audio of the current MediaStreamTrackControllerFactory\n   * children.\n   *\n   * @return {Promise<void>}\n   */\n  unmuteAudio() {\n    return this.setIsAudioMuted(false);\n  }\n\n  /**\n   * Retrieves whether or not all audio track controllers associated with this\n   * collection are muted.\n   *\n   * @return {boolean}\n   */\n  getIsAudioMuted() {\n    const audioTrackControllers = this.getAudioTrackControllers();\n\n    return (\n      !audioTrackControllers.length ||\n      audioTrackControllers.every(controller => controller.getIsMuted())\n    );\n  }\n\n  /**\n   * Retrieves associated AudioMediaStreamTrackController instances for this\n   * collection.\n   *\n   * FIXME: This Typedef doesn't seem to be working for comments\n   * @typedef {import('./video/VideoMediaStreamTrackController').default} VideoMediaStreamTrackController\n   *\n   * @return {VideoMediaStreamTrackController[]}\n   */\n  getVideoTrackControllers() {\n    return this.getChildren()\n      .map(factory => factory.getVideoTrackControllers())\n      .flat();\n  }\n};\n\nmodule.exports.EVT_UPDATED = EVT_UPDATED;\nmodule.exports.EVT_DESTROYED = EVT_DESTROYED;\n\nmodule.exports.EVT_CHILD_INSTANCE_ADDED = EVT_CHILD_INSTANCE_ADDED;\nmodule.exports.EVT_CHILD_INSTANCE_REMOVED = EVT_CHILD_INSTANCE_REMOVED;\n","module.exports = {\n  audioContext: {\n    createNewAudioContext: require(\"./audioContext/createNewAudioContext\"),\n    getSharedAudioContext: require(\"./audioContext/getSharedAudioContext\"),\n    untilAudioContextResumed: require(\"./audioContext/untilAudioContextResumed\"),\n  },\n  constraints: {\n    audioQualityPresets: require(\"./constraints/audioQualityPresets\"),\n    makeAudioConstraints: require(\"./constraints/makeAudioConstraints\"),\n    makeScreenCaptureConstraints: require(\"./constraints/makeScreenCaptureConstraints\"),\n    makeSpecificDeviceCaptureConstraints: require(\"./constraints/makeSpecificDeviceCaptureConstraints\"),\n    makeVideoConstraints: require(\"./constraints/makeVideoConstraints\"),\n    mergeConstraints: require(\"./constraints/mergeConstraints\"),\n  },\n  mediaDevice: {\n    mediaDeviceInfoFilters: {\n      filterAudioInputDevices: require(\"./mediaDevice/mediaDeviceInfoFilters/filterAudioInputDevices\"),\n      filterAudioOutputDevices: require(\"./mediaDevice/mediaDeviceInfoFilters/filterAudioOutputDevices\"),\n      filterInputMediaDevices: require(\"./mediaDevice/mediaDeviceInfoFilters/filterInputMediaDevices\"),\n      filterOutputMediaDevices: require(\"./mediaDevice/mediaDeviceInfoFilters/filterOutputMediaDevices\"),\n      filterVideoInputDevices: require(\"./mediaDevice/mediaDeviceInfoFilters/filterVideoInputDevices\"),\n      filterVideoOutputDevices: require(\"./mediaDevice/mediaDeviceInfoFilters/filterVideoOutputDevices\"),\n    },\n    cacheDiffMediaDevices: require(\"./mediaDevice/cacheDiffMediaDevices\"),\n    captureMediaDevice: require(\"./mediaDevice/captureMediaDevice\"),\n    captureSpecificMediaDevice: require(\"./mediaDevice/captureSpecificMediaDevice\"),\n    fetchInputMediaDevices: require(\"./mediaDevice/fetchInputMediaDevices\"),\n    fetchMediaDevices: require(\"./mediaDevice/fetchMediaDevices\"),\n    getIsMediaDeviceBeingCaptured: require(\"./mediaDevice/getIsMediaDeviceBeingCaptured\"),\n    getIsMediaDeviceCaptureSupported: require(\"./mediaDevice/getIsMediaDeviceCaptureSupported\"),\n    getIsSameMediaDevice: require(\"./mediaDevice/getIsSameMediaDevice\"),\n    getMatchedMediaDevice: require(\"./mediaDevice/getMatchedMediaDevice\"),\n    getMediaDeviceTrackControllers: require(\"./mediaDevice/getMediaDeviceTrackControllers\"),\n    mediaDeviceToPlainObject: require(\"./mediaDevice/mediaDeviceToPlainObject\"),\n    uncaptureSpecificMediaDevice: require(\"./mediaDevice/uncaptureSpecificMediaDevice\"),\n  },\n  mediaStream: {\n    generators: {\n      createEmptyAudioMediaStream: require(\"./mediaStream/generators/createEmptyAudioMediaStream\"),\n      createTestAudioMediaStream: require(\"./mediaStream/generators/createTestAudioMediaStream\"),\n      createTestVideoMediaStream: require(\"./mediaStream/generators/createTestVideoMediaStream\"),\n    },\n    stopMediaStream: require(\"./mediaStream/stopMediaStream\"),\n  },\n  mediaStreamTrack: {\n    createTrackControllersFromMediaStream: require(\"./mediaStreamTrack/createTrackControllersFromMediaStream\"),\n    getTrackControllerInstances: require(\"./mediaStreamTrack/getTrackControllerInstances\"),\n    stopMediaStreamTrack: require(\"./mediaStreamTrack/stopMediaStreamTrack\"),\n  },\n  screen: {\n    captureScreen: require(\"./screen/captureScreen\"),\n    getIsScreenCaptureSupported: require(\"./screen/getIsScreenCaptureSupported\"),\n  },\n};\n","const getSharedAudioContext = require(\"./getSharedAudioContext\");\n\n/**\n * Resolves once audio context is resumed, or if it is currently running.\n *\n * @param {AudioContext} audioCtx? [optional; default = null] If not specified,\n * a shared audio context is utilized instead.\n * @return {Promise<void>}\n */\nmodule.exports = async function untilAudioContextResumed(audioCtx = null) {\n  if (!audioCtx) {\n    audioCtx = getSharedAudioContext();\n  }\n\n  // Note: This is not documented in https://developer.mozilla.org/en-US/docs/Web/API/AudioContext\n  // Found this fix: https://github.com/Tonejs/Tone.js/issues/341#issuecomment-386725880\n  const isRunning = audioCtx.state === \"running\";\n\n  // Due to browsers' autoplay policy, the AudioContext is only active after\n  // the user has interacted with your app, after which the Promise returned\n  // here is resolved.\n  if (!isRunning) {\n    console.debug(\"Trying to resume audio context\");\n\n    await audioCtx.resume();\n\n    console.debug(\"Audio context resumed\");\n  }\n};\n","const filterInputMediaDevices = require(\"./filterInputMediaDevices\");\nconst { GENERIC_AUDIO_DEVICE_KIND } = require(\"../../../constants\");\n\n/**\n * Returns a filtered array of MediaDeviceInfo[-like] structures, representing\n * audio input devices only.\n *\n * @param {MediaDeviceInfo[] | Object[]} mediaDeviceInfoList\n * @return {MediaDeviceInfo[] | Object[]}\n */\nmodule.exports = function filterAudioInputDevices(mediaDeviceInfoList) {\n  return filterInputMediaDevices(mediaDeviceInfoList).filter(device =>\n    device.kind.includes(GENERIC_AUDIO_DEVICE_KIND)\n  );\n};\n","const filterOutputMediaDevices = require(\"./filterOutputMediaDevices\");\nconst { GENERIC_AUDIO_DEVICE_KIND } = require(\"../../../constants\");\n\n/**\n * Returns a filtered array of MediaDeviceInfo[-like] structures, representing\n * audio output devices only.\n *\n * @param {MediaDeviceInfo[] | Object[]} mediaDeviceInfoList\n * @return {MediaDeviceInfo[] | Object[]}\n */\nmodule.exports = function filterAudioOutputDevices(mediaDeviceInfoList) {\n  return filterOutputMediaDevices(mediaDeviceInfoList).filter(device =>\n    device.kind.includes(GENERIC_AUDIO_DEVICE_KIND)\n  );\n};\n","const filterInputMediaDevices = require(\"./filterInputMediaDevices\");\nconst { GENERIC_VIDEO_DEVICE_KIND } = require(\"../../../constants\");\n\n/**\n * Returns a filtered array of MediaDeviceInfo[-like] structures, representing\n * video input devices only.\n *\n * @param {MediaDeviceInfo[] | Object[]} mediaDeviceInfoList\n * @return {MediaDeviceInfo[] | Object[]}\n */\nmodule.exports = function filterVideoInputDevices(mediaDeviceInfoList) {\n  return filterInputMediaDevices(mediaDeviceInfoList).filter(device =>\n    device.kind.includes(GENERIC_VIDEO_DEVICE_KIND)\n  );\n};\n","const filterOutputMediaDevices = require(\"./filterOutputMediaDevices\");\nconst { GENERIC_VIDEO_DEVICE_KIND } = require(\"../../../constants\");\n\n/**\n * Returns a filtered array of MediaDeviceInfo[-like] structures, representing\n * video output devices only.\n *\n * @param {MediaDeviceInfo[] | Object[]} mediaDeviceInfoList\n * @return {MediaDeviceInfo[] | Object[]}\n */\nmodule.exports = function filterVideoOutputDevices(mediaDeviceInfoList) {\n  return filterOutputMediaDevices(mediaDeviceInfoList).filter(device =>\n    device.kind.includes(GENERIC_VIDEO_DEVICE_KIND)\n  );\n};\n","const MediaStreamTrackControllerFactory = require(\"../../MediaStreamTrackControllerFactory\");\nconst captureMediaDevice = require(\"./captureMediaDevice\");\nconst makeSpecificDeviceCaptureConstraints = require(\"../constraints/makeSpecificDeviceCaptureConstraints\");\n\n/**\n * Captures audio from the specific audio input device with the given\n * mediaDeviceId.\n *\n * @param {MediaDeviceInfo | Object} mediaDeviceInfo The media device info of the device to capture. @see fetchMediaDevices\n * @param {MediaTrackConstraints} userConstraints? [optional; default = {}]\n * @param {Object} factoryOptions? [optional; default = {}]\n * @return {Promise<MediaStreamTrackControllerFactory>}\n */\nmodule.exports = async function captureSpecificMediaDevice(\n  mediaDeviceInfo,\n  userConstraints = {},\n  factoryOptions = {}\n) {\n  const nextConstraints = makeSpecificDeviceCaptureConstraints(\n    mediaDeviceInfo,\n    userConstraints\n  );\n\n  return captureMediaDevice(nextConstraints, factoryOptions);\n};\n","const fetchMediaDevices = require(\"./fetchMediaDevices\");\nconst filterInputMediaDevices = require(\"./mediaDeviceInfoFilters/filterInputMediaDevices\");\n\n/**\n * Lists all input media devices.\n *\n * IMPORTANT: Unlike the underlying call to\n * navigator.mediaDevices.enumerateDevices, this function will resolve the same\n * MediaDeviceInfo instances across subsequent calls (as long as isAggressive\n * is not changed between calls).\n *\n * @param {boolean} isAggressive? [optional; default=true] If true, temporarily\n * turn on devices in order to obtain label information.\n * @return {Promise<MediaDeviceInfo[]>}\n */\nmodule.exports = async function fetchInputMediaDevices(isAggressive = true) {\n  const mediaDevices = await fetchMediaDevices(isAggressive);\n\n  return filterInputMediaDevices(mediaDevices);\n};\n","const getMediaDeviceTrackControllers = require(\"./getMediaDeviceTrackControllers\");\n\n/**\n * Determines if the given media device is being captured.\n *\n * @param {MediaDeviceInfo | Object} mediaDeviceInfo\n * @return {boolean}\n */\nmodule.exports = function getIsMediaDeviceBeingCaptured(mediaDeviceInfo) {\n  return Boolean(getMediaDeviceTrackControllers(mediaDeviceInfo).length > 0);\n};\n","/**\n * Determines if the browser is capable of capturing input from audio / video\n * devices.\n *\n * @return {boolean}\n */\nmodule.exports = function getIsMediaDeviceCaptureSupported() {\n  return (\n    navigator &&\n    navigator.mediaDevices &&\n    typeof navigator.mediaDevices.getUserMedia === \"function\"\n  );\n};\n","const MediaStreamTrackControllerBase = require(\"../../_base/_MediaStreamTrackControllerBase\");\n\n/**\n * Searches for, and destructs, all track controllers with the given\n * mediaDeviceInfo as the input device.\n *\n * @param {MediaDeviceInfo | Object} mediaDeviceInfo\n * @throws {ReferenceError} Throws if deviceId is not obtainable from\n * mediaDeviceInfo.\n * @return {Promise<void>}\n */\nmodule.exports = async function uncaptureSpecificMediaDevice(mediaDeviceInfo) {\n  const { deviceId } = mediaDeviceInfo;\n\n  if (!deviceId) {\n    throw new ReferenceError(\"Could not obtain deviceId from mediaDeviceInfo\");\n  }\n\n  // Look up all track controllers with this mediaDeviceInfo and stop them\n  return Promise.all(\n    MediaStreamTrackControllerBase.getTrackControllerInstances()\n      .filter(controller => controller.getInputDeviceId() === deviceId)\n      .map(controller => !controller.getIsDestroying() && controller.destroy())\n  );\n};\n","const createNewAudioContext = require(\"../../audioContext/createNewAudioContext\");\nconst stopMediaStream = require(\"../stopMediaStream\");\nconst { logger } = require(\"phantom-core\");\n\n/**\n * Returns an empty MediaStream container which automatically ends at the\n * specified duration.\n *\n * @param {number} duration? [default = 5] Number of seconds the pulse should\n * last.\n * @return {MediaStream}\n */\nmodule.exports = function createEmptyAudioMediaStream(duration = 5) {\n  const audioCtx = createNewAudioContext();\n\n  const streamOutput = audioCtx.createMediaStreamDestination();\n\n  const mediaStream = streamOutput.stream;\n\n  // Stop the stream once the pulse time ends\n  setTimeout(() => {\n    stopMediaStream(mediaStream);\n\n    logger.log(\"stopped media stream\");\n\n    audioCtx.close().then(() => logger.log(\"audio context closed\"));\n  }, duration * 1000);\n\n  return mediaStream;\n};\n","const createNewAudioContext = require(\"../../audioContext/createNewAudioContext\");\nconst stopMediaStream = require(\"../stopMediaStream\");\nconst { logger } = require(\"phantom-core\");\n\n/**\n * Returns a MediaStream with a single pulsing, test audio track which\n * automatically ends at the specified duration.\n *\n * @param {number} duration? [default = 10000] Number of milliseconds the pulse\n * should last.\n * @return {MediaStream}\n */\nmodule.exports = function createTestAudioMediaStream(duration = 10000) {\n  const pulseHz = 880;\n  const lfoHz = 30;\n\n  const audioCtx = createNewAudioContext();\n\n  let osc = audioCtx.createOscillator();\n  osc.type = \"sine\";\n  osc.frequency.setValueAtTime(pulseHz, audioCtx.currentTime);\n\n  let amp = audioCtx.createGain();\n  amp.gain.value = 0.0001;\n  amp.gain.setValueAtTime(1, audioCtx.currentTime);\n\n  let lfo = audioCtx.createOscillator();\n  lfo.type = \"square\";\n  lfo.frequency.setValueAtTime(lfoHz, audioCtx.currentTime);\n\n  const streamOutput = audioCtx.createMediaStreamDestination();\n\n  lfo.connect(amp.gain);\n  osc.connect(amp).connect(streamOutput);\n  lfo.start();\n  osc.start();\n  osc.stop(audioCtx.currentTime + duration);\n\n  const mediaStream = streamOutput.stream;\n\n  // Stop the stream once the pulse time ends\n  setTimeout(() => {\n    stopMediaStream(mediaStream);\n\n    logger.log(\"stopped media stream\");\n\n    audioCtx.close().then(() => logger.log(\"audio context closed\"));\n  }, duration);\n\n  return mediaStream;\n};\n","const stopMediaStream = require(\"../stopMediaStream\");\nconst { logger } = require(\"phantom-core\");\n\n/**\n * Returns a MediaStream with a single test video track which automatically\n * ends at the specified duration.\n *\n * @param {number} duration? [default = 10000] Number of milliseconds the pulse should\n * last.\n * @return {MediaStream}\n */\nmodule.exports = function createTestVideoMediaStream(duration = 10000) {\n  const canvas = document.createElement(\"canvas\");\n\n  document.body.appendChild(canvas);\n\n  const mediaStream = canvas.captureStream(25);\n\n  setTimeout(() => {\n    stopMediaStream(mediaStream);\n\n    document.body.removeChild(canvas);\n\n    logger.log(\"stopped media stream\");\n  }, duration);\n\n  return mediaStream;\n};\n","const BaseTrackController = require(\"../../_base/_MediaStreamTrackControllerBase\");\n\n/**\n * @return {AudioMediaStreamTrackController[] | VideoMediaStreamTrackController[]}\n */\nmodule.exports = function getTrackControllerInstances() {\n  return BaseTrackController.getTrackControllerInstances();\n};\n","const MediaStreamTrackControllerFactory = require(\"../../MediaStreamTrackControllerFactory\");\nconst makeScreenCaptureConstraints = require(\"../constraints/makeScreenCaptureConstraints\");\n\n/**\n * Capture screen  content and resolve a controller factory to manage the media\n * track(s).\n *\n * For additional reading, @link https://w3c.github.io/mediacapture-main.\n *\n * @param {MediaTrackConstraints} userConstraints? [optional; default = {}]\n * @param {Object} factoryOptions? [optional; default = {}]\n * @return {Promise<MediaStreamTrackControllerFactory>}\n */\nmodule.exports = async function captureScreen(\n  userConstraints = {},\n  factoryOptions = {}\n) {\n  const mediaStream = await navigator.mediaDevices.getDisplayMedia(\n    makeScreenCaptureConstraints(userConstraints)\n  );\n\n  return new MediaStreamTrackControllerFactory(mediaStream, factoryOptions);\n};\n","/**\n * Determines if screen capture is supported in the browser.\n *\n * @return {boolean}\n */\nmodule.exports = function getIsScreenCaptureSupported() {\n  return (\n    navigator &&\n    navigator.mediaDevices &&\n    typeof navigator.mediaDevices.getDisplayMedia === \"function\"\n  );\n};\n","const PhantomCore = require(\"phantom-core\");\nconst { logger } = PhantomCore;\nconst NativeAudioMediaStreamTrackLevelMonitor = require(\"./NativeAudioMediaStreamTrackLevelMonitor\");\nconst {\n  /** @export */\n  EVT_AUDIO_LEVEL_UPDATED,\n  /** @export */\n  EVT_AUDIO_SILENCE_STARTED,\n  /** @export */\n  EVT_AUDIO_SILENCE_ENDED,\n  /** @export */\n  EVT_DESTROYED,\n} = NativeAudioMediaStreamTrackLevelMonitor;\n\n/**\n * The underlying audio monitors which are being proxied to, keyed by the\n * respective MediaStreamTrack id.\n *\n * @type {{key: string, value: AudioMediaStreamTrackLevelMonitor}}\n */\nconst _monitorInstances = {};\n\n/**\n * The number of proxies, per MediaStreamTrack id.\n *\n * @type {{key: string, value: number}}}\n */\nconst _proxyCounts = {};\n\n/**\n * Exposed proxy for NativeAudioMediaStreamTrackLevelMonitor.\n *\n * New instances of this class can be constructed, reusing the same\n * MediaStreamTrack across instances, and (in order to make CPU\n * usage more efficient) if two or more proxy listeners are listening to the\n * same MediaStreamTrack, only one NativeAudioMediaStreamTrackLevelMonitor will\n * be utilized for that particular MediaStreamTrack, regardless of the amount\n * of proxy listeners.\n */\nclass AudioMediaStreamTrackLevelMonitor extends PhantomCore {\n  /**\n   * Adds a proxy instance to the audio level monitor.\n   *\n   * If no audio level monitor the proxied MediaStreamTrack is present, it will\n   * create the monitor.\n   *\n   * On proxy destruct, if no remaining proxies for the monitor are present, it\n   * will destroy the audio level monitor.\n   *\n   * @param {AudioMediaStreamTrackLevelMonitor} proxy\n   * @return {void}\n   */\n  static addProxyInstance(proxy) {\n    if (!(proxy instanceof AudioMediaStreamTrackLevelMonitor)) {\n      throw new TypeError(\n        \"proxy is not an AudioMediaStreamTrackLevelMonitor instance\"\n      );\n    }\n\n    const mediaStreamTrack = proxy.getMediaStreamTrack();\n\n    let nativeMonitor = _monitorInstances[mediaStreamTrack.id];\n\n    if (!nativeMonitor) {\n      nativeMonitor = new NativeAudioMediaStreamTrackLevelMonitor(\n        mediaStreamTrack\n      );\n\n      // Handle monitor destroy\n      //\n      // Remove all proxies for the given audio level monitor\n      nativeMonitor.once(EVT_DESTROYED, () => {\n        const proxies = _proxyCounts[mediaStreamTrack.id];\n\n        if (proxies) {\n          Object.values(proxies).forEach(\n            proxy => proxy && !proxy.getIsDestroying() && proxy.destroy()\n          );\n        }\n      });\n\n      logger.debug(\"Proxied audio monitor created\", nativeMonitor);\n\n      _monitorInstances[mediaStreamTrack.id] = nativeMonitor;\n    }\n\n    // Register the native monitor with the proxy\n    proxy._nativeMonitor = nativeMonitor;\n\n    if (!_proxyCounts[mediaStreamTrack.id]) {\n      // Start the count at one proxied instance\n      _proxyCounts[mediaStreamTrack.id] = 1;\n    } else {\n      // Add to the count of proxied instances\n      ++_proxyCounts[mediaStreamTrack.id];\n    }\n\n    /**\n     * These events will be proxied from the native monitor to the proxy\n     * monitor.\n     *\n     * @type {string[]}\n     **/\n    const proxyEvents = [\n      EVT_AUDIO_LEVEL_UPDATED,\n      EVT_AUDIO_SILENCE_STARTED,\n      EVT_AUDIO_SILENCE_ENDED,\n    ];\n\n    /** @type {{key: string, value: Function}} */\n    const proxyHandlers = {};\n\n    // Bind the proxy events, registering them with the handlers\n    proxyEvents.forEach(proxyEvent => {\n      proxyHandlers[proxyEvent] = data => proxy.emit(proxyEvent, data);\n\n      nativeMonitor.on(proxyEvent, proxyHandlers[proxyEvent]);\n    });\n\n    // Handle proxy destruct\n    proxy.once(EVT_DESTROYED, async () => {\n      // Unregister proxy events from the native monitor (any new audio levels\n      // won't come through at this point)\n      proxyEvents.forEach(proxyEvent =>\n        nativeMonitor.off(proxyEvent, proxyHandlers[proxyEvent])\n      );\n\n      // Emit final audio level updated event\n      proxy.emit(EVT_AUDIO_LEVEL_UPDATED, 0);\n\n      // Subtract from the count of proxied instances\n      --_proxyCounts[mediaStreamTrack.id];\n\n      // Destruct the monitor once all proxies are destructed\n      if (!_proxyCounts[mediaStreamTrack.id]) {\n        delete _monitorInstances[mediaStreamTrack.id];\n        delete _proxyCounts[mediaStreamTrack.id];\n\n        if (!nativeMonitor.getIsDestroying()) {\n          await nativeMonitor.destroy();\n        }\n\n        logger.debug(\"Proxied audio monitor destroyed\", nativeMonitor);\n      }\n    });\n  }\n\n  /**\n   * @param {MediaStreamTrack} mediaStreamTrack\n   */\n  constructor(mediaStreamTrack) {\n    NativeAudioMediaStreamTrackLevelMonitor.validateAudioTrack(\n      mediaStreamTrack\n    );\n\n    super();\n\n    this._mediaStreamTrack = mediaStreamTrack;\n\n    this._nativeMonitor = null;\n\n    // IMPORTANT: Don't destruct the native monitor here on shutdown because\n    // the native monitor might be utilized across multiple proxy instances,\n    // just unregister it as a class property so that \"lingering PhantomCore\n    // instance\" warning does not appear\n    this.registerCleanupHandler(() => (this._nativeMonitor = null));\n\n    // Bind this instance as a proxy to the native listener\n    AudioMediaStreamTrackLevelMonitor.addProxyInstance(this);\n  }\n\n  /**\n   * @return {MediaStreamTrack}\n   */\n  getMediaStreamTrack() {\n    return this._mediaStreamTrack;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  getIsSilent() {\n    return this._nativeMonitor.getIsSilent();\n  }\n}\n\nmodule.exports = AudioMediaStreamTrackLevelMonitor;\n\nmodule.exports.EVT_AUDIO_LEVEL_UPDATED = EVT_AUDIO_LEVEL_UPDATED;\nmodule.exports.EVT_AUDIO_SILENCE_STARTED = EVT_AUDIO_SILENCE_STARTED;\nmodule.exports.EVT_AUDIO_SILENCE_ENDED = EVT_AUDIO_SILENCE_ENDED;\nmodule.exports.EVT_DESTROYED = EVT_DESTROYED;\n","const PhantomCore = require(\"phantom-core\");\nconst { /** @export */ EVT_DESTROYED } = PhantomCore;\nconst getSharedAudioContext = require(\"../../utils/audioContext/getSharedAudioContext\");\nconst { AUDIO_TRACK_KIND } = require(\"../../constants\");\n\n/** @export */\nconst EVT_AUDIO_LEVEL_UPDATED = \"audio-level-updated\";\n\n/** @export */\nconst EVT_AUDIO_SILENCE_STARTED = \"audio-silence-started\";\n\n/** @export */\nconst EVT_AUDIO_SILENCE_ENDED = \"audio-silence-ended\";\n\n// Number of ms to wait before track silence should raise an error\nconst SILENCE_DETECTION_THRESHOLD_TIME = 1000;\n\n// Number of ms wait before capturing next audio frame\nconst DEFAULT_TICK_TIME = 100;\n\n// TODO: Integrate AudioWorkletNode processing:\n//  - https://www.w3.org/TR/webaudio/#vu-meter-mode\n//  - https://developer.mozilla.org/en-US/docs/Web/API/AudioWorklet\n\n/**\n * Directly listens to the given audio MediaStreamTrack.\n *\n * Portions of this class were derived from Twilio's Reference React App:\n * @see {@link https://github.com/twilio/twilio-video-app-react/blob/master/src/components/AudioLevelIndicator/AudioLevelIndicator.tsx}\n *\n * IMPORTANT: For most purposes, this class should not be used directly,\n * because it is not CPU efficient when multiple listeners are attached to the\n * same MediaStreamTrack. The AudioMediaStreamTrackLevelMonitor remediates\n * that by proxying events from multiple programmatic listeners to this native\n * monitor.\n */\nclass NativeAudioMediaStreamTrackLevelMonitor extends PhantomCore {\n  /**\n   * TODO: Look into reference which uses \"rms pressure\" reference:\n   * @see {@link https://dosits.org/science/advanced-topics/introduction-to-signal-levels }\n   *\n   * @see {@link https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-audiolevel}\n   * @see {@link https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-totalaudioenergy}\n   *\n   * @param {Uint8Array} samples\n   * @return {number} TODO: Verify this is correct; should it be 0 - 1 instead? A float value between 0 - 100\n   */\n  static calculateRMSPressure(samples) {\n    const sumSq = samples.reduce((sumSq, sample) => sumSq + sample * sample, 0);\n    return Math.sqrt(sumSq / samples.length);\n  }\n\n  /**\n   * Validates the given MediaStreamTrack, throwing an exception if it is not\n   * of valid type for use here.\n   *\n   * @param {MediaStreamTrack} mediaStreamTrack An audio MediaStreamTrack.\n   * @throws {TypeError}\n   * @return {void}\n   */\n  static validateAudioTrack(mediaStreamTrack) {\n    if (!(mediaStreamTrack instanceof MediaStreamTrack)) {\n      throw new TypeError(\n        \"mediaStreamTrack should be of MediaStreamTrack type\"\n      );\n    }\n\n    if (mediaStreamTrack.kind !== AUDIO_TRACK_KIND) {\n      throw new TypeError(\"mediaStreamTrack is not an audio track\");\n    }\n  }\n\n  /**\n   * @param {MediaStreamTrack} mediaStreamTrack The track from which to monitor\n   * the audio levels. Must be of audio type.\n   * @param {Object} options? [default={}]\n   */\n  constructor(mediaStreamTrack, options = {}) {\n    NativeAudioMediaStreamTrackLevelMonitor.validateAudioTrack(\n      mediaStreamTrack\n    );\n\n    const DEFAULT_OPTIONS = {\n      tickTime: DEFAULT_TICK_TIME,\n\n      // Analyser config derived from https://github.com/twilio/twilio-video-app-react/blob/master/src/components/AudioLevelIndicator/AudioLevelIndicator.tsx#L20\n      fftSize: 256,\n      smoothingTimeConstant: 0.5,\n    };\n\n    super(PhantomCore.mergeOptions(DEFAULT_OPTIONS, options));\n\n    this._inputMediaStreamTrack = mediaStreamTrack;\n\n    // IMPORTANT: Using a clone of the MediaStreamTrack is necessary because\n    // iOS may not work correctly here if multiple readings are of the same\n    // track\n    this._mediaStreamTrack = mediaStreamTrack.clone();\n\n    // window.setTimeout used for silence-to-error detection\n    this._silenceDetectionTimeout = null;\n\n    this._isSilent = false;\n\n    this._prevRMS = 0;\n\n    this._analyser = null;\n    this._stream = null;\n    this._source = null;\n\n    // Will be populated w/ Uint8Array once initialized\n    this._samples = null;\n\n    // Handle automatic cleanup once track ends\n    mediaStreamTrack.addEventListener(\"ended\", () => {\n      if (!this.getIsDestroying) {\n        this.destroy();\n      }\n    });\n\n    // TODO: Cite reference link for Twilio audio level indicator\n    // (Modified from AudioLevelIndicator.tsx in Twilio Video App React demo app)\n    //\n    // Here we re-initialize the AnalyserNode on focus to avoid an issue in Safari\n    // where the analyzers stop functioning when the user switches to a new tab\n    // and switches back to the app.\n    (() => {\n      const _handleFocus = () => this._initAudioLevelPolling();\n\n      window.addEventListener(\"focus\", _handleFocus);\n\n      this.once(EVT_DESTROYED, () => {\n        window.removeEventListener(\"focus\", _handleFocus);\n      });\n    })();\n\n    // Start initial polling\n    // IMPORTANT: This doesn't use normal PhantomCore async init convention because it may be called more than once to restart the polling sequence\n    const initTimeout = window.setTimeout(\n      () => this._initAudioLevelPolling(),\n      50\n    );\n    this.registerCleanupHandler(() => window.clearTimeout(initTimeout));\n  }\n\n  /**\n   * Note: If this is called more than once, it will re-start the polling sequence.\n   *\n   * Derived from Twilio's documentation.\n   * @link https://www.twilio.com/docs/video/build-js-video-application-recommendations-and-best-practices\n   *\n   * @return {Promise<void>}\n   */\n  async _initAudioLevelPolling() {\n    // Stop previous polling, if already started\n    // TODO: Rename / document further\n    if (this._tickInterval) {\n      window.clearInterval(this._tickInterval);\n    }\n\n    if (this._silenceDetectionTimeout) {\n      window.clearTimeout(this._silenceDetectionTimeout);\n    }\n\n    // This class may have a rapid lifecycle inside of a React component, so\n    // this subsequent check will ensure we're still running and prevent\n    // potential errors\n    if (this.getIsDestroying()) {\n      return;\n    }\n\n    // TODO: Use OfflineAudioContext, if possible... should be a lot more performant\n    const audioContext = getSharedAudioContext();\n\n    // Due to browsers' autoplay policy, the AudioContext is only active after\n    // the user has interacted with your app, after which the Promise returned\n    // here is resolved\n    await audioContext.resume();\n\n    // Perform a final check for destroying state after audio context resume\n    if (this.getIsDestroying()) {\n      return;\n    }\n\n    this._isAudioContextStarted = true;\n    // this.emit(EVT_AUDIO_CONTEXT_STARTED);\n\n    const mediaStreamTrack = this._mediaStreamTrack;\n\n    if (!mediaStreamTrack) {\n      throw new Error(\"Could not obtain MediaStreamTrack\");\n    }\n\n    // Create an analyser to access the raw audio samples from the microphone.\n    if (!this._analyser) {\n      this._analyser = audioContext.createAnalyser();\n\n      this.registerCleanupHandler(() => this._analyser.disconnect());\n\n      this._analyser.fftSize = this.getOptions().fftSize;\n      this._analyser.smoothingTimeConstant =\n        this.getOptions().smoothingTimeConstant;\n    }\n\n    if (!this._stream) {\n      this._stream = new MediaStream([mediaStreamTrack]);\n    }\n\n    if (!this._source) {\n      // Connect the LocalAudioTrack's media source to the analyser.\n      // Note: Creating a new MediaStream here to avoid having to pass a\n      // MediaStream to this class\n      this._source = audioContext.createMediaStreamSource(this._stream);\n      this._source.connect(this._analyser);\n\n      this.registerCleanupHandler(() =>\n        this._source.disconnect(this._analyser)\n      );\n    }\n\n    if (!this._samples) {\n      this._samples = new Uint8Array(this._analyser.frequencyBinCount);\n    }\n\n    // Set initial audio level to 0\n    this._audioLevelDidUpdate(0);\n\n    // Start polling for audio level detection\n    this._tickInterval = window.setInterval(\n      () => this._handleTick(),\n      this.getOptions().tickTime\n    );\n  }\n\n  /**\n   * Handles one tick cycle of audio level polling by capturing the audio\n   * frequency data and then sending it to the audio level checker.\n   *\n   * @return {void}\n   */\n  _handleTick() {\n    if (this._isDestroyed) {\n      return;\n    }\n\n    this._analyser.getByteFrequencyData(this._samples);\n    const rms = NativeAudioMediaStreamTrackLevelMonitor.calculateRMSPressure(\n      this._samples\n    );\n\n    if (this._prevRMS !== rms) {\n      this._prevRMS = rms;\n\n      this._audioLevelDidUpdate(rms);\n    }\n  }\n\n  /**\n   * Retrieves the original MediaStreamTrack which this instance was\n   * instantiated with.\n   *\n   * @return {MediaStreamTrack}\n   */\n  getMediaStreamTrack() {\n    return this._inputMediaStreamTrack;\n  }\n\n  /**\n   * Internally called after audio level has changed.\n   *\n   * @param {number} audioLevel Float range from 0 - 100, representing RMS\n   * level.\n   */\n  _audioLevelDidUpdate(audioLevel) {\n    this._audioLevel = audioLevel;\n\n    if (!audioLevel) {\n      this._silenceDidPotentiallyStart();\n    } else {\n      this._silenceDidPotentiallyEnd();\n    }\n\n    this.emit(EVT_AUDIO_LEVEL_UPDATED, audioLevel);\n  }\n\n  /**\n   * Internally called after period of silence has started.\n   *\n   * @return {void}\n   */\n  _silenceDidPotentiallyStart() {\n    if (this._silenceDetectionTimeout) {\n      window.clearTimeout(this._silenceDetectionTimeout);\n    }\n\n    this._silenceDetectionTimeout = window.setTimeout(() => {\n      if (this._isDestroyed) {\n        return;\n      }\n\n      this._isSilent = true;\n\n      // FIXME: (jh) Keep or change to debug\n      this.log.warn(\"Silence detected\");\n\n      // Tell interested listeners\n      this.emit(EVT_AUDIO_SILENCE_STARTED);\n    }, SILENCE_DETECTION_THRESHOLD_TIME);\n  }\n\n  /**\n   * Internally called after period of silence has ended.\n   *\n   * @return {void}\n   */\n  _silenceDidPotentiallyEnd() {\n    if (this._silenceDetectionTimeout) {\n      window.clearTimeout(this._silenceDetectionTimeout);\n    }\n\n    // Detect if existing error should be a false-positive\n    if (this._isSilent) {\n      this._isSilent = false;\n\n      this.emit(EVT_AUDIO_SILENCE_ENDED);\n    }\n  }\n\n  /**\n   * Retrieves whether or not the associated audio stream is silent.\n   *\n   * @return {boolean}\n   */\n  getIsSilent() {\n    return this._isSilent();\n  }\n\n  /**\n   * TODO: Utilize destroyHandler?\n   * @return {Promise<void>}\n   */\n  async destroy() {\n    return super.destroy(() => {\n      if (this._tickInterval) {\n        window.clearInterval(this._tickInterval);\n      }\n\n      if (this._silenceDetectionTimeout) {\n        window.clearTimeout(this._silenceDetectionTimeout);\n      }\n\n      // NOTE: This is a cloned MediaStreamTrack and it does not stop the input\n      // track on its own (nor should it). This prevents an issue in Google\n      // Chrome (maybe others) where the recording indicator would stay lit after\n      // the source has been stopped.\n      this._mediaStreamTrack.stop();\n    });\n  }\n}\n\nmodule.exports = NativeAudioMediaStreamTrackLevelMonitor;\n\nmodule.exports.EVT_AUDIO_LEVEL_UPDATED = EVT_AUDIO_LEVEL_UPDATED;\nmodule.exports.EVT_AUDIO_SILENCE_STARTED = EVT_AUDIO_SILENCE_STARTED;\nmodule.exports.EVT_AUDIO_SILENCE_ENDED = EVT_AUDIO_SILENCE_ENDED;\nmodule.exports.EVT_DESTROYED = EVT_DESTROYED;\n","const MultiAudioMediaStreamTrackLevelMonitor = require(\"./MultiAudioMediaStreamTrackLevelMonitor\");\nconst {\n  EVT_AUDIO_LEVEL_UPDATED,\n  EVT_AUDIO_SILENCE_STARTED,\n  EVT_AUDIO_SILENCE_ENDED,\n} = MultiAudioMediaStreamTrackLevelMonitor;\n\nmodule.exports = MultiAudioMediaStreamTrackLevelMonitor;\n\nmodule.exports.EVT_AUDIO_LEVEL_UPDATED = EVT_AUDIO_LEVEL_UPDATED;\nmodule.exports.EVT_AUDIO_SILENCE_STARTED = EVT_AUDIO_SILENCE_STARTED;\nmodule.exports.EVT_AUDIO_SILENCE_ENDED = EVT_AUDIO_SILENCE_ENDED;\n","const { PhantomCollection } = require(\"phantom-core\");\nconst AudioMediaStreamTrackLevelMonitor = require(\"../AudioMediaStreamTrackLevelMonitor\");\nconst {\n  /** @export */\n  EVT_AUDIO_LEVEL_UPDATED,\n  /** @export */\n  EVT_AUDIO_SILENCE_STARTED,\n  /** @export */\n  EVT_AUDIO_SILENCE_ENDED,\n  /** @export */\n  EVT_DESTROYED,\n} = AudioMediaStreamTrackLevelMonitor;\n\n/**\n * Listens to the audio levels of multiple audio tracks at once and emits a\n * debounced peak audio level on each cycle of all of the children audio level\n * listeners.\n *\n * Uses MediaStreamTracks themselves as PhantomCore instances by internally\n * binding AudioMediaStreamTrackLevelMonitor instances to them when added as\n * children.\n *\n * IMPORTANT: This is intentionally designed so that all tracks can be removed\n * during runtime and the multi-monitor will stay running.\n */\nclass MultiAudioMediaStreamTrackLevelMonitor extends PhantomCollection {\n  constructor(initialMediaStreamTracks = []) {\n    super(initialMediaStreamTracks);\n\n    // The proxy events this class should proxy from the children\n    this.bindChildEventName(EVT_AUDIO_LEVEL_UPDATED);\n    this.bindChildEventName(EVT_AUDIO_SILENCE_STARTED);\n    this.bindChildEventName(EVT_AUDIO_SILENCE_ENDED);\n  }\n\n  /**\n   * Adds a MediaStreamTrack to the given collection.\n   *\n   * If a duplicate track is added, it will silently ignore the duplicate.\n   *\n   * @param {MediaStreamTrack} mediaStreamTrack\n   * @return {void}\n   */\n  addChild(mediaStreamTrack) {\n    if (!(mediaStreamTrack instanceof MediaStreamTrack)) {\n      throw new TypeError(\n        \"mediaStreamTrack is not a MediaStreamTrack instance\"\n      );\n    }\n\n    // Ignore attempts to add duplicate tracks\n    if (this.getChildWithKey(mediaStreamTrack.id)) {\n      return;\n    }\n\n    // Add track level monitor around the given MediaStreamTrack\n    super.addChild(\n      new AudioMediaStreamTrackLevelMonitor(mediaStreamTrack),\n      mediaStreamTrack.id\n    );\n  }\n\n  /**\n   * Adds a MediaStreamTrack to the collection.\n   *\n   * If a duplicate track is added, it will silently ignore the duplicate.\n   *\n   * @param {MediaStreamTrack} mediaStreamTrack\n   * @return {void}\n   */\n  addMediaStreamTrack(mediaStreamTrack) {\n    return this.addChild(mediaStreamTrack);\n  }\n\n  /**\n   * Removes the given MediaStreamTrack or associated\n   * AudioMediaStreamTrackLevelMonitor from the underlying collection.\n   *\n   * IMPORTANT: This overrides the super's synchronous handling w/\n   * asynchronous (we're returning a promise here).\n   *\n   * @param {MediaStreamTrack | AudioMediaStreamTrackLevelMonitor} trackOrMonitor\n   * @return {Promise<void>} NOTE: A promise is used because it needs to shut\n   * down the associated track level monitor, which is an asynchronous call.\n   */\n  async removeChild(trackOrMonitor) {\n    if (\n      !(trackOrMonitor instanceof MediaStreamTrack) &&\n      !(trackOrMonitor instanceof AudioMediaStreamTrackLevelMonitor)\n    ) {\n      throw new TypeError(\n        \"trackOrMonitor must be either a MediaStreamTrack or AudioMediaStreamTrackLevelMonitor\"\n      );\n    }\n\n    /** @type {AudioMediaStreamTrackLevelMonitor} */\n    const trackLevelMonitor =\n      trackOrMonitor instanceof AudioMediaStreamTrackLevelMonitor\n        ? trackOrMonitor\n        : this.getChildWithKey(trackOrMonitor.id);\n\n    if (trackLevelMonitor && !trackLevelMonitor.getIsDestroying()) {\n      await trackLevelMonitor.destroy();\n    }\n\n    return super.removeChild(trackOrMonitor);\n  }\n\n  /**\n   * Removes a MediaStreamTrack from the collection and destructs its\n   * associated track level monitor.\n   *\n   * @param {MediaStreamTrack} mediaStreamTrack\n   * @return {Promise<void>} NOTE: A promise is used because it needs to shut\n   * down the associated track level monitor, which is an asynchronous call.\n   */\n  async removeMediaStreamTrack(mediaStreamTrack) {\n    return this.removeChild(mediaStreamTrack);\n  }\n\n  /**\n   * Removes all associated MediaStreamTracks and destructs their associated\n   * track level monitors.\n   *\n   * @return {Promise<void>}\n   */\n  async removeAllMediaStreamTracks() {\n    return this.destroyAllChildren();\n  }\n\n  /**\n   * Retrieves the mapped media stream tracks which are bound to this instance.\n   *\n   * @return {MediaStreamTrack[]}\n   */\n  getMediaStreamTracks() {\n    return this.getChildren().map(trackLevelMonitor =>\n      trackLevelMonitor.getMediaStreamTrack()\n    );\n  }\n\n  /**\n   * Retrieves whether or not all associated audio streams are silent.\n   *\n   * @return {boolean}\n   */\n  getIsSilent() {\n    return this.getChildren().every(child => child.getIsSilent());\n  }\n\n  /**\n   * Destructs all children and shuts down.\n   *\n   * TODO: Utilize destroyHandler?\n   * @return {Promise<void>}\n   */\n  async destroy() {\n    return super.destroy(async () => {\n      // Associated track level monitors should stop listening after destruct\n\n      await this.removeAllMediaStreamTracks();\n    });\n  }\n}\n\nmodule.exports = MultiAudioMediaStreamTrackLevelMonitor;\n\nmodule.exports.EVT_AUDIO_LEVEL_UPDATED = EVT_AUDIO_LEVEL_UPDATED;\nmodule.exports.EVT_AUDIO_SILENCE_STARTED = EVT_AUDIO_SILENCE_STARTED;\nmodule.exports.EVT_AUDIO_SILENCE_ENDED = EVT_AUDIO_SILENCE_ENDED;\nmodule.exports.EVT_DESTROYED = EVT_DESTROYED;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IEventListener, IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class EventSource<TEvent extends PlatformEvent> implements IEventSource<TEvent> {\r\n    private privEventListeners: IStringDictionary<(event: TEvent) => void> = {};\r\n    private privMetadata: IStringDictionary<string>;\r\n    private privIsDisposed: boolean = false;\r\n\r\n    constructor(metadata?: IStringDictionary<string>) {\r\n        this.privMetadata = metadata;\r\n    }\r\n\r\n    public onEvent = (event: TEvent): void => {\r\n        if (this.isDisposed()) {\r\n            throw (new ObjectDisposedError(\"EventSource\"));\r\n        }\r\n\r\n        if (this.metadata) {\r\n            for (const paramName in this.metadata) {\r\n                if (paramName) {\r\n                    if (event.metadata) {\r\n                        if (!event.metadata[paramName]) {\r\n                            event.metadata[paramName] = this.metadata[paramName];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for (const eventId in this.privEventListeners) {\r\n            if (eventId && this.privEventListeners[eventId]) {\r\n                this.privEventListeners[eventId](event);\r\n            }\r\n        }\r\n    }\r\n\r\n    public attach = (onEventCallback: (event: TEvent) => void): IDetachable => {\r\n        const id = createNoDashGuid();\r\n        this.privEventListeners[id] = onEventCallback;\r\n        return {\r\n            detach: () => {\r\n                delete this.privEventListeners[id];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public attachListener = (listener: IEventListener<TEvent>): IDetachable => {\r\n        return this.attach(listener.onEvent);\r\n    }\r\n\r\n    public isDisposed = (): boolean => {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public dispose = (): void => {\r\n        this.privEventListeners = null;\r\n        this.privIsDisposed = true;\r\n    }\r\n\r\n    public get metadata(): IStringDictionary<string> {\r\n        return this.privMetadata;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\n\r\nexport enum MessageType {\r\n    Text,\r\n    Binary,\r\n}\r\n\r\nexport class ConnectionMessage {\r\n\r\n    private privMessageType: MessageType;\r\n    private privHeaders: IStringDictionary<string>;\r\n    private privBody: any = null;\r\n    private privSize: number;\r\n\r\n    private privId: string;\r\n\r\n    public constructor(\r\n        messageType: MessageType,\r\n        body: any,\r\n        headers?: IStringDictionary<string>,\r\n        id?: string) {\r\n\r\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        this.privBody = body;\r\n        this.privHeaders = headers ? headers : {};\r\n        this.privId = id ? id : createNoDashGuid();\r\n        switch (this.messageType) {\r\n            case MessageType.Binary:\r\n                this.privSize = this.binaryBody !== null ? this.binaryBody.byteLength : 0;\r\n                break;\r\n            case MessageType.Text:\r\n                this.privSize = this.textBody.length;\r\n        }\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n\r\n    public get body(): any {\r\n        return this.privBody;\r\n    }\r\n\r\n    public get textBody(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privBody as string;\r\n    }\r\n\r\n    public get binaryBody(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privBody;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport * as http from \"http\";\r\nimport * as tls from \"tls\";\r\nimport * as parse from \"url-parse\";\r\nimport * as ocsp from \"../../external/ocsp/ocsp\";\r\nimport {\r\n    Events,\r\n    OCSPCacheEntryExpiredEvent,\r\n    OCSPCacheEntryNeedsRefreshEvent,\r\n    OCSPCacheFetchErrorEvent,\r\n    OCSPCacheHitEvent,\r\n    OCSPCacheMissEvent,\r\n    OCSPCacheUpdateCompleteEvent,\r\n    OCSPCacheUpdateNeededEvent,\r\n    OCSPDiskCacheHitEvent,\r\n    OCSPDiskCacheStoreEvent,\r\n    OCSPEvent,\r\n    OCSPMemoryCacheHitEvent,\r\n    OCSPMemoryCacheStoreEvent,\r\n    OCSPResponseRetrievedEvent,\r\n    OCSPStapleReceivedEvent,\r\n    OCSPVerificationFailedEvent,\r\n} from \"../common/Exports\";\r\nimport { IStringDictionary } from \"../common/IDictionary\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\n\r\nimport Agent from \"agent-base\";\r\n\r\n// @ts-ignore\r\nimport Cache from \"async-disk-cache\";\r\nimport HttpsProxyAgent from \"https-proxy-agent\";\r\nimport * as net from \"net\";\r\nimport { OCSPCacheUpdateErrorEvent } from \"../common/OCSPEvents\";\r\n\r\nexport class CertCheckAgent {\r\n\r\n    // Test hook to enable forcing expiration / refresh to happen.\r\n    public static testTimeOffset: number = 0;\r\n\r\n    // Test hook to disable stapling for cache testing.\r\n    public static forceDisableOCSPStapling: boolean = false;\r\n\r\n    // An in memory cache for recived responses.\r\n    private static privMemCache: IStringDictionary<Buffer> = {};\r\n\r\n    // The on disk cache.\r\n    private static privDiskCache: Cache;\r\n\r\n    private privProxyInfo: ProxyInfo;\r\n\r\n    constructor(proxyInfo?: ProxyInfo) {\r\n        if (!!proxyInfo) {\r\n            this.privProxyInfo = proxyInfo;\r\n        }\r\n\r\n        // Initialize this here to allow tests to set the env variable before the cache is constructed.\r\n        if (!CertCheckAgent.privDiskCache) {\r\n            CertCheckAgent.privDiskCache = new Cache(\"microsoft-cognitiveservices-speech-sdk-cache\", { supportBuffer: true, location: (typeof process !== \"undefined\" && !!process.env.SPEECH_OCSP_CACHE_ROOT) ? process.env.SPEECH_OCSP_CACHE_ROOT : undefined });\r\n        }\r\n    }\r\n\r\n    // Test hook to force the disk cache to be recreated.\r\n    public static forceReinitDiskCache(): void {\r\n        CertCheckAgent.privDiskCache = undefined;\r\n        CertCheckAgent.privMemCache = {};\r\n    }\r\n\r\n    public GetAgent(disableStapling?: boolean): http.Agent {\r\n        const agent: any = new Agent.Agent(this.CreateConnection);\r\n\r\n        if (this.privProxyInfo !== undefined &&\r\n            this.privProxyInfo.HostName !== undefined &&\r\n            this.privProxyInfo.Port > 0) {\r\n            const proxyName: string = \"privProxyInfo\";\r\n            agent[proxyName] = this.privProxyInfo;\r\n        }\r\n\r\n        return agent;\r\n    }\r\n\r\n    private static GetProxyAgent(proxyInfo: ProxyInfo): HttpsProxyAgent {\r\n        const httpProxyOptions: HttpsProxyAgent.HttpsProxyAgentOptions = {\r\n            host: proxyInfo.HostName,\r\n            port: proxyInfo.Port,\r\n        };\r\n\r\n        if (!!proxyInfo.UserName) {\r\n            httpProxyOptions.headers = {\r\n                \"Proxy-Authentication\": \"Basic \" + new Buffer(proxyInfo.UserName + \":\" + (proxyInfo.Password === undefined) ? \"\" : proxyInfo.Password).toString(\"base64\"),\r\n            };\r\n        } else {\r\n            httpProxyOptions.headers = {};\r\n        }\r\n\r\n        httpProxyOptions.headers.requestOCSP = \"true\";\r\n\r\n        const httpProxyAgent: HttpsProxyAgent = new HttpsProxyAgent(httpProxyOptions);\r\n        return httpProxyAgent;\r\n    }\r\n\r\n    private static async OCSPCheck(socketPromise: Promise<net.Socket>, proxyInfo: ProxyInfo): Promise<net.Socket> {\r\n        let ocspRequest: ocsp.Request;\r\n        let stapling: Buffer;\r\n        let resolved: boolean = false;\r\n\r\n        const socket: net.Socket = await socketPromise;\r\n        socket.cork();\r\n\r\n        const tlsSocket: tls.TLSSocket = socket as tls.TLSSocket;\r\n\r\n        return new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void) => {\r\n            socket.on(\"OCSPResponse\", (data: Buffer): void => {\r\n                if (!!data) {\r\n                    this.onEvent(new OCSPStapleReceivedEvent());\r\n                    stapling = data;\r\n                }\r\n            });\r\n\r\n            socket.on(\"error\", (error: Error) => {\r\n                if (!resolved) {\r\n                    resolved = true;\r\n                    socket.destroy();\r\n                    reject(error);\r\n                }\r\n            });\r\n\r\n            tlsSocket.on(\"secure\", async () => {\r\n                const peer: tls.DetailedPeerCertificate = tlsSocket.getPeerCertificate(true);\r\n                try {\r\n                    const issuer: tls.DetailedPeerCertificate = await this.GetIssuer(peer);\r\n\r\n                    // We always need a request to verify the response.\r\n                    ocspRequest = ocsp.request.generate(peer.raw, issuer.raw);\r\n\r\n                    // Do we have a result for this certificate in our memory cache?\r\n                    const sig: string = ocspRequest.id.toString(\"hex\");\r\n\r\n                    // Stapled response trumps cached response.\r\n                    if (!stapling) {\r\n                        const cacheEntry: Buffer = await CertCheckAgent.GetResponseFromCache(sig, ocspRequest, proxyInfo);\r\n                        stapling = cacheEntry;\r\n                    }\r\n\r\n                    await this.VerifyOCSPResponse(stapling, ocspRequest, proxyInfo);\r\n\r\n                    socket.uncork();\r\n                    resolved = true;\r\n                    resolve(socket);\r\n                } catch (e) {\r\n                    socket.destroy();\r\n                    resolved = true;\r\n                    reject(e);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private static GetIssuer(peer: tls.DetailedPeerCertificate): Promise<tls.DetailedPeerCertificate> {\r\n        if (peer.issuerCertificate) {\r\n            return Promise.resolve(peer.issuerCertificate);\r\n        }\r\n\r\n        return new Promise<tls.DetailedPeerCertificate>((resolve: (value: tls.DetailedPeerCertificate) => void, reject: (reason: string) => void) => {\r\n            const ocspAgent: ocsp.Agent = new ocsp.Agent({});\r\n            ocspAgent.fetchIssuer(peer, null, (error: string, value: tls.DetailedPeerCertificate): void => {\r\n                if (!!error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                resolve(value);\r\n            });\r\n        });\r\n    }\r\n\r\n    private static async GetResponseFromCache(signature: string, ocspRequest: ocsp.Request, proxyInfo: ProxyInfo): Promise<Buffer> {\r\n        let cachedResponse: Buffer = CertCheckAgent.privMemCache[signature];\r\n\r\n        if (!!cachedResponse) {\r\n            this.onEvent(new OCSPMemoryCacheHitEvent(signature));\r\n        }\r\n\r\n        // Do we have a result for this certificate on disk in %TMP%?\r\n        if (!cachedResponse) {\r\n            try {\r\n                const diskCacheResponse: any = await CertCheckAgent.privDiskCache.get(signature);\r\n                if (!!diskCacheResponse.isCached) {\r\n                    CertCheckAgent.onEvent(new OCSPDiskCacheHitEvent(signature));\r\n                    CertCheckAgent.StoreMemoryCacheEntry(signature, diskCacheResponse.value);\r\n                    cachedResponse = diskCacheResponse.value;\r\n                }\r\n            } catch (error) {\r\n                cachedResponse = null;\r\n            }\r\n        }\r\n\r\n        if (!cachedResponse) {\r\n            return cachedResponse;\r\n        }\r\n\r\n        try {\r\n            const cachedOcspResponse: ocsp.Response = ocsp.utils.parseResponse(cachedResponse);\r\n            const tbsData = cachedOcspResponse.value.tbsResponseData;\r\n            if (tbsData.responses.length < 1) {\r\n                this.onEvent(new OCSPCacheFetchErrorEvent(signature, \"Not enough data in cached response\"));\r\n                return;\r\n            }\r\n\r\n            const cachedStartTime: number = tbsData.responses[0].thisUpdate;\r\n            const cachedNextTime: number = tbsData.responses[0].nextUpdate;\r\n\r\n            if (cachedNextTime < (Date.now() + this.testTimeOffset - 60000)) {\r\n                // Cached entry has expired.\r\n                this.onEvent(new OCSPCacheEntryExpiredEvent(signature, cachedNextTime));\r\n                cachedResponse = null;\r\n            } else {\r\n                // If we're within one day of the next update, or 50% of the way through the validity period,\r\n                // background an update to the cache.\r\n\r\n                const minUpdate: number = Math.min(24 * 60 * 60 * 1000, (cachedNextTime - cachedStartTime) / 2);\r\n\r\n                if ((cachedNextTime - (Date.now() + this.testTimeOffset)) < minUpdate) {\r\n                    this.onEvent(new OCSPCacheEntryNeedsRefreshEvent(signature, cachedStartTime, cachedNextTime));\r\n                    this.UpdateCache(ocspRequest, proxyInfo).catch((error: string) => {\r\n                        // Well, not much we can do here.\r\n                        this.onEvent(new OCSPCacheUpdateErrorEvent(signature, error.toString()));\r\n                    });\r\n                } else {\r\n                    this.onEvent(new OCSPCacheHitEvent(signature, cachedStartTime, cachedNextTime));\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.onEvent(new OCSPCacheFetchErrorEvent(signature, error));\r\n            cachedResponse = null;\r\n        }\r\n        if (!cachedResponse) {\r\n            this.onEvent(new OCSPCacheMissEvent(signature));\r\n        }\r\n        return cachedResponse;\r\n    }\r\n\r\n    private static async VerifyOCSPResponse(cacheValue: Buffer, ocspRequest: ocsp.Request, proxyInfo: ProxyInfo): Promise<void> {\r\n        let ocspResponse: Buffer = cacheValue;\r\n        const sig: string = ocspRequest.certID.toString(\"hex\");\r\n\r\n        // Do we have a valid response?\r\n        if (!ocspResponse) {\r\n            ocspResponse = await CertCheckAgent.GetOCSPResponse(ocspRequest, proxyInfo);\r\n        }\r\n\r\n        return new Promise<void>((resolve: () => void, reject: (error: string | Error) => void) => {\r\n            ocsp.verify({ request: ocspRequest, response: ocspResponse }, (error: string, result: any): void => {\r\n                if (!!error) {\r\n                    CertCheckAgent.onEvent(new OCSPVerificationFailedEvent(ocspRequest.id.toString(\"hex\"), error));\r\n\r\n                    // Bad Cached Value? One more try without the cache.\r\n                    if (!!cacheValue) {\r\n                        this.VerifyOCSPResponse(null, ocspRequest, proxyInfo).then(() => {\r\n                            resolve();\r\n                        }, (error: Error) => {\r\n                            reject(error);\r\n                        });\r\n                    } else {\r\n                        reject(error);\r\n                    }\r\n                } else {\r\n                    if (!cacheValue) {\r\n                        CertCheckAgent.StoreCacheEntry(ocspRequest.id.toString(\"hex\"), ocspResponse);\r\n                    }\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private static async UpdateCache(req: ocsp.Request, proxyInfo: ProxyInfo): Promise<void> {\r\n        const signature: string = req.id.toString(\"hex\");\r\n        this.onEvent(new OCSPCacheUpdateNeededEvent(signature));\r\n\r\n        const rawResponse: Buffer = await this.GetOCSPResponse(req, proxyInfo);\r\n        this.StoreCacheEntry(signature, rawResponse);\r\n        this.onEvent(new OCSPCacheUpdateCompleteEvent(req.id.toString(\"hex\")));\r\n\r\n    }\r\n\r\n    private static StoreCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        this.StoreMemoryCacheEntry(sig, rawResponse);\r\n        this.StoreDiskCacheEntry(sig, rawResponse);\r\n    }\r\n\r\n    private static StoreMemoryCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        this.privMemCache[sig] = rawResponse;\r\n        this.onEvent(new OCSPMemoryCacheStoreEvent(sig));\r\n    }\r\n\r\n    private static StoreDiskCacheEntry(sig: string, rawResponse: Buffer): void {\r\n        this.privDiskCache.set(sig, rawResponse).then(() => {\r\n            this.onEvent(new OCSPDiskCacheStoreEvent(sig));\r\n        });\r\n    }\r\n\r\n    private static GetOCSPResponse(req: ocsp.Request, proxyInfo: ProxyInfo): Promise<Buffer> {\r\n\r\n        const ocspMethod: string = \"1.3.6.1.5.5.7.48.1\";\r\n        let options: http.RequestOptions = {};\r\n\r\n        if (!!proxyInfo) {\r\n            const agent: HttpsProxyAgent = CertCheckAgent.GetProxyAgent(proxyInfo);\r\n            options.agent = agent;\r\n        }\r\n\r\n        return new Promise<Buffer>((resolve: (value: Buffer) => void, reject: (error: string | Error) => void) => {\r\n            ocsp.utils.getAuthorityInfo(req.cert, ocspMethod, (error: string, uri: string): void => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n\r\n                const parsedUri: {[k: string]: any} = parse.default(uri);\r\n                parsedUri.path = parsedUri.pathname;\r\n                options = { ...options, ...parsedUri };\r\n\r\n                ocsp.utils.getResponse(options, req.data, (error: string, raw: Buffer): void => {\r\n                    if (error) {\r\n                        reject(error);\r\n                        return;\r\n                    }\r\n\r\n                    this.onEvent(new OCSPResponseRetrievedEvent(req.certID.toString(\"hex\")));\r\n                    resolve(raw);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private static onEvent = (event: OCSPEvent): void => {\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private CreateConnection(request: Agent.ClientRequest, options: Agent.RequestOptions): Promise<net.Socket> {\r\n        const enableOCSP: boolean = (typeof process !== \"undefined\" && process.env.NODE_TLS_REJECT_UNAUTHORIZED !== \"0\" && process.env.SPEECH_CONDUCT_OCSP_CHECK !== \"0\") && options.secureEndpoint;\r\n        let socketPromise: Promise<net.Socket>;\r\n\r\n        options = {\r\n            ...options,\r\n            ...{\r\n                requestOCSP: !CertCheckAgent.forceDisableOCSPStapling,\r\n                servername: options.host\r\n            }\r\n        };\r\n\r\n        if (!!this.privProxyInfo) {\r\n            const httpProxyAgent: HttpsProxyAgent = CertCheckAgent.GetProxyAgent(this.privProxyInfo);\r\n            const baseAgent: Agent.Agent = httpProxyAgent as unknown as Agent.Agent;\r\n\r\n            socketPromise = new Promise<net.Socket>((resolve: (value: net.Socket) => void, reject: (error: string | Error) => void) => {\r\n                baseAgent.callback(request, options, (error: Error, socket: net.Socket) => {\r\n                    if (!!error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve(socket);\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n            if (!!options.secureEndpoint) {\r\n                socketPromise = Promise.resolve(tls.connect(options));\r\n            } else {\r\n                socketPromise = Promise.resolve(net.connect(options));\r\n            }\r\n        }\r\n\r\n        if (!!enableOCSP) {\r\n            return CertCheckAgent.OCSPCheck(socketPromise, this.privProxyInfo);\r\n        } else {\r\n            return socketPromise;\r\n        }\r\n    }\r\n}\r\n","'use strict';\n\nvar required = require('requires-port')\n  , qs = require('querystringify')\n  , controlOrWhitespace = /^[\\x00-\\x20\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]+/\n  , CRHTLF = /[\\n\\r\\t]/g\n  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\\/\\//\n  , port = /:\\d+$/\n  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\\/\\/)?([\\\\/]+)?([\\S\\s]*)/i\n  , windowsDriveLetter = /^[a-zA-Z]:/;\n\n/**\n * Remove control characters and whitespace from the beginning of a string.\n *\n * @param {Object|String} str String to trim.\n * @returns {String} A new string representing `str` stripped of control\n *     characters and whitespace from its beginning.\n * @public\n */\nfunction trimLeft(str) {\n  return (str ? str : '').toString().replace(controlOrWhitespace, '');\n}\n\n/**\n * These are the parse rules for the URL parser, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar rules = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  function sanitize(address, url) {     // Sanitize what is left of the address\n    return isSpecial(url.protocol) ? address.replace(/\\\\/g, '/') : address;\n  },\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/:(\\d*)$/, 'port', undefined, 1],    // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 };\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object|String} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @public\n */\nfunction lolcation(loc) {\n  var globalVar;\n\n  if (typeof window !== 'undefined') globalVar = window;\n  else if (typeof global !== 'undefined') globalVar = global;\n  else if (typeof self !== 'undefined') globalVar = self;\n  else globalVar = {};\n\n  var location = globalVar.location || {};\n  loc = loc || location;\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new Url(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new Url(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) {\n    for (key in loc) {\n      if (key in ignore) continue;\n      finaldestination[key] = loc[key];\n    }\n\n    if (finaldestination.slashes === undefined) {\n      finaldestination.slashes = slashes.test(loc.href);\n    }\n  }\n\n  return finaldestination;\n}\n\n/**\n * Check whether a protocol scheme is special.\n *\n * @param {String} The protocol scheme of the URL\n * @return {Boolean} `true` if the protocol scheme is special, else `false`\n * @private\n */\nfunction isSpecial(scheme) {\n  return (\n    scheme === 'file:' ||\n    scheme === 'ftp:' ||\n    scheme === 'http:' ||\n    scheme === 'https:' ||\n    scheme === 'ws:' ||\n    scheme === 'wss:'\n  );\n}\n\n/**\n * @typedef ProtocolExtract\n * @type Object\n * @property {String} protocol Protocol matched in the URL, in lowercase.\n * @property {Boolean} slashes `true` if protocol is followed by \"//\", else `false`.\n * @property {String} rest Rest of the URL that is not part of the protocol.\n */\n\n/**\n * Extract protocol information from a URL with/without double slash (\"//\").\n *\n * @param {String} address URL we want to extract from.\n * @param {Object} location\n * @return {ProtocolExtract} Extracted information.\n * @private\n */\nfunction extractProtocol(address, location) {\n  address = trimLeft(address);\n  address = address.replace(CRHTLF, '');\n  location = location || {};\n\n  var match = protocolre.exec(address);\n  var protocol = match[1] ? match[1].toLowerCase() : '';\n  var forwardSlashes = !!match[2];\n  var otherSlashes = !!match[3];\n  var slashesCount = 0;\n  var rest;\n\n  if (forwardSlashes) {\n    if (otherSlashes) {\n      rest = match[2] + match[3] + match[4];\n      slashesCount = match[2].length + match[3].length;\n    } else {\n      rest = match[2] + match[4];\n      slashesCount = match[2].length;\n    }\n  } else {\n    if (otherSlashes) {\n      rest = match[3] + match[4];\n      slashesCount = match[3].length;\n    } else {\n      rest = match[4]\n    }\n  }\n\n  if (protocol === 'file:') {\n    if (slashesCount >= 2) {\n      rest = rest.slice(2);\n    }\n  } else if (isSpecial(protocol)) {\n    rest = match[4];\n  } else if (protocol) {\n    if (forwardSlashes) {\n      rest = rest.slice(2);\n    }\n  } else if (slashesCount >= 2 && isSpecial(location.protocol)) {\n    rest = match[4];\n  }\n\n  return {\n    protocol: protocol,\n    slashes: forwardSlashes || isSpecial(protocol),\n    slashesCount: slashesCount,\n    rest: rest\n  };\n}\n\n/**\n * Resolve a relative URL pathname against a base URL pathname.\n *\n * @param {String} relative Pathname of the relative URL.\n * @param {String} base Pathname of the base URL.\n * @return {String} Resolved pathname.\n * @private\n */\nfunction resolve(relative, base) {\n  if (relative === '') return base;\n\n  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n    , i = path.length\n    , last = path[i - 1]\n    , unshift = false\n    , up = 0;\n\n  while (i--) {\n    if (path[i] === '.') {\n      path.splice(i, 1);\n    } else if (path[i] === '..') {\n      path.splice(i, 1);\n      up++;\n    } else if (up) {\n      if (i === 0) unshift = true;\n      path.splice(i, 1);\n      up--;\n    }\n  }\n\n  if (unshift) path.unshift('');\n  if (last === '.' || last === '..') path.push('');\n\n  return path.join('/');\n}\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my OCD.\n *\n * It is worth noting that we should not use `URL` as class name to prevent\n * clashes with the global URL instance that got introduced in browsers.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Object|String} [location] Location defaults for relative paths.\n * @param {Boolean|Function} [parser] Parser for the query string.\n * @private\n */\nfunction Url(address, location, parser) {\n  address = trimLeft(address);\n  address = address.replace(CRHTLF, '');\n\n  if (!(this instanceof Url)) {\n    return new Url(address, location, parser);\n  }\n\n  var relative, extracted, parse, instruction, index, key\n    , instructions = rules.slice()\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) parser = qs.parse;\n\n  location = lolcation(location);\n\n  //\n  // Extract protocol information before running the instructions.\n  //\n  extracted = extractProtocol(address || '', location);\n  relative = !extracted.protocol && !extracted.slashes;\n  url.slashes = extracted.slashes || relative && location.slashes;\n  url.protocol = extracted.protocol || location.protocol || '';\n  address = extracted.rest;\n\n  //\n  // When the authority component is absent the URL starts with a path\n  // component.\n  //\n  if (\n    extracted.protocol === 'file:' && (\n      extracted.slashesCount !== 2 || windowsDriveLetter.test(address)) ||\n    (!extracted.slashes &&\n      (extracted.protocol ||\n        extracted.slashesCount < 2 ||\n        !isSpecial(url.protocol)))\n  ) {\n    instructions[3] = [/(.*)/, 'pathname'];\n  }\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n\n    if (typeof instruction === 'function') {\n      address = instruction(address, url);\n      continue;\n    }\n\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      index = parse === '@'\n        ? address.lastIndexOf(parse)\n        : address.indexOf(parse);\n\n      if (~index) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if ((index = parse.exec(address))) {\n      url[key] = index[1];\n      address = address.slice(0, index.index);\n    }\n\n    url[key] = url[key] || (\n      relative && instruction[3] ? location[key] || '' : ''\n    );\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) url[key] = url[key].toLowerCase();\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // If the URL is relative, resolve the pathname against the base URL.\n  //\n  if (\n      relative\n    && location.slashes\n    && url.pathname.charAt(0) !== '/'\n    && (url.pathname !== '' || location.pathname !== '')\n  ) {\n    url.pathname = resolve(url.pathname, location.pathname);\n  }\n\n  //\n  // Default to a / for pathname if none exists. This normalizes the URL\n  // to always have a /\n  //\n  if (url.pathname.charAt(0) !== '/' && isSpecial(url.protocol)) {\n    url.pathname = '/' + url.pathname;\n  }\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n\n  if (url.auth) {\n    index = url.auth.indexOf(':');\n\n    if (~index) {\n      url.username = url.auth.slice(0, index);\n      url.username = encodeURIComponent(decodeURIComponent(url.username));\n\n      url.password = url.auth.slice(index + 1);\n      url.password = encodeURIComponent(decodeURIComponent(url.password))\n    } else {\n      url.username = encodeURIComponent(decodeURIComponent(url.auth));\n    }\n\n    url.auth = url.password ? url.username +':'+ url.password : url.username;\n  }\n\n  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} part          Property we need to adjust.\n * @param {Mixed} value          The newly assigned value.\n * @param {Boolean|Function} fn  When setting the query, it will be the function\n *                               used to parse the query.\n *                               When setting the protocol, double slash will be\n *                               removed from the final url if it is true.\n * @returns {URL} URL instance for chaining.\n * @public\n */\nfunction set(part, value, fn) {\n  var url = this;\n\n  switch (part) {\n    case 'query':\n      if ('string' === typeof value && value.length) {\n        value = (fn || qs.parse)(value);\n      }\n\n      url[part] = value;\n      break;\n\n    case 'port':\n      url[part] = value;\n\n      if (!required(value, url.protocol)) {\n        url.host = url.hostname;\n        url[part] = '';\n      } else if (value) {\n        url.host = url.hostname +':'+ value;\n      }\n\n      break;\n\n    case 'hostname':\n      url[part] = value;\n\n      if (url.port) value += ':'+ url.port;\n      url.host = value;\n      break;\n\n    case 'host':\n      url[part] = value;\n\n      if (port.test(value)) {\n        value = value.split(':');\n        url.port = value.pop();\n        url.hostname = value.join(':');\n      } else {\n        url.hostname = value;\n        url.port = '';\n      }\n\n      break;\n\n    case 'protocol':\n      url.protocol = value.toLowerCase();\n      url.slashes = !fn;\n      break;\n\n    case 'pathname':\n    case 'hash':\n      if (value) {\n        var char = part === 'pathname' ? '/' : '#';\n        url[part] = value.charAt(0) !== char ? char + value : value;\n      } else {\n        url[part] = value;\n      }\n      break;\n\n    case 'username':\n    case 'password':\n      url[part] = encodeURIComponent(value);\n      break;\n\n    case 'auth':\n      var index = value.indexOf(':');\n\n      if (~index) {\n        url.username = value.slice(0, index);\n        url.username = encodeURIComponent(decodeURIComponent(url.username));\n\n        url.password = value.slice(index + 1);\n        url.password = encodeURIComponent(decodeURIComponent(url.password));\n      } else {\n        url.username = encodeURIComponent(decodeURIComponent(value));\n      }\n  }\n\n  for (var i = 0; i < rules.length; i++) {\n    var ins = rules[i];\n\n    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();\n  }\n\n  url.auth = url.password ? url.username +':'+ url.password : url.username;\n\n  url.origin = url.protocol !== 'file:' && isSpecial(url.protocol) && url.host\n    ? url.protocol +'//'+ url.host\n    : 'null';\n\n  url.href = url.toString();\n\n  return url;\n}\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String} Compiled version of the URL.\n * @public\n */\nfunction toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , host = url.host\n    , protocol = url.protocol;\n\n  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';\n\n  var result =\n    protocol +\n    ((url.protocol && url.slashes) || isSpecial(url.protocol) ? '//' : '');\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  } else if (url.password) {\n    result += ':'+ url.password;\n    result += '@';\n  } else if (\n    url.protocol !== 'file:' &&\n    isSpecial(url.protocol) &&\n    !host &&\n    url.pathname !== '/'\n  ) {\n    //\n    // Add back the empty userinfo, otherwise the original invalid URL\n    // might be transformed into a valid one with `url.pathname` as host.\n    //\n    result += '@';\n  }\n\n  //\n  // Trailing colon is removed from `url.host` when it is parsed. If it still\n  // ends with a colon, then add back the trailing colon that was removed. This\n  // prevents an invalid URL from being transformed into a valid one.\n  //\n  if (host[host.length - 1] === ':' || (port.test(url.hostname) && !url.port)) {\n    host += ':';\n  }\n\n  result += host + url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n}\n\nUrl.prototype = { set: set, toString: toString };\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others or testing.\n//\nUrl.extractProtocol = extractProtocol;\nUrl.location = lolcation;\nUrl.trimLeft = trimLeft;\nUrl.qs = qs;\n\nmodule.exports = Url;\n","'use strict';\n\n/**\n * Check if we're required to add a port number.\n *\n * @see https://url.spec.whatwg.org/#default-port\n * @param {Number|String} port Port number we need to check\n * @param {String} protocol Protocol we need to check against.\n * @returns {Boolean} Is it a default port for the given protocol\n * @api private\n */\nmodule.exports = function required(port, protocol) {\n  protocol = protocol.split(':')[0];\n  port = +port;\n\n  if (!port) return false;\n\n  switch (protocol) {\n    case 'http':\n    case 'ws':\n    return port !== 80;\n\n    case 'https':\n    case 'wss':\n    return port !== 443;\n\n    case 'ftp':\n    return port !== 21;\n\n    case 'gopher':\n    return port !== 70;\n\n    case 'file':\n    return false;\n  }\n\n  return port !== 0;\n};\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , undef;\n\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String|Null} The decoded string.\n * @api private\n */\nfunction decode(input) {\n  try {\n    return decodeURIComponent(input.replace(/\\+/g, ' '));\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Attempts to encode a given input.\n *\n * @param {String} input The string that needs to be encoded.\n * @returns {String|Null} The encoded string.\n * @api private\n */\nfunction encode(input) {\n  try {\n    return encodeURIComponent(input);\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\nfunction querystring(query) {\n  var parser = /([^=?#&]+)=?([^&]*)/g\n    , result = {}\n    , part;\n\n  while (part = parser.exec(query)) {\n    var key = decode(part[1])\n      , value = decode(part[2]);\n\n    //\n    // Prevent overriding of existing properties. This ensures that build-in\n    // methods like `toString` or __proto__ are not overriden by malicious\n    // querystrings.\n    //\n    // In the case if failed decoding, we want to omit the key/value pairs\n    // from the result.\n    //\n    if (key === null || value === null || key in result) continue;\n    result[key] = value;\n  }\n\n  return result;\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n\n  var pairs = []\n    , value\n    , key;\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) prefix = '?';\n\n  for (key in obj) {\n    if (has.call(obj, key)) {\n      value = obj[key];\n\n      //\n      // Edge cases where we actually want to encode the value to an empty\n      // string instead of the stringified value.\n      //\n      if (!value && (value === null || value === undef || isNaN(value))) {\n        value = '';\n      }\n\n      key = encode(key);\n      value = encode(value);\n\n      //\n      // If we failed to encode the strings, we should bail out as we don't\n      // want to add invalid strings to the query.\n      //\n      if (key === null || value === null) continue;\n      pairs.push(key +'='+ value);\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n}\n\n//\n// Expose the module.\n//\nexports.stringify = querystringify;\nexports.parse = querystring;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class OCSPEvent extends PlatformEvent {\r\n    private privSignature: string;\r\n\r\n    constructor(eventName: string, eventType: EventType, signature: string) {\r\n        super(eventName, eventType);\r\n\r\n        this.privSignature = signature;\r\n    }\r\n}\r\n\r\nexport class OCSPMemoryCacheHitEvent extends OCSPEvent {\r\n    constructor(signature: string) {\r\n        super(\"OCSPMemoryCacheHitEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheMissEvent extends OCSPEvent {\r\n    constructor(signature: string) {\r\n        super(\"OCSPCacheMissEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPDiskCacheHitEvent extends OCSPEvent {\r\n    constructor(signature: string) {\r\n        super(\"OCSPDiskCacheHitEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateNeededEvent extends OCSPEvent {\r\n    constructor(signature: string) {\r\n        super(\"OCSPCacheUpdateNeededEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPMemoryCacheStoreEvent extends OCSPEvent {\r\n    constructor(signature: string) {\r\n        super(\"OCSPMemoryCacheStoreEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPDiskCacheStoreEvent extends OCSPEvent {\r\n    constructor(signature: string) {\r\n        super(\"OCSPDiskCacheStoreEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateCompleteEvent extends OCSPEvent {\r\n    constructor(signature: string) {\r\n        super(\"OCSPCacheUpdateCompleteEvent\", EventType.Debug, signature);\r\n    }\r\n}\r\n\r\nexport class OCSPStapleReceivedEvent extends OCSPEvent {\r\n    constructor() {\r\n        super(\"OCSPStapleReceivedEvent\", EventType.Debug, \"\");\r\n    }\r\n}\r\n\r\nexport class OCSPWSUpgradeStartedEvent extends OCSPEvent {\r\n    constructor(serialNumber: string) {\r\n        super(\"OCSPWSUpgradeStartedEvent\", EventType.Debug, serialNumber);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheEntryExpiredEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n\r\n    constructor(serialNumber: string, expireTime: number) {\r\n        super(\"OCSPCacheEntryExpiredEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheEntryNeedsRefreshEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n    private privStartTime: number;\r\n\r\n    constructor(serialNumber: string, startTime: number, expireTime: number) {\r\n        super(\"OCSPCacheEntryNeedsRefreshEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n        this.privStartTime = startTime;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheHitEvent extends OCSPEvent {\r\n    private privExpireTime: number;\r\n    private privStartTime: number;\r\n    private privExpireTimeString: string;\r\n    private privStartTimeString: string;\r\n\r\n    constructor(serialNumber: string, startTime: number, expireTime: number) {\r\n        super(\"OCSPCacheHitEvent\", EventType.Debug, serialNumber);\r\n        this.privExpireTime = expireTime;\r\n        this.privExpireTimeString = new Date(expireTime).toLocaleDateString();\r\n        this.privStartTime = startTime;\r\n        this.privStartTimeString = new Date(startTime).toLocaleTimeString();\r\n    }\r\n}\r\n\r\nexport class OCSPVerificationFailedEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPVerificationFailedEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n\r\nexport class OCSPCacheFetchErrorEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPCacheFetchErrorEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n\r\nexport class OCSPResponseRetrievedEvent extends OCSPEvent {\r\n    constructor(serialNumber: string) {\r\n        super(\"OCSPResponseRetrievedEvent\", EventType.Debug, serialNumber);\r\n    }\r\n}\r\n\r\nexport class OCSPCacheUpdateErrorEvent extends OCSPEvent {\r\n    private privError: string;\r\n\r\n    constructor(serialNumber: string, error: string) {\r\n        super(\"OCSPCacheUpdateErrorEvent\", EventType.Debug, serialNumber);\r\n        this.privError = error;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IErrorMessages } from \"../common/Exports\";\r\n/**\r\n * HTTP request helper\r\n */\r\nexport interface IRequestOptions {\r\n    headers?: {[key: string]: string};\r\n    ignoreCache?: boolean;\r\n    timeout?: number;\r\n}\r\n\r\nexport interface IRestParams {\r\n    apiVersion: string;\r\n    authorization: string;\r\n    clientAppId: string;\r\n    contentTypeKey: string;\r\n    correlationId: string;\r\n    languageCode: string;\r\n    nickname: string;\r\n    profanity: string;\r\n    requestId: string;\r\n    roomId: string;\r\n    sessionToken: string;\r\n    subscriptionKey: string;\r\n    subscriptionRegion: string;\r\n    token: string;\r\n}\r\n\r\nexport class RestConfigBase {\r\n\r\n    public static get requestOptions(): IRequestOptions {\r\n        return RestConfigBase.privDefaultRequestOptions;\r\n    }\r\n\r\n    public static get configParams(): IRestParams {\r\n        return RestConfigBase.privDefaultParams;\r\n    }\r\n\r\n    public static get restErrors(): IErrorMessages {\r\n        return RestConfigBase.privRestErrors;\r\n    }\r\n\r\n    private static readonly privDefaultRequestOptions: IRequestOptions = {\r\n        headers: {\r\n            Accept: \"application/json\",\r\n        },\r\n        ignoreCache: false,\r\n        timeout: 10000,\r\n    };\r\n\r\n    private static readonly privRestErrors: IErrorMessages = {\r\n        authInvalidSubscriptionKey: \"You must specify either an authentication token to use, or a Cognitive Speech subscription key.\",\r\n        authInvalidSubscriptionRegion: \"You must specify the Cognitive Speech region to use.\",\r\n        invalidArgs: \"Required input not found: {arg}.\",\r\n        invalidCreateJoinConversationResponse: \"Creating/Joining conversation failed with HTTP {status}.\",\r\n        invalidParticipantRequest: \"The requested participant was not found.\",\r\n        permissionDeniedConnect: \"Required credentials not found.\",\r\n        permissionDeniedConversation: \"Invalid operation: only the host can {command} the conversation.\",\r\n        permissionDeniedParticipant: \"Invalid operation: only the host can {command} a participant.\",\r\n        permissionDeniedSend: \"Invalid operation: the conversation is not in a connected state.\",\r\n        permissionDeniedStart: \"Invalid operation: there is already an active conversation.\",\r\n    };\r\n\r\n    private static readonly privDefaultParams: IRestParams = {\r\n        apiVersion: \"api-version\",\r\n        authorization: \"Authorization\",\r\n        clientAppId: \"X-ClientAppId\",\r\n        contentTypeKey: \"Content-Type\",\r\n        correlationId: \"X-CorrelationId\",\r\n        languageCode: \"language\",\r\n        nickname: \"nickname\",\r\n        profanity: \"profanity\",\r\n        requestId: \"X-RequestId\",\r\n        roomId: \"roomid\",\r\n        sessionToken: \"token\",\r\n        subscriptionKey: \"Ocp-Apim-Subscription-Key\",\r\n        subscriptionRegion: \"Ocp-Apim-Subscription-Region\",\r\n        token: \"X-CapitoToken\",\r\n    };\r\n\r\n}\r\n","'use strict'\n/* global fetch, btoa, Headers */\nconst core = require('./core')\n\nclass StatusError extends Error {\n  constructor (res, ...params) {\n    super(...params)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, StatusError)\n    }\n\n    this.name = 'StatusError'\n    this.message = res.statusMessage\n    this.statusCode = res.status\n    this.res = res\n    this.json = res.json.bind(res)\n    this.text = res.text.bind(res)\n    this.arrayBuffer = res.arrayBuffer.bind(res)\n    let buffer\n    const get = () => {\n      if (!buffer) buffer = this.arrayBuffer()\n      return buffer\n    }\n    Object.defineProperty(this, 'responseBody', { get })\n    // match Node.js headers object\n    this.headers = {}\n    for (const [key, value] of res.headers.entries()) {\n      this.headers[key.toLowerCase()] = value\n    }\n  }\n}\n\nconst mkrequest = (statusCodes, method, encoding, headers, baseurl) => async (_url, body, _headers = {}) => {\n  _url = baseurl + (_url || '')\n  let parsed = new URL(_url)\n\n  if (!headers) headers = {}\n  if (parsed.username) {\n    headers.Authorization = 'Basic ' + btoa(parsed.username + ':' + parsed.password)\n    parsed = new URL(parsed.protocol + '//' + parsed.host + parsed.pathname + parsed.search)\n  }\n  if (parsed.protocol !== 'https:' && parsed.protocol !== 'http:') {\n    throw new Error(`Unknown protocol, ${parsed.protocol}`)\n  }\n\n  if (body) {\n    if (body instanceof ArrayBuffer ||\n      ArrayBuffer.isView(body) ||\n      typeof body === 'string'\n    ) {\n      // noop\n    } else if (typeof body === 'object') {\n      body = JSON.stringify(body)\n      headers['Content-Type'] = 'application/json'\n    } else {\n      throw new Error('Unknown body type.')\n    }\n  }\n\n  _headers = new Headers({ ...(headers || {}), ..._headers })\n\n  const resp = await fetch(parsed, { method, headers: _headers, body })\n  resp.statusCode = resp.status\n\n  if (!statusCodes.has(resp.status)) {\n    throw new StatusError(resp)\n  }\n\n  if (encoding === 'json') return resp.json()\n  else if (encoding === 'buffer') return resp.arrayBuffer()\n  else if (encoding === 'string') return resp.text()\n  else return resp\n}\n\nmodule.exports = core(mkrequest)\n","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nvar setPrototypeOf = require(\"./setPrototypeOf\");\n\nvar isNativeFunction = require(\"./isNativeFunction\");\n\nvar construct = require(\"./construct\");\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nmodule.exports = _wrapNativeSuper;","function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nmodule.exports = _isNativeFunction;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nvar isNativeReflectConstruct = require(\"./isNativeReflectConstruct\");\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct;","'use strict'\nconst encodings = new Set(['json', 'buffer', 'string'])\n\nmodule.exports = mkrequest => (...args) => {\n  const statusCodes = new Set()\n  let method\n  let encoding\n  let headers\n  let baseurl = ''\n\n  args.forEach(arg => {\n    if (typeof arg === 'string') {\n      if (arg.toUpperCase() === arg) {\n        if (method) {\n          const msg = `Can't set method to ${arg}, already set to ${method}.`\n          throw new Error(msg)\n        } else {\n          method = arg\n        }\n      } else if (arg.startsWith('http:') || arg.startsWith('https:')) {\n        baseurl = arg\n      } else {\n        if (encodings.has(arg)) {\n          encoding = arg\n        } else {\n          throw new Error(`Unknown encoding, ${arg}`)\n        }\n      }\n    } else if (typeof arg === 'number') {\n      statusCodes.add(arg)\n    } else if (typeof arg === 'object') {\n      if (Array.isArray(arg) || arg instanceof Set) {\n        arg.forEach(code => statusCodes.add(code))\n      } else {\n        if (headers) {\n          throw new Error('Cannot set headers twice.')\n        }\n        headers = arg\n      }\n    } else {\n      throw new Error(`Unknown type: ${typeof arg}`)\n    }\n  })\n\n  if (!method) method = 'GET'\n  if (statusCodes.size === 0) {\n    statusCodes.add(200)\n  }\n\n  return mkrequest(statusCodes, method, encoding, headers, baseurl)\n}\n","export const isDate = d => d instanceof Date;\nexport const isEmpty = o => Object.keys(o).length === 0;\nexport const isObject = o => o != null && typeof o === 'object';\nexport const hasOwnProperty = (o, ...args) => Object.prototype.hasOwnProperty.call(o, ...args)\nexport const isEmptyObject = (o) => isObject(o) && isEmpty(o);\n","import { isDate, isEmptyObject, isObject, hasOwnProperty } from './utils.js';\n\nconst diff = (lhs, rhs) => {\n  if (lhs === rhs) return {}; // equal return no diff\n\n  if (!isObject(lhs) || !isObject(rhs)) return rhs; // return updated rhs\n\n  const l = lhs;\n  const r = rhs;\n\n  const deletedValues = Object.keys(l).reduce((acc, key) => {\n    if (!hasOwnProperty(r, key)) {\n      acc[key] = undefined;\n      \n    }\n\n    return acc;\n  }, {});\n\n  if (isDate(l) || isDate(r)) {\n    if (l.valueOf() == r.valueOf()) return {};\n    return r;\n  }\n\n  return Object.keys(r).reduce((acc, key) => {\n    if (!hasOwnProperty(l, key)){\n      acc[key] = r[key]; // return added r key\n      return acc;\n    } \n\n    const difference = diff(l[key], r[key]);\n\n    // If the difference is empty, and the lhs is an empty object or the rhs is not an empty object\n    if (isEmptyObject(difference) && !isDate(difference) && (isEmptyObject(l[key]) || !isEmptyObject(r[key])))\n      return acc; // return no diff\n\n    acc[key] = difference // return updated key\n    return acc; // return updated key\n  }, deletedValues);\n};\n\nexport default diff;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport { ConsoleLoggingListener } from \"./src/common.browser/Exports\";\r\nimport { Events } from \"./src/common/Exports\";\r\n\r\n// Common.Storage.SetLocalStorage(new Common.Browser.LocalStorage());\r\n// Common.Storage.SetSessionStorage(new Common.Browser.SessionStorage());\r\nEvents.instance.attachListener(new ConsoleLoggingListener());\r\n\r\n// Speech SDK API\r\nexport * from \"./src/sdk/Exports\";\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { EventType, IEventListener, PlatformEvent } from \"../common/Exports\";\r\n\r\nexport class ConsoleLoggingListener implements IEventListener<PlatformEvent> {\r\n    private privLogLevelFilter: EventType;\r\n\r\n    public constructor(logLevelFilter: EventType = EventType.Warning) {\r\n        this.privLogLevelFilter = logLevelFilter;\r\n    }\r\n\r\n    public onEvent = (event: PlatformEvent): void => {\r\n        if (event.eventType >= this.privLogLevelFilter) {\r\n            const log = this.toString(event);\r\n\r\n            switch (event.eventType) {\r\n                case EventType.Debug:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.debug(log);\r\n                    break;\r\n                case EventType.Info:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.info(log);\r\n                    break;\r\n                case EventType.Warning:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.warn(log);\r\n                    break;\r\n                case EventType.Error:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.error(log);\r\n                    break;\r\n                default:\r\n                    // tslint:disable-next-line:no-console\r\n                    console.log(log);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private toString = (event: any): string => {\r\n        const logFragments = [\r\n            `${event.EventTime}`,\r\n            `${event.Name}`,\r\n        ];\r\n\r\n        for (const prop in event) {\r\n            if (prop && event.hasOwnProperty(prop) &&\r\n                prop !== \"eventTime\" && prop !== \"eventType\" &&\r\n                prop !== \"eventId\" && prop !== \"name\" &&\r\n                prop !== \"constructor\") {\r\n                const value = event[prop];\r\n                let valueToLog = \"<NULL>\";\r\n                if (value !== undefined && value !== null) {\r\n                    if (typeof (value) === \"number\" || typeof (value) === \"string\") {\r\n                        valueToLog = value.toString();\r\n                    } else {\r\n                        valueToLog = JSON.stringify(value);\r\n                    }\r\n                }\r\n\r\n                logFragments.push(`${prop}: ${valueToLog}`);\r\n            }\r\n\r\n        }\r\n\r\n        return logFragments.join(\" | \");\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError, ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IDisposable } from \"./IDisposable\";\r\nimport { List } from \"./List\";\r\nimport {\r\n    Deferred,\r\n} from \"./Promise\";\r\nexport interface IQueue<TItem> extends IDisposable {\r\n    enqueue(item: TItem): void;\r\n    enqueueFromPromise(promise: Promise<TItem>): void;\r\n    dequeue(): Promise<TItem>;\r\n    peek(): Promise<TItem>;\r\n    length(): number;\r\n}\r\n\r\nenum SubscriberType {\r\n    Dequeue,\r\n    Peek,\r\n}\r\n\r\nexport class Queue<TItem> implements IQueue<TItem> {\r\n    private privPromiseStore: List<Promise<TItem>> = new List<Promise<TItem>>();\r\n    private privList: List<TItem>;\r\n    private privDetachables: IDetachable[];\r\n    private privSubscribers: List<{ type: SubscriberType, deferral: Deferred<TItem> }>;\r\n    private privIsDrainInProgress: boolean = false;\r\n    private privIsDisposing: boolean = false;\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: List<TItem>) {\r\n        this.privList = list ? list : new List<TItem>();\r\n        this.privDetachables = [];\r\n        this.privSubscribers = new List<{ type: SubscriberType, deferral: Deferred<TItem> }>();\r\n        this.privDetachables.push(this.privList.onAdded(this.drain));\r\n    }\r\n\r\n    public enqueue = (item: TItem): void => {\r\n        this.throwIfDispose();\r\n        this.enqueueFromPromise(new Promise<TItem>((resolve: (value: TItem) => void, reject: (reason: any) => void) => { resolve(item); }));\r\n    }\r\n\r\n    public enqueueFromPromise = (promise: Promise<TItem>): void => {\r\n        this.throwIfDispose();\r\n        promise.then((val: TItem): void => {\r\n            this.privList.add(val);\r\n             /* tslint:disable:no-empty */\r\n        }, (error: string): void => { });\r\n    }\r\n\r\n    public dequeue = (): Promise<TItem> => {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        if (this.privSubscribers) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Dequeue });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public peek = (): Promise<TItem> => {\r\n        this.throwIfDispose();\r\n        const deferredSubscriber = new Deferred<TItem>();\r\n\r\n        const subs = this.privSubscribers;\r\n        if (subs) {\r\n            this.privSubscribers.add({ deferral: deferredSubscriber, type: SubscriberType.Peek });\r\n            this.drain();\r\n        }\r\n\r\n        return deferredSubscriber.promise;\r\n    }\r\n\r\n    public length = (): number => {\r\n        this.throwIfDispose();\r\n        return this.privList.length();\r\n    }\r\n\r\n    public isDisposed = (): boolean => {\r\n        return this.privSubscribers == null;\r\n    }\r\n\r\n    public async drainAndDispose(pendingItemProcessor: (pendingItemInQueue: TItem) => void, reason?: string): Promise<void> {\r\n        if (!this.isDisposed() && !this.privIsDisposing) {\r\n            this.privDisposeReason = reason;\r\n            this.privIsDisposing = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            if (subs) {\r\n                while (subs.length() > 0) {\r\n                    const subscriber = subs.removeFirst();\r\n                    // TODO: this needs work (Resolve(null) instead?).\r\n                    subscriber.deferral.resolve(undefined);\r\n                    // subscriber.deferral.reject(\"Disposed\");\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n            }\r\n\r\n            for (const detachable of this.privDetachables) {\r\n                await detachable.detach();\r\n            }\r\n\r\n            if (this.privPromiseStore.length() > 0 && pendingItemProcessor) {\r\n                const promiseArray: Promise<TItem>[] = [];\r\n\r\n                this.privPromiseStore.toArray().forEach((wrapper: Promise<TItem>) => {\r\n                    promiseArray.push(wrapper);\r\n                });\r\n                return Promise.all(promiseArray).finally(() => {\r\n                    this.privSubscribers = null;\r\n                    this.privList.forEach((item: TItem, index: number): void => {\r\n                        pendingItemProcessor(item);\r\n                    });\r\n                    this.privList = null;\r\n                    return;\r\n                }).then<void>();\r\n            } else {\r\n                this.privSubscribers = null;\r\n                this.privList = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public async dispose(reason?: string): Promise<void> {\r\n        await this.drainAndDispose(null, reason);\r\n    }\r\n\r\n    private drain = (): void => {\r\n        if (!this.privIsDrainInProgress && !this.privIsDisposing) {\r\n            this.privIsDrainInProgress = true;\r\n\r\n            const subs = this.privSubscribers;\r\n            const lists = this.privList;\r\n            if (subs && lists) {\r\n                while (lists.length() > 0 && subs.length() > 0 && !this.privIsDisposing) {\r\n                    const subscriber = subs.removeFirst();\r\n                    if (subscriber.type === SubscriberType.Peek) {\r\n                        subscriber.deferral.resolve(lists.first());\r\n                    } else {\r\n                        const dequeuedItem = lists.removeFirst();\r\n                        subscriber.deferral.resolve(dequeuedItem);\r\n                    }\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privSubscribers === subs) {\r\n                    this.privSubscribers = subs;\r\n                }\r\n\r\n                // note: this block assumes cooperative multitasking, i.e.,\r\n                // between the if-statement and the assignment there are no\r\n                // thread switches.\r\n                // Reason is that between the initial const = this.; and this\r\n                // point there is the derral.resolve() operation that might have\r\n                // caused recursive calls to the Queue, especially, calling\r\n                // Dispose() on the queue alredy (which would reset the var\r\n                // here to null!).\r\n                // That should generally hold true for javascript...\r\n                if (this.privList === lists) {\r\n                    this.privList = lists;\r\n                }\r\n            }\r\n\r\n            this.privIsDrainInProgress = false;\r\n        }\r\n    }\r\n\r\n    private throwIfDispose = (): void => {\r\n        if (this.isDisposed()) {\r\n            if (this.privDisposeReason) {\r\n                throw new InvalidOperationError(this.privDisposeReason);\r\n            }\r\n\r\n            throw new ObjectDisposedError(\"Queue\");\r\n        } else if (this.privIsDisposing) {\r\n            throw new InvalidOperationError(\"Queue disposing\");\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ObjectDisposedError } from \"./Error\";\r\nimport { IDetachable } from \"./IDetachable\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { IDisposable } from \"./IDisposable\";\r\n\r\nexport interface IList<TItem> extends IDisposable {\r\n    get(itemIndex: number): TItem;\r\n    first(): TItem;\r\n    last(): TItem;\r\n\r\n    add(item: TItem): void;\r\n    insertAt(index: number, item: TItem): void;\r\n\r\n    removeFirst(): TItem;\r\n    removeLast(): TItem;\r\n    removeAt(index: number): TItem;\r\n    remove(index: number, count: number): TItem[];\r\n    clear(): void;\r\n\r\n    length(): number;\r\n\r\n    onAdded(addedCallback: () => void): IDetachable;\r\n    onRemoved(removedCallback: () => void): IDetachable;\r\n    onDisposed(disposedCallback: () => void): IDetachable;\r\n\r\n    join(seperator?: string): string;\r\n\r\n    toArray(): TItem[];\r\n\r\n    any(callback?: (item: TItem, index: number) => boolean): boolean;\r\n    all(callback: (item: TItem) => boolean): boolean;\r\n    forEach(callback: (item: TItem, index: number) => void): void;\r\n    select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\r\n    where(callback: (item: TItem, index: number) => boolean): List<TItem>;\r\n    orderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    orderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\r\n    clone(): List<TItem>;\r\n    concat(list: List<TItem>): List<TItem>;\r\n    concatArray(array: TItem[]): List<TItem>;\r\n}\r\n\r\nexport class List<TItem> implements IList<TItem>  {\r\n    private privList: TItem[];\r\n    private privSubscriptionIdCounter: number = 0;\r\n    private privAddSubscriptions: IStringDictionary<() => void> = {};\r\n    private privRemoveSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposedSubscriptions: IStringDictionary<() => void> = {};\r\n    private privDisposeReason: string = null;\r\n\r\n    public constructor(list?: TItem[]) {\r\n        this.privList = [];\r\n        // copy the list rather than taking as is.\r\n        if (list) {\r\n            for (const item of list) {\r\n                this.privList.push(item);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get = (itemIndex: number): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.privList[itemIndex];\r\n    }\r\n\r\n    public first = (): TItem => {\r\n        return this.get(0);\r\n    }\r\n\r\n    public last = (): TItem => {\r\n        return this.get(this.length() - 1);\r\n    }\r\n\r\n    public add = (item: TItem): void => {\r\n        this.throwIfDisposed();\r\n        this.insertAt(this.privList.length, item);\r\n    }\r\n\r\n    public insertAt = (index: number, item: TItem): void => {\r\n        this.throwIfDisposed();\r\n        if (index === 0) {\r\n            this.privList.unshift(item);\r\n        } else if (index === this.privList.length) {\r\n            this.privList.push(item);\r\n        } else {\r\n            this.privList.splice(index, 0, item);\r\n        }\r\n        this.triggerSubscriptions(this.privAddSubscriptions);\r\n    }\r\n\r\n    public removeFirst = (): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(0);\r\n    }\r\n\r\n    public removeLast = (): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.removeAt(this.length() - 1);\r\n    }\r\n\r\n    public removeAt = (index: number): TItem => {\r\n        this.throwIfDisposed();\r\n        return this.remove(index, 1)[0];\r\n    }\r\n\r\n    public remove = (index: number, count: number): TItem[] => {\r\n        this.throwIfDisposed();\r\n        const removedElements = this.privList.splice(index, count);\r\n        this.triggerSubscriptions(this.privRemoveSubscriptions);\r\n        return removedElements;\r\n    }\r\n\r\n    public clear = (): void => {\r\n        this.throwIfDisposed();\r\n        this.remove(0, this.length());\r\n    }\r\n\r\n    public length = (): number => {\r\n        this.throwIfDisposed();\r\n        return this.privList.length;\r\n    }\r\n\r\n    public onAdded = (addedCallback: () => void): IDetachable => {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privAddSubscriptions[subscriptionId] = addedCallback;\r\n\r\n        return {\r\n            detach: () => {\r\n                delete this.privAddSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onRemoved = (removedCallback: () => void): IDetachable => {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privRemoveSubscriptions[subscriptionId] = removedCallback;\r\n\r\n        return {\r\n            detach: () => {\r\n                delete this.privRemoveSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public onDisposed = (disposedCallback: () => void): IDetachable => {\r\n        this.throwIfDisposed();\r\n        const subscriptionId = this.privSubscriptionIdCounter++;\r\n\r\n        this.privDisposedSubscriptions[subscriptionId] = disposedCallback;\r\n\r\n        return {\r\n            detach: () => {\r\n                delete this.privDisposedSubscriptions[subscriptionId];\r\n                return Promise.resolve();\r\n            },\r\n        };\r\n    }\r\n\r\n    public join = (seperator?: string): string => {\r\n        this.throwIfDisposed();\r\n        return this.privList.join(seperator);\r\n    }\r\n\r\n    public toArray = (): TItem[] => {\r\n        const cloneCopy = Array<TItem>();\r\n        this.privList.forEach((val: TItem) => {\r\n            cloneCopy.push(val);\r\n        });\r\n        return cloneCopy;\r\n    }\r\n\r\n    public any = (callback?: (item: TItem, index: number) => boolean): boolean => {\r\n        this.throwIfDisposed();\r\n        if (callback) {\r\n            return this.where(callback).length() > 0;\r\n        } else {\r\n            return this.length() > 0;\r\n        }\r\n    }\r\n\r\n    public all = (callback: (item: TItem) => boolean): boolean => {\r\n        this.throwIfDisposed();\r\n        return this.where(callback).length() === this.length();\r\n    }\r\n\r\n    public forEach = (callback: (item: TItem, index: number) => void): void => {\r\n        this.throwIfDisposed();\r\n        for (let i = 0; i < this.length(); i++) {\r\n            callback(this.privList[i], i);\r\n        }\r\n    }\r\n\r\n    public select = <T2>(callback: (item: TItem, index: number) => T2): List<T2> => {\r\n        this.throwIfDisposed();\r\n        const selectList: T2[] = [];\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            selectList.push(callback(this.privList[i], i));\r\n        }\r\n\r\n        return new List<T2>(selectList);\r\n    }\r\n\r\n    public where = (callback: (item: TItem, index: number) => boolean): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        const filteredList = new List<TItem>();\r\n        for (let i = 0; i < this.privList.length; i++) {\r\n            if (callback(this.privList[i], i)) {\r\n                filteredList.add(this.privList[i]);\r\n            }\r\n        }\r\n        return filteredList;\r\n    }\r\n\r\n    public orderBy = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        const clonedArray = this.toArray();\r\n        const orderedArray = clonedArray.sort(compareFn);\r\n        return new List(orderedArray);\r\n    }\r\n\r\n    public orderByDesc = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return this.orderBy((a: TItem, b: TItem) => compareFn(b, a));\r\n    }\r\n\r\n    public clone = (): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.toArray());\r\n    }\r\n\r\n    public concat = (list: List<TItem>): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(list.toArray()));\r\n    }\r\n\r\n    public concatArray = (array: TItem[]): List<TItem> => {\r\n        this.throwIfDisposed();\r\n        return new List<TItem>(this.privList.concat(array));\r\n    }\r\n\r\n    public isDisposed = (): boolean => {\r\n        return this.privList == null;\r\n    }\r\n\r\n    public dispose = (reason?: string): void => {\r\n        if (!this.isDisposed()) {\r\n            this.privDisposeReason = reason;\r\n            this.privList = null;\r\n            this.privAddSubscriptions = null;\r\n            this.privRemoveSubscriptions = null;\r\n            this.triggerSubscriptions(this.privDisposedSubscriptions);\r\n        }\r\n    }\r\n\r\n    private throwIfDisposed = (): void => {\r\n        if (this.isDisposed()) {\r\n            throw new ObjectDisposedError(\"List\", this.privDisposeReason);\r\n        }\r\n    }\r\n\r\n    private triggerSubscriptions = (subscriptions: IStringDictionary<() => void>): void => {\r\n        if (subscriptions) {\r\n            for (const subscriptionId in subscriptions) {\r\n                if (subscriptionId) {\r\n                    subscriptions[subscriptionId]();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { memo, useRef, useContext, useMemo } from 'react';\nimport { any, string, oneOf, bool, oneOfType, node, func } from 'prop-types';\nimport { withHovering } from '../utils/withHovering.js';\nimport { useItemState } from '../hooks/useItemState.js';\nimport { EventHandlersContext, RadioGroupContext, menuClass, menuItemClass, Keys } from '../utils/constants.js';\nimport { useActiveState } from '../hooks/useActiveState.js';\nimport { useCombinedRef } from '../hooks/useCombinedRef.js';\nimport { useBEM } from '../hooks/useBEM.js';\nimport { useFlatStyles } from '../hooks/useFlatStyles.js';\nimport { validateIndex, attachHandlerProps, commonProps, safeCall } from '../utils/utils.js';\nimport { stylePropTypes } from '../utils/propTypes.js';\n\nvar _excluded = [\"className\", \"styles\", \"value\", \"href\", \"type\", \"checked\", \"disabled\", \"index\", \"children\", \"onClick\", \"isHovering\", \"externalRef\"],\n    _excluded2 = [\"isActive\", \"onKeyUp\", \"onBlur\"];\nvar MenuItem = /*#__PURE__*/withHovering( /*#__PURE__*/memo(function MenuItem(_ref) {\n  var className = _ref.className,\n      styles = _ref.styles,\n      value = _ref.value,\n      href = _ref.href,\n      type = _ref.type,\n      checked = _ref.checked,\n      disabled = _ref.disabled,\n      index = _ref.index,\n      children = _ref.children,\n      onClick = _ref.onClick,\n      isHovering = _ref.isHovering,\n      externalRef = _ref.externalRef,\n      restProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var isDisabled = !!disabled;\n  validateIndex(index, isDisabled, children);\n  var ref = useRef();\n\n  var _useItemState = useItemState(ref, index, isHovering, isDisabled),\n      setHover = _useItemState.setHover,\n      onBlur = _useItemState.onBlur,\n      onMouseMove = _useItemState.onMouseMove,\n      onMouseLeave = _useItemState.onMouseLeave;\n\n  var eventHandlers = useContext(EventHandlersContext);\n  var radioGroup = useContext(RadioGroupContext);\n\n  var _useActiveState = useActiveState(isHovering, isDisabled),\n      isActive = _useActiveState.isActive,\n      onKeyUp = _useActiveState.onKeyUp,\n      activeStateBlur = _useActiveState.onBlur,\n      activeStateHandlers = _objectWithoutPropertiesLoose(_useActiveState, _excluded2);\n\n  var isRadio = type === 'radio';\n  var isCheckBox = type === 'checkbox';\n  var isAnchor = !!href && !isDisabled && !isRadio && !isCheckBox;\n  var isChecked = isRadio ? radioGroup.value === value : isCheckBox ? !!checked : false;\n\n  var handleClick = function handleClick(e) {\n    if (isDisabled) {\n      e.stopPropagation();\n      e.preventDefault();\n      return;\n    }\n\n    var event = {\n      value: value,\n      syntheticEvent: e\n    };\n    if (e.key !== undefined) event.key = e.key;\n    if (isCheckBox) event.checked = !isChecked;\n    if (isRadio) event.name = radioGroup.name;\n    safeCall(onClick, event);\n    if (isRadio) safeCall(radioGroup.onRadioChange, event);\n    eventHandlers.handleClick(event, isCheckBox || isRadio);\n  };\n\n  var handleKeyUp = function handleKeyUp(e) {\n    if (!isActive) return;\n    onKeyUp(e);\n\n    switch (e.key) {\n      case Keys.ENTER:\n      case Keys.SPACE:\n        if (isAnchor) {\n          ref.current.click();\n        } else {\n          handleClick(e);\n        }\n\n        break;\n    }\n  };\n\n  var handleBlur = function handleBlur(e) {\n    activeStateBlur(e);\n    onBlur(e);\n  };\n\n  var modifiers = useMemo(function () {\n    return Object.freeze({\n      type: type,\n      disabled: isDisabled,\n      hover: isHovering,\n      active: isActive,\n      checked: isChecked,\n      anchor: isAnchor\n    });\n  }, [type, isDisabled, isHovering, isActive, isChecked, isAnchor]);\n  var handlers = attachHandlerProps(_extends({}, activeStateHandlers, {\n    onMouseMove: onMouseMove,\n    onMouseLeave: onMouseLeave,\n    onMouseDown: setHover,\n    onKeyUp: handleKeyUp,\n    onBlur: handleBlur,\n    onClick: handleClick\n  }), restProps);\n\n  var menuItemProps = _extends({\n    role: isRadio ? 'menuitemradio' : isCheckBox ? 'menuitemcheckbox' : 'menuitem',\n    'aria-checked': isRadio || isCheckBox ? isChecked : undefined\n  }, commonProps(isDisabled, isHovering), restProps, handlers, {\n    ref: useCombinedRef(externalRef, ref),\n    className: useBEM({\n      block: menuClass,\n      element: menuItemClass,\n      modifiers: modifiers,\n      className: className\n    }),\n    style: useFlatStyles(styles, modifiers)\n  });\n\n  var renderChildren = useMemo(function () {\n    return safeCall(children, modifiers);\n  }, [children, modifiers]);\n\n  if (isAnchor) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      role: \"presentation\"\n    }, /*#__PURE__*/React.createElement(\"a\", _extends({}, menuItemProps, {\n      href: href\n    }), renderChildren));\n  } else {\n    return /*#__PURE__*/React.createElement(\"li\", menuItemProps, renderChildren);\n  }\n}), 'MenuItem');\nprocess.env.NODE_ENV !== \"production\" ? MenuItem.propTypes = /*#__PURE__*/_extends({}, /*#__PURE__*/stylePropTypes(), {\n  value: any,\n  href: string,\n  type: /*#__PURE__*/oneOf(['checkbox', 'radio']),\n  checked: bool,\n  disabled: bool,\n  children: /*#__PURE__*/oneOfType([node, func]),\n  onClick: func\n}) : void 0;\n\nexport { MenuItem };\n","import { useContext, useRef, useEffect } from 'react';\nimport { ItemSettingsContext, MenuListItemContext, HoverIndexActionTypes } from '../utils/constants.js';\n\nvar useItemState = function useItemState(ref, index, isHovering, isDisabled) {\n  var _useContext = useContext(ItemSettingsContext),\n      submenuCloseDelay = _useContext.submenuCloseDelay;\n\n  var _useContext2 = useContext(MenuListItemContext),\n      isParentOpen = _useContext2.isParentOpen,\n      isSubmenuOpen = _useContext2.isSubmenuOpen,\n      dispatch = _useContext2.dispatch;\n\n  var timeoutId = useRef(0);\n\n  var setHover = function setHover() {\n    if (!isHovering && !isDisabled) dispatch({\n      type: HoverIndexActionTypes.SET,\n      index: index\n    });\n  };\n\n  var onBlur = function onBlur(e) {\n    if (isHovering && !e.currentTarget.contains(e.relatedTarget)) {\n      dispatch({\n        type: HoverIndexActionTypes.UNSET,\n        index: index\n      });\n    }\n  };\n\n  var onMouseMove = function onMouseMove() {\n    if (isSubmenuOpen) {\n      if (!timeoutId.current) timeoutId.current = setTimeout(function () {\n        timeoutId.current = 0;\n        setHover();\n      }, submenuCloseDelay);\n    } else {\n      setHover();\n    }\n  };\n\n  var onMouseLeave = function onMouseLeave(_, keepHover) {\n    if (timeoutId.current) {\n      clearTimeout(timeoutId.current);\n      timeoutId.current = 0;\n    }\n\n    if (!keepHover) dispatch({\n      type: HoverIndexActionTypes.UNSET,\n      index: index\n    });\n  };\n\n  useEffect(function () {\n    return function () {\n      return clearTimeout(timeoutId.current);\n    };\n  }, []);\n  useEffect(function () {\n    if (isHovering && isParentOpen) {\n      ref.current && ref.current.focus();\n    }\n  }, [ref, isHovering, isParentOpen]);\n  return {\n    setHover: setHover,\n    onBlur: onBlur,\n    onMouseMove: onMouseMove,\n    onMouseLeave: onMouseLeave\n  };\n};\n\nexport { useItemState };\n","import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { forwardRef, useRef, useMemo } from 'react';\nimport { createPortal } from 'react-dom';\nimport { oneOf, exact, number, object, bool, oneOfType, string, func } from 'prop-types';\nimport { MenuList } from './MenuList.js';\nimport { useBEM } from '../hooks/useBEM.js';\nimport { CloseReason, menuContainerClass, SettingsContext, ItemSettingsContext, EventHandlersContext, MenuStateMap, Keys } from '../utils/constants.js';\nimport { rootMenuPropTypes, rootMenuDefaultProps } from '../utils/propTypes.js';\nimport { safeCall, attachHandlerProps, values, getTransition, isMenuOpen } from '../utils/utils.js';\n\nvar _excluded = [\"aria-label\", \"className\", \"containerProps\", \"initialMounted\", \"unmountOnClose\", \"transition\", \"transitionTimeout\", \"boundingBoxRef\", \"boundingBoxPadding\", \"reposition\", \"submenuOpenDelay\", \"submenuCloseDelay\", \"skipOpen\", \"viewScroll\", \"portal\", \"theming\", \"onItemClick\", \"onClose\"];\nvar ControlledMenu = /*#__PURE__*/forwardRef(function ControlledMenu(_ref, externalRef) {\n  var ariaLabel = _ref['aria-label'],\n      className = _ref.className,\n      containerProps = _ref.containerProps,\n      initialMounted = _ref.initialMounted,\n      unmountOnClose = _ref.unmountOnClose,\n      transition = _ref.transition,\n      transitionTimeout = _ref.transitionTimeout,\n      boundingBoxRef = _ref.boundingBoxRef,\n      boundingBoxPadding = _ref.boundingBoxPadding,\n      reposition = _ref.reposition,\n      submenuOpenDelay = _ref.submenuOpenDelay,\n      submenuCloseDelay = _ref.submenuCloseDelay,\n      skipOpen = _ref.skipOpen,\n      viewScroll = _ref.viewScroll,\n      portal = _ref.portal,\n      theming = _ref.theming,\n      onItemClick = _ref.onItemClick,\n      onClose = _ref.onClose,\n      restProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var containerRef = useRef(null);\n  var scrollingRef = useRef(null);\n  var anchorScrollingRef = useRef(null);\n  var anchorRef = restProps.anchorRef,\n      state = restProps.state;\n  var settings = useMemo(function () {\n    return {\n      initialMounted: initialMounted,\n      unmountOnClose: unmountOnClose,\n      transition: transition,\n      transitionTimeout: transitionTimeout,\n      boundingBoxRef: boundingBoxRef,\n      boundingBoxPadding: boundingBoxPadding,\n      rootMenuRef: containerRef,\n      rootAnchorRef: anchorRef,\n      scrollingRef: scrollingRef,\n      anchorScrollingRef: anchorScrollingRef,\n      reposition: reposition,\n      viewScroll: viewScroll\n    };\n  }, [initialMounted, unmountOnClose, transition, transitionTimeout, anchorRef, boundingBoxRef, boundingBoxPadding, reposition, viewScroll]);\n  var itemSettings = useMemo(function () {\n    return {\n      submenuOpenDelay: submenuOpenDelay,\n      submenuCloseDelay: submenuCloseDelay\n    };\n  }, [submenuOpenDelay, submenuCloseDelay]);\n  var eventHandlers = useMemo(function () {\n    return {\n      handleClick: function handleClick(event, isCheckorRadio) {\n        if (!event.stopPropagation) safeCall(onItemClick, event);\n        var keepOpen = event.keepOpen;\n\n        if (keepOpen === undefined) {\n          keepOpen = isCheckorRadio && event.key === Keys.SPACE;\n        }\n\n        if (!keepOpen) {\n          safeCall(onClose, {\n            value: event.value,\n            key: event.key,\n            reason: CloseReason.CLICK\n          });\n        }\n      },\n      handleClose: function handleClose(key) {\n        safeCall(onClose, {\n          key: key,\n          reason: CloseReason.CLICK\n        });\n      }\n    };\n  }, [onItemClick, onClose]);\n\n  var handleKeyDown = function handleKeyDown(_ref2) {\n    var key = _ref2.key;\n\n    switch (key) {\n      case Keys.ESC:\n        safeCall(onClose, {\n          key: key,\n          reason: CloseReason.CANCEL\n        });\n        break;\n    }\n  };\n\n  var handleBlur = function handleBlur(e) {\n    if (isMenuOpen(state) && !e.currentTarget.contains(e.relatedTarget || document.activeElement)) {\n      safeCall(onClose, {\n        reason: CloseReason.BLUR\n      });\n\n      if (skipOpen) {\n        skipOpen.current = true;\n        setTimeout(function () {\n          return skipOpen.current = false;\n        }, 300);\n      }\n    }\n  };\n\n  var itemTransition = getTransition(transition, 'item');\n  var modifiers = useMemo(function () {\n    return {\n      theme: theming,\n      itemTransition: itemTransition\n    };\n  }, [theming, itemTransition]);\n  var handlers = attachHandlerProps({\n    onKeyDown: handleKeyDown,\n    onBlur: handleBlur\n  }, containerProps);\n  var menuList = /*#__PURE__*/React.createElement(\"div\", _extends({}, containerProps, handlers, {\n    className: useBEM({\n      block: menuContainerClass,\n      modifiers: modifiers,\n      className: className\n    }),\n    ref: containerRef\n  }), state && /*#__PURE__*/React.createElement(SettingsContext.Provider, {\n    value: settings\n  }, /*#__PURE__*/React.createElement(ItemSettingsContext.Provider, {\n    value: itemSettings\n  }, /*#__PURE__*/React.createElement(EventHandlersContext.Provider, {\n    value: eventHandlers\n  }, /*#__PURE__*/React.createElement(MenuList, _extends({}, restProps, {\n    ariaLabel: ariaLabel || 'Menu',\n    externalRef: externalRef,\n    containerRef: containerRef,\n    onClose: onClose\n  }))))));\n\n  if (portal) {\n    return /*#__PURE__*/createPortal(menuList, document.body);\n  } else {\n    return menuList;\n  }\n});\nprocess.env.NODE_ENV !== \"production\" ? ControlledMenu.propTypes = /*#__PURE__*/_extends({}, rootMenuPropTypes, {\n  state: /*#__PURE__*/oneOf( /*#__PURE__*/values(MenuStateMap)),\n  anchorPoint: /*#__PURE__*/exact({\n    x: number,\n    y: number\n  }),\n  anchorRef: object,\n  skipOpen: object,\n  captureFocus: bool,\n  menuItemFocus: /*#__PURE__*/exact({\n    position: /*#__PURE__*/oneOfType([string, number]),\n    alwaysUpdate: bool\n  }),\n  onClose: func\n}) : void 0;\nControlledMenu.defaultProps = /*#__PURE__*/_extends({}, rootMenuDefaultProps, {\n  menuItemFocus: {}\n});\n\nexport { ControlledMenu };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ArgumentNullError } from \"./Error\";\r\nimport { EventSource } from \"./EventSource\";\r\nimport { IEventSource } from \"./IEventSource\";\r\nimport { PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class Events {\r\n    private static privInstance: IEventSource<PlatformEvent> = new EventSource<PlatformEvent>();\r\n\r\n    public static setEventSource = (eventSource: IEventSource<PlatformEvent>): void => {\r\n        if (!eventSource) {\r\n            throw new ArgumentNullError(\"eventSource\");\r\n        }\r\n\r\n        Events.privInstance = eventSource;\r\n    }\r\n\r\n    public static get instance(): IEventSource<PlatformEvent> {\r\n        return Events.privInstance;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class AudioSourceEvent extends PlatformEvent {\r\n    private privAudioSourceId: string;\r\n\r\n    constructor(eventName: string, audioSourceId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privAudioSourceId = audioSourceId;\r\n    }\r\n\r\n    public get audioSourceId(): string {\r\n        return this.privAudioSourceId;\r\n    }\r\n}\r\n\r\nexport class AudioSourceInitializingEvent extends AudioSourceEvent {\r\n    constructor(audioSourceId: string) {\r\n        super(\"AudioSourceInitializingEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceReadyEvent extends AudioSourceEvent {\r\n    constructor(audioSourceId: string) {\r\n        super(\"AudioSourceReadyEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceOffEvent extends AudioSourceEvent {\r\n    constructor(audioSourceId: string) {\r\n        super(\"AudioSourceOffEvent\", audioSourceId);\r\n    }\r\n}\r\n\r\nexport class AudioSourceErrorEvent extends AudioSourceEvent {\r\n    private privError: string;\r\n\r\n    constructor(audioSourceId: string, error: string) {\r\n        super(\"AudioSourceErrorEvent\", audioSourceId, EventType.Error);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeEvent extends AudioSourceEvent {\r\n    private privAudioNodeId: string;\r\n\r\n    constructor(eventName: string, audioSourceId: string, audioNodeId: string) {\r\n        super(eventName, audioSourceId);\r\n        this.privAudioNodeId = audioNodeId;\r\n    }\r\n\r\n    public get audioNodeId(): string {\r\n        return this.privAudioNodeId;\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeAttachingEvent extends AudioStreamNodeEvent {\r\n    constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachingEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeAttachedEvent extends AudioStreamNodeEvent {\r\n    constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeAttachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeDetachedEvent extends AudioStreamNodeEvent {\r\n    constructor(audioSourceId: string, audioNodeId: string) {\r\n        super(\"AudioStreamNodeDetachedEvent\", audioSourceId, audioNodeId);\r\n    }\r\n}\r\n\r\nexport class AudioStreamNodeErrorEvent extends AudioStreamNodeEvent {\r\n    private privError: string;\r\n\r\n    constructor(audioSourceId: string, audioNodeId: string, error: string) {\r\n        super(\"AudioStreamNodeErrorEvent\", audioSourceId, audioNodeId);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { IStreamChunk, Stream } from \"./Exports\";\r\n\r\nexport class ChunkedArrayBufferStream extends Stream<ArrayBuffer> {\r\n    private privTargetChunkSize: number;\r\n    private privNextBufferToWrite: ArrayBuffer;\r\n    private privNextBufferStartTime: number;\r\n    private privNextBufferReadyBytes: number;\r\n\r\n    constructor(targetChunkSize: number, streamId?: string) {\r\n        super(streamId);\r\n        this.privTargetChunkSize = targetChunkSize;\r\n        this.privNextBufferReadyBytes = 0;\r\n    }\r\n\r\n    public writeStreamChunk(chunk: IStreamChunk<ArrayBuffer>): void {\r\n        // No pending write, and the buffer is the right size so write it.\r\n        if (chunk.isEnd ||\r\n            (0 === this.privNextBufferReadyBytes && chunk.buffer.byteLength === this.privTargetChunkSize)) {\r\n            super.writeStreamChunk(chunk);\r\n            return;\r\n        }\r\n\r\n        let bytesCopiedFromBuffer: number = 0;\r\n\r\n        while (bytesCopiedFromBuffer < chunk.buffer.byteLength) {\r\n            // Fill the next buffer.\r\n            if (undefined === this.privNextBufferToWrite) {\r\n                this.privNextBufferToWrite = new ArrayBuffer(this.privTargetChunkSize);\r\n                this.privNextBufferStartTime = chunk.timeReceived;\r\n            }\r\n\r\n            // Find out how many bytes we can copy into the read buffer.\r\n            const bytesToCopy: number = Math.min(chunk.buffer.byteLength - bytesCopiedFromBuffer, this.privTargetChunkSize - this.privNextBufferReadyBytes);\r\n            const targetView: Uint8Array = new Uint8Array(this.privNextBufferToWrite);\r\n            const sourceView: Uint8Array = new Uint8Array(chunk.buffer.slice(bytesCopiedFromBuffer, bytesToCopy + bytesCopiedFromBuffer));\r\n\r\n            targetView.set(sourceView, this.privNextBufferReadyBytes);\r\n            this.privNextBufferReadyBytes += bytesToCopy;\r\n            bytesCopiedFromBuffer += bytesToCopy;\r\n\r\n            // Are we ready to write?\r\n            if (this.privNextBufferReadyBytes === this.privTargetChunkSize) {\r\n                super.writeStreamChunk({\r\n                    buffer: this.privNextBufferToWrite,\r\n                    isEnd: false,\r\n                    timeReceived: this.privNextBufferStartTime,\r\n                });\r\n                this.privNextBufferReadyBytes = 0;\r\n                this.privNextBufferToWrite = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    public close(): void {\r\n        // Send whatever is pending, then close the base class.\r\n        if (0 !== this.privNextBufferReadyBytes && !this.isClosed) {\r\n            super.writeStreamChunk({\r\n                buffer: this.privNextBufferToWrite.slice(0, this.privNextBufferReadyBytes),\r\n                isEnd: false,\r\n                timeReceived: this.privNextBufferStartTime,\r\n            });\r\n        }\r\n\r\n        super.close();\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\nimport { Queue } from \"./Queue\";\r\n\r\nexport interface IStreamChunk<TBuffer> {\r\n    isEnd: boolean;\r\n    buffer: TBuffer;\r\n    timeReceived: number;\r\n}\r\n\r\nexport class Stream<TBuffer> {\r\n    private privId: string;\r\n    private privIsWriteEnded: boolean = false;\r\n    private privIsReadEnded: boolean = false;\r\n    private privReaderQueue: Queue<IStreamChunk<TBuffer>>;\r\n\r\n    public constructor(streamId?: string) {\r\n        this.privId = streamId ? streamId : createNoDashGuid();\r\n        this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n    }\r\n\r\n    public get isClosed(): boolean {\r\n        return this.privIsWriteEnded;\r\n    }\r\n\r\n    public get isReadEnded(): boolean {\r\n        return this.privIsReadEnded;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public close(): void {\r\n        if (!this.privIsWriteEnded) {\r\n            this.writeStreamChunk({\r\n                buffer: null,\r\n                isEnd: true,\r\n                timeReceived: Date.now(),\r\n            });\r\n            this.privIsWriteEnded = true;\r\n        }\r\n    }\r\n\r\n    public writeStreamChunk(streamChunk: IStreamChunk<TBuffer>): void {\r\n        this.throwIfClosed();\r\n        if (!this.privReaderQueue.isDisposed()) {\r\n            try {\r\n                this.privReaderQueue.enqueue(streamChunk);\r\n            } catch (e) {\r\n                // Do nothing\r\n            }\r\n        }\r\n    }\r\n\r\n    public read = (): Promise<IStreamChunk<TBuffer>> => {\r\n        if (this.privIsReadEnded) {\r\n            throw new InvalidOperationError(\"Stream read has already finished\");\r\n        }\r\n\r\n        return this.privReaderQueue\r\n            .dequeue()\r\n            .then(async (streamChunk: IStreamChunk<TBuffer>) => {\r\n                if (streamChunk === undefined || streamChunk.isEnd) {\r\n                    await this.privReaderQueue.dispose(\"End of stream reached\");\r\n                }\r\n\r\n                return streamChunk;\r\n            });\r\n    }\r\n    public readEnded = (): void => {\r\n        if (!this.privIsReadEnded) {\r\n            this.privIsReadEnded = true;\r\n            this.privReaderQueue = new Queue<IStreamChunk<TBuffer>>();\r\n        }\r\n    }\r\n\r\n    private throwIfClosed = (): void => {\r\n        if (this.privIsWriteEnded) {\r\n            throw new InvalidOperationError(\"Stream closed\");\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\nimport { ConnectionMessage } from \"./ConnectionMessage\";\r\nimport { IStringDictionary } from \"./IDictionary\";\r\nimport { EventType, PlatformEvent } from \"./PlatformEvent\";\r\n\r\nexport class ServiceEvent extends PlatformEvent {\r\n    private privJsonResult: string;\r\n\r\n    constructor(eventName: string, jsonstring: string, eventType: EventType = EventType.Info) {\r\n      super(eventName, eventType);\r\n      this.privJsonResult = jsonstring;\r\n    }\r\n\r\n    public get jsonString(): string {\r\n        return this.privJsonResult;\r\n    }\r\n}\r\n\r\nexport class ConnectionEvent extends PlatformEvent {\r\n    private privConnectionId: string;\r\n\r\n    constructor(eventName: string, connectionId: string, eventType: EventType = EventType.Info) {\r\n        super(eventName, eventType);\r\n        this.privConnectionId = connectionId;\r\n    }\r\n\r\n    public get connectionId(): string {\r\n        return this.privConnectionId;\r\n    }\r\n}\r\n\r\nexport class ConnectionStartEvent extends ConnectionEvent {\r\n    private privUri: string;\r\n    private privHeaders: IStringDictionary<string>;\r\n\r\n    constructor(connectionId: string, uri: string, headers?: IStringDictionary<string>) {\r\n        super(\"ConnectionStartEvent\", connectionId);\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n    }\r\n\r\n    public get uri(): string {\r\n        return this.privUri;\r\n    }\r\n\r\n    public get headers(): IStringDictionary<string> {\r\n        return this.privHeaders;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishedEvent extends ConnectionEvent {\r\n    constructor(connectionId: string, metadata?: IStringDictionary<string>) {\r\n        super(\"ConnectionEstablishedEvent\", connectionId);\r\n    }\r\n}\r\n\r\nexport class ConnectionClosedEvent extends ConnectionEvent {\r\n    private privReason: string;\r\n    private privStatusCode: number;\r\n\r\n    constructor(connectionId: string, statusCode: number, reason: string) {\r\n        super(\"ConnectionClosedEvent\", connectionId, EventType.Debug);\r\n        this.privReason = reason;\r\n        this.privStatusCode = statusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionErrorEvent extends ConnectionEvent {\r\n    private readonly privMessage: string;\r\n    private readonly privType: string;\r\n\r\n    constructor(connectionId: string, message: string, type: string) {\r\n        super(\"ConnectionErrorEvent\", connectionId, EventType.Debug);\r\n        this.privMessage = message;\r\n        this.privType = type;\r\n    }\r\n\r\n    public get message(): string {\r\n        return this.privMessage;\r\n    }\r\n\r\n    public get type(): string {\r\n        return this.privType;\r\n    }\r\n}\r\n\r\nexport class ConnectionEstablishErrorEvent extends ConnectionEvent {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    constructor(connectionId: string, statuscode: number, reason: string) {\r\n        super(\"ConnectionEstablishErrorEvent\", connectionId, EventType.Error);\r\n        this.privStatusCode = statuscode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageReceivedEvent extends ConnectionEvent {\r\n    private privNetworkReceivedTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    constructor(connectionId: string, networkReceivedTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageReceivedEvent\", connectionId);\r\n        this.privNetworkReceivedTime = networkReceivedTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkReceivedTime(): string {\r\n        return this.privNetworkReceivedTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n\r\nexport class ConnectionMessageSentEvent extends ConnectionEvent {\r\n    private privNetworkSentTime: string;\r\n    private privMessage: ConnectionMessage;\r\n\r\n    constructor(connectionId: string, networkSentTimeISO: string, message: ConnectionMessage) {\r\n        super(\"ConnectionMessageSentEvent\", connectionId);\r\n        this.privNetworkSentTime = networkSentTimeISO;\r\n        this.privMessage = message;\r\n    }\r\n\r\n    public get networkSentTime(): string {\r\n        return this.privNetworkSentTime;\r\n    }\r\n\r\n    public get message(): ConnectionMessage {\r\n        return this.privMessage;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { ConnectionEvent } from \"./ConnectionEvents\";\r\nimport { ConnectionMessage } from \"./ConnectionMessage\";\r\nimport { ConnectionOpenResponse } from \"./ConnectionOpenResponse\";\r\nimport { EventSource } from \"./EventSource\";\r\n\r\nexport enum ConnectionState {\r\n    None,\r\n    Connected,\r\n    Connecting,\r\n    Disconnected,\r\n}\r\n\r\nexport interface IConnection {\r\n    id: string;\r\n    state(): ConnectionState;\r\n    open(): Promise<ConnectionOpenResponse>;\r\n    send(message: ConnectionMessage): Promise<void>;\r\n    read(): Promise<ConnectionMessage>;\r\n    events: EventSource<ConnectionEvent>;\r\n    dispose(disposing?: string): Promise<void>;\r\n}\r\n","\r\n// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    EventType,\r\n    PlatformEvent\r\n} from \"./Exports\";\r\n\r\nexport class BackgroundEvent extends PlatformEvent {\r\n    private privError: string;\r\n\r\n    constructor(error: string) {\r\n        super(\"BackgroundEvent\", EventType.Error);\r\n        this.privError = error;\r\n    }\r\n\r\n    public get error(): string {\r\n        return this.privError;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\ntype TWorkerMessage = ICallNotification | IClearResponse | IErrorNotification | IErrorResponse;\r\n\r\ninterface IClearResponse {\r\n    error: null;\r\n    id: number;\r\n}\r\n\r\ninterface IErrorNotification {\r\n    error: {\r\n        message: string;\r\n    };\r\n    id: null;\r\n    result: null;\r\n}\r\n\r\ninterface IErrorResponse {\r\n    error: {\r\n        message: string;\r\n    };\r\n    id: number;\r\n    result: null;\r\n}\r\n\r\ninterface ICallNotification {\r\n    id: null;\r\n    method: \"call\";\r\n    params: {\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface ISetNotification {\r\n    id: null;\r\n    method: \"set\";\r\n    params: {\r\n        delay: number;\r\n        now: number;\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface IClearRequest {\r\n    id: number;\r\n    method: \"clear\";\r\n    params: {\r\n        timerId: number;\r\n    };\r\n}\r\n\r\ninterface IWorkerEvent extends Event {\r\n    data: TWorkerMessage;\r\n}\r\n\r\ninterface IWorkerTimers {\r\n    clearTimeout: (timerId: number) => void;\r\n    setTimeout: (func: () => any, delay: number) => number;\r\n}\r\n\r\ndeclare type Func = () => any;\r\n\r\nexport class Timeout {\r\n\r\n    private static workerTimers: null | IWorkerTimers = null;\r\n\r\n    public static clearTimeout: IWorkerTimers[\"clearTimeout\"] = (timerId) => Timeout.timers().clearTimeout(timerId);\r\n\r\n    public static setTimeout: IWorkerTimers[\"setTimeout\"] = (func, delay) => Timeout.timers().setTimeout(func, delay);\r\n\r\n    public static load = (url: string) => {\r\n        // Prefilling the Maps with a function indexed by zero is necessary to be compliant with the specification.\r\n        const scheduledTimeoutFunctions: Map<number, number | Func> = new Map([[0, () => { }]]); // tslint:disable-line no-empty\r\n        const unhandledRequests: Map<number, number> = new Map();\r\n\r\n        const worker = new Worker(url);\r\n\r\n        worker.addEventListener(\"message\", ({ data }: IWorkerEvent) => {\r\n            if (Timeout.isCallNotification(data)) {\r\n                const {\r\n                    params: { timerId }\r\n                } = data;\r\n\r\n                const idOrFunc = scheduledTimeoutFunctions.get(timerId);\r\n\r\n                if (typeof idOrFunc === \"number\") {\r\n                    const unhandledTimerId = unhandledRequests.get(idOrFunc);\r\n\r\n                    if (\r\n                        unhandledTimerId === undefined ||\r\n                        unhandledTimerId !== timerId\r\n                    ) {\r\n                        throw new Error(\"The timer is in an undefined state.\");\r\n                    }\r\n                } else if (typeof idOrFunc !== \"undefined\") {\r\n                    idOrFunc();\r\n\r\n                    // A timeout can be safely deleted because it is only called once.\r\n                    scheduledTimeoutFunctions.delete(timerId);\r\n                } else {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n            } else if (Timeout.isClearResponse(data)) {\r\n                const { id } = data;\r\n\r\n                const unhandledTimerId = unhandledRequests.get(id);\r\n\r\n                if (unhandledTimerId === undefined) {\r\n                    throw new Error(\"The timer is in an undefined state.\");\r\n                }\r\n\r\n                unhandledRequests.delete(id);\r\n\r\n                scheduledTimeoutFunctions.delete(unhandledTimerId);\r\n            } else {\r\n                const {\r\n                    error: { message }\r\n                } = data;\r\n\r\n                throw new Error(message);\r\n            }\r\n        });\r\n\r\n        const clearTimeout = (timerId: number) => {\r\n            const id = Math.random();\r\n\r\n            unhandledRequests.set(id, timerId);\r\n            scheduledTimeoutFunctions.set(timerId, id);\r\n\r\n            worker.postMessage({\r\n                id,\r\n                method: \"clear\",\r\n                params: { timerId }\r\n            } as IClearRequest);\r\n        };\r\n\r\n        const setTimeout = (func: () => void, delay: number) => {\r\n            const timerId = Math.random();\r\n\r\n            scheduledTimeoutFunctions.set(timerId, func);\r\n\r\n            worker.postMessage({\r\n                id: null,\r\n                method: \"set\",\r\n                params: {\r\n                    delay,\r\n                    now: performance.now(),\r\n                    timerId\r\n                }\r\n            } as ISetNotification);\r\n\r\n            return timerId;\r\n        };\r\n\r\n        return {\r\n            clearTimeout,\r\n            setTimeout\r\n        };\r\n    }\r\n\r\n    private static loadWorkerTimers = () => {\r\n        const worker = `!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=14)}([function(e,t,n){\"use strict\";n.d(t,\"a\",(function(){return i})),n.d(t,\"b\",(function(){return u})),n.d(t,\"c\",(function(){return a})),n.d(t,\"d\",(function(){return d}));const r=new Map,o=new Map,i=e=>{const t=r.get(e);if(void 0===t)throw new Error('There is no interval scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),r.delete(e)},u=e=>{const t=o.get(e);if(void 0===t)throw new Error('There is no timeout scheduled with the given id \"'.concat(e,'\".'));clearTimeout(t),o.delete(e)},f=(e,t)=>{let n,r;if(\"performance\"in self){const o=performance.now();n=o,r=e-Math.max(0,o-t)}else n=Date.now(),r=e;return{expected:n+r,remainingDelay:r}},c=(e,t,n,r)=>{const o=\"performance\"in self?performance.now():Date.now();o>n?postMessage({id:null,method:\"call\",params:{timerId:t}}):e.set(t,setTimeout(c,n-o,e,t,n))},a=(e,t,n)=>{const{expected:o,remainingDelay:i}=f(e,n);r.set(t,setTimeout(c,i,r,t,o))},d=(e,t,n)=>{const{expected:r,remainingDelay:i}=f(e,n);o.set(t,setTimeout(c,i,o,t,r))}},function(e,t,n){\"use strict\";n.r(t);var r=n(2);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(3);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(4);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o);var f=n(5);for(var o in f)\"default\"!==o&&function(e){n.d(t,e,(function(){return f[e]}))}(o);var c=n(6);for(var o in c)\"default\"!==o&&function(e){n.d(t,e,(function(){return c[e]}))}(o);var a=n(7);for(var o in a)\"default\"!==o&&function(e){n.d(t,e,(function(){return a[e]}))}(o);var d=n(8);for(var o in d)\"default\"!==o&&function(e){n.d(t,e,(function(){return d[e]}))}(o);var s=n(9);for(var o in s)\"default\"!==o&&function(e){n.d(t,e,(function(){return s[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(11);for(var o in r)\"default\"!==o&&function(e){n.d(t,e,(function(){return r[e]}))}(o);var i=n(12);for(var o in i)\"default\"!==o&&function(e){n.d(t,e,(function(){return i[e]}))}(o);var u=n(13);for(var o in u)\"default\"!==o&&function(e){n.d(t,e,(function(){return u[e]}))}(o)},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){\"use strict\";n.r(t);var r=n(0),o=n(1);for(var i in o)\"default\"!==i&&function(e){n.d(t,e,(function(){return o[e]}))}(i);var u=n(10);for(var i in u)\"default\"!==i&&function(e){n.d(t,e,(function(){return u[e]}))}(i);addEventListener(\"message\",({data:e})=>{try{if(\"clear\"===e.method){const{id:t,params:{timerId:n}}=e;Object(r.b)(n),postMessage({error:null,id:t})}else{if(\"set\"!==e.method)throw new Error('The given method \"'.concat(e.method,'\" is not supported'));{const{params:{delay:t,now:n,timerId:o}}=e;Object(r.d)(t,o,n)}}}catch(t){postMessage({error:{message:t.message},id:e.id,result:null})}})}]);`; // tslint:disable-line:max-line-length\r\n        return () => {\r\n            if (Timeout.workerTimers !== null) {\r\n                return Timeout.workerTimers;\r\n            }\r\n\r\n            const blob = new Blob([worker], { type: \"application/javascript; charset=utf-8\" });\r\n            const url = URL.createObjectURL(blob);\r\n\r\n            Timeout.workerTimers = Timeout.load(url);\r\n\r\n            // Edge doesn't like the URL to be revoked directly.\r\n            Timeout.workerTimers.setTimeout(() => URL.revokeObjectURL(url), 0);\r\n\r\n            return Timeout.workerTimers as IWorkerTimers;\r\n        };\r\n    }\r\n\r\n    public static timers: () => IWorkerTimers = Timeout.loadWorkerTimers();\r\n\r\n    private static isCallNotification = (message: TWorkerMessage): message is ICallNotification => {\r\n        return (message as ICallNotification).method !== undefined && (message as ICallNotification).method === \"call\";\r\n    }\r\n\r\n    private static isClearResponse = (message: TWorkerMessage): message is IClearResponse => {\r\n        return (message as IClearResponse).error === null && typeof message.id === \"number\";\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { AudioStreamFormatImpl } from \"../../src/sdk/Audio/AudioStreamFormat\";\r\nimport {\r\n    IAudioStreamNode,\r\n    IStreamChunk,\r\n} from \"../common/Exports\";\r\n\r\nexport class ReplayableAudioNode implements IAudioStreamNode {\r\n    private privAudioNode: IAudioStreamNode;\r\n    private privBytesPerSecond: number;\r\n    private privBuffers: BufferEntry[] = [];\r\n    private privReplayOffset: number = 0;\r\n    private privLastShrinkOffset: number = 0;\r\n    private privBufferStartOffset: number = 0;\r\n    private privBufferSerial: number = 0;\r\n    private privBufferedBytes: number = 0;\r\n    private privReplay: boolean = false;\r\n    private privLastChunkAcquiredTime: number = 0;\r\n\r\n    public constructor(audioSource: IAudioStreamNode, bytesPerSecond: number) {\r\n        this.privAudioNode = audioSource;\r\n        this.privBytesPerSecond = bytesPerSecond;\r\n    }\r\n\r\n    public id = (): string => {\r\n        return this.privAudioNode.id();\r\n    }\r\n\r\n    // Reads and returns the next chunk of audio buffer.\r\n    // If replay of existing buffers are needed, read() will first seek and replay\r\n    // existing content, and upoin completion it will read new content from the underlying\r\n    // audio node, saving that content into the replayable buffers.\r\n    public read(): Promise<IStreamChunk<ArrayBuffer>> {\r\n        // if there is a replay request to honor.\r\n        if (!!this.privReplay && this.privBuffers.length !== 0) {\r\n            // Find the start point in the buffers.\r\n            // Offsets are in 100ns increments.\r\n            // So how many bytes do we need to seek to get the right offset?\r\n            const offsetToSeek: number = this.privReplayOffset - this.privBufferStartOffset;\r\n\r\n            let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n            if (0 !== (bytesToSeek % 2)) {\r\n                bytesToSeek++;\r\n            }\r\n\r\n            let i: number = 0;\r\n\r\n            while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n                bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n            }\r\n\r\n            if (i < this.privBuffers.length) {\r\n                const retVal: ArrayBuffer = this.privBuffers[i].chunk.buffer.slice(bytesToSeek);\r\n\r\n                this.privReplayOffset += (retVal.byteLength / this.privBytesPerSecond) * 1e+7;\r\n\r\n                // If we've reached the end of the buffers, stop replaying.\r\n                if (i === this.privBuffers.length - 1) {\r\n                    this.privReplay = false;\r\n                }\r\n\r\n                return Promise.resolve<IStreamChunk<ArrayBuffer>>({\r\n                    buffer: retVal,\r\n                    isEnd: false,\r\n                    timeReceived: this.privBuffers[i].chunk.timeReceived,\r\n                });\r\n            }\r\n        }\r\n\r\n        return this.privAudioNode.read()\r\n            .then((result: IStreamChunk<ArrayBuffer>) => {\r\n                if (result && result.buffer) {\r\n                    this.privBuffers.push(new BufferEntry(result, this.privBufferSerial++, this.privBufferedBytes));\r\n                    this.privBufferedBytes += result.buffer.byteLength;\r\n                }\r\n                return result;\r\n            });\r\n    }\r\n\r\n    public detach(): Promise<void> {\r\n        this.privBuffers = undefined;\r\n        return this.privAudioNode.detach();\r\n    }\r\n\r\n    public replay(): void {\r\n        if (this.privBuffers && 0 !== this.privBuffers.length) {\r\n            this.privReplay = true;\r\n            this.privReplayOffset = this.privLastShrinkOffset;\r\n        }\r\n    }\r\n\r\n    // Shrinks the existing audio buffers to start at the new offset, or at the\r\n    // beginning of the buffer closest to the requested offset.\r\n    // A replay request will start from the last shrink point.\r\n    public shrinkBuffers(offset: number): void {\r\n        if (this.privBuffers === undefined || this.privBuffers.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this.privLastShrinkOffset = offset;\r\n\r\n        // Find the start point in the buffers.\r\n        // Offsets are in 100ns increments.\r\n        // So how many bytes do we need to seek to get the right offset?\r\n        const offsetToSeek: number = offset - this.privBufferStartOffset;\r\n\r\n        let bytesToSeek: number = Math.round(offsetToSeek * this.privBytesPerSecond * 1e-7);\r\n\r\n        let i: number = 0;\r\n\r\n        while (i < this.privBuffers.length && bytesToSeek >= this.privBuffers[i].chunk.buffer.byteLength) {\r\n            bytesToSeek -= this.privBuffers[i++].chunk.buffer.byteLength;\r\n        }\r\n        this.privBufferStartOffset = Math.round(offset - ((bytesToSeek / this.privBytesPerSecond) * 1e+7));\r\n        this.privBuffers = this.privBuffers.slice(i);\r\n    }\r\n\r\n    // Finds the time a buffer of audio was first seen by offset.\r\n    public findTimeAtOffset(offset: number): number {\r\n        if (offset < this.privBufferStartOffset || this.privBuffers === undefined) {\r\n            return 0;\r\n        }\r\n\r\n        for (const value of this.privBuffers) {\r\n            const startOffset: number = (value.byteOffset / this.privBytesPerSecond) * 1e7;\r\n            const endOffset: number = startOffset + ((value.chunk.buffer.byteLength / this.privBytesPerSecond) * 1e7);\r\n\r\n            if (offset >= startOffset && offset <= endOffset) {\r\n                return value.chunk.timeReceived;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}\r\n\r\n// Primary use of this class is to help debugging problems with the replay\r\n// code. If the memory cost of alloc / dealloc gets too much, drop it and just use\r\n// the ArrayBuffer directly.\r\n// tslint:disable-next-line:max-classes-per-file\r\nclass BufferEntry {\r\n    public chunk: IStreamChunk<ArrayBuffer>;\r\n    public serial: number;\r\n    public byteOffset: number;\r\n\r\n    public constructor(chunk: IStreamChunk<ArrayBuffer>, serial: number, byteOffset: number) {\r\n        this.chunk = chunk;\r\n        this.serial = serial;\r\n        this.byteOffset = byteOffset;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { MessageType } from \"./ConnectionMessage\";\r\nimport { ArgumentNullError, InvalidOperationError } from \"./Error\";\r\nimport { createNoDashGuid } from \"./Guid\";\r\n\r\nexport class RawWebsocketMessage {\r\n    private privMessageType: MessageType;\r\n    private privPayload: any = null;\r\n    private privId: string;\r\n\r\n    public constructor(messageType: MessageType, payload: any, id?: string) {\r\n        if (!payload) {\r\n            throw new ArgumentNullError(\"payload\");\r\n        }\r\n\r\n        if (messageType === MessageType.Binary && payload.__proto__.constructor.name !== \"ArrayBuffer\") {\r\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\r\n        }\r\n\r\n        if (messageType === MessageType.Text && !(typeof (payload) === \"string\")) {\r\n            throw new InvalidOperationError(\"Payload must be a string\");\r\n        }\r\n\r\n        this.privMessageType = messageType;\r\n        this.privPayload = payload;\r\n        this.privId = id ? id : createNoDashGuid();\r\n    }\r\n\r\n    public get messageType(): MessageType {\r\n        return this.privMessageType;\r\n    }\r\n\r\n    public get payload(): any {\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get textContent(): string {\r\n        if (this.privMessageType === MessageType.Binary) {\r\n            throw new InvalidOperationError(\"Not supported for binary message\");\r\n        }\r\n\r\n        return this.privPayload as string;\r\n    }\r\n\r\n    public get binaryContent(): ArrayBuffer {\r\n        if (this.privMessageType === MessageType.Text) {\r\n            throw new InvalidOperationError(\"Not supported for text message\");\r\n        }\r\n\r\n        return this.privPayload;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { RecognizerConfig } from \"../common.speech/Exports\";\r\nimport { PropertyCollection, PropertyId } from \"../sdk/Exports\";\r\n\r\nexport class ProxyInfo {\r\n    private privProxyHostName: string;\r\n    private privProxyPort: number;\r\n    private privProxyUserName: string;\r\n    private privProxyPassword: string;\r\n\r\n    private constructor(proxyHostName: string, proxyPort: number, proxyUserName: string, proxyPassword: string) {\r\n        this.privProxyHostName = proxyHostName;\r\n        this.privProxyPort = proxyPort;\r\n        this.privProxyUserName = proxyUserName;\r\n        this.privProxyPassword = proxyPassword;\r\n    }\r\n\r\n    public static fromParameters(parameters: PropertyCollection): ProxyInfo {\r\n        return new ProxyInfo(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyHostName),\r\n            parseInt(parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPort), 10),\r\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyUserName),\r\n            parameters.getProperty(PropertyId.SpeechServiceConnection_ProxyPassword));\r\n    }\r\n\r\n    public static fromRecognizerConfig(config: RecognizerConfig): ProxyInfo {\r\n        return this.fromParameters(config.parameters);\r\n    }\r\n\r\n    public get HostName(): string {\r\n        return this.privProxyHostName;\r\n    }\r\n\r\n    public get Port(): number {\r\n        return this.privProxyPort;\r\n    }\r\n\r\n    public get UserName(): string {\r\n        return this.privProxyUserName;\r\n    }\r\n\r\n    public get Password(): string {\r\n        return this.privProxyPassword;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    Deferred\r\n} from \"../common/Exports\";\r\nimport { IRequestOptions } from \"./Exports\";\r\n\r\nimport bent, { BentResponse } from \"bent\";\r\n\r\nexport enum RestRequestType {\r\n    Get = \"GET\",\r\n    Post = \"POST\",\r\n    Delete = \"DELETE\",\r\n    File = \"file\",\r\n}\r\n\r\nexport interface IRestResponse {\r\n    ok: boolean;\r\n    status: number;\r\n    statusText: string;\r\n    data: string;\r\n    json: any;\r\n    headers: string;\r\n}\r\n\r\n// accept rest operations via request method and return abstracted objects from server response\r\nexport class RestMessageAdapter {\r\n\r\n    private privIgnoreCache: boolean;\r\n    private privHeaders: { [key: string]: string; };\r\n\r\n    public constructor(\r\n        configParams: IRequestOptions\r\n        ) {\r\n\r\n        if (!configParams) {\r\n            throw new ArgumentNullError(\"configParams\");\r\n        }\r\n\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public static extractHeaderValue(headerKey: string, headers: string): string {\r\n        let headerValue: string = \"\";\r\n\r\n        try {\r\n            const arr = headers.trim().split(/[\\r\\n]+/);\r\n            const headerMap: any = {};\r\n            arr.forEach((line: any) => {\r\n                const parts = line.split(\": \");\r\n                const header = parts.shift().toLowerCase();\r\n                const value = parts.join(\": \");\r\n                headerMap[header] = value;\r\n            });\r\n\r\n            headerValue = headerMap[headerKey.toLowerCase()];\r\n        } catch (e) {\r\n            // ignore the error\r\n        }\r\n\r\n        return headerValue;\r\n    }\r\n\r\n    public set options(configParams: IRequestOptions) {\r\n        this.privHeaders = configParams.headers;\r\n        this.privIgnoreCache = configParams.ignoreCache;\r\n    }\r\n\r\n    public setHeaders(key: string, value: string): void {\r\n        this.privHeaders[key] = value;\r\n    }\r\n\r\n    public request(\r\n        method: RestRequestType,\r\n        uri: string,\r\n        queryParams: any = {},\r\n        body: any = null,\r\n        binaryBody: Blob | Buffer = null,\r\n        ): Promise<IRestResponse> {\r\n\r\n        const responseReceivedDeferral = new Deferred<IRestResponse>();\r\n\r\n        const requestCommand = method === RestRequestType.File ? \"POST\" : method;\r\n        const handleRestResponse = (data: BentResponse, j: any = {}): IRestResponse => {\r\n            const d: { statusText?: string, statusMessage?: string } = data;\r\n            return {\r\n                data: JSON.stringify(j),\r\n                headers: JSON.stringify(data.headers),\r\n                json: j,\r\n                ok: data.statusCode >= 200 && data.statusCode < 300,\r\n                status: data.statusCode,\r\n                statusText: j.error ? j.error.message : d.statusText ? d.statusText : d.statusMessage\r\n            };\r\n        };\r\n\r\n        const blobToArrayBuffer = (blob: Blob) => {\r\n            const reader = new FileReader();\r\n            reader.readAsArrayBuffer(blob);\r\n            return new Promise((resolve: (value: unknown) => void) => {\r\n                reader.onloadend = () => {\r\n                resolve(reader.result);\r\n                };\r\n            });\r\n        };\r\n\r\n        const send = (postData: any): void => {\r\n            const sendRequest = bent(uri, requestCommand, this.privHeaders, 200, 201, 202, 204, 400, 401, 402, 403, 404);\r\n            const params = this.queryParams(queryParams) === \"\" ? \"\" : \"?\" + this.queryParams(queryParams);\r\n            sendRequest(params, postData).then( async (data: any) => {\r\n                if (method === RestRequestType.Delete || data.statusCode === 204) {\r\n                    // No JSON from Delete and reset (204) operations\r\n                    responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                } else {\r\n                    try {\r\n                        const j: any = await data.json();\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data, j));\r\n                    } catch {\r\n                        responseReceivedDeferral.resolve(handleRestResponse(data));\r\n                    }\r\n                }\r\n            }).catch((error: string) => {\r\n                responseReceivedDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        if (this.privIgnoreCache) {\r\n            this.privHeaders[\"Cache-Control\"] = \"no-cache\";\r\n        }\r\n\r\n        if (method === RestRequestType.File && binaryBody) {\r\n            const contentType = \"multipart/form-data\";\r\n            this.privHeaders[\"content-type\"] = contentType;\r\n            this.privHeaders[\"Content-Type\"] = contentType;\r\n            if (typeof (Blob) !== \"undefined\" && binaryBody instanceof Blob) {\r\n                blobToArrayBuffer(binaryBody as Blob).then( (res: any) => {\r\n                    send(res);\r\n                }).catch((error: any) => {\r\n                    responseReceivedDeferral.reject(error);\r\n                });\r\n            } else {\r\n                send(binaryBody as Buffer);\r\n            }\r\n        } else {\r\n            if (method === RestRequestType.Post && body) {\r\n                this.privHeaders[\"content-type\"] = \"application/json\";\r\n                this.privHeaders[\"Content-Type\"] = \"application/json\";\r\n            }\r\n            send(body);\r\n        }\r\n        return responseReceivedDeferral.promise;\r\n    }\r\n\r\n    private withQuery(url: string, params: any = {}): any {\r\n        const queryString = this.queryParams(params);\r\n        return queryString ? url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + queryString : url;\r\n    }\r\n\r\n    private queryParams(params: any = {}): any {\r\n        return Object.keys(params)\r\n            .map((k: any) => encodeURIComponent(k) + \"=\" + encodeURIComponent(params[k]))\r\n            .join(\"&\");\r\n    }\r\n}\r\n","import { useState, useRef, useCallback, useEffect } from 'react';\n\nvar PRE_ENTER = 0;\nvar ENTERING = 1;\nvar ENTERED = 2;\nvar PRE_EXIT = 3;\nvar EXITING = 4;\nvar EXITED = 5;\nvar UNMOUNTED = 6;\nvar STATES = ['preEnter', 'entering', 'entered', 'preExit', 'exiting', 'exited', 'unmounted'];\n\nvar startOrEnd = function startOrEnd(unmounted) {\n  return unmounted ? UNMOUNTED : EXITED;\n};\n\nvar updateState = function updateState(state, setState, latestState, timeoutId, onChange) {\n  clearTimeout(timeoutId.current);\n  setState(state);\n  latestState.current = state;\n  onChange && onChange({\n    state: STATES[state]\n  });\n};\n\nvar useTransition = function useTransition(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$enter = _ref.enter,\n      enter = _ref$enter === void 0 ? true : _ref$enter,\n      _ref$exit = _ref.exit,\n      exit = _ref$exit === void 0 ? true : _ref$exit,\n      preEnter = _ref.preEnter,\n      preExit = _ref.preExit,\n      timeout = _ref.timeout,\n      initialEntered = _ref.initialEntered,\n      mountOnEnter = _ref.mountOnEnter,\n      unmountOnExit = _ref.unmountOnExit,\n      onChange = _ref.onChange;\n\n  var _useState = useState(initialEntered ? ENTERED : startOrEnd(mountOnEnter)),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var latestState = useRef(state);\n  var timeoutId = useRef();\n  var enterTimeout, exitTimeout;\n\n  if (typeof timeout === 'object') {\n    enterTimeout = timeout.enter;\n    exitTimeout = timeout.exit;\n  } else {\n    enterTimeout = exitTimeout = timeout;\n  }\n\n  var endTransition = useCallback(function () {\n    var newState;\n\n    switch (latestState.current) {\n      case ENTERING:\n      case PRE_ENTER:\n        newState = ENTERED;\n        break;\n\n      case EXITING:\n      case PRE_EXIT:\n        newState = startOrEnd(unmountOnExit);\n        break;\n    }\n\n    if (newState !== undefined) {\n      updateState(newState, setState, latestState, timeoutId, onChange);\n    }\n  }, [onChange, unmountOnExit]);\n  var toggle = useCallback(function (toEnter) {\n    var transitState = function transitState(newState) {\n      updateState(newState, setState, latestState, timeoutId, onChange);\n\n      switch (newState) {\n        case ENTERING:\n          if (enterTimeout >= 0) timeoutId.current = setTimeout(endTransition, enterTimeout);\n          break;\n\n        case EXITING:\n          if (exitTimeout >= 0) timeoutId.current = setTimeout(endTransition, exitTimeout);\n          break;\n\n        case PRE_ENTER:\n        case PRE_EXIT:\n          timeoutId.current = setTimeout(function () {\n            return transitState(newState + 1);\n          }, 0);\n          break;\n      }\n    };\n\n    var enterStage = latestState.current <= ENTERED;\n    if (typeof toEnter !== 'boolean') toEnter = !enterStage;\n\n    if (toEnter) {\n      if (!enterStage) {\n        transitState(enter ? preEnter ? PRE_ENTER : ENTERING : ENTERED);\n      }\n    } else {\n      if (enterStage) {\n        transitState(exit ? preExit ? PRE_EXIT : EXITING : startOrEnd(unmountOnExit));\n      }\n    }\n  }, [endTransition, onChange, enter, exit, preEnter, preExit, enterTimeout, exitTimeout, unmountOnExit]);\n  useEffect(function () {\n    return function () {\n      return clearTimeout(timeoutId.current);\n    };\n  }, []);\n  return [STATES[state], toggle, endTransition];\n};\n\nexport { useTransition as default, useTransition };\n","import { useTransition } from 'react-transition-state';\nimport { getTransition } from '../utils/utils.js';\nimport { MenuStateMap } from '../utils/constants.js';\n\nvar useMenuState = function useMenuState(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      initialMounted = _ref.initialMounted,\n      unmountOnClose = _ref.unmountOnClose,\n      transition = _ref.transition,\n      transitionTimeout = _ref.transitionTimeout;\n\n  var _useTransition = useTransition({\n    mountOnEnter: !initialMounted,\n    unmountOnExit: unmountOnClose,\n    timeout: transitionTimeout,\n    enter: getTransition(transition, 'open'),\n    exit: getTransition(transition, 'close')\n  }),\n      state = _useTransition[0],\n      toggleMenu = _useTransition[1],\n      endTransition = _useTransition[2];\n\n  return {\n    state: MenuStateMap[state],\n    toggleMenu: toggleMenu,\n    endTransition: endTransition\n  };\n};\n\nexport { useMenuState };\n","import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { memo, useContext, useRef, useEffect, useImperativeHandle, useMemo } from 'react';\nimport { createPortal } from 'react-dom';\nimport { bool, oneOf, oneOfType, node, func, shape } from 'prop-types';\nimport { MenuList } from './MenuList.js';\nimport { withHovering } from '../utils/withHovering.js';\nimport { validateIndex, attachHandlerProps, commonProps, safeCall, isMenuOpen, batchedUpdates } from '../utils/utils.js';\nimport { useMenuStateAndFocus } from '../hooks/useMenuStateAndFocus.js';\nimport { useActiveState } from '../hooks/useActiveState.js';\nimport { useMenuChange } from '../hooks/useMenuChange.js';\nimport { useBEM } from '../hooks/useBEM.js';\nimport { SettingsContext, ItemSettingsContext, MenuListItemContext, Keys, SubmenuActionTypes, HoverIndexActionTypes, menuClass, subMenuClass, menuItemClass, FocusPositions } from '../utils/constants.js';\nimport { useCombinedRef } from '../hooks/useCombinedRef.js';\nimport { useFlatStyles } from '../hooks/useFlatStyles.js';\nimport { menuPropTypes, uncontrolledMenuPropTypes, stylePropTypes, menuDefaultProps } from '../utils/propTypes.js';\n\nvar _excluded = [\"aria-label\", \"className\", \"disabled\", \"label\", \"index\", \"openTrigger\", \"onMenuChange\", \"isHovering\", \"instanceRef\", \"captureFocus\", \"repositionFlag\", \"itemProps\"],\n    _excluded2 = [\"openMenu\", \"toggleMenu\", \"state\"],\n    _excluded3 = [\"isActive\", \"onKeyUp\"],\n    _excluded4 = [\"ref\", \"className\", \"styles\"];\nvar SubMenu = /*#__PURE__*/withHovering( /*#__PURE__*/memo(function SubMenu(_ref) {\n  var ariaLabel = _ref['aria-label'],\n      className = _ref.className,\n      disabled = _ref.disabled,\n      label = _ref.label,\n      index = _ref.index,\n      openTrigger = _ref.openTrigger,\n      onMenuChange = _ref.onMenuChange,\n      isHovering = _ref.isHovering,\n      instanceRef = _ref.instanceRef,\n      _ref$itemProps = _ref.itemProps,\n      itemProps = _ref$itemProps === void 0 ? {} : _ref$itemProps,\n      restProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var isDisabled = !!disabled;\n  validateIndex(index, isDisabled, label);\n\n  var _useContext = useContext(SettingsContext),\n      initialMounted = _useContext.initialMounted,\n      unmountOnClose = _useContext.unmountOnClose,\n      transition = _useContext.transition,\n      transitionTimeout = _useContext.transitionTimeout,\n      rootMenuRef = _useContext.rootMenuRef;\n\n  var _useContext2 = useContext(ItemSettingsContext),\n      submenuOpenDelay = _useContext2.submenuOpenDelay,\n      submenuCloseDelay = _useContext2.submenuCloseDelay;\n\n  var _useContext3 = useContext(MenuListItemContext),\n      parentMenuRef = _useContext3.parentMenuRef,\n      parentOverflow = _useContext3.parentOverflow,\n      isParentOpen = _useContext3.isParentOpen,\n      isSubmenuOpen = _useContext3.isSubmenuOpen,\n      dispatch = _useContext3.dispatch;\n\n  var isPortal = parentOverflow !== 'visible';\n\n  var _useMenuStateAndFocus = useMenuStateAndFocus({\n    initialMounted: initialMounted,\n    unmountOnClose: unmountOnClose,\n    transition: transition,\n    transitionTimeout: transitionTimeout\n  }),\n      _openMenu = _useMenuStateAndFocus.openMenu,\n      toggleMenu = _useMenuStateAndFocus.toggleMenu,\n      state = _useMenuStateAndFocus.state,\n      otherStateProps = _objectWithoutPropertiesLoose(_useMenuStateAndFocus, _excluded2);\n\n  var isOpen = isMenuOpen(state);\n\n  var _useActiveState = useActiveState(isHovering, isDisabled, Keys.RIGHT),\n      isActive = _useActiveState.isActive,\n      onKeyUp = _useActiveState.onKeyUp,\n      activeStateHandlers = _objectWithoutPropertiesLoose(_useActiveState, _excluded3);\n\n  var containerRef = useRef(null);\n  var itemRef = useRef(null);\n  var timeoutId = useRef(0);\n\n  var stopTimer = function stopTimer() {\n    if (timeoutId.current) {\n      clearTimeout(timeoutId.current);\n      timeoutId.current = 0;\n    }\n  };\n\n  var _openMenu2 = function openMenu() {\n    stopTimer();\n    !isDisabled && _openMenu.apply(void 0, arguments);\n  };\n\n  var setHover = function setHover() {\n    return !isHovering && !isDisabled && dispatch({\n      type: HoverIndexActionTypes.SET,\n      index: index\n    });\n  };\n\n  var delayOpen = function delayOpen(delay) {\n    setHover();\n    if (!openTrigger) timeoutId.current = setTimeout(function () {\n      return batchedUpdates(_openMenu2);\n    }, Math.max(delay, 0));\n  };\n\n  var handleMouseMove = function handleMouseMove() {\n    if (timeoutId.current || isOpen || isDisabled) return;\n\n    if (isSubmenuOpen) {\n      timeoutId.current = setTimeout(function () {\n        return delayOpen(submenuOpenDelay - submenuCloseDelay);\n      }, submenuCloseDelay);\n    } else {\n      delayOpen(submenuOpenDelay);\n    }\n  };\n\n  var handleMouseLeave = function handleMouseLeave() {\n    stopTimer();\n    if (!isOpen) dispatch({\n      type: HoverIndexActionTypes.UNSET,\n      index: index\n    });\n  };\n\n  var handleKeyDown = function handleKeyDown(e) {\n    var handled = false;\n\n    switch (e.key) {\n      case Keys.LEFT:\n        if (isOpen) {\n          itemRef.current.focus();\n          toggleMenu(false);\n          handled = true;\n        }\n\n        break;\n\n      case Keys.RIGHT:\n        if (!isOpen) handled = true;\n        break;\n    }\n\n    if (handled) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  };\n\n  var handleKeyUp = function handleKeyUp(e) {\n    if (!isActive) return;\n    onKeyUp(e);\n\n    switch (e.key) {\n      case Keys.ENTER:\n      case Keys.SPACE:\n      case Keys.RIGHT:\n        openTrigger !== 'none' && _openMenu2(FocusPositions.FIRST);\n        break;\n    }\n  };\n\n  useEffect(function () {\n    return function () {\n      return clearTimeout(timeoutId.current);\n    };\n  }, []);\n  useEffect(function () {\n    if (isHovering && isParentOpen) {\n      itemRef.current.focus();\n    } else {\n      toggleMenu(false);\n    }\n  }, [isHovering, isParentOpen, toggleMenu]);\n  useEffect(function () {\n    dispatch({\n      type: isOpen ? SubmenuActionTypes.OPEN : SubmenuActionTypes.CLOSE\n    });\n  }, [dispatch, isOpen]);\n  useMenuChange(onMenuChange, isOpen);\n  useImperativeHandle(instanceRef, function () {\n    return {\n      openMenu: function openMenu() {\n        if (isParentOpen) {\n          setHover();\n\n          _openMenu2.apply(void 0, arguments);\n        }\n      },\n      closeMenu: function closeMenu() {\n        if (isOpen) {\n          itemRef.current.focus();\n          toggleMenu(false);\n        }\n      }\n    };\n  });\n  var modifiers = useMemo(function () {\n    return Object.freeze({\n      open: isOpen,\n      hover: isHovering,\n      active: isActive,\n      disabled: isDisabled,\n      submenu: true\n    });\n  }, [isOpen, isHovering, isActive, isDisabled]);\n\n  var externaItemlRef = itemProps.ref,\n      itemClassName = itemProps.className,\n      itemStyles = itemProps.styles,\n      restItemProps = _objectWithoutPropertiesLoose(itemProps, _excluded4);\n\n  var itemHandlers = attachHandlerProps(_extends({}, activeStateHandlers, {\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    onMouseDown: setHover,\n    onClick: function onClick() {\n      return openTrigger !== 'none' && _openMenu2();\n    },\n    onKeyUp: handleKeyUp\n  }), restItemProps);\n\n  var getMenuList = function getMenuList() {\n    var menuList = /*#__PURE__*/React.createElement(MenuList, _extends({}, restProps, otherStateProps, {\n      state: state,\n      ariaLabel: ariaLabel || (typeof label === 'string' ? label : 'Submenu'),\n      anchorRef: itemRef,\n      containerRef: isPortal ? rootMenuRef : containerRef,\n      parentScrollingRef: isPortal && parentMenuRef,\n      isDisabled: isDisabled\n    }));\n    return isPortal ? /*#__PURE__*/createPortal(menuList, rootMenuRef.current) : menuList;\n  };\n\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: useBEM({\n      block: menuClass,\n      element: subMenuClass,\n      className: className\n    }),\n    role: \"presentation\",\n    ref: containerRef,\n    onKeyDown: handleKeyDown\n  }, /*#__PURE__*/React.createElement(\"div\", _extends({\n    role: \"menuitem\",\n    \"aria-haspopup\": true,\n    \"aria-expanded\": isOpen\n  }, commonProps(isDisabled, isHovering), restItemProps, itemHandlers, {\n    ref: useCombinedRef(externaItemlRef, itemRef),\n    className: useBEM({\n      block: menuClass,\n      element: menuItemClass,\n      modifiers: modifiers,\n      className: itemClassName\n    }),\n    style: useFlatStyles(itemStyles, modifiers)\n  }), useMemo(function () {\n    return safeCall(label, modifiers);\n  }, [label, modifiers])), state && getMenuList());\n}), 'SubMenu');\nprocess.env.NODE_ENV !== \"production\" ? SubMenu.propTypes = /*#__PURE__*/_extends({}, menuPropTypes, uncontrolledMenuPropTypes, {\n  disabled: bool,\n  openTrigger: /*#__PURE__*/oneOf(['none', 'clickOnly']),\n  label: /*#__PURE__*/oneOfType([node, func]),\n  itemProps: /*#__PURE__*/shape( /*#__PURE__*/_extends({}, /*#__PURE__*/stylePropTypes()))\n}) : void 0;\nSubMenu.defaultProps = /*#__PURE__*/_extends({}, menuDefaultProps, {\n  direction: 'right'\n});\n\nexport { SubMenu };\n","import { extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { useState } from 'react';\nimport { useMenuState } from './useMenuState.js';\n\nvar useMenuStateAndFocus = function useMenuStateAndFocus(options) {\n  var menuState = useMenuState(options);\n\n  var _useState = useState(),\n      menuItemFocus = _useState[0],\n      setMenuItemFocus = _useState[1];\n\n  var openMenu = function openMenu(position, alwaysUpdate) {\n    setMenuItemFocus({\n      position: position,\n      alwaysUpdate: alwaysUpdate\n    });\n    menuState.toggleMenu(true);\n  };\n\n  return _extends({}, menuState, {\n    openMenu: openMenu,\n    menuItemFocus: menuItemFocus\n  });\n};\n\nexport { useMenuStateAndFocus };\n","import { useRef, useEffect } from 'react';\nimport { safeCall } from '../utils/utils.js';\n\nvar useMenuChange = function useMenuChange(onMenuChange, isOpen) {\n  var prevOpen = useRef(isOpen);\n  useEffect(function () {\n    if (prevOpen.current !== isOpen) safeCall(onMenuChange, {\n      open: isOpen\n    });\n    prevOpen.current = isOpen;\n  }, [onMenuChange, isOpen]);\n};\n\nexport { useMenuChange };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport class ConnectionOpenResponse {\r\n    private privStatusCode: number;\r\n    private privReason: string;\r\n\r\n    constructor(statusCode: number, reason: string) {\r\n        this.privStatusCode = statusCode;\r\n        this.privReason = reason;\r\n    }\r\n\r\n    public get statusCode(): number {\r\n        return this.privStatusCode;\r\n    }\r\n\r\n    public get reason(): string {\r\n        return this.privReason;\r\n    }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport { HeaderNames } from \"../common.speech/HeaderNames\";\r\nimport {\r\n    ArgumentNullError,\r\n    BackgroundEvent,\r\n    ConnectionClosedEvent,\r\n    ConnectionErrorEvent,\r\n    ConnectionEstablishedEvent,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionMessageReceivedEvent,\r\n    ConnectionMessageSentEvent,\r\n    ConnectionOpenResponse,\r\n    ConnectionStartEvent,\r\n    ConnectionState,\r\n    Deferred,\r\n    Events,\r\n    EventSource,\r\n    IWebsocketMessageFormatter,\r\n    MessageType,\r\n    Queue,\r\n    RawWebsocketMessage,\r\n} from \"../common/Exports\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\n\r\n// Node.JS specific web socket / browser support.\r\nimport ws from \"ws\";\r\nimport { CertCheckAgent } from \"./CertChecks\";\r\n\r\ninterface ISendItem {\r\n    Message: ConnectionMessage;\r\n    RawWebsocketMessage: RawWebsocketMessage;\r\n    sendStatusDeferral: Deferred<void>;\r\n}\r\n\r\nexport class WebsocketMessageAdapter {\r\n    private privConnectionState: ConnectionState;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privWebsocketClient: WebSocket | ws;\r\n\r\n    private privSendMessageQueue: Queue<ISendItem>;\r\n    private privReceivingMessageQueue: Queue<ConnectionMessage>;\r\n    private privConnectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\r\n    private privCertificateValidatedDeferral: Deferred<void>;\r\n    private privDisconnectDeferral: Deferred<void>;\r\n    private privConnectionEvents: EventSource<ConnectionEvent>;\r\n    private privConnectionId: string;\r\n    private privUri: string;\r\n    private proxyInfo: ProxyInfo;\r\n    private privHeaders: { [key: string]: string; };\r\n    private privLastErrorReceived: string;\r\n    private privEnableCompression: boolean;\r\n\r\n    public static forceNpmWebSocket: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        connectionId: string,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        headers: { [key: string]: string; },\r\n        enableCompression: boolean) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.proxyInfo = proxyInfo;\r\n        this.privConnectionEvents = new EventSource<ConnectionEvent>();\r\n        this.privConnectionId = connectionId;\r\n        this.privMessageFormatter = messageFormatter;\r\n        this.privConnectionState = ConnectionState.None;\r\n        this.privUri = uri;\r\n        this.privHeaders = headers;\r\n        this.privEnableCompression = enableCompression;\r\n\r\n        // Add the connection ID to the headers\r\n        this.privHeaders[HeaderNames.ConnectionId] = this.privConnectionId;\r\n\r\n        this.privLastErrorReceived = \"\";\r\n    }\r\n\r\n    public get state(): ConnectionState {\r\n        return this.privConnectionState;\r\n    }\r\n\r\n    public open = (): Promise<ConnectionOpenResponse> => {\r\n        if (this.privConnectionState === ConnectionState.Disconnected) {\r\n            return Promise.reject<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        if (this.privConnectionEstablishDeferral) {\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.privConnectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\r\n        this.privCertificateValidatedDeferral = new Deferred<void>();\r\n\r\n        this.privConnectionState = ConnectionState.Connecting;\r\n\r\n        try {\r\n\r\n            if (typeof WebSocket !== \"undefined\" && !WebsocketMessageAdapter.forceNpmWebSocket) {\r\n                // Browser handles cert checks.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n\r\n                this.privWebsocketClient = new WebSocket(this.privUri);\r\n            } else {\r\n                const options: ws.ClientOptions = { headers: this.privHeaders, perMessageDeflate: this.privEnableCompression };\r\n                // The ocsp library will handle validation for us and fail the connection if needed.\r\n                this.privCertificateValidatedDeferral.resolve();\r\n                const checkAgent: CertCheckAgent = new CertCheckAgent(this.proxyInfo);\r\n\r\n                options.agent = checkAgent.GetAgent();\r\n\r\n                // Workaround for https://github.com/microsoft/cognitive-services-speech-sdk-js/issues/465\r\n                // Which is root caused by https://github.com/TooTallNate/node-agent-base/issues/61\r\n                const uri = new URL(this.privUri);\r\n                let protocol: string = uri.protocol;\r\n\r\n                if (protocol?.toLocaleLowerCase() === \"wss:\") {\r\n                    protocol = \"https:\";\r\n                } else if (protocol?.toLocaleLowerCase() === \"ws:\") {\r\n                    protocol = \"http:\";\r\n                }\r\n                (options.agent as any).protocol = protocol;\r\n                this.privWebsocketClient = new ws(this.privUri, options);\r\n            }\r\n\r\n            this.privWebsocketClient.binaryType = \"arraybuffer\";\r\n            this.privReceivingMessageQueue = new Queue<ConnectionMessage>();\r\n            this.privDisconnectDeferral = new Deferred<void>();\r\n            this.privSendMessageQueue = new Queue<ISendItem>();\r\n            this.processSendQueue().catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        } catch (error) {\r\n            this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(500, error));\r\n            return this.privConnectionEstablishDeferral.promise;\r\n        }\r\n\r\n        this.onEvent(new ConnectionStartEvent(this.privConnectionId, this.privUri));\r\n\r\n        this.privWebsocketClient.onopen = (e: { target: WebSocket | ws }) => {\r\n            this.privCertificateValidatedDeferral.promise.then((): void => {\r\n                this.privConnectionState = ConnectionState.Connected;\r\n                this.onEvent(new ConnectionEstablishedEvent(this.privConnectionId));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(200, \"\"));\r\n            }, (error: string): void => {\r\n                this.privConnectionEstablishDeferral.reject(error);\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onerror = (e: { error: any; message: string; type: string; target: WebSocket | ws }) => {\r\n            this.onEvent(new ConnectionErrorEvent(this.privConnectionId, e.message, e.type));\r\n            this.privLastErrorReceived = e.message;\r\n        };\r\n\r\n        this.privWebsocketClient.onclose = (e: { wasClean: boolean; code: number; reason: string; target: WebSocket | ws }) => {\r\n            if (this.privConnectionState === ConnectionState.Connecting) {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                // this.onEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\r\n                this.privConnectionEstablishDeferral.resolve(new ConnectionOpenResponse(e.code, e.reason + \" \" + this.privLastErrorReceived));\r\n            } else {\r\n                this.privConnectionState = ConnectionState.Disconnected;\r\n                this.privWebsocketClient = null;\r\n                this.onEvent(new ConnectionClosedEvent(this.privConnectionId, e.code, e.reason));\r\n            }\r\n\r\n            this.onClose(e.code, e.reason).catch((reason: string): void => {\r\n                Events.instance.onEvent(new BackgroundEvent(reason));\r\n            });\r\n        };\r\n\r\n        this.privWebsocketClient.onmessage = (e: { data: ws.Data; type: string; target: WebSocket | ws }) => {\r\n            const networkReceivedTime = new Date().toISOString();\r\n            if (this.privConnectionState === ConnectionState.Connected) {\r\n                const deferred = new Deferred<ConnectionMessage>();\r\n                // let id = ++this.idCounter;\r\n                this.privReceivingMessageQueue.enqueueFromPromise(deferred.promise);\r\n                if (e.data instanceof ArrayBuffer) {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage) => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid binary message format. Error: ${error}`);\r\n                        });\r\n                } else {\r\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\r\n                    this.privMessageFormatter\r\n                        .toConnectionMessage(rawMessage)\r\n                        .then((connectionMessage: ConnectionMessage) => {\r\n                            this.onEvent(new ConnectionMessageReceivedEvent(this.privConnectionId, networkReceivedTime, connectionMessage));\r\n                            deferred.resolve(connectionMessage);\r\n                        }, (error: string) => {\r\n                            // TODO: Events for these ?\r\n                            deferred.reject(`Invalid text message format. Error: ${error}`);\r\n                        });\r\n                }\r\n            }\r\n        };\r\n\r\n        return this.privConnectionEstablishDeferral.promise;\r\n    }\r\n\r\n    public send = (message: ConnectionMessage): Promise<void> => {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(`Cannot send on connection that is in ${ConnectionState[this.privConnectionState]} state`);\r\n        }\r\n\r\n        const messageSendStatusDeferral = new Deferred<void>();\r\n        const messageSendDeferral = new Deferred<ISendItem>();\r\n\r\n        this.privSendMessageQueue.enqueueFromPromise(messageSendDeferral.promise);\r\n\r\n        this.privMessageFormatter\r\n            .fromConnectionMessage(message)\r\n            .then((rawMessage: RawWebsocketMessage) => {\r\n                messageSendDeferral.resolve({\r\n                    Message: message,\r\n                    RawWebsocketMessage: rawMessage,\r\n                    sendStatusDeferral: messageSendStatusDeferral,\r\n                });\r\n            }, (error: string) => {\r\n                messageSendDeferral.reject(`Error formatting the message. ${error}`);\r\n            });\r\n\r\n        return messageSendStatusDeferral.promise;\r\n    }\r\n\r\n    public read = (): Promise<ConnectionMessage> => {\r\n        if (this.privConnectionState !== ConnectionState.Connected) {\r\n            return Promise.reject<ConnectionMessage>(`Cannot read on connection that is in ${this.privConnectionState} state`);\r\n        }\r\n\r\n        return this.privReceivingMessageQueue.dequeue();\r\n    }\r\n\r\n    public close = (reason?: string): Promise<void> => {\r\n        if (this.privWebsocketClient) {\r\n            if (this.privConnectionState !== ConnectionState.Disconnected) {\r\n                this.privWebsocketClient.close(1000, reason ? reason : \"Normal closure by client\");\r\n            }\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this.privDisconnectDeferral.promise;\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionEvents;\r\n    }\r\n\r\n    private sendRawMessage = (sendItem: ISendItem): Promise<void> => {\r\n        try {\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            this.onEvent(new ConnectionMessageSentEvent(this.privConnectionId, new Date().toISOString(), sendItem.Message));\r\n\r\n            // add a check for the ws readystate in order to stop the red console error 'WebSocket is already in CLOSING or CLOSED state' appearing\r\n            if (this.isWebsocketOpen) {\r\n                this.privWebsocketClient.send(sendItem.RawWebsocketMessage.payload);\r\n            } else {\r\n                return Promise.reject(\"websocket send error: Websocket not ready \" + this.privConnectionId + \" \" + sendItem.Message.id + \" \" + new Error().stack);\r\n            }\r\n            return Promise.resolve();\r\n\r\n        } catch (e) {\r\n            return Promise.reject(`websocket send error: ${e}`);\r\n        }\r\n    }\r\n\r\n    private async onClose(code: number, reason: string): Promise<void> {\r\n        const closeReason = `Connection closed. ${code}: ${reason}`;\r\n        this.privConnectionState = ConnectionState.Disconnected;\r\n        this.privDisconnectDeferral.resolve();\r\n        await this.privReceivingMessageQueue.drainAndDispose((pendingReceiveItem: ConnectionMessage) => {\r\n            // TODO: Events for these ?\r\n            // Logger.instance.onEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\r\n        }, closeReason);\r\n\r\n        await this.privSendMessageQueue.drainAndDispose((pendingSendItem: ISendItem) => {\r\n            pendingSendItem.sendStatusDeferral.reject(closeReason);\r\n        }, closeReason);\r\n    }\r\n\r\n    private async processSendQueue(): Promise<void> {\r\n        while (true) {\r\n            const itemToSend: Promise<ISendItem> = this.privSendMessageQueue.dequeue();\r\n            const sendItem: ISendItem = await itemToSend;\r\n            // indicates we are draining the queue and it came with no message;\r\n            if (!sendItem) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this.sendRawMessage(sendItem);\r\n                sendItem.sendStatusDeferral.resolve();\r\n            } catch (sendError) {\r\n                sendItem.sendStatusDeferral.reject(sendError);\r\n            }\r\n        }\r\n    }\r\n\r\n    private onEvent = (event: ConnectionEvent): void => {\r\n        this.privConnectionEvents.onEvent(event);\r\n        Events.instance.onEvent(event);\r\n    }\r\n\r\n    private get isWebsocketOpen(): boolean {\r\n        return this.privWebsocketClient && this.privWebsocketClient.readyState === this.privWebsocketClient.OPEN;\r\n    }\r\n\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {\r\n    ArgumentNullError,\r\n    ConnectionEvent,\r\n    ConnectionMessage,\r\n    ConnectionOpenResponse,\r\n    ConnectionState,\r\n    createNoDashGuid,\r\n    EventSource,\r\n    IConnection,\r\n    IStringDictionary,\r\n    IWebsocketMessageFormatter,\r\n} from \"../common/Exports\";\r\nimport { ProxyInfo } from \"./ProxyInfo\";\r\nimport { WebsocketMessageAdapter } from \"./WebsocketMessageAdapter\";\r\n\r\nexport class WebsocketConnection implements IConnection {\r\n\r\n    private privUri: string;\r\n    private privMessageFormatter: IWebsocketMessageFormatter;\r\n    private privConnectionMessageAdapter: WebsocketMessageAdapter;\r\n    private privId: string;\r\n    private privIsDisposed: boolean = false;\r\n\r\n    public constructor(\r\n        uri: string,\r\n        queryParameters: IStringDictionary<string>,\r\n        headers: IStringDictionary<string>,\r\n        messageFormatter: IWebsocketMessageFormatter,\r\n        proxyInfo: ProxyInfo,\r\n        enableCompression: boolean = false,\r\n        connectionId?: string) {\r\n\r\n        if (!uri) {\r\n            throw new ArgumentNullError(\"uri\");\r\n        }\r\n\r\n        if (!messageFormatter) {\r\n            throw new ArgumentNullError(\"messageFormatter\");\r\n        }\r\n\r\n        this.privMessageFormatter = messageFormatter;\r\n\r\n        let queryParams = \"\";\r\n        let i = 0;\r\n\r\n        if (queryParameters) {\r\n            for (const paramName in queryParameters) {\r\n                if (paramName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(queryParameters[paramName]);\r\n                    queryParams += `${paramName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (headers) {\r\n            for (const headerName in headers) {\r\n                if (headerName) {\r\n                    queryParams += ((i === 0) && (uri.indexOf(\"?\") === -1)) ? \"?\" : \"&\";\r\n                    const val = encodeURIComponent(headers[headerName]);\r\n                    queryParams += `${headerName}=${val}`;\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.privUri = uri + queryParams;\r\n        this.privId = connectionId ? connectionId : createNoDashGuid();\r\n\r\n        this.privConnectionMessageAdapter = new WebsocketMessageAdapter(\r\n            this.privUri,\r\n            this.id,\r\n            this.privMessageFormatter,\r\n            proxyInfo,\r\n            headers,\r\n            enableCompression);\r\n    }\r\n\r\n    public async dispose(): Promise<void> {\r\n        this.privIsDisposed = true;\r\n\r\n        if (this.privConnectionMessageAdapter) {\r\n            await this.privConnectionMessageAdapter.close();\r\n        }\r\n    }\r\n\r\n    public isDisposed = (): boolean => {\r\n        return this.privIsDisposed;\r\n    }\r\n\r\n    public get id(): string {\r\n        return this.privId;\r\n    }\r\n\r\n    public state = (): ConnectionState => {\r\n        return this.privConnectionMessageAdapter.state;\r\n    }\r\n\r\n    public open = (): Promise<ConnectionOpenResponse> => {\r\n        return this.privConnectionMessageAdapter.open();\r\n    }\r\n\r\n    public send = (message: ConnectionMessage): Promise<void> => {\r\n        return this.privConnectionMessageAdapter.send(message);\r\n    }\r\n\r\n    public read = (): Promise<ConnectionMessage> => {\r\n        return this.privConnectionMessageAdapter.read();\r\n    }\r\n\r\n    public get events(): EventSource<ConnectionEvent> {\r\n        return this.privConnectionMessageAdapter.events;\r\n    }\r\n}\r\n"],"sourceRoot":""}