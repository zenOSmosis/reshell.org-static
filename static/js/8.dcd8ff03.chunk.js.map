{"version":3,"sources":["core/BaseView/providers/ParadigmProvider.jsx","core/BaseView/PortalWrapper.jsx"],"names":["ParadigmContext","React","createContext","ParadigmProvider","children","Provider","value","PortalWrapperView","portal","UIServicesProvider","AppRegistrationsProvider","AppRuntimesProvider","DesktopProvider","Suspense","fallback","Cover","Center","style","fontWeight","PortalWrapperTransitiionView","initialBackgroundColor","PortalView","pointerEvents","Animation","animationName","animationDuration","backgroundColor"],"mappings":"2NAEaA,EAAkBC,IAAMC,cAAc,IAMpC,SAASC,iBAAT,GAAyC,IAAbC,EAAY,EAAZA,SAEzC,OACE,cAACJ,EAAgBK,SAAjB,CAA0BC,MAAO,GAAjC,SAAsCF,I,wCCA3B,SAASG,kBAAT,GAAwC,IAAXC,EAAU,EAAVA,OAC1C,OACE,cAACL,iBAAD,UACE,cAACM,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAAC,IAAMC,SAAP,CACEC,SAOE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,MAAO,CAAEC,WAAY,QAA7B,iCATN,SAeE,cAACC,6BAAD,CAA8BX,OAAQA,gBAWtD,SAASW,6BAAT,GAGI,IAFFX,EAEC,EAFDA,OAEC,IADDY,8BACC,MADwB,OACxB,EACKC,EAAab,EAEnB,OACE,qCACE,cAACa,EAAD,IACA,cAACN,EAAA,EAAD,CACEE,MAAO,CAELK,cAAe,QAHnB,SAME,cAACC,EAAA,EAAD,CACEC,cAAc,UACdC,kBAAkB,KAClBR,MAAO,CAAES,gBAAiBN","file":"static/js/8.dcd8ff03.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const ParadigmContext = React.createContext({});\n\n// TODO: Add desktop paradigm\n// TODO: Add mobile paradigm (half-quadrant snapping; scroll dock / scroll side-by-side-apps / views able to be split vertically / horizontally, and windows able to be dragged into quadrants / scaling optional)\n// TODO: Link to service which can control / monitor active paradigm (or just use context...)\n\nexport default function ParadigmProvider({ children }) {\n  // TODO: Work out paradigm values; use PhantomCollection for paradigm management\n  return (\n    <ParadigmContext.Provider value={{}}>{children}</ParadigmContext.Provider>\n  );\n}\n","import Animation from \"@components/Animation\";\nimport Center from \"@components/Center\";\nimport Cover from \"@components/Cover\";\nimport ParadigmProvider from \"./providers/ParadigmProvider\";\nimport UIServicesProvider from \"./providers/UIServicesProvider\";\nimport AppRegistrationsProvider from \"./providers/AppRegistrationsProvider\";\nimport AppRuntimesProvider from \"./providers/AppRuntimesProvider\";\nimport DesktopProvider from \"./providers/DesktopProvider\";\nimport React from \"react\";\n\n// TODO: Document and add prop-types\nexport default function PortalWrapperView({ portal }) {\n  return (\n    <ParadigmProvider>\n      <UIServicesProvider>\n        <AppRegistrationsProvider>\n          <AppRuntimesProvider>\n            <DesktopProvider>\n              <React.Suspense\n                fallback={\n                  // NOTE: While Cover works as a FullScreen substitute for\n                  // simple layouts, it doesn't contain all of the view hacks\n                  // the regular FullViewport component has.\n                  //\n                  // However, it seems that the usage of FullViewport is better\n                  // left up to the portal view itself rather than the wrapper.\n                  <Cover>\n                    <Center style={{ fontWeight: \"bold\" }}>\n                      Loading portal...\n                    </Center>\n                  </Cover>\n                }\n              >\n                <PortalWrapperTransitiionView portal={portal} />\n              </React.Suspense>\n            </DesktopProvider>\n          </AppRuntimesProvider>\n        </AppRegistrationsProvider>\n      </UIServicesProvider>\n    </ParadigmProvider>\n  );\n}\n\n// Sub-wrapper for portal view which fades it out\nfunction PortalWrapperTransitiionView({\n  portal,\n  initialBackgroundColor = \"#000\",\n}) {\n  const PortalView = portal;\n\n  return (\n    <>\n      <PortalView />\n      <Cover\n        style={{\n          // Enable UI to be usable below cover\n          pointerEvents: \"none\",\n        }}\n      >\n        <Animation\n          animationName=\"fadeOut\"\n          animationDuration=\"3s\"\n          style={{ backgroundColor: initialBackgroundColor }}\n        />\n      </Cover>\n    </>\n  );\n}\n"],"sourceRoot":""}